5c09e0b80652a025e33d323382c3ddf1
"use strict";

var util = exports;
util.asPromise = require("@protobufjs/aspromise");
util.base64 = require("@protobufjs/base64");
util.EventEmitter = require("@protobufjs/eventemitter");
util.float = require("@protobufjs/float");
util.inquire = require("@protobufjs/inquire");
util.utf8 = require("@protobufjs/utf8");
util.pool = require("@protobufjs/pool");
util.LongBits = require("./longbits");
util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || this;
util.emptyArray = Object.freeze ? Object.freeze([]) : [];
util.emptyObject = Object.freeze ? Object.freeze({}) : {};
util.isInteger = Number.isInteger || function isInteger(value) {
  return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};
util.isString = function isString(value) {
  return typeof value === "string" || value instanceof String;
};
util.isObject = function isObject(value) {
  return value && typeof value === "object";
};
util.isset = util.isSet = function isSet(obj, prop) {
  var value = obj[prop];
  if (value != null && obj.hasOwnProperty(prop)) return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
  return false;
};
util.Buffer = function () {
  try {
    var Buffer = util.inquire("buffer").Buffer;
    return Buffer.prototype.utf8Write ? Buffer : null;
  } catch (e) {
    return null;
  }
}();
util._Buffer_from = null;
util._Buffer_allocUnsafe = null;
util.newBuffer = function newBuffer(sizeOrArray) {
  return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
};
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
util.Long = util.global.dcodeIO && util.global.dcodeIO.Long || util.global.Long || util.inquire("long");
util.key2Re = /^true|false|0|1$/;
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
util.longToHash = function longToHash(value) {
  return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
};
util.longFromHash = function longFromHash(hash, unsigned) {
  var bits = util.LongBits.fromHash(hash);
  if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);
  return bits.toNumber(Boolean(unsigned));
};
function merge(dst, src, ifNotSet) {
  for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];
  return dst;
}
util.merge = merge;
util.lcFirst = function lcFirst(str) {
  return str.charAt(0).toLowerCase() + str.substring(1);
};
function newError(name) {
  function CustomError(message, properties) {
    if (!(this instanceof CustomError)) return new CustomError(message, properties);
    Object.defineProperty(this, "message", {
      get: function get() {
        return message;
      }
    });
    if (Error.captureStackTrace) Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, "stack", {
      value: new Error().stack || ""
    });
    if (properties) merge(this, properties);
  }
  (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
  Object.defineProperty(CustomError.prototype, "name", {
    get: function get() {
      return name;
    }
  });
  CustomError.prototype.toString = function toString() {
    return this.name + ": " + this.message;
  };
  return CustomError;
}
util.newError = newError;
util.ProtocolError = newError("ProtocolError");
util.oneOfGetter = function getOneOf(fieldNames) {
  var fieldMap = {};
  for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;
  return function () {
    for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];
  };
};
util.oneOfSetter = function setOneOf(fieldNames) {
  return function (name) {
    for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];
  };
};
util.toJSONOptions = {
  longs: String,
  enums: String,
  bytes: String,
  json: true
};
util._configure = function () {
  var Buffer = util.Buffer;
  if (!Buffer) {
    util._Buffer_from = util._Buffer_allocUnsafe = null;
    return;
  }
  util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || function Buffer_from(value, encoding) {
    return new Buffer(value, encoding);
  };
  util._Buffer_allocUnsafe = Buffer.allocUnsafe || function Buffer_allocUnsafe(size) {
    return new Buffer(size);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,