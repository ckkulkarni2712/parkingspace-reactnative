319016e1e2328f1797526d920036c169
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Modal = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "onBackdropPress", "contentStyle", "backdropStyle"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var MODAL_ANIM_DURATION = 300;
var MODAL_BACKDROP_OPACITY = 0.4;
var Modal = function (_Component) {
  (0, _inherits2.default)(Modal, _Component);
  var _super = _createSuper(Modal);
  function Modal() {
    var _this;
    (0, _classCallCheck2.default)(this, Modal);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      isVisible: _this.props.isVisible,
      deviceWidth: _reactNative.Dimensions.get("window").width,
      deviceHeight: _reactNative.Dimensions.get("window").height
    };
    _this.animVal = new _reactNative.Animated.Value(0);
    _this._isMounted = false;
    _this.handleDimensionsUpdate = function (dimensionsUpdate) {
      var deviceWidth = dimensionsUpdate.window.width;
      var deviceHeight = dimensionsUpdate.window.height;
      if (deviceWidth !== _this.state.deviceWidth || deviceHeight !== _this.state.deviceHeight) {
        _this.setState({
          deviceWidth: deviceWidth,
          deviceHeight: deviceHeight
        });
      }
    };
    _this.show = function () {
      _this.setState({
        isVisible: true
      });
      _reactNative.Animated.timing(_this.animVal, {
        easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),
        useNativeDriver: false,
        duration: MODAL_ANIM_DURATION,
        toValue: 1
      }).start();
    };
    _this.hide = function () {
      _reactNative.Animated.timing(_this.animVal, {
        easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),
        useNativeDriver: false,
        duration: MODAL_ANIM_DURATION,
        toValue: 0
      }).start(function () {
        if (_this._isMounted) {
          _this.setState({
            isVisible: false
          }, _this.props.onHide);
        }
      });
    };
    return _this;
  }
  (0, _createClass2.default)(Modal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true;
      if (this.state.isVisible) {
        this.show();
      }
      this._deviceEventEmitter = _reactNative.DeviceEventEmitter.addListener("didUpdateDimensions", this.handleDimensionsUpdate);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._deviceEventEmitter.remove();
      this._isMounted = false;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.isVisible && !prevProps.isVisible) {
        this.show();
      } else if (!this.props.isVisible && prevProps.isVisible) {
        this.hide();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        onBackdropPress = _this$props.onBackdropPress,
        contentStyle = _this$props.contentStyle,
        backdropStyle = _this$props.backdropStyle,
        otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var _this$state = this.state,
        deviceHeight = _this$state.deviceHeight,
        deviceWidth = _this$state.deviceWidth,
        isVisible = _this$state.isVisible;
      var backdropAnimatedStyle = {
        opacity: this.animVal.interpolate({
          inputRange: [0, 1],
          outputRange: [0, MODAL_BACKDROP_OPACITY]
        })
      };
      var contentAnimatedStyle = {
        transform: [{
          translateY: this.animVal.interpolate({
            inputRange: [0, 1],
            outputRange: [deviceHeight, 0],
            extrapolate: "clamp"
          })
        }]
      };
      return (0, _jsxRuntime.jsxs)(_reactNative.Modal, Object.assign({
        transparent: true,
        animationType: "none",
        visible: isVisible
      }, otherProps, {
        children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
          onPress: onBackdropPress,
          children: (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
            style: [styles.backdrop, backdropAnimatedStyle, {
              width: deviceWidth,
              height: deviceHeight
            }, backdropStyle]
          })
        }), isVisible && (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
          style: [styles.content, contentAnimatedStyle, contentStyle],
          pointerEvents: "box-none",
          children: children
        })]
      }));
    }
  }]);
  return Modal;
}(_react.Component);
exports.Modal = Modal;
Modal.propTypes = {
  onBackdropPress: _propTypes.default.func,
  onHide: _propTypes.default.func,
  isVisible: _propTypes.default.bool,
  contentStyle: _propTypes.default.any
};
Modal.defaultProps = {
  onBackdropPress: function onBackdropPress() {
    return null;
  },
  onHide: function onHide() {
    return null;
  },
  isVisible: false
};
Modal._deviceEventEmitter = null;
var styles = _reactNative.StyleSheet.create({
  container: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  backdrop: {
    position: "absolute",
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: "black",
    opacity: 0
  },
  content: {
    flex: 1,
    justifyContent: "flex-end"
  }
});
var _default = Modal;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,