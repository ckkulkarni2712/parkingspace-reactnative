3c2a662fd5c5d104c89cbfabccfcdbd7
"use strict";

module.exports = decoder;
var Enum = require("./enum"),
  types = require("./types"),
  util = require("./util");
function missing(field) {
  return "missing required '" + field.name + "'";
}
function decoder(mtype) {
  var gen = util.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function (field) {
    return field.map;
  }).length ? ",k,value" : ""))("while(r.pos<c){")("var t=r.uint32()");
  if (mtype.group) gen("if((t&7)===4)")("break");
  gen("switch(t>>>3){");
  var i = 0;
  for (; i < mtype.fieldsArray.length; ++i) {
    var field = mtype._fieldsArray[i].resolve(),
      type = field.resolvedType instanceof Enum ? "int32" : field.type,
      ref = "m" + util.safeProp(field.name);
    gen("case %i:", field.id);
    if (field.map) {
      gen("if(%s===util.emptyObject)", ref)("%s={}", ref)("var c2 = r.uint32()+r.pos");
      if (types.defaults[field.keyType] !== undefined) gen("k=%j", types.defaults[field.keyType]);else gen("k=null");
      if (types.defaults[type] !== undefined) gen("value=%j", types.defaults[type]);else gen("value=null");
      gen("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break", field.keyType)("case 2:");
      if (types.basic[type] === undefined) gen("value=types[%i].decode(r,r.uint32())", i);else gen("value=r.%s()", type);
      gen("break")("default:")("r.skipType(tag2&7)")("break")("}")("}");
      if (types.long[field.keyType] !== undefined) gen("%s[typeof k===\"object\"?util.longToHash(k):k]=value", ref);else gen("%s[k]=value", ref);
    } else if (field.repeated) {
      gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
      if (types.packed[type] !== undefined) gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else");
      if (types.basic[type] === undefined) gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);else gen("%s.push(r.%s())", ref, type);
    } else if (types.basic[type] === undefined) gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);else gen("%s=r.%s()", ref, type);
    gen("break");
  }
  gen("default:")("r.skipType(t&7)")("break")("}")("}");
  for (i = 0; i < mtype._fieldsArray.length; ++i) {
    var rfield = mtype._fieldsArray[i];
    if (rfield.required) gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
  }
  return gen("return m");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZGVjb2RlciIsIkVudW0iLCJyZXF1aXJlIiwidHlwZXMiLCJ1dGlsIiwibWlzc2luZyIsImZpZWxkIiwibmFtZSIsIm10eXBlIiwiZ2VuIiwiY29kZWdlbiIsImZpZWxkc0FycmF5IiwiZmlsdGVyIiwibWFwIiwibGVuZ3RoIiwiZ3JvdXAiLCJpIiwiX2ZpZWxkc0FycmF5IiwicmVzb2x2ZSIsInR5cGUiLCJyZXNvbHZlZFR5cGUiLCJyZWYiLCJzYWZlUHJvcCIsImlkIiwiZGVmYXVsdHMiLCJrZXlUeXBlIiwidW5kZWZpbmVkIiwiYmFzaWMiLCJsb25nIiwicmVwZWF0ZWQiLCJwYWNrZWQiLCJyZmllbGQiLCJyZXF1aXJlZCJdLCJzb3VyY2VzIjpbImRlY29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZXI7XG5cbnZhciBFbnVtICAgID0gcmVxdWlyZShcIi4vZW51bVwiKSxcbiAgICB0eXBlcyAgID0gcmVxdWlyZShcIi4vdHlwZXNcIiksXG4gICAgdXRpbCAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbmZ1bmN0aW9uIG1pc3NpbmcoZmllbGQpIHtcbiAgICByZXR1cm4gXCJtaXNzaW5nIHJlcXVpcmVkICdcIiArIGZpZWxkLm5hbWUgKyBcIidcIjtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBkZWNvZGVyIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSB0eXBlLlxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZXIobXR5cGUpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xuICAgIHZhciBnZW4gPSB1dGlsLmNvZGVnZW4oW1wiclwiLCBcImxcIl0sIG10eXBlLm5hbWUgKyBcIiRkZWNvZGVcIilcbiAgICAoXCJpZighKHIgaW5zdGFuY2VvZiBSZWFkZXIpKVwiKVxuICAgICAgICAoXCJyPVJlYWRlci5jcmVhdGUocilcIilcbiAgICAoXCJ2YXIgYz1sPT09dW5kZWZpbmVkP3IubGVuOnIucG9zK2wsbT1uZXcgdGhpcy5jdG9yXCIgKyAobXR5cGUuZmllbGRzQXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGZpZWxkKSB7IHJldHVybiBmaWVsZC5tYXA7IH0pLmxlbmd0aCA/IFwiLGssdmFsdWVcIiA6IFwiXCIpKVxuICAgIChcIndoaWxlKHIucG9zPGMpe1wiKVxuICAgICAgICAoXCJ2YXIgdD1yLnVpbnQzMigpXCIpO1xuICAgIGlmIChtdHlwZS5ncm91cCkgZ2VuXG4gICAgICAgIChcImlmKCh0JjcpPT09NClcIilcbiAgICAgICAgICAgIChcImJyZWFrXCIpO1xuICAgIGdlblxuICAgICAgICAoXCJzd2l0Y2godD4+PjMpe1wiKTtcblxuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IC8qIGluaXRpYWxpemVzICovIG10eXBlLmZpZWxkc0FycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBmaWVsZCA9IG10eXBlLl9maWVsZHNBcnJheVtpXS5yZXNvbHZlKCksXG4gICAgICAgICAgICB0eXBlICA9IGZpZWxkLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0gPyBcImludDMyXCIgOiBmaWVsZC50eXBlLFxuICAgICAgICAgICAgcmVmICAgPSBcIm1cIiArIHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSk7IGdlblxuICAgICAgICAgICAgKFwiY2FzZSAlaTpcIiwgZmllbGQuaWQpO1xuXG4gICAgICAgIC8vIE1hcCBmaWVsZHNcbiAgICAgICAgaWYgKGZpZWxkLm1hcCkgeyBnZW5cbiAgICAgICAgICAgICAgICAoXCJpZiglcz09PXV0aWwuZW1wdHlPYmplY3QpXCIsIHJlZilcbiAgICAgICAgICAgICAgICAgICAgKFwiJXM9e31cIiwgcmVmKVxuICAgICAgICAgICAgICAgIChcInZhciBjMiA9IHIudWludDMyKCkrci5wb3NcIik7XG5cbiAgICAgICAgICAgIGlmICh0eXBlcy5kZWZhdWx0c1tmaWVsZC5rZXlUeXBlXSAhPT0gdW5kZWZpbmVkKSBnZW5cbiAgICAgICAgICAgICAgICAoXCJrPSVqXCIsIHR5cGVzLmRlZmF1bHRzW2ZpZWxkLmtleVR5cGVdKTtcbiAgICAgICAgICAgIGVsc2UgZ2VuXG4gICAgICAgICAgICAgICAgKFwiaz1udWxsXCIpO1xuXG4gICAgICAgICAgICBpZiAodHlwZXMuZGVmYXVsdHNbdHlwZV0gIT09IHVuZGVmaW5lZCkgZ2VuXG4gICAgICAgICAgICAgICAgKFwidmFsdWU9JWpcIiwgdHlwZXMuZGVmYXVsdHNbdHlwZV0pO1xuICAgICAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgICAgICAoXCJ2YWx1ZT1udWxsXCIpO1xuXG4gICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAoXCJ3aGlsZShyLnBvczxjMil7XCIpXG4gICAgICAgICAgICAgICAgICAgIChcInZhciB0YWcyPXIudWludDMyKClcIilcbiAgICAgICAgICAgICAgICAgICAgKFwic3dpdGNoKHRhZzI+Pj4zKXtcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIChcImNhc2UgMTogaz1yLiVzKCk7IGJyZWFrXCIsIGZpZWxkLmtleVR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAoXCJjYXNlIDI6XCIpO1xuXG4gICAgICAgICAgICBpZiAodHlwZXMuYmFzaWNbdHlwZV0gPT09IHVuZGVmaW5lZCkgZ2VuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwidmFsdWU9dHlwZXNbJWldLmRlY29kZShyLHIudWludDMyKCkpXCIsIGkpOyAvLyBjYW4ndCBiZSBncm91cHNcbiAgICAgICAgICAgIGVsc2UgZ2VuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwidmFsdWU9ci4lcygpXCIsIHR5cGUpO1xuXG4gICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJicmVha1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKFwiZGVmYXVsdDpcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJyLnNraXBUeXBlKHRhZzImNylcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJicmVha1wiKVxuICAgICAgICAgICAgICAgICAgICAoXCJ9XCIpXG4gICAgICAgICAgICAgICAgKFwifVwiKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVzLmxvbmdbZmllbGQua2V5VHlwZV0gIT09IHVuZGVmaW5lZCkgZ2VuXG4gICAgICAgICAgICAgICAgKFwiJXNbdHlwZW9mIGs9PT1cXFwib2JqZWN0XFxcIj91dGlsLmxvbmdUb0hhc2goayk6a109dmFsdWVcIiwgcmVmKTtcbiAgICAgICAgICAgIGVsc2UgZ2VuXG4gICAgICAgICAgICAgICAgKFwiJXNba109dmFsdWVcIiwgcmVmKTtcblxuICAgICAgICAvLyBSZXBlYXRlZCBmaWVsZHNcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5yZXBlYXRlZCkgeyBnZW5cblxuICAgICAgICAgICAgICAgIChcImlmKCEoJXMmJiVzLmxlbmd0aCkpXCIsIHJlZiwgcmVmKVxuICAgICAgICAgICAgICAgICAgICAoXCIlcz1bXVwiLCByZWYpO1xuXG4gICAgICAgICAgICAvLyBQYWNrYWJsZSAoYWx3YXlzIGNoZWNrIGZvciBmb3J3YXJkIGFuZCBiYWNrd2FyZCBjb21wYXRpYmxpdHkpXG4gICAgICAgICAgICBpZiAodHlwZXMucGFja2VkW3R5cGVdICE9PSB1bmRlZmluZWQpIGdlblxuICAgICAgICAgICAgICAgIChcImlmKCh0JjcpPT09Mil7XCIpXG4gICAgICAgICAgICAgICAgICAgIChcInZhciBjMj1yLnVpbnQzMigpK3IucG9zXCIpXG4gICAgICAgICAgICAgICAgICAgIChcIndoaWxlKHIucG9zPGMyKVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKFwiJXMucHVzaChyLiVzKCkpXCIsIHJlZiwgdHlwZSlcbiAgICAgICAgICAgICAgICAoXCJ9ZWxzZVwiKTtcblxuICAgICAgICAgICAgLy8gTm9uLXBhY2tlZFxuICAgICAgICAgICAgaWYgKHR5cGVzLmJhc2ljW3R5cGVdID09PSB1bmRlZmluZWQpIGdlbihmaWVsZC5yZXNvbHZlZFR5cGUuZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgPyBcIiVzLnB1c2godHlwZXNbJWldLmRlY29kZShyKSlcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiJXMucHVzaCh0eXBlc1slaV0uZGVjb2RlKHIsci51aW50MzIoKSkpXCIsIHJlZiwgaSk7XG4gICAgICAgICAgICBlbHNlIGdlblxuICAgICAgICAgICAgICAgICAgICAoXCIlcy5wdXNoKHIuJXMoKSlcIiwgcmVmLCB0eXBlKTtcblxuICAgICAgICAvLyBOb24tcmVwZWF0ZWRcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlcy5iYXNpY1t0eXBlXSA9PT0gdW5kZWZpbmVkKSBnZW4oZmllbGQucmVzb2x2ZWRUeXBlLmdyb3VwXG4gICAgICAgICAgICAgICAgPyBcIiVzPXR5cGVzWyVpXS5kZWNvZGUocilcIlxuICAgICAgICAgICAgICAgIDogXCIlcz10eXBlc1slaV0uZGVjb2RlKHIsci51aW50MzIoKSlcIiwgcmVmLCBpKTtcbiAgICAgICAgZWxzZSBnZW5cbiAgICAgICAgICAgICAgICAoXCIlcz1yLiVzKClcIiwgcmVmLCB0eXBlKTtcbiAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgKFwiYnJlYWtcIik7XG4gICAgLy8gVW5rbm93biBmaWVsZHNcbiAgICB9IGdlblxuICAgICAgICAgICAgKFwiZGVmYXVsdDpcIilcbiAgICAgICAgICAgICAgICAoXCJyLnNraXBUeXBlKHQmNylcIilcbiAgICAgICAgICAgICAgICAoXCJicmVha1wiKVxuXG4gICAgICAgIChcIn1cIilcbiAgICAoXCJ9XCIpO1xuXG4gICAgLy8gRmllbGQgcHJlc2VuY2VcbiAgICBmb3IgKGkgPSAwOyBpIDwgbXR5cGUuX2ZpZWxkc0FycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciByZmllbGQgPSBtdHlwZS5fZmllbGRzQXJyYXlbaV07XG4gICAgICAgIGlmIChyZmllbGQucmVxdWlyZWQpIGdlblxuICAgIChcImlmKCFtLmhhc093blByb3BlcnR5KCVqKSlcIiwgcmZpZWxkLm5hbWUpXG4gICAgICAgIChcInRocm93IHV0aWwuUHJvdG9jb2xFcnJvciglaix7aW5zdGFuY2U6bX0pXCIsIG1pc3NpbmcocmZpZWxkKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdlblxuICAgIChcInJldHVybiBtXCIpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87QUFFeEIsSUFBSUMsSUFBSSxHQUFNQyxPQUFPLENBQUMsUUFBUSxDQUFDO0VBQzNCQyxLQUFLLEdBQUtELE9BQU8sQ0FBQyxTQUFTLENBQUM7RUFDNUJFLElBQUksR0FBTUYsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUUvQixTQUFTRyxPQUFPLENBQUNDLEtBQUssRUFBRTtFQUNwQixPQUFPLG9CQUFvQixHQUFHQSxLQUFLLENBQUNDLElBQUksR0FBRyxHQUFHO0FBQ2xEO0FBT0EsU0FBU1AsT0FBTyxDQUFDUSxLQUFLLEVBQUU7RUFFcEIsSUFBSUMsR0FBRyxHQUFHTCxJQUFJLENBQUNNLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRUYsS0FBSyxDQUFDRCxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQ3pELDRCQUE0QixDQUFDLENBQ3pCLG9CQUFvQixDQUFDLENBQ3pCLG1EQUFtRCxJQUFJQyxLQUFLLENBQUNHLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDLFVBQVNOLEtBQUssRUFBRTtJQUFFLE9BQU9BLEtBQUssQ0FB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