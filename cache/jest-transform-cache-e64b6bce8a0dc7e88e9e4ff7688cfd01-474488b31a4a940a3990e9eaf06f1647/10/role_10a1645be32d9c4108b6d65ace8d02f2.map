{"version":3,"mappings":"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","names":["matchAccessibleNameIfNeeded","node","name","queryAllByText","queryAllByLabelText","length","matchAccessibleStateIfNeeded","options","matchAccessibilityValueIfNeeded","value","queryAllByRole","instance","queryAllByRoleFn","role","shouldMatchOnlyAccessibilityElements","useBreakingChanges","type","props","accessibilityRole","formatQueryParams","params","String","push","accessibilityStateKeys","forEach","stateKey","undefined","accessiblityValueKeys","valueKey","join","getMultipleError","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByRoleQueries","getByRole","getAllByRole","queryByRole","findByRole","findAllByRole","exports"],"sources":["../../src/queries/role.ts"],"sourcesContent":["import type { AccessibilityState } from 'react-native';\nimport type { ReactTestInstance } from 'react-test-renderer';\nimport {\n  accessibilityStateKeys,\n  accessiblityValueKeys,\n  isAccessibilityElement,\n} from '../helpers/accessiblity';\nimport { findAll } from '../helpers/findAll';\nimport { matchAccessibilityState } from '../helpers/matchers/accessibilityState';\nimport {\n  AccessibilityValueMatcher,\n  matchAccessibilityValue,\n} from '../helpers/matchers/accessibilityValue';\nimport { matchStringProp } from '../helpers/matchers/matchStringProp';\nimport type { TextMatch } from '../matches';\nimport { getQueriesForElement } from '../within';\nimport { getConfig } from '../config';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport { CommonQueryOptions } from './options';\n\ntype ByRoleOptions = CommonQueryOptions &\n  AccessibilityState & {\n    name?: TextMatch;\n    value?: AccessibilityValueMatcher;\n  };\n\nconst matchAccessibleNameIfNeeded = (\n  node: ReactTestInstance,\n  name?: TextMatch\n) => {\n  if (name == null) return true;\n\n  const { queryAllByText, queryAllByLabelText } = getQueriesForElement(node);\n  return (\n    queryAllByText(name).length > 0 || queryAllByLabelText(name).length > 0\n  );\n};\n\nconst matchAccessibleStateIfNeeded = (\n  node: ReactTestInstance,\n  options?: ByRoleOptions\n) => {\n  return options != null ? matchAccessibilityState(node, options) : true;\n};\n\nconst matchAccessibilityValueIfNeeded = (\n  node: ReactTestInstance,\n  value?: AccessibilityValueMatcher\n) => {\n  return value != null ? matchAccessibilityValue(node, value) : true;\n};\n\nconst queryAllByRole = (\n  instance: ReactTestInstance\n): ((role: TextMatch, options?: ByRoleOptions) => Array<ReactTestInstance>) =>\n  function queryAllByRoleFn(role, options) {\n    const shouldMatchOnlyAccessibilityElements = getConfig().useBreakingChanges;\n\n    return findAll(\n      instance,\n      (node) =>\n        // run the cheapest checks first, and early exit to avoid unneeded computations\n        typeof node.type === 'string' &&\n        (!shouldMatchOnlyAccessibilityElements ||\n          isAccessibilityElement(node)) &&\n        matchStringProp(node.props.accessibilityRole, role) &&\n        matchAccessibleStateIfNeeded(node, options) &&\n        matchAccessibilityValueIfNeeded(node, options?.value) &&\n        matchAccessibleNameIfNeeded(node, options?.name),\n      options\n    );\n  };\n\nconst formatQueryParams = (role: TextMatch, options: ByRoleOptions = {}) => {\n  const params = [`role: \"${String(role)}\"`];\n\n  if (options.name) {\n    params.push(`name: \"${String(options.name)}\"`);\n  }\n\n  accessibilityStateKeys.forEach((stateKey) => {\n    if (options[stateKey] !== undefined) {\n      params.push(`${stateKey} state: ${options[stateKey]}`);\n    }\n  });\n\n  accessiblityValueKeys.forEach((valueKey) => {\n    if (options?.value?.[valueKey] !== undefined) {\n      params.push(`${valueKey} value: ${options?.value?.[valueKey]}`);\n    }\n  });\n\n  return params.join(', ');\n};\n\nconst getMultipleError = (role: TextMatch, options?: ByRoleOptions) =>\n  `Found multiple elements with ${formatQueryParams(role, options)}`;\n\nconst getMissingError = (role: TextMatch, options?: ByRoleOptions) =>\n  `Unable to find an element with ${formatQueryParams(role, options)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByRole,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByRoleQueries = {\n  getByRole: GetByQuery<TextMatch, ByRoleOptions>;\n  getAllByRole: GetAllByQuery<TextMatch, ByRoleOptions>;\n  queryByRole: QueryByQuery<TextMatch, ByRoleOptions>;\n  queryAllByRole: QueryAllByQuery<TextMatch, ByRoleOptions>;\n  findByRole: FindByQuery<TextMatch, ByRoleOptions>;\n  findAllByRole: FindAllByQuery<TextMatch, ByRoleOptions>;\n};\n\nexport const bindByRoleQueries = (\n  instance: ReactTestInstance\n): ByRoleQueries => ({\n  getByRole: getBy(instance),\n  getAllByRole: getAllBy(instance),\n  queryByRole: queryBy(instance),\n  queryAllByRole: queryAllBy(instance),\n  findByRole: findBy(instance),\n  findAllByRole: findAllBy(instance),\n});\n"]}