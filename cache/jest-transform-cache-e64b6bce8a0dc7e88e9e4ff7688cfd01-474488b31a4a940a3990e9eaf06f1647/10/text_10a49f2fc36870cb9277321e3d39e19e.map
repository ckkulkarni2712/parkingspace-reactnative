{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAaA,IAAMA,cAAc,GAClBC,SADID,cAAc,CAClBC,QAA2B;EAAA,OAE3B,SAASC,gBAAgB,CAACC,IAAI,EAAgB;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAC1C,IAAMC,oBAAoB,GAAG,qBAAS,GAAE,CAACC,kBAAkB;IAG3D,IAAI,CAACD,oBAAoB,EAAE;MACzB,IAAME,YAAY,GAAG,uCAAoB,EAACN,QAAQ,EAAEO,iBAAI,CAAC,GACrD,2CAAwB,EAACP,QAAQ,EAAEO,iBAAI,CAAC,GACxCP,QAAQ;MAEZ,IAAI,CAACM,YAAY,EAAE;QACjB,OAAO,EAAE;MACX;MAEA,IAAME,OAAO,GAAG,oBAAO,EACrBF,YAAY,EACXG,cAAI;QAAA,OACH,sCAAgB,EAACA,IAAI,EAAEF,iBAAI,CAAC,IAAI,sCAAgB,EAACE,IAAI,EAAEP,IAAI,EAAEC,OAAO,CAAC;MAAA,qBAClEA,OAAO;QAAEO,gBAAgB,EAAE;MAAA,GACjC;MAED,OAAOF,OAAO;IAChB;IAGA,OAAO,oBAAO,EACZR,QAAQ,EACPS,cAAI;MAAA,OACH,sCAAgB,EAACA,IAAI,EAAE,6CAAqB,GAAE,CAACP,IAAI,CAAC,IACpD,sCAAgB,EAACO,IAAI,EAAEP,IAAI,EAAEC,OAAO,CAAC;IAAA,qBAElCA,OAAO;MACVO,gBAAgB,EAAE;IAAA,GAErB;EACH,CAAC;AAAA;AAEH,IAAMC,gBAAgB,GAAIT,SAApBS,gBAAgB,CAAIT,IAAe;EAAA,+CACDU,MAAM,CAACV,IAAI,CAAE;AAAA,CAAC;AAEtD,IAAMW,eAAe,GAAIX,SAAnBW,eAAe,CAAIX,IAAe;EAAA,iDACEU,MAAM,CAACV,IAAI,CAAE;AAAA,CAAC;AAExD,WAAoE,4BAAW,EAC7EH,cAAc,EACdc,eAAe,EACfF,gBAAgB,CACjB;EAJOG,KAAK,QAALA,KAAK;EAAEC,QAAQ,QAARA,QAAQ;EAAEC,OAAO,QAAPA,OAAO;EAAEC,UAAU,QAAVA,UAAU;EAAEC,MAAM,QAANA,MAAM;EAAEC;AAe/C,IAAMC,iBAAiB,GAC5BpB,SADWoB,iBAAiB,CAC5BpB,QAA2B;EAAA,OACR;IACnBqB,SAAS,EAAEP,KAAK,CAACd,QAAQ,CAAC;IAC1BsB,YAAY,EAAEP,QAAQ,CAACf,QAAQ,CAAC;IAChCuB,WAAW,EAAEP,OAAO,CAAChB,QAAQ,CAAC;IAC9BD,cAAc,EAAEkB,UAAU,CAACjB,QAAQ,CAAC;IACpCwB,UAAU,EAAEN,MAAM,CAAClB,QAAQ,CAAC;IAC5ByB,aAAa,EAAEN,SAAS,CAACnB,QAAQ;EACnC,CAAC;AAAA,CAAC;AAAC0B","names":["queryAllByText","instance","queryAllByTextFn","text","options","shouldReturnHostText","useBreakingChanges","baseInstance","Text","results","node","matchDeepestOnly","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByTextQueries","getByText","getAllByText","queryByText","findByText","findAllByText","exports"],"sources":["../../src/queries/text.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { Text } from 'react-native';\nimport { getConfig } from '../config';\nimport {\n  getCompositeParentOfType,\n  isHostElementForType,\n} from '../helpers/component-tree';\nimport { filterNodeByType } from '../helpers/filterNodeByType';\nimport { findAll } from '../helpers/findAll';\nimport { getHostComponentNames } from '../helpers/host-component-names';\nimport { matchTextContent } from '../helpers/matchers/matchTextContent';\nimport { TextMatch, TextMatchOptions } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport type { CommonQueryOptions } from './options';\n\ntype ByTextOptions = CommonQueryOptions & TextMatchOptions;\n\nconst queryAllByText = (\n  instance: ReactTestInstance\n): ((text: TextMatch, options?: ByTextOptions) => Array<ReactTestInstance>) =>\n  function queryAllByTextFn(text, options = {}) {\n    const shouldReturnHostText = getConfig().useBreakingChanges;\n\n    // Legacy version: return composite Text\n    if (!shouldReturnHostText) {\n      const baseInstance = isHostElementForType(instance, Text)\n        ? getCompositeParentOfType(instance, Text)\n        : instance;\n\n      if (!baseInstance) {\n        return [];\n      }\n\n      const results = findAll(\n        baseInstance,\n        (node) =>\n          filterNodeByType(node, Text) && matchTextContent(node, text, options),\n        { ...options, matchDeepestOnly: true }\n      );\n\n      return results;\n    }\n\n    // vNext version: returns host Text\n    return findAll(\n      instance,\n      (node) =>\n        filterNodeByType(node, getHostComponentNames().text) &&\n        matchTextContent(node, text, options),\n      {\n        ...options,\n        matchDeepestOnly: true,\n      }\n    );\n  };\n\nconst getMultipleError = (text: TextMatch) =>\n  `Found multiple elements with text: ${String(text)}`;\n\nconst getMissingError = (text: TextMatch) =>\n  `Unable to find an element with text: ${String(text)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByText,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByTextQueries = {\n  getByText: GetByQuery<TextMatch, ByTextOptions>;\n  getAllByText: GetAllByQuery<TextMatch, ByTextOptions>;\n  queryByText: QueryByQuery<TextMatch, ByTextOptions>;\n  queryAllByText: QueryAllByQuery<TextMatch, ByTextOptions>;\n  findByText: FindByQuery<TextMatch, ByTextOptions>;\n  findAllByText: FindAllByQuery<TextMatch, ByTextOptions>;\n};\n\nexport const bindByTextQueries = (\n  instance: ReactTestInstance\n): ByTextQueries => ({\n  getByText: getBy(instance),\n  getAllByText: getAllBy(instance),\n  queryByText: queryBy(instance),\n  queryAllByText: queryAllBy(instance),\n  findByText: findBy(instance),\n  findAllByText: findAllBy(instance),\n});\n"]}