344b9e4472346192b41ad30e092cfb77
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByTextQueries = void 0;
var _reactNative = require("react-native");
var _config = require("../config");
var _componentTree = require("../helpers/component-tree");
var _filterNodeByType = require("../helpers/filterNodeByType");
var _findAll = require("../helpers/findAll");
var _hostComponentNames = require("../helpers/host-component-names");
var _matchTextContent = require("../helpers/matchers/matchTextContent");
var _makeQueries = require("./makeQueries");
var queryAllByText = function queryAllByText(instance) {
  return function queryAllByTextFn(text) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var shouldReturnHostText = (0, _config.getConfig)().useBreakingChanges;
    if (!shouldReturnHostText) {
      var baseInstance = (0, _componentTree.isHostElementForType)(instance, _reactNative.Text) ? (0, _componentTree.getCompositeParentOfType)(instance, _reactNative.Text) : instance;
      if (!baseInstance) {
        return [];
      }
      var results = (0, _findAll.findAll)(baseInstance, function (node) {
        return (0, _filterNodeByType.filterNodeByType)(node, _reactNative.Text) && (0, _matchTextContent.matchTextContent)(node, text, options);
      }, Object.assign({}, options, {
        matchDeepestOnly: true
      }));
      return results;
    }
    return (0, _findAll.findAll)(instance, function (node) {
      return (0, _filterNodeByType.filterNodeByType)(node, (0, _hostComponentNames.getHostComponentNames)().text) && (0, _matchTextContent.matchTextContent)(node, text, options);
    }, Object.assign({}, options, {
      matchDeepestOnly: true
    }));
  };
};
var getMultipleError = function getMultipleError(text) {
  return "Found multiple elements with text: " + String(text);
};
var getMissingError = function getMissingError(text) {
  return "Unable to find an element with text: " + String(text);
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByText, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByTextQueries = function bindByTextQueries(instance) {
  return {
    getByText: getBy(instance),
    getAllByText: getAllBy(instance),
    queryByText: queryBy(instance),
    queryAllByText: queryAllBy(instance),
    findByText: findBy(instance),
    findAllByText: findAllBy(instance)
  };
};
exports.bindByTextQueries = bindByTextQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWFBLElBQU1BLGNBQWMsR0FDbEJDLFNBRElELGNBQWMsQ0FDbEJDLFFBQTJCO0VBQUEsT0FFM0IsU0FBU0MsZ0JBQWdCLENBQUNDLElBQUksRUFBZ0I7SUFBQSxJQUFkQyxPQUFPLHVFQUFHLENBQUMsQ0FBQztJQUMxQyxJQUFNQyxvQkFBb0IsR0FBRyxxQkFBUyxHQUFFLENBQUNDLGtCQUFrQjtJQUczRCxJQUFJLENBQUNELG9CQUFvQixFQUFFO01BQ3pCLElBQU1FLFlBQVksR0FBRyx1Q0FBb0IsRUFBQ04sUUFBUSxFQUFFTyxpQkFBSSxDQUFDLEdBQ3JELDJDQUF3QixFQUFDUCxRQUFRLEVBQUVPLGlCQUFJLENBQUMsR0FDeENQLFFBQVE7TUFFWixJQUFJLENBQUNNLFlBQVksRUFBRTtRQUNqQixPQUFPLEVBQUU7TUFDWDtNQUVBLElBQU1FLE9BQU8sR0FBRyxvQkFBTyxFQUNyQkYsWUFBWSxFQUNYRyxjQUFJO1FBQUEsT0FDSCxzQ0FBZ0IsRUFBQ0EsSUFBSSxFQUFFRixpQkFBSSxDQUFDLElBQUksc0NBQWdCLEVBQUNFLElBQUksRUFBRVAsSUFBSSxFQUFFQyxPQUFPLENBQUM7TUFBQSxxQkFDbEVBLE9BQU87UUFBRU8sZ0JBQWdCLEVBQUU7TUFBQSxHQUNqQztNQUVELE9BQU9GLE9BQU87SUFDaEI7SUFHQSxPQUFPLG9CQUFPLEVBQ1pSLFFBQVEsRUFDUFMsY0FBSTtNQUFBLE9BQ0gsc0NBQWdCLEVBQUNBLElBQUksRUFBRSw2Q0FBcUIsR0FBRSxDQUFDUCxJQUFJLENBQUMsSUFDcEQsc0NBQWdCLEVBQUNPLElBQUksRUFBRVAsSUFBSSxFQUFFQyxPQUFPLENBQUM7SUFBQSxxQkFFbENBLE9BQU87TUFDVk8sZ0JBQWdCLEVBQUU7SUFBQSxHQUVyQjtFQUNILENBQUM7QUFBQTtBQUVILElBQU1DLGdCQUFnQixHQUFJVCxTQUFwQlMsZ0JBQWdCLENBQUlULElBQWU7RUFBQSwrQ0FDRFUsTUFBTSxDQUFDVixJQUFJLENBQUU7QUFBQSxDQUFDO0FBRXRELElBQU1XLGVBQWUsR0FBSVgsU0FBbkJXLGVBQWUsQ0FBSVgsSUFBZTtFQUFBLGlEQUNFVSxNQUFNLENBQUNWLElBQUksQ0FBRTtBQUFBLENBQUM7QUFFeEQsV0FBb0UsNEJBQVcsRUFDN0VILGNBQWMsRUFDZGMsZUFBZSxFQUNmRixnQkFBZ0IsQ0FDakI7RUFKT0csS0FBSyxRQUFMQSxLQUFLO0VBQUVDLFFBQVEsUUFBUkEsUUFBUTtFQUFFQyxPQUFPLFFBQVBBLE9BQU87RUFBRUMsVUFBVSxRQUFWQSxVQUFVO0VBQUVDLE1BQU0sUUFBTkEsTUFBTTtFQUFFQztBQWUvQyxJQUFNQyxpQkFBaUIsR0FDNUJwQixTQURXb0IsaUJBQWlCLENBQzVCcEIsUUFBMkI7RUFBQSxPQUNSO0lBQ25CcUIsU0FBUyxFQUFFUCxLQUFLLENBQUNkLFFBQVEsQ0FBQztJQUMxQnNCLFlBQVksRUFBRVAsUUFBUSxDQUFDZixRQUFRLENBQUM7SUFDaEN1QixXQUFXLEVBQUVQLE9BQU8sQ0FBQ2hCLFFBQVEsQ0FBQztJQUM5QkQsY0FBYyxFQUFFa0IsVUFBVSxDQUFDakIsUUFBUSxDQUFDO0lBQ3BDd0IsVUFBVSxFQUFFTixNQUFNLENBQUNsQixRQUFRLENBQUM7SUFDNUJ5QixhQUFhLEVBQUVOLFNBQVMsQ0FBQ25CLFFBQVE7RUFDbkMsQ0FBQztBQUFBLENBQUM7QUFBQzBCIiwibmFtZXMiOlsicXVlcnlBbGxCeVRleHQiLCJpbnN0YW5jZSIsInF1ZXJ5QWxsQnlUZXh0Rm4iLCJ0ZXh0Iiwib3B0aW9ucyIsInNob3VsZFJldHVybkhvc3RUZXh0IiwidXNlQnJlYWtpbmdDaGFuZ2VzIiwiYmFzZUluc3RhbmNlIiwiVGV4dCIsInJlc3VsdHMiLCJub2RlIiwibWF0Y2hEZWVwZXN0T25seSIsImdldE11bHRpcGxlRXJyb3IiLCJTdHJpbmciLCJnZXRNaXNzaW5nRXJyb3IiLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlCeSIsInF1ZXJ5QWxsQnkiLCJmaW5kQnkiLCJmaW5kQWxsQnkiLCJiaW5kQnlUZXh0UXVlcmllcyIsImdldEJ5VGV4dCIsImdldEFsbEJ5VGV4dCIsInF1ZXJ5QnlUZXh0IiwiZmluZEJ5VGV4dCIsImZpbmRBbGxCeVRleHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXJpZXMvdGV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQge1xuICBnZXRDb21wb3NpdGVQYXJlbnRPZlR5cGUsXG4gIGlzSG9zdEVsZW1lbnRGb3JUeXBlLFxufSBmcm9tICcuLi9oZWxwZXJzL2NvbXBvbmVudC10cmVlJztcbmltcG9ydCB7IGZpbHRlck5vZGVCeVR5cGUgfSBmcm9tICcuLi9oZWxwZXJzL2ZpbHRlck5vZGVCeVR5cGUnO1xuaW1wb3J0IHsgZmluZEFsbCB9IGZyb20gJy4uL2hlbHBlcnMvZmluZEFsbCc7XG5pbXBvcnQgeyBnZXRIb3N0Q29tcG9uZW50TmFtZXMgfSBmcm9tICcuLi9oZWxwZXJzL2hvc3QtY29tcG9uZW50LW5hbWVzJztcbmltcG9ydCB7IG1hdGNoVGV4dENvbnRlbnQgfSBmcm9tICcuLi9oZWxwZXJzL21hdGNoZXJzL21hdGNoVGV4dENvbnRlbnQnO1xuaW1wb3J0IHsgVGV4dE1hdGNoLCBUZXh0TWF0Y2hPcHRpb25zIH0gZnJvbSAnLi4vbWF0Y2hlcyc7XG5pbXBvcnQgeyBtYWtlUXVlcmllcyB9IGZyb20gJy4vbWFrZVF1ZXJpZXMnO1xuaW1wb3J0IHR5cGUge1xuICBGaW5kQWxsQnlRdWVyeSxcbiAgRmluZEJ5UXVlcnksXG4gIEdldEFsbEJ5UXVlcnksXG4gIEdldEJ5UXVlcnksXG4gIFF1ZXJ5QWxsQnlRdWVyeSxcbiAgUXVlcnlCeVF1ZXJ5LFxufSBmcm9tICcuL21ha2VRdWVyaWVzJztcbmltcG9ydCB0eXBlIHsgQ29tbW9uUXVlcnlPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcblxudHlwZSBCeVRleHRPcHRpb25zID0gQ29tbW9uUXVlcnlPcHRpb25zICYgVGV4dE1hdGNoT3B0aW9ucztcblxuY29uc3QgcXVlcnlBbGxCeVRleHQgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZVxuKTogKCh0ZXh0OiBUZXh0TWF0Y2gsIG9wdGlvbnM/OiBCeVRleHRPcHRpb25zKSA9PiBBcnJheTxSZWFjdFRlc3RJbnN0YW5jZT4pID0+XG4gIGZ1bmN0aW9uIHF1ZXJ5QWxsQnlUZXh0Rm4odGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgc2hvdWxkUmV0dXJuSG9zdFRleHQgPSBnZXRDb25maWcoKS51c2VCcmVha2luZ0NoYW5nZXM7XG5cbiAgICAvLyBMZWdhY3kgdmVyc2lvbjogcmV0dXJuIGNvbXBvc2l0ZSBUZXh0XG4gICAgaWYgKCFzaG91bGRSZXR1cm5Ib3N0VGV4dCkge1xuICAgICAgY29uc3QgYmFzZUluc3RhbmNlID0gaXNIb3N0RWxlbWVudEZvclR5cGUoaW5zdGFuY2UsIFRleHQpXG4gICAgICAgID8gZ2V0Q29tcG9zaXRlUGFyZW50T2ZUeXBlKGluc3RhbmNlLCBUZXh0KVxuICAgICAgICA6IGluc3RhbmNlO1xuXG4gICAgICBpZiAoIWJhc2VJbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBmaW5kQWxsKFxuICAgICAgICBiYXNlSW5zdGFuY2UsXG4gICAgICAgIChub2RlKSA9PlxuICAgICAgICAgIGZpbHRlck5vZGVCeVR5cGUobm9kZSwgVGV4dCkgJiYgbWF0Y2hUZXh0Q29udGVudChub2RlLCB0ZXh0LCBvcHRpb25zKSxcbiAgICAgICAgeyAuLi5vcHRpb25zLCBtYXRjaERlZXBlc3RPbmx5OiB0cnVlIH1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cblxuICAgIC8vIHZOZXh0IHZlcnNpb246IHJldHVybnMgaG9zdCBUZXh0XG4gICAgcmV0dXJuIGZpbmRBbGwoXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIChub2RlKSA9PlxuICAgICAgICBmaWx0ZXJOb2RlQnlUeXBlKG5vZGUsIGdldEhvc3RDb21wb25lbnROYW1lcygpLnRleHQpICYmXG4gICAgICAgIG1hdGNoVGV4dENvbnRlbnQobm9kZSwgdGV4dCwgb3B0aW9ucyksXG4gICAgICB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIG1hdGNoRGVlcGVzdE9ubHk6IHRydWUsXG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9ICh0ZXh0OiBUZXh0TWF0Y2gpID0+XG4gIGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRleHQ6ICR7U3RyaW5nKHRleHQpfWA7XG5cbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9ICh0ZXh0OiBUZXh0TWF0Y2gpID0+XG4gIGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGV4dDogJHtTdHJpbmcodGV4dCl9YDtcblxuY29uc3QgeyBnZXRCeSwgZ2V0QWxsQnksIHF1ZXJ5QnksIHF1ZXJ5QWxsQnksIGZpbmRCeSwgZmluZEFsbEJ5IH0gPSBtYWtlUXVlcmllcyhcbiAgcXVlcnlBbGxCeVRleHQsXG4gIGdldE1pc3NpbmdFcnJvcixcbiAgZ2V0TXVsdGlwbGVFcnJvclxuKTtcblxuZXhwb3J0IHR5cGUgQnlUZXh0UXVlcmllcyA9IHtcbiAgZ2V0QnlUZXh0OiBHZXRCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXh0T3B0aW9ucz47XG4gIGdldEFsbEJ5VGV4dDogR2V0QWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGV4dE9wdGlvbnM+O1xuICBxdWVyeUJ5VGV4dDogUXVlcnlCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXh0T3B0aW9ucz47XG4gIHF1ZXJ5QWxsQnlUZXh0OiBRdWVyeUFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRleHRPcHRpb25zPjtcbiAgZmluZEJ5VGV4dDogRmluZEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRleHRPcHRpb25zPjtcbiAgZmluZEFsbEJ5VGV4dDogRmluZEFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRleHRPcHRpb25zPjtcbn07XG5cbmV4cG9ydCBjb25zdCBiaW5kQnlUZXh0UXVlcmllcyA9IChcbiAgaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlXG4pOiBCeVRleHRRdWVyaWVzID0+ICh7XG4gIGdldEJ5VGV4dDogZ2V0QnkoaW5zdGFuY2UpLFxuICBnZXRBbGxCeVRleHQ6IGdldEFsbEJ5KGluc3RhbmNlKSxcbiAgcXVlcnlCeVRleHQ6IHF1ZXJ5QnkoaW5zdGFuY2UpLFxuICBxdWVyeUFsbEJ5VGV4dDogcXVlcnlBbGxCeShpbnN0YW5jZSksXG4gIGZpbmRCeVRleHQ6IGZpbmRCeShpbnN0YW5jZSksXG4gIGZpbmRBbGxCeVRleHQ6IGZpbmRBbGxCeShpbnN0YW5jZSksXG59KTtcbiJdfQ==