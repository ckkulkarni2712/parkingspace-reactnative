7a2f564a17453573b53087a1784fa3ea
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _act = _interopRequireDefault(require("./act"));
var _componentTree = require("./helpers/component-tree");
var _filterNodeByType = require("./helpers/filterNodeByType");
var _hostComponentNames = require("./helpers/host-component-names");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var isTextInput = function isTextInput(element) {
  if (!element) {
    return false;
  }
  return (0, _filterNodeByType.filterNodeByType)(element, _reactNative.TextInput) || (0, _filterNodeByType.filterNodeByType)(element, (0, _hostComponentNames.getHostComponentNames)().textInput);
};
var isTouchResponder = function isTouchResponder(element) {
  if (!(0, _componentTree.isHostElement)(element)) return false;
  return !!(element != null && element.props.onStartShouldSetResponder) || isTextInput(element);
};
var isPointerEventEnabled = function isPointerEventEnabled(element, isParent) {
  var parentCondition = isParent ? (element == null ? void 0 : element.props.pointerEvents) === 'box-only' : (element == null ? void 0 : element.props.pointerEvents) === 'box-none';
  if ((element == null ? void 0 : element.props.pointerEvents) === 'none' || parentCondition) {
    return false;
  }
  if (!(element != null && element.parent)) return true;
  return isPointerEventEnabled(element.parent, true);
};
var isTouchEvent = function isTouchEvent(eventName) {
  return eventName === 'press';
};
var isEventEnabled = function isEventEnabled(element, touchResponder, eventName) {
  if (isTextInput(element)) return (element == null ? void 0 : element.props.editable) !== false;
  if (!isPointerEventEnabled(element) && isTouchEvent(eventName)) return false;
  var touchStart = touchResponder == null ? void 0 : touchResponder.props.onStartShouldSetResponder == null ? void 0 : touchResponder.props.onStartShouldSetResponder();
  var touchMove = touchResponder == null ? void 0 : touchResponder.props.onMoveShouldSetResponder == null ? void 0 : touchResponder.props.onMoveShouldSetResponder();
  if (touchStart || touchMove) return true;
  return touchStart === undefined && touchMove === undefined;
};
var findEventHandler = function findEventHandler(element, eventName, callsite, nearestTouchResponder) {
  var touchResponder = isTouchResponder(element) ? element : nearestTouchResponder;
  var handler = getEventHandler(element, eventName);
  if (handler && isEventEnabled(element, touchResponder, eventName)) return handler;
  if (element.parent === null || element.parent.parent === null) {
    return null;
  }
  return findEventHandler(element.parent, eventName, callsite, touchResponder);
};
var getEventHandler = function getEventHandler(element, eventName) {
  var eventHandlerName = toEventHandlerName(eventName);
  if (typeof element.props[eventHandlerName] === 'function') {
    return element.props[eventHandlerName];
  }
  if (typeof element.props[eventName] === 'function') {
    return element.props[eventName];
  }
  return undefined;
};
var invokeEvent = function invokeEvent(element, eventName, callsite) {
  for (var _len = arguments.length, data = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    data[_key - 3] = arguments[_key];
  }
  var handler = findEventHandler(element, eventName, callsite);
  if (!handler) {
    return;
  }
  var returnValue;
  (0, _act.default)(function () {
    returnValue = handler.apply(void 0, data);
  });
  return returnValue;
};
var toEventHandlerName = function toEventHandlerName(eventName) {
  return "on" + eventName.charAt(0).toUpperCase() + eventName.slice(1);
};
var pressHandler = function pressHandler(element) {
  for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    data[_key2 - 1] = arguments[_key2];
  }
  return invokeEvent.apply(void 0, [element, 'press', pressHandler].concat(data));
};
var changeTextHandler = function changeTextHandler(element) {
  for (var _len3 = arguments.length, data = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    data[_key3 - 1] = arguments[_key3];
  }
  return invokeEvent.apply(void 0, [element, 'changeText', changeTextHandler].concat(data));
};
var scrollHandler = function scrollHandler(element) {
  for (var _len4 = arguments.length, data = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    data[_key4 - 1] = arguments[_key4];
  }
  return invokeEvent.apply(void 0, [element, 'scroll', scrollHandler].concat(data));
};
var fireEvent = function fireEvent(element, eventName) {
  for (var _len5 = arguments.length, data = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
    data[_key5 - 2] = arguments[_key5];
  }
  return invokeEvent.apply(void 0, [element, eventName, fireEvent].concat(data));
};
fireEvent.press = pressHandler;
fireEvent.changeText = changeTextHandler;
fireEvent.scroll = scrollHandler;
var _default = fireEvent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,