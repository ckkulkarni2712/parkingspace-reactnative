{"version":3,"mappings":"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","names":["default","isTextInput","element","TextInput","textInput","isTouchResponder","props","onStartShouldSetResponder","isPointerEventEnabled","isParent","parentCondition","pointerEvents","parent","isTouchEvent","eventName","isEventEnabled","touchResponder","editable","touchStart","touchMove","onMoveShouldSetResponder","undefined","findEventHandler","callsite","nearestTouchResponder","handler","getEventHandler","eventHandlerName","toEventHandlerName","invokeEvent","data","returnValue","charAt","toUpperCase","slice","pressHandler","changeTextHandler","scrollHandler","fireEvent","press","changeText","scroll","exports"],"sources":["../src/fireEvent.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport { TextInput } from 'react-native';\nimport act from './act';\nimport { isHostElement } from './helpers/component-tree';\nimport { filterNodeByType } from './helpers/filterNodeByType';\nimport { getHostComponentNames } from './helpers/host-component-names';\n\ntype EventHandler = (...args: any) => unknown;\n\nconst isTextInput = (element?: ReactTestInstance) => {\n  if (!element) {\n    return false;\n  }\n\n  // We have to test if the element type is either the TextInput component\n  // (which would if it is a composite component) or the string\n  // TextInput (which would be true if it is a host component)\n  // All queries return host components but since fireEvent bubbles up\n  // it would trigger the parent prop without the composite component check\n  return (\n    filterNodeByType(element, TextInput) ||\n    filterNodeByType(element, getHostComponentNames().textInput)\n  );\n};\n\nconst isTouchResponder = (element?: ReactTestInstance) => {\n  if (!isHostElement(element)) return false;\n\n  return !!element?.props.onStartShouldSetResponder || isTextInput(element);\n};\n\nconst isPointerEventEnabled = (\n  element?: ReactTestInstance,\n  isParent?: boolean\n): boolean => {\n  const parentCondition = isParent\n    ? element?.props.pointerEvents === 'box-only'\n    : element?.props.pointerEvents === 'box-none';\n\n  if (element?.props.pointerEvents === 'none' || parentCondition) {\n    return false;\n  }\n\n  if (!element?.parent) return true;\n\n  return isPointerEventEnabled(element.parent, true);\n};\n\nconst isTouchEvent = (eventName?: string) => {\n  return eventName === 'press';\n};\n\nconst isEventEnabled = (\n  element?: ReactTestInstance,\n  touchResponder?: ReactTestInstance,\n  eventName?: string\n) => {\n  if (isTextInput(element)) return element?.props.editable !== false;\n  if (!isPointerEventEnabled(element) && isTouchEvent(eventName)) return false;\n\n  const touchStart = touchResponder?.props.onStartShouldSetResponder?.();\n  const touchMove = touchResponder?.props.onMoveShouldSetResponder?.();\n\n  if (touchStart || touchMove) return true;\n\n  return touchStart === undefined && touchMove === undefined;\n};\n\nconst findEventHandler = (\n  element: ReactTestInstance,\n  eventName: string,\n  callsite?: any,\n  nearestTouchResponder?: ReactTestInstance\n): EventHandler | null => {\n  const touchResponder = isTouchResponder(element)\n    ? element\n    : nearestTouchResponder;\n\n  const handler = getEventHandler(element, eventName);\n  if (handler && isEventEnabled(element, touchResponder, eventName))\n    return handler;\n\n  if (element.parent === null || element.parent.parent === null) {\n    return null;\n  }\n\n  return findEventHandler(element.parent, eventName, callsite, touchResponder);\n};\n\nconst getEventHandler = (\n  element: ReactTestInstance,\n  eventName: string\n): EventHandler | undefined => {\n  const eventHandlerName = toEventHandlerName(eventName);\n  if (typeof element.props[eventHandlerName] === 'function') {\n    return element.props[eventHandlerName];\n  }\n\n  if (typeof element.props[eventName] === 'function') {\n    return element.props[eventName];\n  }\n\n  return undefined;\n};\n\nconst invokeEvent = (\n  element: ReactTestInstance,\n  eventName: string,\n  callsite?: any,\n  ...data: Array<any>\n) => {\n  const handler = findEventHandler(element, eventName, callsite);\n\n  if (!handler) {\n    return;\n  }\n\n  let returnValue;\n\n  act(() => {\n    returnValue = handler(...data);\n  });\n\n  return returnValue;\n};\n\nconst toEventHandlerName = (eventName: string) =>\n  `on${eventName.charAt(0).toUpperCase()}${eventName.slice(1)}`;\n\nconst pressHandler = (element: ReactTestInstance, ...data: Array<any>): void =>\n  invokeEvent(element, 'press', pressHandler, ...data);\nconst changeTextHandler = (\n  element: ReactTestInstance,\n  ...data: Array<any>\n): void => invokeEvent(element, 'changeText', changeTextHandler, ...data);\nconst scrollHandler = (element: ReactTestInstance, ...data: Array<any>): void =>\n  invokeEvent(element, 'scroll', scrollHandler, ...data);\n\nconst fireEvent = (\n  element: ReactTestInstance,\n  eventName: string,\n  ...data: Array<any>\n): void => invokeEvent(element, eventName, fireEvent, ...data);\n\nfireEvent.press = pressHandler;\nfireEvent.changeText = changeTextHandler;\nfireEvent.scroll = scrollHandler;\n\nexport default fireEvent;\n"]}