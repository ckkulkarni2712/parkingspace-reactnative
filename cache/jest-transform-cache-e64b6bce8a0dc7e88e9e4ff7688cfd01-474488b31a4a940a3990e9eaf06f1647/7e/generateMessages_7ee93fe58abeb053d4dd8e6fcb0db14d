3f9eba0a83e94e38e755ed382a078979
"use strict";

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __values = this && this.__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var Parser_1 = __importDefault(require("../Parser"));
var TokenMatcher_1 = __importDefault(require("../TokenMatcher"));
var cucumber_messages_1 = require("cucumber-messages");
var compile_1 = __importDefault(require("../pickles/compile"));
var AstBuilder_1 = __importDefault(require("../AstBuilder"));
function generateMessages(data, uri, options) {
  var e_1, _a, e_2, _b;
  var result = [];
  try {
    if (options.includeSource) {
      result.push(new cucumber_messages_1.messages.Envelope({
        source: {
          uri: uri,
          data: data,
          media: {
            encoding: cucumber_messages_1.messages.Media.Encoding.UTF8,
            contentType: 'text/x.cucumber.gherkin+plain'
          }
        }
      }));
    }
    if (!options.includeGherkinDocument && !options.includePickles) {
      return result;
    }
    var parser = new Parser_1.default(new AstBuilder_1.default(options.newId));
    parser.stopAtFirstError = false;
    var gherkinDocument = parser.parse(data, new TokenMatcher_1.default(options.defaultDialect));
    if (options.includeGherkinDocument) {
      result.push(cucumber_messages_1.messages.Envelope.create({
        gherkinDocument: __assign(__assign({}, gherkinDocument), {
          uri: uri
        })
      }));
    }
    if (options.includePickles) {
      var pickles = compile_1.default(gherkinDocument, uri, options.newId);
      try {
        for (var pickles_1 = __values(pickles), pickles_1_1 = pickles_1.next(); !pickles_1_1.done; pickles_1_1 = pickles_1.next()) {
          var pickle = pickles_1_1.value;
          result.push(cucumber_messages_1.messages.Envelope.create({
            pickle: pickle
          }));
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (pickles_1_1 && !pickles_1_1.done && (_a = pickles_1.return)) _a.call(pickles_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }
  } catch (err) {
    var errors = err.errors || [err];
    try {
      for (var errors_1 = __values(errors), errors_1_1 = errors_1.next(); !errors_1_1.done; errors_1_1 = errors_1.next()) {
        var error = errors_1_1.value;
        if (!error.location) {
          throw error;
        }
        result.push(cucumber_messages_1.messages.Envelope.create({
          attachment: {
            source: {
              uri: uri,
              location: {
                line: error.location.line,
                column: error.location.column
              }
            },
            data: error.message
          }
        }));
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (errors_1_1 && !errors_1_1.done && (_b = errors_1.return)) _b.call(errors_1);
      } finally {
        if (e_2) throw e_2.error;
      }
    }
  }
  return result;
}
exports.default = generateMessages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBLFNBQXdCQSxnQkFBZ0IsQ0FDdENDLElBQVksRUFDWkMsR0FBVyxFQUNYQyxPQUF3Qjs7RUFFeEIsSUFBTUMsTUFBTSxHQUFHLEVBQUU7RUFFakIsSUFBSTtJQUNGLElBQUlELE9BQU8sQ0FBQ0UsYUFBYSxFQUFFO01BQ3pCRCxNQUFNLENBQUNFLElBQUksQ0FDVCxJQUFJQyw0QkFBUSxDQUFDQyxRQUFRLENBQUM7UUFDcEJDLE1BQU0sRUFBRTtVQUNOUCxHQUFHO1VBQ0hELElBQUk7VUFDSlMsS0FBSyxFQUFFO1lBQ0xDLFFBQVEsRUFBRUosNEJBQVEsQ0FBQ0ssS0FBSyxDQUFDQyxRQUFRLENBQUNDLElBQUk7WUFDdENDLFdBQVcsRUFBRTs7O09BR2xCLENBQUMsQ0FDSDs7SUFHSCxJQUFJLENBQUNaLE9BQU8sQ0FBQ2Esc0JBQXNCLElBQUksQ0FBQ2IsT0FBTyxDQUFDYyxjQUFjLEVBQUU7TUFDOUQsT0FBT2IsTUFBTTs7SUFHZixJQUFNYyxNQUFNLEdBQUcsSUFBSUMsZ0JBQU0sQ0FBQyxJQUFJQyxvQkFBVSxDQUFDakIsT0FBTyxDQUFDa0IsS0FBSyxDQUFDLENBQUM7SUFDeERILE1BQU0sQ0FBQ0ksZ0JBQWdCLEdBQUcsS0FBSztJQUMvQixJQUFNQyxlQUFlLEdBQUdMLE1BQU0sQ0FBQ00sS0FBSyxDQUNsQ3ZCLElBQUksRUFDSixJQUFJd0Isc0JBQVksQ0FBQ3RCLE9BQU8sQ0FBQ3VCLGNBQWMsQ0FBQyxDQUN6QztJQUVELElBQUl2QixPQUFPLENBQUNhLHNCQUFzQixFQUFFO01BQ2xDWixNQUFNLENBQUNFLElBQUksQ0FDVEMsNEJBQVEsQ0FBQ0MsUUFBUSxDQUFDbUIsTUFBTSxDQUFDO1FBQ3ZCSixlQUFlLHdCQUFPQSxlQUFlO1VBQUVyQixHQUFHO1FBQUE7T0FDM0MsQ0FBQyxDQUNIOztJQUdILElBQUlDLE9BQU8sQ0FBQ2MsY0FBYyxFQUFFO01BQzFCLElBQU1XLE9BQU8sR0FBR0MsaUJBQU8sQ0FBQ04sZUFBZSxFQUFFckIsR0FBRyxFQUFFQyxPQUFPLENBQUNrQixLQUFLLENBQUM7O1FBQzVELEtBQXFCLGdDQUFPLHNGQUFFO1VBQXpCLElBQU1TLE1BQU07VUFDZjFCLE1BQU0sQ0FBQ0UsSUFBSSxDQUNUQyw0QkFBUSxDQUFDQyxRQUFRLENBQUNtQixNQUFNLENBQUM7WUFDdkJHLE1BQU07V0FDUCxDQUFDLENBQ0g7Ozs7Ozs7Ozs7Ozs7O0dBR04sQ0FBQyxPQUFPQyxHQUFHLEVBQUU7SUFDWixJQUFNQyxNQUFNLEdBQUdELEdBQUcsQ0FBQ0MsTUFBTSxJQUFJLENBQUNELEdBQUcsQ0FBQzs7TUFDbEMsS0FBb0IsOEJBQU0saUZBQUU7UUFBdkIsSUFBTUUsS0FBSztRQUNkLElBQUksQ0FBQ0EsS0FBSyxDQUFDQyxRQUFRLEVBQUU7VUFFbkIsTUFBTUQsS0FBSzs7UUFFYjdCLE1BQU0sQ0FBQ0UsSUFBSSxDQUNUQyw0QkFBUSxDQUFDQyxRQUFRLENBQUNtQixNQUFNLENBQUM7VUFDdkJRLFVBQVUsRUFBRTtZQUNWMUIsTUFBTSxFQUFFO2NBQ05QLEdBQUc7Y0FDSGdDLFFBQVEsRUFBRTtnQkFDUkUsSUFBSSxFQUFFSCxLQUFLLENBQUNDLFFBQVEsQ0FBQ0UsSUFBSTtnQkFDekJDLE1BQU0sRUFBRUosS0FBSyxDQUFDQyxRQUFRLENBQUNHOzthQUUxQjtZQUNEcEMsSUFBSSxFQUFFZ0MsS0FBSyxDQUFDSzs7U0FFZixDQUFDLENBQ0g7Ozs7Ozs7Ozs7Ozs7O0VBR0wsT0FBT2xDLE1BQU07QUFDZjtBQTVFQW1DIiwibmFtZXMiOlsiZ2VuZXJhdGVNZXNzYWdlcyIsImRhdGEiLCJ1cmkiLCJvcHRpb25zIiwicmVzdWx0IiwiaW5jbHVkZVNvdXJjZSIsInB1c2giLCJjdWN1bWJlcl9tZXNzYWdlc18xIiwiRW52ZWxvcGUiLCJzb3VyY2UiLCJtZWRpYSIsImVuY29kaW5nIiwiTWVkaWEiLCJFbmNvZGluZyIsIlVURjgiLCJjb250ZW50VHlwZSIsImluY2x1ZGVHaGVya2luRG9jdW1lbnQiLCJpbmNsdWRlUGlja2xlcyIsInBhcnNlciIsIlBhcnNlcl8xIiwiQXN0QnVpbGRlcl8xIiwibmV3SWQiLCJzdG9wQXRGaXJzdEVycm9yIiwiZ2hlcmtpbkRvY3VtZW50IiwicGFyc2UiLCJUb2tlbk1hdGNoZXJfMSIsImRlZmF1bHREaWFsZWN0IiwiY3JlYXRlIiwicGlja2xlcyIsImNvbXBpbGVfMSIsInBpY2tsZSIsImVyciIsImVycm9ycyIsImVycm9yIiwibG9jYXRpb24iLCJhdHRhY2htZW50IiwibGluZSIsImNvbHVtbiIsIm1lc3NhZ2UiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJlYW0vZ2VuZXJhdGVNZXNzYWdlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdfQ==