{"version":3,"mappings":";;;;;;AACA;AAAiE;EAAA;EAAA;EAAA;EAAA;IAAA;EAAA;AAAA;AAAA;EAAA;IAAA;EAAA;EAAA;IAAA;MAAAA;IAAA;EAAA;EAAA;EAAA;IAAA;EAAA;EAAA;EAAA;EAAA;IAAA;MAAA;MAAA;QAAAC;MAAA;QAAAC;MAAA;IAAA;EAAA;EAAAA;EAAA;IAAAC;EAAA;EAAA;AAAA;AAWjE,IAAMC,MAAM,GAAG,SAATA,MAAM,CACVC,KAAsD;EAAA,IACtDC,OAAsB,uEAAG,CAAC,CAAC;EAAA,OAE3B,yBAAY,EAACD,KAAK,EAAE;IAClBE,OAAO,EAAE,CAACC,eAAe,CAACF,OAAO,CAACG,QAAQ,CAAC,EAAEF,qBAAO,CAACG,YAAY,CAAC;IAClEC,SAAS,EAAE;EACb,CAAC,CAAC;AAAA;AAEJ,IAAMH,eAAe,GAAIC,SAAnBD,eAAe,CAAIC,QAA2B,EAAgB;EAClE,OAAO;IACLG,IAAI,EAAGC,iBAAG;MAAA,OAAKN,qBAAO,CAACO,kBAAkB,CAACF,IAAI,CAACC,GAAG,CAAC;IAAA;IACnDE,SAAS,EAAE,mBAACF,GAAG,EAAEG,MAAM,EAAEC,WAAW,EAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,EAAK;MAC7D,IAAIC,MAAM,GAAGR,GAAG;MAChB,IAAIJ,QAAQ,IAAII,GAAG,CAACS,KAAK,EAAE;QACzBD,MAAM,qBAAQR,GAAG;UAAES,KAAK,EAAEb,QAAQ,CAACI,GAAG,CAACS,KAAK,EAAET,GAAG;QAAA,EAAG;MACtD;MACA,OAAON,qBAAO,CAACO,kBAAkB,CAACC,SAAS,CACzCM,MAAM,EACNL,MAAM,EACNC,WAAW,EACXC,KAAK,EACLC,IAAI,EACJC,OAAO,CACR;IACH;EACF,CAAC;AACH,CAAC;AAAC,eAEahB,MAAM;AAAAmB","names":["default","Object","newObj","cache","format","input","options","plugins","getCustomPlugin","mapProps","ReactElement","highlight","test","val","ReactTestComponent","serialize","config","indentation","depth","refs","printer","newVal","props","exports"],"sources":["../../src/helpers/format.ts"],"sourcesContent":["import type { ReactTestRendererJSON } from 'react-test-renderer';\nimport prettyFormat, { NewPlugin, plugins } from 'pretty-format';\n\ntype MapPropsFunction = (\n  props: Record<string, unknown>,\n  node: ReactTestRendererJSON\n) => Record<string, unknown>;\n\nexport type FormatOptions = {\n  mapProps?: MapPropsFunction;\n};\n\nconst format = (\n  input: ReactTestRendererJSON | ReactTestRendererJSON[],\n  options: FormatOptions = {}\n) =>\n  prettyFormat(input, {\n    plugins: [getCustomPlugin(options.mapProps), plugins.ReactElement],\n    highlight: true,\n  });\n\nconst getCustomPlugin = (mapProps?: MapPropsFunction): NewPlugin => {\n  return {\n    test: (val) => plugins.ReactTestComponent.test(val),\n    serialize: (val, config, indentation, depth, refs, printer) => {\n      let newVal = val;\n      if (mapProps && val.props) {\n        newVal = { ...val, props: mapProps(val.props, val) };\n      }\n      return plugins.ReactTestComponent.serialize(\n        newVal,\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      );\n    },\n  };\n};\n\nexport default format;\n"]}