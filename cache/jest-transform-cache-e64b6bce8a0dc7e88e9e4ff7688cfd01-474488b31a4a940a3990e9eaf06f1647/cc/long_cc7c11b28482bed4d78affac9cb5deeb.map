{"version":3,"names":["module","exports","Long","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","prototype","__isLong__","Object","defineProperty","value","isLong","obj","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","divide","divisor","div_u","div_s","approx","res","halfThis","shr","shl","toUnsigned","shru","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE"],"sources":["long.js"],"sourcesContent":["module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n"],"mappings":"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"}