{"version":3,"names":["Object","defineProperty","exports","value","printDiffLines","diffLinesUnified2","diffLinesUnified","diffLinesRaw","_diffSequences","_interopRequireDefault","require","_cleanupSemantic","_joinAlignedDiffs","_normalizeDiffOptions","obj","__esModule","default","isEmptyString","lines","length","countChanges","diffs","a","b","forEach","diff","DIFF_DELETE","DIFF_INSERT","printAnnotation","changeCounts","aAnnotation","aColor","aIndicator","bAnnotation","bColor","bIndicator","includeChangeCounts","omitAnnotationLines","aRest","bRest","aCount","String","bCount","baAnnotationLengthDiff","aAnnotationPadding","repeat","Math","max","bAnnotationPadding","baCountLengthDiff","aCountPadding","bCountPadding","options","expand","joinAlignedDiffsExpand","joinAlignedDiffsNoExpand","aLines","bLines","normalizeDiffOptions","aLinesDisplay","bLinesDisplay","aLinesCompare","bLinesCompare","aIndex","bIndex","aLength","bLength","isCommon","foundSubsequence","nCommon","aCommon","bCommon","push","Diff","DIFF_EQUAL"],"sources":["diffLines.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printDiffLines =\n  exports.diffLinesUnified2 =\n  exports.diffLinesUnified =\n  exports.diffLinesRaw =\n    void 0;\nvar _diffSequences = _interopRequireDefault(require('diff-sequences'));\nvar _cleanupSemantic = require('./cleanupSemantic');\nvar _joinAlignedDiffs = require('./joinAlignedDiffs');\nvar _normalizeDiffOptions = require('./normalizeDiffOptions');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst isEmptyString = lines => lines.length === 1 && lines[0].length === 0;\nconst countChanges = diffs => {\n  let a = 0;\n  let b = 0;\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        a += 1;\n        break;\n      case _cleanupSemantic.DIFF_INSERT:\n        b += 1;\n        break;\n    }\n  });\n  return {\n    a,\n    b\n  };\n};\nconst printAnnotation = (\n  {\n    aAnnotation,\n    aColor,\n    aIndicator,\n    bAnnotation,\n    bColor,\n    bIndicator,\n    includeChangeCounts,\n    omitAnnotationLines\n  },\n  changeCounts\n) => {\n  if (omitAnnotationLines) {\n    return '';\n  }\n  let aRest = '';\n  let bRest = '';\n  if (includeChangeCounts) {\n    const aCount = String(changeCounts.a);\n    const bCount = String(changeCounts.b);\n\n    // Padding right aligns the ends of the annotations.\n    const baAnnotationLengthDiff = bAnnotation.length - aAnnotation.length;\n    const aAnnotationPadding = ' '.repeat(Math.max(0, baAnnotationLengthDiff));\n    const bAnnotationPadding = ' '.repeat(Math.max(0, -baAnnotationLengthDiff));\n\n    // Padding left aligns the ends of the counts.\n    const baCountLengthDiff = bCount.length - aCount.length;\n    const aCountPadding = ' '.repeat(Math.max(0, baCountLengthDiff));\n    const bCountPadding = ' '.repeat(Math.max(0, -baCountLengthDiff));\n    aRest = `${aAnnotationPadding}  ${aIndicator} ${aCountPadding}${aCount}`;\n    bRest = `${bAnnotationPadding}  ${bIndicator} ${bCountPadding}${bCount}`;\n  }\n  const a = `${aIndicator} ${aAnnotation}${aRest}`;\n  const b = `${bIndicator} ${bAnnotation}${bRest}`;\n  return `${aColor(a)}\\n${bColor(b)}\\n\\n`;\n};\nconst printDiffLines = (diffs, options) =>\n  printAnnotation(options, countChanges(diffs)) +\n  (options.expand\n    ? (0, _joinAlignedDiffs.joinAlignedDiffsExpand)(diffs, options)\n    : (0, _joinAlignedDiffs.joinAlignedDiffsNoExpand)(diffs, options));\n\n// Compare two arrays of strings line-by-line. Format as comparison lines.\nexports.printDiffLines = printDiffLines;\nconst diffLinesUnified = (aLines, bLines, options) =>\n  printDiffLines(\n    diffLinesRaw(\n      isEmptyString(aLines) ? [] : aLines,\n      isEmptyString(bLines) ? [] : bLines\n    ),\n    (0, _normalizeDiffOptions.normalizeDiffOptions)(options)\n  );\n\n// Given two pairs of arrays of strings:\n// Compare the pair of comparison arrays line-by-line.\n// Format the corresponding lines in the pair of displayable arrays.\nexports.diffLinesUnified = diffLinesUnified;\nconst diffLinesUnified2 = (\n  aLinesDisplay,\n  bLinesDisplay,\n  aLinesCompare,\n  bLinesCompare,\n  options\n) => {\n  if (isEmptyString(aLinesDisplay) && isEmptyString(aLinesCompare)) {\n    aLinesDisplay = [];\n    aLinesCompare = [];\n  }\n  if (isEmptyString(bLinesDisplay) && isEmptyString(bLinesCompare)) {\n    bLinesDisplay = [];\n    bLinesCompare = [];\n  }\n  if (\n    aLinesDisplay.length !== aLinesCompare.length ||\n    bLinesDisplay.length !== bLinesCompare.length\n  ) {\n    // Fall back to diff of display lines.\n    return diffLinesUnified(aLinesDisplay, bLinesDisplay, options);\n  }\n  const diffs = diffLinesRaw(aLinesCompare, bLinesCompare);\n\n  // Replace comparison lines with displayable lines.\n  let aIndex = 0;\n  let bIndex = 0;\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        diff[1] = aLinesDisplay[aIndex];\n        aIndex += 1;\n        break;\n      case _cleanupSemantic.DIFF_INSERT:\n        diff[1] = bLinesDisplay[bIndex];\n        bIndex += 1;\n        break;\n      default:\n        diff[1] = bLinesDisplay[bIndex];\n        aIndex += 1;\n        bIndex += 1;\n    }\n  });\n  return printDiffLines(\n    diffs,\n    (0, _normalizeDiffOptions.normalizeDiffOptions)(options)\n  );\n};\n\n// Compare two arrays of strings line-by-line.\nexports.diffLinesUnified2 = diffLinesUnified2;\nconst diffLinesRaw = (aLines, bLines) => {\n  const aLength = aLines.length;\n  const bLength = bLines.length;\n  const isCommon = (aIndex, bIndex) => aLines[aIndex] === bLines[bIndex];\n  const diffs = [];\n  let aIndex = 0;\n  let bIndex = 0;\n  const foundSubsequence = (nCommon, aCommon, bCommon) => {\n    for (; aIndex !== aCommon; aIndex += 1) {\n      diffs.push(\n        new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, aLines[aIndex])\n      );\n    }\n    for (; bIndex !== bCommon; bIndex += 1) {\n      diffs.push(\n        new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, bLines[bIndex])\n      );\n    }\n    for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1) {\n      diffs.push(\n        new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_EQUAL, bLines[bIndex])\n      );\n    }\n  };\n  (0, _diffSequences.default)(aLength, bLength, isCommon, foundSubsequence);\n\n  // After the last common subsequence, push remaining change items.\n  for (; aIndex !== aLength; aIndex += 1) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_DELETE, aLines[aIndex])\n    );\n  }\n  for (; bIndex !== bLength; bIndex += 1) {\n    diffs.push(\n      new _cleanupSemantic.Diff(_cleanupSemantic.DIFF_INSERT, bLines[bIndex])\n    );\n  }\n  return diffs;\n};\nexports.diffLinesRaw = diffLinesRaw;\n"],"mappings":"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"}