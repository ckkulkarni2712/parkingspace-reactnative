fae84620b0d44cb1321164ddbd3029d1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeVisible = void 0;
var react_native_1 = require("react-native");
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
var component_tree_1 = require("./component-tree");
function isVisibleForStyles(element) {
  var style = element.props.style || {};
  var _react_native_1$Style = react_native_1.StyleSheet.flatten(style),
    display = _react_native_1$Style.display,
    opacity = _react_native_1$Style.opacity;
  return display !== 'none' && opacity !== 0;
}
function isVisibleForAccessibility(element) {
  return !element.props.accessibilityElementsHidden && element.props.importantForAccessibility !== 'no-hide-descendants';
}
function isModalVisible(element) {
  return element.type !== react_native_1.Modal || element.props.visible !== false;
}
function isElementVisible(element) {
  var current = element;
  while (current) {
    if (!isVisibleForStyles(current) || !isVisibleForAccessibility(current) || !isModalVisible(current)) {
      return false;
    }
    current = (0, component_tree_1.getParentElement)(current, [react_native_1.Modal]);
  }
  return true;
}
function toBeVisible(element) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toBeVisible, this);
  var isVisible = isElementVisible(element);
  return {
    pass: isVisible,
    message: function message() {
      var is = isVisible ? 'is' : 'is not';
      return [(0, jest_matcher_utils_1.matcherHint)((_this.isNot ? '.not' : '') + ".toBeVisible", 'element', ''), '', "Received element " + is + " visible:", (0, utils_1.printElement)(element)].join('\n');
    }
  };
}
exports.toBeVisible = toBeVisible;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVWaXNpYmxlIiwicmVhY3RfbmF0aXZlXzEiLCJyZXF1aXJlIiwiamVzdF9tYXRjaGVyX3V0aWxzXzEiLCJ1dGlsc18xIiwiY29tcG9uZW50X3RyZWVfMSIsImlzVmlzaWJsZUZvclN0eWxlcyIsImVsZW1lbnQiLCJzdHlsZSIsInByb3BzIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJkaXNwbGF5Iiwib3BhY2l0eSIsImlzVmlzaWJsZUZvckFjY2Vzc2liaWxpdHkiLCJhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW4iLCJpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwiaXNNb2RhbFZpc2libGUiLCJ0eXBlIiwiTW9kYWwiLCJ2aXNpYmxlIiwiaXNFbGVtZW50VmlzaWJsZSIsImN1cnJlbnQiLCJnZXRQYXJlbnRFbGVtZW50IiwiY2hlY2tSZWFjdEVsZW1lbnQiLCJpc1Zpc2libGUiLCJwYXNzIiwibWVzc2FnZSIsImlzIiwibWF0Y2hlckhpbnQiLCJpc05vdCIsInByaW50RWxlbWVudCIsImpvaW4iXSwic291cmNlcyI6WyJ0by1iZS12aXNpYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b0JlVmlzaWJsZSA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0X25hdGl2ZV8xID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZVwiKTtcbmNvbnN0IGplc3RfbWF0Y2hlcl91dGlsc18xID0gcmVxdWlyZShcImplc3QtbWF0Y2hlci11dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IGNvbXBvbmVudF90cmVlXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnQtdHJlZVwiKTtcbmZ1bmN0aW9uIGlzVmlzaWJsZUZvclN0eWxlcyhlbGVtZW50KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBlbGVtZW50LnByb3BzLnN0eWxlIHx8IHt9O1xuICAgIGNvbnN0IHsgZGlzcGxheSwgb3BhY2l0eSB9ID0gcmVhY3RfbmF0aXZlXzEuU3R5bGVTaGVldC5mbGF0dGVuKHN0eWxlKTtcbiAgICByZXR1cm4gZGlzcGxheSAhPT0gJ25vbmUnICYmIG9wYWNpdHkgIT09IDA7XG59XG5mdW5jdGlvbiBpc1Zpc2libGVGb3JBY2Nlc3NpYmlsaXR5KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gKCFlbGVtZW50LnByb3BzLmFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbiAmJlxuICAgICAgICBlbGVtZW50LnByb3BzLmltcG9ydGFudEZvckFjY2Vzc2liaWxpdHkgIT09ICduby1oaWRlLWRlc2NlbmRhbnRzJyk7XG59XG5mdW5jdGlvbiBpc01vZGFsVmlzaWJsZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQudHlwZSAhPT0gcmVhY3RfbmF0aXZlXzEuTW9kYWwgfHwgZWxlbWVudC5wcm9wcy52aXNpYmxlICE9PSBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudFZpc2libGUoZWxlbWVudCkge1xuICAgIGxldCBjdXJyZW50ID0gZWxlbWVudDtcbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICBpZiAoIWlzVmlzaWJsZUZvclN0eWxlcyhjdXJyZW50KSB8fFxuICAgICAgICAgICAgIWlzVmlzaWJsZUZvckFjY2Vzc2liaWxpdHkoY3VycmVudCkgfHxcbiAgICAgICAgICAgICFpc01vZGFsVmlzaWJsZShjdXJyZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSAoMCwgY29tcG9uZW50X3RyZWVfMS5nZXRQYXJlbnRFbGVtZW50KShjdXJyZW50LCBbcmVhY3RfbmF0aXZlXzEuTW9kYWxdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiB0b0JlVmlzaWJsZShlbGVtZW50KSB7XG4gICAgKDAsIHV0aWxzXzEuY2hlY2tSZWFjdEVsZW1lbnQpKGVsZW1lbnQsIHRvQmVWaXNpYmxlLCB0aGlzKTtcbiAgICBjb25zdCBpc1Zpc2libGUgPSBpc0VsZW1lbnRWaXNpYmxlKGVsZW1lbnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhc3M6IGlzVmlzaWJsZSxcbiAgICAgICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXMgPSBpc1Zpc2libGUgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5tYXRjaGVySGludCkoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlVmlzaWJsZWAsICdlbGVtZW50JywgJycpLFxuICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IHZpc2libGU6YCxcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5wcmludEVsZW1lbnQpKGVsZW1lbnQpLFxuICAgICAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy50b0JlVmlzaWJsZSA9IHRvQmVWaXNpYmxlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0UsV0FBVyxHQUFHLEtBQUssQ0FBQztBQUM1QixJQUFNQyxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDOUMsSUFBTUMsb0JBQW9CLEdBQUdELE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUMxRCxJQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsSUFBTUcsZ0JBQWdCLEdBQUdILE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUNwRCxTQUFTSSxrQkFBa0IsQ0FBQ0MsT0FBTyxFQUFFO0VBQ2pDLElBQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDRSxLQUFLLENBQUNELEtBQUssSUFBSSxDQUFDLENBQUM7RUFDdkMsNEJBQTZCUCxjQUFjLENBQUNTLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDSCxLQUFLLENBQUM7SUFBN0RJLE9BQU8seUJBQVBBLE9BQU87SUFBRUMsT0FBTyx5QkFBUEEsT0FBTztFQUN4QixPQUFPRCxPQUFPLEtBQUssTUFBTSxJQUFJQyxPQUFPLEtBQUssQ0FBQztBQUM5QztBQUNBLFNBQVNDLHlCQUF5QixDQUFDUCxPQUFPLEVBQUU7RUFDeEMsT0FBUSxDQUFDQSxPQUFPLENBQUNFLEtBQUssQ0FBQ00sMkJBQTJCLElBQzlDUixPQUFPLENBQUNFLEtBQUssQ0FBQ08seUJBQXlCLEtBQUsscUJBQXFCO0FBQ3pFO0FBQ0EsU0FBU0MsY0FBYyxDQUFDVixPQUFPLEVBQUU7RUFDN0IsT0FBT0EsT0FBTyxDQUFDVyxJQUFJLEtBQUtqQixjQUFjLENBQUNrQixLQUFLLElBQUlaLE9BQU8sQ0FBQ0UsS0FBSyxDQUFDVyxPQUFPLEtBQUssS0FBSztBQUNuRjtBQUNBLFNBQVNDLGdCQUFnQixDQUFDZCxPQUFPLEVBQUU7RUFDL0IsSUFBSWUsT0FBTyxHQUFHZixPQUFPO0VBQ3JCLE9BQU9lLE9BQU8sRUFBRTtJQUNaLElBQUksQ0FBQ2hCLGtCQUFrQixDQUFDZ0IsT0FBTyxDQUFDLElBQzVCLENBQUNSLHlCQUF5QixDQUFDUSxPQUFPLENBQUMsSUFDbkMsQ0FBQ0wsY0FBYyxDQUFDSyxPQUFPLENBQUMsRUFBRTtNQUMxQixPQUFPLEtBQUs7SUFDaEI7SUFDQUEsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFakIsZ0JBQWdCLENBQUNrQixnQkFBZ0IsRUFBRUQsT0FBTyxFQUFFLENBQUNyQixjQUFjLENBQUNrQixLQUFLLENBQUMsQ0FBQztFQUNyRjtFQUNBLE9BQU8sSUFBSTtBQUNmO0FBQ0EsU0FBU25CLFdBQVcsQ0FBQ08sT0FBTyxFQUFFO0VBQUE7RUFDMUIsQ0FBQyxDQUFDLEVBQUVILE9BQU8sQ0FBQ29CLGlCQUFpQixFQUFFakIsT0FBTyxFQUFFUCxXQUFXLEVBQUUsSUFBSSxDQUFDO0VBQzFELElBQU15QixTQUFTLEdBQUdKLGdCQUFnQixDQUFDZCxPQUFPLENBQUM7RUFDM0MsT0FBTztJQUNIbUIsSUFBSSxFQUFFRCxTQUFTO0lBQ2ZFLE9BQU8sRUFBRSxtQkFBTTtNQUNYLElBQU1DLEVBQUUsR0FBR0gsU0FBUyxHQUFHLElBQUksR0FBRyxRQUFRO01BQ3RDLE9BQU8sQ0FDSCxDQUFDLENBQUMsRUFBRXRCLG9CQUFvQixDQUFDMEIsV0FBVyxHQUFLLEtBQUksQ0FBQ0MsS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFFLG9CQUFnQixTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQy9GLEVBQUUsd0JBQ2tCRixFQUFFLGdCQUN0QixDQUFDLENBQUMsRUFBRXhCLE9BQU8sQ0FBQzJCLFlBQVksRUFBRXhCLE9BQU8sQ0FBQyxDQUNyQyxDQUFDeUIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNoQjtFQUNKLENBQUM7QUFDTDtBQUNBbEMsT0FBTyxDQUFDRSxXQUFXLEdBQUdBLFdBQVcifQ==