693684d66bc07de53b276b3c70cf8fd4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCompositeParentOfType = getCompositeParentOfType;
exports.getHostChildren = getHostChildren;
exports.getHostParent = getHostParent;
exports.getHostSelf = getHostSelf;
exports.getHostSelves = getHostSelves;
exports.getHostSiblings = getHostSiblings;
exports.isHostElement = isHostElement;
exports.isHostElementForType = isHostElementForType;
function isHostElement(element) {
  return typeof (element == null ? void 0 : element.type) === 'string';
}
function getHostParent(element) {
  if (element == null) {
    return null;
  }
  var current = element.parent;
  while (current) {
    if (isHostElement(current)) {
      return current;
    }
    current = current.parent;
  }
  return null;
}
function getHostChildren(element) {
  if (element == null) {
    return [];
  }
  var hostChildren = [];
  element.children.forEach(function (child) {
    if (typeof child !== 'object') {
      return;
    }
    if (isHostElement(child)) {
      hostChildren.push(child);
    } else {
      hostChildren.push.apply(hostChildren, (0, _toConsumableArray2.default)(getHostChildren(child)));
    }
  });
  return hostChildren;
}
function getHostSelf(element) {
  var hostSelves = getHostSelves(element);
  if (hostSelves.length === 0) {
    throw new Error("Expected exactly one host element, but found none.");
  }
  if (hostSelves.length > 1) {
    throw new Error("Expected exactly one host element, but found " + hostSelves.length + ".");
  }
  return hostSelves[0];
}
function getHostSelves(element) {
  return typeof (element == null ? void 0 : element.type) === 'string' ? [element] : getHostChildren(element);
}
function getHostSiblings(element) {
  var hostParent = getHostParent(element);
  var hostSelves = getHostSelves(element);
  return getHostChildren(hostParent).filter(function (sibling) {
    return !hostSelves.includes(sibling);
  });
}
function getCompositeParentOfType(element, type) {
  var current = element.parent;
  while (!isHostElement(current)) {
    if (!current) {
      return null;
    }
    if (current.type === type) {
      return current;
    }
    current = current.parent;
  }
  return null;
}
function isHostElementForType(element, type) {
  if (!isHostElement(element)) return false;
  return getCompositeParentOfType(element, type) !== null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,