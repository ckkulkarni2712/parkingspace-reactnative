{"version":3,"mappings":";;;;;;;;;;;;;;;AAMO,SAASA,aAAa,CAACC,OAAkC,EAAW;EACzE,OAAO,QAAOA,OAAO,oBAAPA,OAAO,CAAEC,IAAI,MAAK,QAAQ;AAC1C;AAMO,SAASC,aAAa,CAC3BF,OAAiC,EACP;EAC1B,IAAIA,OAAO,IAAI,IAAI,EAAE;IACnB,OAAO,IAAI;EACb;EAEA,IAAIG,OAAO,GAAGH,OAAO,CAACI,MAAM;EAC5B,OAAOD,OAAO,EAAE;IACd,IAAIJ,aAAa,CAACI,OAAO,CAAC,EAAE;MAC1B,OAAOA,OAAO;IAChB;IAEAA,OAAO,GAAGA,OAAO,CAACC,MAAM;EAC1B;EAEA,OAAO,IAAI;AACb;AAMO,SAASC,eAAe,CAC7BL,OAAiC,EACZ;EACrB,IAAIA,OAAO,IAAI,IAAI,EAAE;IACnB,OAAO,EAAE;EACX;EAEA,IAAMM,YAAiC,GAAG,EAAE;EAE5CN,OAAO,CAACO,QAAQ,CAACC,OAAO,CAAEC,eAAK,EAAK;IAClC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B;IACF;IAEA,IAAIV,aAAa,CAACU,KAAK,CAAC,EAAE;MACxBH,YAAY,CAACI,IAAI,CAACD,KAAK,CAAC;IAC1B,CAAC,MAAM;MACLH,YAAY,CAACI,IAAI,OAAjBJ,YAAY,mCAASD,eAAe,CAACI,KAAK,CAAC,EAAC;IAC9C;EACF,CAAC,CAAC;EAEF,OAAOH,YAAY;AACrB;AAUO,SAASK,WAAW,CACzBX,OAAiC,EACd;EACnB,IAAMY,UAAU,GAAGC,aAAa,CAACb,OAAO,CAAC;EAEzC,IAAIY,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;IAC3B,MAAM,IAAIC,KAAK,sDAAsD;EACvE;EAEA,IAAIH,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIC,KAAK,mDACmCH,UAAU,CAACE,MAAO,OACnE;EACH;EAEA,OAAOF,UAAU,CAAC,CAAC,CAAC;AACtB;AASO,SAASC,aAAa,CAC3Bb,OAAiC,EACZ;EACrB,OAAO,QAAOA,OAAO,oBAAPA,OAAO,CAAEC,IAAI,MAAK,QAAQ,GACpC,CAACD,OAAO,CAAC,GACTK,eAAe,CAACL,OAAO,CAAC;AAC9B;AAMO,SAASgB,eAAe,CAC7BhB,OAAiC,EACZ;EACrB,IAAMiB,UAAU,GAAGf,aAAa,CAACF,OAAO,CAAC;EACzC,IAAMY,UAAU,GAAGC,aAAa,CAACb,OAAO,CAAC;EACzC,OAAOK,eAAe,CAACY,UAAU,CAAC,CAACC,MAAM,CACtCC,iBAAO;IAAA,OAAK,CAACP,UAAU,CAACQ,QAAQ,CAACD,OAAO,CAAC;EAAA,EAC3C;AACH;AAEO,SAASE,wBAAwB,CACtCrB,OAA0B,EAC1BC,IAAyB,EACzB;EACA,IAAIE,OAAO,GAAGH,OAAO,CAACI,MAAM;EAE5B,OAAO,CAACL,aAAa,CAACI,OAAO,CAAC,EAAE;IAE9B,IAAI,CAACA,OAAO,EAAE;MACZ,OAAO,IAAI;IACb;IAEA,IAAIA,OAAO,CAACF,IAAI,KAAKA,IAAI,EAAE;MACzB,OAAOE,OAAO;IAChB;IACAA,OAAO,GAAGA,OAAO,CAACC,MAAM;EAC1B;EAEA,OAAO,IAAI;AACb;AAKO,SAASkB,oBAAoB,CAClCtB,OAA0B,EAC1BC,IAAyB,EACzB;EAEA,IAAI,CAACF,aAAa,CAACC,OAAO,CAAC,EAAE,OAAO,KAAK;EAEzC,OAAOqB,wBAAwB,CAACrB,OAAO,EAAEC,IAAI,CAAC,KAAK,IAAI;AACzD","names":["isHostElement","element","type","getHostParent","current","parent","getHostChildren","hostChildren","children","forEach","child","push","getHostSelf","hostSelves","getHostSelves","length","Error","getHostSiblings","hostParent","filter","sibling","includes","getCompositeParentOfType","isHostElementForType"],"sources":["../../src/helpers/component-tree.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\n\n/**\n * Checks if the given element is a host element.\n * @param element The element to check.\n */\nexport function isHostElement(element?: ReactTestInstance | null): boolean {\n  return typeof element?.type === 'string';\n}\n\n/**\n * Returns first host ancestor for given element.\n * @param element The element start traversing from.\n */\nexport function getHostParent(\n  element: ReactTestInstance | null\n): ReactTestInstance | null {\n  if (element == null) {\n    return null;\n  }\n\n  let current = element.parent;\n  while (current) {\n    if (isHostElement(current)) {\n      return current;\n    }\n\n    current = current.parent;\n  }\n\n  return null;\n}\n\n/**\n * Returns host children for given element.\n * @param element The element start traversing from.\n */\nexport function getHostChildren(\n  element: ReactTestInstance | null\n): ReactTestInstance[] {\n  if (element == null) {\n    return [];\n  }\n\n  const hostChildren: ReactTestInstance[] = [];\n\n  element.children.forEach((child) => {\n    if (typeof child !== 'object') {\n      return;\n    }\n\n    if (isHostElement(child)) {\n      hostChildren.push(child);\n    } else {\n      hostChildren.push(...getHostChildren(child));\n    }\n  });\n\n  return hostChildren;\n}\n\n/**\n * Return a single host element that represent the passed host or composite element.\n *\n * @param element The element start traversing from.\n * @throws Error if the passed element is a composite element and has no host children or has more than one host child.\n * @returns If the passed element is a host element, it will return itself, if the passed element is a composite\n * element, it will return a single host descendant.\n */\nexport function getHostSelf(\n  element: ReactTestInstance | null\n): ReactTestInstance {\n  const hostSelves = getHostSelves(element);\n\n  if (hostSelves.length === 0) {\n    throw new Error(`Expected exactly one host element, but found none.`);\n  }\n\n  if (hostSelves.length > 1) {\n    throw new Error(\n      `Expected exactly one host element, but found ${hostSelves.length}.`\n    );\n  }\n\n  return hostSelves[0];\n}\n\n/**\n * Return the array of host elements that represent the passed element.\n *\n * @param element The element start traversing from.\n * @returns If the passed element is a host element, it will return an array containing only that element,\n * if the passed element is a composite element, it will return an array containing its host children (zero, one or many).\n */\nexport function getHostSelves(\n  element: ReactTestInstance | null\n): ReactTestInstance[] {\n  return typeof element?.type === 'string'\n    ? [element]\n    : getHostChildren(element);\n}\n\n/**\n * Returns host siblings for given element.\n * @param element The element start traversing from.\n */\nexport function getHostSiblings(\n  element: ReactTestInstance | null\n): ReactTestInstance[] {\n  const hostParent = getHostParent(element);\n  const hostSelves = getHostSelves(element);\n  return getHostChildren(hostParent).filter(\n    (sibling) => !hostSelves.includes(sibling)\n  );\n}\n\nexport function getCompositeParentOfType(\n  element: ReactTestInstance,\n  type: React.ComponentType\n) {\n  let current = element.parent;\n\n  while (!isHostElement(current)) {\n    // We're at the root of the tree\n    if (!current) {\n      return null;\n    }\n\n    if (current.type === type) {\n      return current;\n    }\n    current = current.parent;\n  }\n\n  return null;\n}\n\n/**\n * Note: this function should be generally used for core React Native types like `View`, `Text`, `TextInput`, etc.\n */\nexport function isHostElementForType(\n  element: ReactTestInstance,\n  type: React.ComponentType\n) {\n  // Not a host element\n  if (!isHostElement(element)) return false;\n\n  return getCompositeParentOfType(element, type) !== null;\n}\n"]}