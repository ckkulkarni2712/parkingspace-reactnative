65bf774b0b13d2d93810b842e48377a1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findAll = findAll;
var _config = require("../config");
var _accessiblity = require("./accessiblity");
function findAll(root, predicate, options) {
  var _ref, _options$includeHidde, _ref2;
  var results = findAllInternal(root, predicate, options);
  var includeHiddenElements = (_ref = (_options$includeHidde = options == null ? void 0 : options.includeHiddenElements) != null ? _options$includeHidde : options == null ? void 0 : options.hidden) != null ? _ref : (_ref2 = (0, _config.getConfig)()) == null ? void 0 : _ref2.defaultIncludeHiddenElements;
  if (includeHiddenElements) {
    return results;
  }
  var cache = new WeakMap();
  return results.filter(function (element) {
    return !(0, _accessiblity.isHiddenFromAccessibility)(element, {
      cache: cache
    });
  });
}
function findAllInternal(root, predicate, options) {
  var results = [];
  var matchingDescendants = [];
  root.children.forEach(function (child) {
    if (typeof child === 'string') {
      return;
    }
    matchingDescendants.push.apply(matchingDescendants, (0, _toConsumableArray2.default)(findAllInternal(child, predicate, options)));
  });
  if ((!(options != null && options.matchDeepestOnly) || matchingDescendants.length === 0) && predicate(root)) {
    results.push(root);
  }
  results.push.apply(results, matchingDescendants);
  return results;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTtBQUNBO0FBYU8sU0FBU0EsT0FBTyxDQUNyQkMsSUFBdUIsRUFDdkJDLFNBQWtELEVBQ2xEQyxPQUF3QixFQUN4QjtFQUFBO0VBQ0EsSUFBTUMsT0FBTyxHQUFHQyxlQUFlLENBQUNKLElBQUksRUFBRUMsU0FBUyxFQUFFQyxPQUFPLENBQUM7RUFFekQsSUFBTUcscUJBQXFCLG9DQUN6QkgsT0FBTyxvQkFBUEEsT0FBTyxDQUFFRyxxQkFBcUIsb0NBQzlCSCxPQUFPLG9CQUFQQSxPQUFPLENBQUVJLE1BQU0sNEJBQ2YscUJBQVMsR0FBRSxxQkFBWCxNQUFhQyw0QkFBNEI7RUFFM0MsSUFBSUYscUJBQXFCLEVBQUU7SUFDekIsT0FBT0YsT0FBTztFQUNoQjtFQUVBLElBQU1LLEtBQUssR0FBRyxJQUFJQyxPQUFPLEVBQXFCO0VBQzlDLE9BQU9OLE9BQU8sQ0FBQ08sTUFBTSxDQUNsQkMsaUJBQU87SUFBQSxPQUFLLENBQUMsMkNBQXlCLEVBQUNBLE9BQU8sRUFBRTtNQUFFSDtJQUFNLENBQUMsQ0FBQztFQUFBLEVBQzVEO0FBQ0g7QUFJQSxTQUFTSixlQUFlLENBQ3RCSixJQUF1QixFQUN2QkMsU0FBa0QsRUFDbERDLE9BQXdCLEVBQ0U7RUFDMUIsSUFBTUMsT0FBNEIsR0FBRyxFQUFFO0VBR3ZDLElBQU1TLG1CQUF3QyxHQUFHLEVBQUU7RUFDbkRaLElBQUksQ0FBQ2EsUUFBUSxDQUFDQyxPQUFPLENBQUVDLGVBQUssRUFBSztJQUMvQixJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRLEVBQUU7TUFDN0I7SUFDRjtJQUNBSCxtQkFBbUIsQ0FBQ0ksSUFBSSxPQUF4QkosbUJBQW1CLG1DQUFTUixlQUFlLENBQUNXLEtBQUssRUFBRWQsU0FBUyxFQUFFQyxPQUFPLENBQUMsRUFBQztFQUN6RSxDQUFDLENBQUM7RUFFRixJQUVFLENBQUMsRUFBQ0EsT0FBTyxZQUFQQSxPQUFPLENBQUVlLGdCQUFnQixLQUFJTCxtQkFBbUIsQ0FBQ00sTUFBTSxLQUFLLENBQUMsS0FDL0RqQixTQUFTLENBQUNELElBQUksQ0FBQyxFQUNmO0lBQ0FHLE9BQU8sQ0FBQ2EsSUFBSSxDQUFDaEIsSUFBSSxDQUFDO0VBQ3BCO0VBR0FHLE9BQU8sQ0FBQ2EsSUFBSSxPQUFaYixPQUFPLEVBQVNTLG1CQUFtQixDQUFDO0VBRXBDLE9BQU9ULE9BQU87QUFDaEIiLCJuYW1lcyI6WyJmaW5kQWxsIiwicm9vdCIsInByZWRpY2F0ZSIsIm9wdGlvbnMiLCJyZXN1bHRzIiwiZmluZEFsbEludGVybmFsIiwiaW5jbHVkZUhpZGRlbkVsZW1lbnRzIiwiaGlkZGVuIiwiZGVmYXVsdEluY2x1ZGVIaWRkZW5FbGVtZW50cyIsImNhY2hlIiwiV2Vha01hcCIsImZpbHRlciIsImVsZW1lbnQiLCJtYXRjaGluZ0Rlc2NlbmRhbnRzIiwiY2hpbGRyZW4iLCJmb3JFYWNoIiwiY2hpbGQiLCJwdXNoIiwibWF0Y2hEZWVwZXN0T25seSIsImxlbmd0aCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2ZpbmRBbGwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0hpZGRlbkZyb21BY2Nlc3NpYmlsaXR5IH0gZnJvbSAnLi9hY2Nlc3NpYmxpdHknO1xuXG5pbnRlcmZhY2UgRmluZEFsbE9wdGlvbnMge1xuICAvKiogTWF0Y2ggZWxlbWVudHMgaGlkZGVuIGZyb20gYWNjZXNzaWJpbGl0eSAqL1xuICBpbmNsdWRlSGlkZGVuRWxlbWVudHM/OiBib29sZWFuO1xuXG4gIC8qKiBSVEwtY29tcGF0aWJsZSBhbGlhcyB0byBgaW5jbHVkZUhpZGRlbkVsZW1lbnRzYCAqL1xuICBoaWRkZW4/OiBib29sZWFuO1xuXG4gIC8qIEV4Y2x1ZGUgYW55IGFuY2VzdG9ycyBvZiBkZWVwZXN0IG1hdGNoZWQgZWxlbWVudHMgZXZlbiBpZiB0aGV5IG1hdGNoIHRoZSBwcmVkaWNhdGUgKi9cbiAgbWF0Y2hEZWVwZXN0T25seT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQWxsKFxuICByb290OiBSZWFjdFRlc3RJbnN0YW5jZSxcbiAgcHJlZGljYXRlOiAoZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UpID0+IGJvb2xlYW4sXG4gIG9wdGlvbnM/OiBGaW5kQWxsT3B0aW9uc1xuKSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBmaW5kQWxsSW50ZXJuYWwocm9vdCwgcHJlZGljYXRlLCBvcHRpb25zKTtcblxuICBjb25zdCBpbmNsdWRlSGlkZGVuRWxlbWVudHMgPVxuICAgIG9wdGlvbnM/LmluY2x1ZGVIaWRkZW5FbGVtZW50cyA/P1xuICAgIG9wdGlvbnM/LmhpZGRlbiA/P1xuICAgIGdldENvbmZpZygpPy5kZWZhdWx0SW5jbHVkZUhpZGRlbkVsZW1lbnRzO1xuXG4gIGlmIChpbmNsdWRlSGlkZGVuRWxlbWVudHMpIHtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIGNvbnN0IGNhY2hlID0gbmV3IFdlYWtNYXA8UmVhY3RUZXN0SW5zdGFuY2U+KCk7XG4gIHJldHVybiByZXN1bHRzLmZpbHRlcihcbiAgICAoZWxlbWVudCkgPT4gIWlzSGlkZGVuRnJvbUFjY2Vzc2liaWxpdHkoZWxlbWVudCwgeyBjYWNoZSB9KVxuICApO1xufVxuXG4vLyBFeHRyYWN0ZWQgZnJvbSBSZWFjdCBUZXN0IFJlbmRlcmVyXG4vLyBzcmM6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzhlMmJkZTZmMjc1MWFhNjMzNWYzY2VmNDg4YzA1YzNlYTA4ZTA3NGEvcGFja2FnZXMvcmVhY3QtdGVzdC1yZW5kZXJlci9zcmMvUmVhY3RUZXN0UmVuZGVyZXIuanMjTDQwMlxuZnVuY3Rpb24gZmluZEFsbEludGVybmFsKFxuICByb290OiBSZWFjdFRlc3RJbnN0YW5jZSxcbiAgcHJlZGljYXRlOiAoZWxlbWVudDogUmVhY3RUZXN0SW5zdGFuY2UpID0+IGJvb2xlYW4sXG4gIG9wdGlvbnM/OiBGaW5kQWxsT3B0aW9uc1xuKTogQXJyYXk8UmVhY3RUZXN0SW5zdGFuY2U+IHtcbiAgY29uc3QgcmVzdWx0czogUmVhY3RUZXN0SW5zdGFuY2VbXSA9IFtdO1xuXG4gIC8vIE1hdGNoIGRlc2NlbmRhbnRzIGZpcnN0IGJ1dCBkbyBub3QgYWRkIHRoZW0gdG8gcmVzdWx0cyB5ZXQuXG4gIGNvbnN0IG1hdGNoaW5nRGVzY2VuZGFudHM6IFJlYWN0VGVzdEluc3RhbmNlW10gPSBbXTtcbiAgcm9vdC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1hdGNoaW5nRGVzY2VuZGFudHMucHVzaCguLi5maW5kQWxsSW50ZXJuYWwoY2hpbGQsIHByZWRpY2F0ZSwgb3B0aW9ucykpO1xuICB9KTtcblxuICBpZiAoXG4gICAgLy8gV2hlbiBtYXRjaERlZXBlc3RPbmx5ID0gdHJ1ZTogYWRkIGN1cnJlbnQgZWxlbWVudCBvbmx5IGlmIG5vIGRlc2NlbmRhbnRzIG1hdGNoXG4gICAgKCFvcHRpb25zPy5tYXRjaERlZXBlc3RPbmx5IHx8IG1hdGNoaW5nRGVzY2VuZGFudHMubGVuZ3RoID09PSAwKSAmJlxuICAgIHByZWRpY2F0ZShyb290KVxuICApIHtcbiAgICByZXN1bHRzLnB1c2gocm9vdCk7XG4gIH1cblxuICAvLyBBZGQgbWF0Y2hpbmcgZGVzY2VuZGFudHMgYWZ0ZXIgZWxlbWVudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCB0cmVlIHdhbGsgb3JkZXIuXG4gIHJlc3VsdHMucHVzaCguLi5tYXRjaGluZ0Rlc2NlbmRhbnRzKTtcblxuICByZXR1cm4gcmVzdWx0cztcbn1cbiJdfQ==