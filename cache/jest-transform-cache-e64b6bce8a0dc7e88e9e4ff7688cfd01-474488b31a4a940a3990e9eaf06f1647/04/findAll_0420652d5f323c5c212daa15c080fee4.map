{"version":3,"mappings":";;;;;;;;AACA;AACA;AAaO,SAASA,OAAO,CACrBC,IAAuB,EACvBC,SAAkD,EAClDC,OAAwB,EACxB;EAAA;EACA,IAAMC,OAAO,GAAGC,eAAe,CAACJ,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAC;EAEzD,IAAMG,qBAAqB,oCACzBH,OAAO,oBAAPA,OAAO,CAAEG,qBAAqB,oCAC9BH,OAAO,oBAAPA,OAAO,CAAEI,MAAM,4BACf,qBAAS,GAAE,qBAAX,MAAaC,4BAA4B;EAE3C,IAAIF,qBAAqB,EAAE;IACzB,OAAOF,OAAO;EAChB;EAEA,IAAMK,KAAK,GAAG,IAAIC,OAAO,EAAqB;EAC9C,OAAON,OAAO,CAACO,MAAM,CAClBC,iBAAO;IAAA,OAAK,CAAC,2CAAyB,EAACA,OAAO,EAAE;MAAEH;IAAM,CAAC,CAAC;EAAA,EAC5D;AACH;AAIA,SAASJ,eAAe,CACtBJ,IAAuB,EACvBC,SAAkD,EAClDC,OAAwB,EACE;EAC1B,IAAMC,OAA4B,GAAG,EAAE;EAGvC,IAAMS,mBAAwC,GAAG,EAAE;EACnDZ,IAAI,CAACa,QAAQ,CAACC,OAAO,CAAEC,eAAK,EAAK;IAC/B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B;IACF;IACAH,mBAAmB,CAACI,IAAI,OAAxBJ,mBAAmB,mCAASR,eAAe,CAACW,KAAK,EAAEd,SAAS,EAAEC,OAAO,CAAC,EAAC;EACzE,CAAC,CAAC;EAEF,IAEE,CAAC,EAACA,OAAO,YAAPA,OAAO,CAAEe,gBAAgB,KAAIL,mBAAmB,CAACM,MAAM,KAAK,CAAC,KAC/DjB,SAAS,CAACD,IAAI,CAAC,EACf;IACAG,OAAO,CAACa,IAAI,CAAChB,IAAI,CAAC;EACpB;EAGAG,OAAO,CAACa,IAAI,OAAZb,OAAO,EAASS,mBAAmB,CAAC;EAEpC,OAAOT,OAAO;AAChB","names":["findAll","root","predicate","options","results","findAllInternal","includeHiddenElements","hidden","defaultIncludeHiddenElements","cache","WeakMap","filter","element","matchingDescendants","children","forEach","child","push","matchDeepestOnly","length"],"sources":["../../src/helpers/findAll.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport { getConfig } from '../config';\nimport { isHiddenFromAccessibility } from './accessiblity';\n\ninterface FindAllOptions {\n  /** Match elements hidden from accessibility */\n  includeHiddenElements?: boolean;\n\n  /** RTL-compatible alias to `includeHiddenElements` */\n  hidden?: boolean;\n\n  /* Exclude any ancestors of deepest matched elements even if they match the predicate */\n  matchDeepestOnly?: boolean;\n}\n\nexport function findAll(\n  root: ReactTestInstance,\n  predicate: (element: ReactTestInstance) => boolean,\n  options?: FindAllOptions\n) {\n  const results = findAllInternal(root, predicate, options);\n\n  const includeHiddenElements =\n    options?.includeHiddenElements ??\n    options?.hidden ??\n    getConfig()?.defaultIncludeHiddenElements;\n\n  if (includeHiddenElements) {\n    return results;\n  }\n\n  const cache = new WeakMap<ReactTestInstance>();\n  return results.filter(\n    (element) => !isHiddenFromAccessibility(element, { cache })\n  );\n}\n\n// Extracted from React Test Renderer\n// src: https://github.com/facebook/react/blob/8e2bde6f2751aa6335f3cef488c05c3ea08e074a/packages/react-test-renderer/src/ReactTestRenderer.js#L402\nfunction findAllInternal(\n  root: ReactTestInstance,\n  predicate: (element: ReactTestInstance) => boolean,\n  options?: FindAllOptions\n): Array<ReactTestInstance> {\n  const results: ReactTestInstance[] = [];\n\n  // Match descendants first but do not add them to results yet.\n  const matchingDescendants: ReactTestInstance[] = [];\n  root.children.forEach((child) => {\n    if (typeof child === 'string') {\n      return;\n    }\n    matchingDescendants.push(...findAllInternal(child, predicate, options));\n  });\n\n  if (\n    // When matchDeepestOnly = true: add current element only if no descendants match\n    (!options?.matchDeepestOnly || matchingDescendants.length === 0) &&\n    predicate(root)\n  ) {\n    results.push(root);\n  }\n\n  // Add matching descendants after element to preserve original tree walk order.\n  results.push(...matchingDescendants);\n\n  return results;\n}\n"]}