{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AAEO,SAASA,cAAc,CAC5BC,IAAuB,EACvBC,OAA0B,EAC1BC,IAAe,EAEf;EAAA,IADAC,OAAyB,uEAAG,CAAC,CAAC;EAE9B,OACEC,uBAAuB,CAACH,OAAO,EAAEC,IAAI,EAAEC,OAAO,CAAC,IAC/CE,4BAA4B,CAC1BL,IAAI,EACJC,OAAO,CAACK,KAAK,CAACC,uBAAuB,EACrCL,IAAI,EACJC,OAAO,CACR;AAEL;AAEA,SAASC,uBAAuB,CAC9BH,OAA0B,EAC1BC,IAAe,EACfC,OAAyB,EACzB;EACA,IAAQK,KAAK,GAAiBL,OAAO,CAA7BK,KAAK;IAAEC,aAAeN,OAAO,CAAtBM;EACf,OAAO,oBAAO,EAACP,IAAI,EAAED,OAAO,CAACK,KAAK,CAACI,kBAAkB,EAAED,UAAU,EAAED,KAAK,CAAC;AAC3E;AAEA,SAASH,4BAA4B,CACnCL,IAAuB,EACvBW,QAA4B,EAC5BT,IAAe,EACfC,OAAyB,EACzB;EACA,IAAI,CAACQ,QAAQ,EAAE;IACb,OAAO,KAAK;EACd;EAEA,OACE,oBAAO,EACLX,IAAI,EACHY,cAAI;IAAA,OACH,OAAOA,IAAI,CAACC,IAAI,KAAK,QAAQ,IAC7BD,IAAI,CAACN,KAAK,CAACQ,QAAQ,KAAKH,QAAQ,IAChC,sCAAgB,EAACC,IAAI,EAAEV,IAAI,EAAEC,OAAO,CAAC;EAAA,EACxC,CAACY,MAAM,GAAG,CAAC;AAEhB","names":["matchLabelText","root","element","text","options","matchAccessibilityLabel","matchAccessibilityLabelledBy","props","accessibilityLabelledBy","exact","normalizer","accessibilityLabel","nativeId","node","type","nativeID","length"],"sources":["../../../src/helpers/matchers/matchLabelText.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport { matches, TextMatch, TextMatchOptions } from '../../matches';\nimport { findAll } from '../findAll';\nimport { matchTextContent } from './matchTextContent';\n\nexport function matchLabelText(\n  root: ReactTestInstance,\n  element: ReactTestInstance,\n  text: TextMatch,\n  options: TextMatchOptions = {}\n) {\n  return (\n    matchAccessibilityLabel(element, text, options) ||\n    matchAccessibilityLabelledBy(\n      root,\n      element.props.accessibilityLabelledBy,\n      text,\n      options\n    )\n  );\n}\n\nfunction matchAccessibilityLabel(\n  element: ReactTestInstance,\n  text: TextMatch,\n  options: TextMatchOptions\n) {\n  const { exact, normalizer } = options;\n  return matches(text, element.props.accessibilityLabel, normalizer, exact);\n}\n\nfunction matchAccessibilityLabelledBy(\n  root: ReactTestInstance,\n  nativeId: string | undefined,\n  text: TextMatch,\n  options: TextMatchOptions\n) {\n  if (!nativeId) {\n    return false;\n  }\n\n  return (\n    findAll(\n      root,\n      (node) =>\n        typeof node.type === 'string' &&\n        node.props.nativeID === nativeId &&\n        matchTextContent(node, text, options)\n    ).length > 0\n  );\n}\n"]}