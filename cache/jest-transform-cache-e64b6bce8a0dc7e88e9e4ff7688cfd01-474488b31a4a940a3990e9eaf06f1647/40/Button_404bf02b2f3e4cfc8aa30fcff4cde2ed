6d6c079d72879b003252d39841777099
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _Text = _interopRequireDefault(require("../Text/Text"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _TouchableNativeFeedback = _interopRequireDefault(require("./Touchable/TouchableNativeFeedback"));
var _TouchableOpacity = _interopRequireDefault(require("./Touchable/TouchableOpacity"));
var _View = _interopRequireDefault(require("./View/View"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Button = function (_React$Component) {
  (0, _inherits2.default)(Button, _React$Component);
  var _super = _createSuper(Button);
  function Button() {
    (0, _classCallCheck2.default)(this, Button);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Button, [{
    key: "render",
    value: function render() {
      var _accessibilityState2, _accessibilityState3;
      var _this$props = this.props,
        accessibilityLabel = _this$props.accessibilityLabel,
        accessibilityState = _this$props.accessibilityState,
        ariaBusy = _this$props['aria-busy'],
        ariaChecked = _this$props['aria-checked'],
        ariaDisabled = _this$props['aria-disabled'],
        ariaExpanded = _this$props['aria-expanded'],
        ariaLabel = _this$props['aria-label'],
        ariaSelected = _this$props['aria-selected'],
        importantForAccessibility = _this$props.importantForAccessibility,
        color = _this$props.color,
        onPress = _this$props.onPress,
        touchSoundDisabled = _this$props.touchSoundDisabled,
        title = _this$props.title,
        hasTVPreferredFocus = _this$props.hasTVPreferredFocus,
        nextFocusDown = _this$props.nextFocusDown,
        nextFocusForward = _this$props.nextFocusForward,
        nextFocusLeft = _this$props.nextFocusLeft,
        nextFocusRight = _this$props.nextFocusRight,
        nextFocusUp = _this$props.nextFocusUp,
        testID = _this$props.testID,
        accessible = _this$props.accessible,
        accessibilityActions = _this$props.accessibilityActions,
        accessibilityHint = _this$props.accessibilityHint,
        accessibilityLanguage = _this$props.accessibilityLanguage,
        onAccessibilityAction = _this$props.onAccessibilityAction;
      var buttonStyles = [styles.button];
      var textStyles = [styles.text];
      if (color) {
        if (_Platform.default.OS === 'ios') {
          textStyles.push({
            color: color
          });
        } else {
          buttonStyles.push({
            backgroundColor: color
          });
        }
      }
      var _accessibilityState = {
        busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
        checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
        disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
        expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
        selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
      };
      var disabled = this.props.disabled != null ? this.props.disabled : (_accessibilityState2 = _accessibilityState) == null ? void 0 : _accessibilityState2.disabled;
      _accessibilityState = disabled !== ((_accessibilityState3 = _accessibilityState) == null ? void 0 : _accessibilityState3.disabled) ? Object.assign({}, _accessibilityState, {
        disabled: disabled
      }) : _accessibilityState;
      if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
      }
      (0, _invariant.default)(typeof title === 'string', 'The title prop of a Button must be a string');
      var formattedTitle = _Platform.default.OS === 'android' ? title.toUpperCase() : title;
      var Touchable = _Platform.default.OS === 'android' ? _TouchableNativeFeedback.default : _TouchableOpacity.default;
      var _importantForAccessibility = importantForAccessibility === 'no' ? 'no-hide-descendants' : importantForAccessibility;
      return (0, _jsxRuntime.jsx)(Touchable, {
        accessible: accessible,
        accessibilityActions: accessibilityActions,
        onAccessibilityAction: onAccessibilityAction,
        accessibilityLabel: ariaLabel || accessibilityLabel,
        accessibilityHint: accessibilityHint,
        accessibilityLanguage: accessibilityLanguage,
        accessibilityRole: "button",
        accessibilityState: _accessibilityState,
        importantForAccessibility: _importantForAccessibility,
        hasTVPreferredFocus: hasTVPreferredFocus,
        nextFocusDown: nextFocusDown,
        nextFocusForward: nextFocusForward,
        nextFocusLeft: nextFocusLeft,
        nextFocusRight: nextFocusRight,
        nextFocusUp: nextFocusUp,
        testID: testID,
        disabled: disabled,
        onPress: onPress,
        touchSoundDisabled: touchSoundDisabled,
        children: (0, _jsxRuntime.jsx)(_View.default, {
          style: buttonStyles,
          children: (0, _jsxRuntime.jsx)(_Text.default, {
            style: textStyles,
            disabled: disabled,
            children: formattedTitle
          })
        })
      });
    }
  }]);
  return Button;
}(React.Component);
var styles = _StyleSheet.default.create({
  button: _Platform.default.select({
    ios: {},
    android: {
      elevation: 4,
      backgroundColor: '#2196F3',
      borderRadius: 2
    }
  }),
  text: Object.assign({
    textAlign: 'center',
    margin: 8
  }, _Platform.default.select({
    ios: {
      color: '#007AFF',
      fontSize: 18
    },
    android: {
      color: 'white',
      fontWeight: '500'
    }
  })),
  buttonDisabled: _Platform.default.select({
    ios: {},
    android: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    }
  }),
  textDisabled: _Platform.default.select({
    ios: {
      color: '#cdcdcd'
    },
    android: {
      color: '#a1a1a1'
    }
  })
});
module.exports = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCdXR0b24iLCJwcm9wcyIsImFjY2Vzc2liaWxpdHlMYWJlbCIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsImFyaWFCdXN5IiwiYXJpYUNoZWNrZWQiLCJhcmlhRGlzYWJsZWQiLCJhcmlhRXhwYW5kZWQiLCJhcmlhTGFiZWwiLCJhcmlhU2VsZWN0ZWQiLCJpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwiY29sb3IiLCJvblByZXNzIiwidG91Y2hTb3VuZERpc2FibGVkIiwidGl0bGUiLCJoYXNUVlByZWZlcnJlZEZvY3VzIiwibmV4dEZvY3VzRG93biIsIm5leHRGb2N1c0ZvcndhcmQiLCJuZXh0Rm9jdXNMZWZ0IiwibmV4dEZvY3VzUmlnaHQiLCJuZXh0Rm9jdXNVcCIsInRlc3RJRCIsImFjY2Vzc2libGUiLCJhY2Nlc3NpYmlsaXR5QWN0aW9ucyIsImFjY2Vzc2liaWxpdHlIaW50IiwiYWNjZXNzaWJpbGl0eUxhbmd1YWdlIiwib25BY2Nlc3NpYmlsaXR5QWN0aW9uIiwiYnV0dG9uU3R5bGVzIiwic3R5bGVzIiwiYnV0dG9uIiwidGV4dFN0eWxlcyIsInRleHQiLCJQbGF0Zm9ybSIsIk9TIiwicHVzaCIsImJhY2tncm91bmRDb2xvciIsIl9hY2Nlc3NpYmlsaXR5U3RhdGUiLCJidXN5IiwiY2hlY2tlZCIsImRpc2FibGVkIiwiZXhwYW5kZWQiLCJzZWxlY3RlZCIsImJ1dHRvbkRpc2FibGVkIiwidGV4dERpc2FibGVkIiwiaW52YXJpYW50IiwiZm9ybWF0dGVkVGl0bGUiLCJ0b1VwcGVyQ2FzZSIsIlRvdWNoYWJsZSIsIlRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrIiwiVG91Y2hhYmxlT3BhY2l0eSIsIl9pbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwiUmVhY3QiLCJDb21wb25lbnQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwic2VsZWN0IiwiaW9zIiwiYW5kcm9pZCIsImVsZXZhdGlvbiIsImJvcmRlclJhZGl1cyIsInRleHRBbGlnbiIsIm1hcmdpbiIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJCdXR0b24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKiBAZ2VuZXJhdGUtZG9jc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1ByZXNzRXZlbnR9IGZyb20gJy4uL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcbmltcG9ydCB0eXBlIHtCdXR0b24gYXMgQnV0dG9uVHlwZX0gZnJvbSAnLi9CdXR0b24uZmxvdyc7XG5pbXBvcnQgdHlwZSB7XG4gIEFjY2Vzc2liaWxpdHlBY3Rpb25FdmVudCxcbiAgQWNjZXNzaWJpbGl0eUFjdGlvbkluZm8sXG4gIEFjY2Vzc2liaWxpdHlTdGF0ZSxcbn0gZnJvbSAnLi9WaWV3L1ZpZXdBY2Nlc3NpYmlsaXR5JztcblxuaW1wb3J0IFN0eWxlU2hlZXQsIHt0eXBlIENvbG9yVmFsdWV9IGZyb20gJy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi9UZXh0L1RleHQnO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2sgZnJvbSAnLi9Ub3VjaGFibGUvVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2snO1xuaW1wb3J0IFRvdWNoYWJsZU9wYWNpdHkgZnJvbSAnLi9Ub3VjaGFibGUvVG91Y2hhYmxlT3BhY2l0eSc7XG5pbXBvcnQgVmlldyBmcm9tICcuL1ZpZXcvVmlldyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgQnV0dG9uUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLyoqXG4gICAgVGV4dCB0byBkaXNwbGF5IGluc2lkZSB0aGUgYnV0dG9uLiBPbiBBbmRyb2lkIHRoZSBnaXZlbiB0aXRsZSB3aWxsIGJlXG4gICAgY29udmVydGVkIHRvIHRoZSB1cHBlcmNhc2VkIGZvcm0uXG4gICAqL1xuICB0aXRsZTogc3RyaW5nLFxuXG4gIC8qKlxuICAgIEhhbmRsZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHVzZXIgdGFwcyB0aGUgYnV0dG9uLiBUaGUgZmlyc3QgZnVuY3Rpb25cbiAgICBhcmd1bWVudCBpcyBhbiBldmVudCBpbiBmb3JtIG9mIFtQcmVzc0V2ZW50XShwcmVzc2V2ZW50KS5cbiAgICovXG4gIG9uUHJlc3M6IChldmVudD86IFByZXNzRXZlbnQpID0+IG1peGVkLFxuXG4gIC8qKlxuICAgIElmIGB0cnVlYCwgZG9lc24ndCBwbGF5IHN5c3RlbSBzb3VuZCBvbiB0b3VjaC5cblxuICAgIEBwbGF0Zm9ybSBhbmRyb2lkXG5cbiAgICBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdG91Y2hTb3VuZERpc2FibGVkPzogP2Jvb2xlYW4sXG5cbiAgLyoqXG4gICAgQ29sb3Igb2YgdGhlIHRleHQgKGlPUyksIG9yIGJhY2tncm91bmQgY29sb3Igb2YgdGhlIGJ1dHRvbiAoQW5kcm9pZCkuXG5cbiAgICBAZGVmYXVsdCB7QHBsYXRmb3JtIGFuZHJvaWR9ICcjMjE5NkYzJ1xuICAgIEBkZWZhdWx0IHtAcGxhdGZvcm0gaW9zfSAnIzAwN0FGRidcbiAgICovXG4gIGNvbG9yPzogP0NvbG9yVmFsdWUsXG5cbiAgLyoqXG4gICAgVFYgcHJlZmVycmVkIGZvY3VzLlxuXG4gICAgQHBsYXRmb3JtIHR2XG5cbiAgICBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGFzVFZQcmVmZXJyZWRGb2N1cz86ID9ib29sZWFuLFxuXG4gIC8qKlxuICAgIERlc2lnbmF0ZXMgdGhlIG5leHQgdmlldyB0byByZWNlaXZlIGZvY3VzIHdoZW4gdGhlIHVzZXIgbmF2aWdhdGVzIGRvd24uIFNlZVxuICAgIHRoZSBbQW5kcm9pZCBkb2N1bWVudGF0aW9uXVthbmRyb2lkOm5leHRGb2N1c0Rvd25dLlxuXG4gICAgW2FuZHJvaWQ6bmV4dEZvY3VzRG93bl06XG4gICAgaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9WaWV3Lmh0bWwjYXR0cl9hbmRyb2lkOm5leHRGb2N1c0Rvd25cblxuICAgIEBwbGF0Zm9ybSBhbmRyb2lkLCB0dlxuICAgKi9cbiAgbmV4dEZvY3VzRG93bj86ID9udW1iZXIsXG5cbiAgLyoqXG4gICAgRGVzaWduYXRlcyB0aGUgbmV4dCB2aWV3IHRvIHJlY2VpdmUgZm9jdXMgd2hlbiB0aGUgdXNlciBuYXZpZ2F0ZXMgZm9yd2FyZC5cbiAgICBTZWUgdGhlIFtBbmRyb2lkIGRvY3VtZW50YXRpb25dW2FuZHJvaWQ6bmV4dEZvY3VzRm9yd2FyZF0uXG5cbiAgICBbYW5kcm9pZDpuZXh0Rm9jdXNGb3J3YXJkXTpcbiAgICBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC92aWV3L1ZpZXcuaHRtbCNhdHRyX2FuZHJvaWQ6bmV4dEZvY3VzRm9yd2FyZFxuXG4gICAgQHBsYXRmb3JtIGFuZHJvaWQsIHR2XG4gICAqL1xuICBuZXh0Rm9jdXNGb3J3YXJkPzogP251bWJlcixcblxuICAvKipcbiAgICBEZXNpZ25hdGVzIHRoZSBuZXh0IHZpZXcgdG8gcmVjZWl2ZSBmb2N1cyB3aGVuIHRoZSB1c2VyIG5hdmlnYXRlcyBsZWZ0LiBTZWVcbiAgICB0aGUgW0FuZHJvaWQgZG9jdW1lbnRhdGlvbl1bYW5kcm9pZDpuZXh0Rm9jdXNMZWZ0XS5cblxuICAgIFthbmRyb2lkOm5leHRGb2N1c0xlZnRdOlxuICAgIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3JlZmVyZW5jZS9hbmRyb2lkL3ZpZXcvVmlldy5odG1sI2F0dHJfYW5kcm9pZDpuZXh0Rm9jdXNMZWZ0XG5cbiAgICBAcGxhdGZvcm0gYW5kcm9pZCwgdHZcbiAgICovXG4gIG5leHRGb2N1c0xlZnQ/OiA/bnVtYmVyLFxuXG4gIC8qKlxuICAgIERlc2lnbmF0ZXMgdGhlIG5leHQgdmlldyB0byByZWNlaXZlIGZvY3VzIHdoZW4gdGhlIHVzZXIgbmF2aWdhdGVzIHJpZ2h0LiBTZWVcbiAgICB0aGUgW0FuZHJvaWQgZG9jdW1lbnRhdGlvbl1bYW5kcm9pZDpuZXh0Rm9jdXNSaWdodF0uXG5cbiAgICBbYW5kcm9pZDpuZXh0Rm9jdXNSaWdodF06XG4gICAgaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9WaWV3Lmh0bWwjYXR0cl9hbmRyb2lkOm5leHRGb2N1c1JpZ2h0XG5cbiAgICBAcGxhdGZvcm0gYW5kcm9pZCwgdHZcbiAgICovXG4gIG5leHRGb2N1c1JpZ2h0PzogP251bWJlcixcblxuICAvKipcbiAgICBEZXNpZ25hdGVzIHRoZSBuZXh0IHZpZXcgdG8gcmVjZWl2ZSBmb2N1cyB3aGVuIHRoZSB1c2VyIG5hdmlnYXRlcyB1cC4gU2VlXG4gICAgdGhlIFtBbmRyb2lkIGRvY3VtZW50YXRpb25dW2FuZHJvaWQ6bmV4dEZvY3VzVXBdLlxuXG4gICAgW2FuZHJvaWQ6bmV4dEZvY3VzVXBdOlxuICAgIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3JlZmVyZW5jZS9hbmRyb2lkL3ZpZXcvVmlldy5odG1sI2F0dHJfYW5kcm9pZDpuZXh0Rm9jdXNVcFxuXG4gICAgQHBsYXRmb3JtIGFuZHJvaWQsIHR2XG4gICAqL1xuICBuZXh0Rm9jdXNVcD86ID9udW1iZXIsXG5cbiAgLyoqXG4gICAgVGV4dCB0byBkaXNwbGF5IGZvciBibGluZG5lc3MgYWNjZXNzaWJpbGl0eSBmZWF0dXJlcy5cbiAgICovXG4gIGFjY2Vzc2liaWxpdHlMYWJlbD86ID9zdHJpbmcsXG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgYWNjZXNzaWJpbGl0eUxhYmVsICBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcjYWNjZXNzaWJpbGl0eWxhYmVsXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvaXNzdWVzLzM0NDI0XG4gICAqL1xuICAnYXJpYS1sYWJlbCc/OiA/c3RyaW5nLFxuICAvKipcbiAgICBJZiBgdHJ1ZWAsIGRpc2FibGUgYWxsIGludGVyYWN0aW9ucyBmb3IgdGhpcyBjb21wb25lbnQuXG5cbiAgICBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ/OiA/Ym9vbGVhbixcblxuICAvKipcbiAgICBVc2VkIHRvIGxvY2F0ZSB0aGlzIHZpZXcgaW4gZW5kLXRvLWVuZCB0ZXN0cy5cbiAgICovXG4gIHRlc3RJRD86ID9zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFjY2Vzc2liaWxpdHkgcHJvcHMuXG4gICAqL1xuICBhY2Nlc3NpYmxlPzogP2Jvb2xlYW4sXG4gIGFjY2Vzc2liaWxpdHlBY3Rpb25zPzogPyRSZWFkT25seUFycmF5PEFjY2Vzc2liaWxpdHlBY3Rpb25JbmZvPixcbiAgb25BY2Nlc3NpYmlsaXR5QWN0aW9uPzogPyhldmVudDogQWNjZXNzaWJpbGl0eUFjdGlvbkV2ZW50KSA9PiBtaXhlZCxcbiAgYWNjZXNzaWJpbGl0eVN0YXRlPzogP0FjY2Vzc2liaWxpdHlTdGF0ZSxcblxuICAvKipcbiAgICogYWxpYXMgZm9yIGFjY2Vzc2liaWxpdHlTdGF0ZVxuICAgKlxuICAgKiBzZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hY2Nlc3NpYmlsaXR5I2FjY2Vzc2liaWxpdHlzdGF0ZVxuICAgKi9cbiAgJ2FyaWEtYnVzeSc/OiA/Ym9vbGVhbixcbiAgJ2FyaWEtY2hlY2tlZCc/OiA/Ym9vbGVhbiB8ICdtaXhlZCcsXG4gICdhcmlhLWRpc2FibGVkJz86ID9ib29sZWFuLFxuICAnYXJpYS1leHBhbmRlZCc/OiA/Ym9vbGVhbixcbiAgJ2FyaWEtc2VsZWN0ZWQnPzogP2Jvb2xlYW4sXG5cbiAgLyoqXG4gICAqIFtBbmRyb2lkXSBDb250cm9sbGluZyBpZiBhIHZpZXcgZmlyZXMgYWNjZXNzaWJpbGl0eSBldmVudHMgYW5kIGlmIGl0IGlzIHJlcG9ydGVkIHRvIGFjY2Vzc2liaWxpdHkgc2VydmljZXMuXG4gICAqL1xuICBpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5PzogPygnYXV0bycgfCAneWVzJyB8ICdubycgfCAnbm8taGlkZS1kZXNjZW5kYW50cycpLFxuICBhY2Nlc3NpYmlsaXR5SGludD86ID9zdHJpbmcsXG4gIGFjY2Vzc2liaWxpdHlMYW5ndWFnZT86ID9TdHJpbmdpc2gsXG58fT47XG5cbi8qKlxuICBBIGJhc2ljIGJ1dHRvbiBjb21wb25lbnQgdGhhdCBzaG91bGQgcmVuZGVyIG5pY2VseSBvbiBhbnkgcGxhdGZvcm0uIFN1cHBvcnRzIGFcbiAgbWluaW1hbCBsZXZlbCBvZiBjdXN0b21pemF0aW9uLlxuXG4gIElmIHRoaXMgYnV0dG9uIGRvZXNuJ3QgbG9vayByaWdodCBmb3IgeW91ciBhcHAsIHlvdSBjYW4gYnVpbGQgeW91ciBvd24gYnV0dG9uXG4gIHVzaW5nIFtUb3VjaGFibGVPcGFjaXR5XSh0b3VjaGFibGVvcGFjaXR5KSBvclxuICBbVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrXSh0b3VjaGFibGV3aXRob3V0ZmVlZGJhY2spLiBGb3IgaW5zcGlyYXRpb24sIGxvb2sgYXRcbiAgdGhlIFtzb3VyY2UgY29kZSBmb3IgdGhpcyBidXR0b24gY29tcG9uZW50XVtidXR0b246c291cmNlXS4gT3IsIHRha2UgYSBsb29rIGF0XG4gIHRoZSBbd2lkZSB2YXJpZXR5IG9mIGJ1dHRvbiBjb21wb25lbnRzIGJ1aWx0IGJ5IHRoZSBjb21tdW5pdHldXG4gIFtidXR0b246ZXhhbXBsZXNdLlxuXG4gIFtidXR0b246c291cmNlXTpcbiAgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9ibG9iL0hFQUQvTGlicmFyaWVzL0NvbXBvbmVudHMvQnV0dG9uLmpzXG5cbiAgW2J1dHRvbjpleGFtcGxlc106XG4gIGh0dHBzOi8vanMuY29hY2gvP21lbnUlNUJjb2xsZWN0aW9ucyU1RD1SZWFjdCUyME5hdGl2ZSZwYWdlPTEmcXVlcnk9YnV0dG9uXG5cbiAgYGBganN4XG4gIDxCdXR0b25cbiAgICBvblByZXNzPXtvblByZXNzTGVhcm5Nb3JlfVxuICAgIHRpdGxlPVwiTGVhcm4gTW9yZVwiXG4gICAgY29sb3I9XCIjODQxNTg0XCJcbiAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9XCJMZWFybiBtb3JlIGFib3V0IHRoaXMgcHVycGxlIGJ1dHRvblwiXG4gIC8+XG4gIGBgYFxuXG4gIGBgYFNuYWNrUGxheWVyIG5hbWU9QnV0dG9uJTIwRXhhbXBsZVxuICBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuICBpbXBvcnQgeyBTdHlsZVNoZWV0LCBCdXR0b24sIFZpZXcsIFNhZmVBcmVhVmlldywgVGV4dCwgQWxlcnQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG4gIGNvbnN0IFNlcGFyYXRvciA9ICgpID0+IChcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLnNlcGFyYXRvcn0gLz5cbiAgKTtcblxuICBjb25zdCBBcHAgPSAoKSA9PiAoXG4gICAgPFNhZmVBcmVhVmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8Vmlldz5cbiAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy50aXRsZX0+XG4gICAgICAgICAgVGhlIHRpdGxlIGFuZCBvblByZXNzIGhhbmRsZXIgYXJlIHJlcXVpcmVkLiBJdCBpcyByZWNvbW1lbmRlZCB0byBzZXQgYWNjZXNzaWJpbGl0eUxhYmVsIHRvIGhlbHAgbWFrZSB5b3VyIGFwcCB1c2FibGUgYnkgZXZlcnlvbmUuXG4gICAgICAgIDwvVGV4dD5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHRpdGxlPVwiUHJlc3MgbWVcIlxuICAgICAgICAgIG9uUHJlc3M9eygpID0+IEFsZXJ0LmFsZXJ0KCdTaW1wbGUgQnV0dG9uIHByZXNzZWQnKX1cbiAgICAgICAgLz5cbiAgICAgIDwvVmlldz5cbiAgICAgIDxTZXBhcmF0b3IgLz5cbiAgICAgIDxWaWV3PlxuICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnRpdGxlfT5cbiAgICAgICAgICBBZGp1c3QgdGhlIGNvbG9yIGluIGEgd2F5IHRoYXQgbG9va3Mgc3RhbmRhcmQgb24gZWFjaCBwbGF0Zm9ybS4gT24gIGlPUywgdGhlIGNvbG9yIHByb3AgY29udHJvbHMgdGhlIGNvbG9yIG9mIHRoZSB0ZXh0LiBPbiBBbmRyb2lkLCB0aGUgY29sb3IgYWRqdXN0cyB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUgYnV0dG9uLlxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB0aXRsZT1cIlByZXNzIG1lXCJcbiAgICAgICAgICBjb2xvcj1cIiNmMTk0ZmZcIlxuICAgICAgICAgIG9uUHJlc3M9eygpID0+IEFsZXJ0LmFsZXJ0KCdCdXR0b24gd2l0aCBhZGp1c3RlZCBjb2xvciBwcmVzc2VkJyl9XG4gICAgICAgIC8+XG4gICAgICA8L1ZpZXc+XG4gICAgICA8U2VwYXJhdG9yIC8+XG4gICAgICA8Vmlldz5cbiAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy50aXRsZX0+XG4gICAgICAgICAgQWxsIGludGVyYWN0aW9uIGZvciB0aGUgY29tcG9uZW50IGFyZSBkaXNhYmxlZC5cbiAgICAgICAgPC9UZXh0PlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdGl0bGU9XCJQcmVzcyBtZVwiXG4gICAgICAgICAgZGlzYWJsZWRcbiAgICAgICAgICBvblByZXNzPXsoKSA9PiBBbGVydC5hbGVydCgnQ2Fubm90IHByZXNzIHRoaXMgb25lJyl9XG4gICAgICAgIC8+XG4gICAgICA8L1ZpZXc+XG4gICAgICA8U2VwYXJhdG9yIC8+XG4gICAgICA8Vmlldz5cbiAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy50aXRsZX0+XG4gICAgICAgICAgVGhpcyBsYXlvdXQgc3RyYXRlZ3kgbGV0cyB0aGUgdGl0bGUgZGVmaW5lIHRoZSB3aWR0aCBvZiB0aGUgYnV0dG9uLlxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuZml4VG9UZXh0fT5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0aXRsZT1cIkxlZnQgYnV0dG9uXCJcbiAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IEFsZXJ0LmFsZXJ0KCdMZWZ0IGJ1dHRvbiBwcmVzc2VkJyl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0aXRsZT1cIlJpZ2h0IGJ1dHRvblwiXG4gICAgICAgICAgICBvblByZXNzPXsoKSA9PiBBbGVydC5hbGVydCgnUmlnaHQgYnV0dG9uIHByZXNzZWQnKX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1ZpZXc+XG4gICAgPC9TYWZlQXJlYVZpZXc+XG4gICk7XG5cbiAgY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgZmxleDogMSxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIG1hcmdpbkhvcml6b250YWw6IDE2LFxuICAgIH0sXG4gICAgdGl0bGU6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBtYXJnaW5WZXJ0aWNhbDogOCxcbiAgICB9LFxuICAgIGZpeFRvVGV4dDoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgIH0sXG4gICAgc2VwYXJhdG9yOiB7XG4gICAgICBtYXJnaW5WZXJ0aWNhbDogOCxcbiAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiAnIzczNzM3MycsXG4gICAgICBib3JkZXJCb3R0b21XaWR0aDogU3R5bGVTaGVldC5oYWlybGluZVdpZHRoLFxuICAgIH0sXG4gIH0pO1xuXG4gIGV4cG9ydCBkZWZhdWx0IEFwcDtcbiAgYGBgXG4gKi9cblxuY2xhc3MgQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEJ1dHRvblByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICBjb25zdCB7XG4gICAgICBhY2Nlc3NpYmlsaXR5TGFiZWwsXG4gICAgICBhY2Nlc3NpYmlsaXR5U3RhdGUsXG4gICAgICAnYXJpYS1idXN5JzogYXJpYUJ1c3ksXG4gICAgICAnYXJpYS1jaGVja2VkJzogYXJpYUNoZWNrZWQsXG4gICAgICAnYXJpYS1kaXNhYmxlZCc6IGFyaWFEaXNhYmxlZCxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogYXJpYUV4cGFuZGVkLFxuICAgICAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gICAgICAnYXJpYS1zZWxlY3RlZCc6IGFyaWFTZWxlY3RlZCxcbiAgICAgIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHksXG4gICAgICBjb2xvcixcbiAgICAgIG9uUHJlc3MsXG4gICAgICB0b3VjaFNvdW5kRGlzYWJsZWQsXG4gICAgICB0aXRsZSxcbiAgICAgIGhhc1RWUHJlZmVycmVkRm9jdXMsXG4gICAgICBuZXh0Rm9jdXNEb3duLFxuICAgICAgbmV4dEZvY3VzRm9yd2FyZCxcbiAgICAgIG5leHRGb2N1c0xlZnQsXG4gICAgICBuZXh0Rm9jdXNSaWdodCxcbiAgICAgIG5leHRGb2N1c1VwLFxuICAgICAgdGVzdElELFxuICAgICAgYWNjZXNzaWJsZSxcbiAgICAgIGFjY2Vzc2liaWxpdHlBY3Rpb25zLFxuICAgICAgYWNjZXNzaWJpbGl0eUhpbnQsXG4gICAgICBhY2Nlc3NpYmlsaXR5TGFuZ3VhZ2UsXG4gICAgICBvbkFjY2Vzc2liaWxpdHlBY3Rpb24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgYnV0dG9uU3R5bGVzID0gW3N0eWxlcy5idXR0b25dO1xuICAgIGNvbnN0IHRleHRTdHlsZXMgPSBbc3R5bGVzLnRleHRdO1xuICAgIGlmIChjb2xvcikge1xuICAgICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgICB0ZXh0U3R5bGVzLnB1c2goe2NvbG9yOiBjb2xvcn0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uU3R5bGVzLnB1c2goe2JhY2tncm91bmRDb2xvcjogY29sb3J9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgX2FjY2Vzc2liaWxpdHlTdGF0ZSA9IHtcbiAgICAgIGJ1c3k6IGFyaWFCdXN5ID8/IGFjY2Vzc2liaWxpdHlTdGF0ZT8uYnVzeSxcbiAgICAgIGNoZWNrZWQ6IGFyaWFDaGVja2VkID8/IGFjY2Vzc2liaWxpdHlTdGF0ZT8uY2hlY2tlZCxcbiAgICAgIGRpc2FibGVkOiBhcmlhRGlzYWJsZWQgPz8gYWNjZXNzaWJpbGl0eVN0YXRlPy5kaXNhYmxlZCxcbiAgICAgIGV4cGFuZGVkOiBhcmlhRXhwYW5kZWQgPz8gYWNjZXNzaWJpbGl0eVN0YXRlPy5leHBhbmRlZCxcbiAgICAgIHNlbGVjdGVkOiBhcmlhU2VsZWN0ZWQgPz8gYWNjZXNzaWJpbGl0eVN0YXRlPy5zZWxlY3RlZCxcbiAgICB9O1xuXG4gICAgY29uc3QgZGlzYWJsZWQgPVxuICAgICAgdGhpcy5wcm9wcy5kaXNhYmxlZCAhPSBudWxsXG4gICAgICAgID8gdGhpcy5wcm9wcy5kaXNhYmxlZFxuICAgICAgICA6IF9hY2Nlc3NpYmlsaXR5U3RhdGU/LmRpc2FibGVkO1xuXG4gICAgX2FjY2Vzc2liaWxpdHlTdGF0ZSA9XG4gICAgICBkaXNhYmxlZCAhPT0gX2FjY2Vzc2liaWxpdHlTdGF0ZT8uZGlzYWJsZWRcbiAgICAgICAgPyB7Li4uX2FjY2Vzc2liaWxpdHlTdGF0ZSwgZGlzYWJsZWR9XG4gICAgICAgIDogX2FjY2Vzc2liaWxpdHlTdGF0ZTtcblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgYnV0dG9uU3R5bGVzLnB1c2goc3R5bGVzLmJ1dHRvbkRpc2FibGVkKTtcbiAgICAgIHRleHRTdHlsZXMucHVzaChzdHlsZXMudGV4dERpc2FibGVkKTtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnLFxuICAgICAgJ1RoZSB0aXRsZSBwcm9wIG9mIGEgQnV0dG9uIG11c3QgYmUgYSBzdHJpbmcnLFxuICAgICk7XG4gICAgY29uc3QgZm9ybWF0dGVkVGl0bGUgPVxuICAgICAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyA/IHRpdGxlLnRvVXBwZXJDYXNlKCkgOiB0aXRsZTtcbiAgICBjb25zdCBUb3VjaGFibGUgPVxuICAgICAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyA/IFRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrIDogVG91Y2hhYmxlT3BhY2l0eTtcblxuICAgIC8vIElmIGBub2AgaXMgc3BlY2lmaWVkIGZvciBgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eWAsIGl0IHdpbGwgYmUgY2hhbmdlZCB0byBgbm8taGlkZS1kZXNjZW5kYW50c2AgYmVjYXVzZSB0aGUgdGV4dCBpbnNpZGUgc2hvdWxkIG5vdCBiZSBmb2N1c2VkLlxuICAgIGNvbnN0IF9pbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5ID1cbiAgICAgIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHkgPT09ICdubydcbiAgICAgICAgPyAnbm8taGlkZS1kZXNjZW5kYW50cydcbiAgICAgICAgOiBpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb3VjaGFibGVcbiAgICAgICAgYWNjZXNzaWJsZT17YWNjZXNzaWJsZX1cbiAgICAgICAgYWNjZXNzaWJpbGl0eUFjdGlvbnM9e2FjY2Vzc2liaWxpdHlBY3Rpb25zfVxuICAgICAgICBvbkFjY2Vzc2liaWxpdHlBY3Rpb249e29uQWNjZXNzaWJpbGl0eUFjdGlvbn1cbiAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPXthcmlhTGFiZWwgfHwgYWNjZXNzaWJpbGl0eUxhYmVsfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5SGludD17YWNjZXNzaWJpbGl0eUhpbnR9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlMYW5ndWFnZT17YWNjZXNzaWJpbGl0eUxhbmd1YWdlfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT1cImJ1dHRvblwiXG4gICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZT17X2FjY2Vzc2liaWxpdHlTdGF0ZX1cbiAgICAgICAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eT17X2ltcG9ydGFudEZvckFjY2Vzc2liaWxpdHl9XG4gICAgICAgIGhhc1RWUHJlZmVycmVkRm9jdXM9e2hhc1RWUHJlZmVycmVkRm9jdXN9XG4gICAgICAgIG5leHRGb2N1c0Rvd249e25leHRGb2N1c0Rvd259XG4gICAgICAgIG5leHRGb2N1c0ZvcndhcmQ9e25leHRGb2N1c0ZvcndhcmR9XG4gICAgICAgIG5leHRGb2N1c0xlZnQ9e25leHRGb2N1c0xlZnR9XG4gICAgICAgIG5leHRGb2N1c1JpZ2h0PXtuZXh0Rm9jdXNSaWdodH1cbiAgICAgICAgbmV4dEZvY3VzVXA9e25leHRGb2N1c1VwfVxuICAgICAgICB0ZXN0SUQ9e3Rlc3RJRH1cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICBvblByZXNzPXtvblByZXNzfVxuICAgICAgICB0b3VjaFNvdW5kRGlzYWJsZWQ9e3RvdWNoU291bmREaXNhYmxlZH0+XG4gICAgICAgIDxWaWV3IHN0eWxlPXtidXR0b25TdHlsZXN9PlxuICAgICAgICAgIDxUZXh0IHN0eWxlPXt0ZXh0U3R5bGVzfSBkaXNhYmxlZD17ZGlzYWJsZWR9PlxuICAgICAgICAgICAge2Zvcm1hdHRlZFRpdGxlfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9Ub3VjaGFibGU+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJ1dHRvbjogUGxhdGZvcm0uc2VsZWN0KHtcbiAgICBpb3M6IHt9LFxuICAgIGFuZHJvaWQ6IHtcbiAgICAgIGVsZXZhdGlvbjogNCxcbiAgICAgIC8vIE1hdGVyaWFsIGRlc2lnbiBibHVlIGZyb20gaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL3N0eWxlL2NvbG9yLmh0bWwjY29sb3ItY29sb3ItcGFsZXR0ZVxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzIxOTZGMycsXG4gICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgfSxcbiAgfSksXG4gIHRleHQ6IHtcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIG1hcmdpbjogOCxcbiAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgaW9zOiB7XG4gICAgICAgIC8vIGlPUyBibHVlIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2lvcy9odW1hbi1pbnRlcmZhY2UtZ3VpZGVsaW5lcy92aXN1YWwtZGVzaWduL2NvbG9yL1xuICAgICAgICBjb2xvcjogJyMwMDdBRkYnLFxuICAgICAgICBmb250U2l6ZTogMTgsXG4gICAgICB9LFxuICAgICAgYW5kcm9pZDoge1xuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgZm9udFdlaWdodDogJzUwMCcsXG4gICAgICB9LFxuICAgIH0pLFxuICB9LFxuICBidXR0b25EaXNhYmxlZDogUGxhdGZvcm0uc2VsZWN0KHtcbiAgICBpb3M6IHt9LFxuICAgIGFuZHJvaWQ6IHtcbiAgICAgIGVsZXZhdGlvbjogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJyNkZmRmZGYnLFxuICAgIH0sXG4gIH0pLFxuICB0ZXh0RGlzYWJsZWQ6IFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgaW9zOiB7XG4gICAgICBjb2xvcjogJyNjZGNkY2QnLFxuICAgIH0sXG4gICAgYW5kcm9pZDoge1xuICAgICAgY29sb3I6ICcjYTFhMWExJyxcbiAgICB9LFxuICB9KSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChCdXR0b246IEJ1dHRvblR5cGUpO1xuIl0sIm1hcHBpbmdzIjoiQUFXQSxZQUFZOztBQUFDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBK0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBK1B6QkEsTUFBTTtFQUFBO0VBQUE7RUFBQTtJQUFBO0lBQUE7RUFBQTtFQUFBO0lBQUE7SUFBQSxPQUNWLGtCQUFxQjtNQUFBO01BQ25CLGtCQTBCSSxJQUFJLENBQUNDLEtBQUs7UUF6QlpDLGtCQUFrQixlQUFsQkEsa0JBQWtCO1FBQ2xCQyxrQkFBa0IsZUFBbEJBLGtCQUFrQjtRQUNMQyxRQUFRLGVBQXJCLFdBQVc7UUFDS0MsV0FBVyxlQUEzQixjQUFjO1FBQ0dDLFlBQVksZUFBN0IsZUFBZTtRQUNFQyxZQUFZLGVBQTdCLGVBQWU7UUFDREMsU0FBUyxlQUF2QixZQUFZO1FBQ0tDLFlBQVksZUFBN0IsZUFBZTtRQUNmQyx5QkFBeUIsZUFBekJBLHlCQUF5QjtRQUN6QkMsS0FBSyxlQUFMQSxLQUFLO1FBQ0xDLE9BQU8sZUFBUEEsT0FBTztRQUNQQyxrQkFBa0IsZUFBbEJBLGtCQUFrQjtRQUNsQkMsS0FBSyxlQUFMQSxLQUFLO1FBQ0xDLG1CQUFtQixlQUFuQkEsbUJBQW1CO1FBQ25CQyxhQUFhLGVBQWJBLGFBQWE7UUFDYkMsZ0JBQWdCLGVBQWhCQSxnQkFBZ0I7UUFDaEJDLGFBQWEsZUFBYkEsYUFBYTtRQUNiQyxjQUFjLGVBQWRBLGNBQWM7UUFDZEMsV0FBVyxlQUFYQSxXQUFXO1FBQ1hDLE1BQU0sZUFBTkEsTUFBTTtRQUNOQyxVQUFVLGVBQVZBLFVBQVU7UUFDVkMsb0JBQW9CLGVBQXBCQSxvQkFBb0I7UUFDcEJDLGlCQUFpQixlQUFqQkEsaUJBQWlCO1FBQ2pCQyxxQkFBcUIsZUFBckJBLHFCQUFxQjtRQUNyQkMscUJBQXFC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