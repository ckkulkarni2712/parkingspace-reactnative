f100e59ad442bd92e843246d0ad65d4b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveTextContent = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
function collectNormalizedText(element) {
  var childrenText = collectChildrenText(element).join('');
  return (0, utils_1.normalize)(childrenText);
}
function collectChildrenText(element) {
  if (typeof element === 'string') return [element];
  if (!(element != null && element.children)) return [];
  var result = [];
  element.children.forEach(function (child) {
    result.push.apply(result, (0, _toConsumableArray2.default)(collectChildrenText(child)));
  });
  return result;
}
function toHaveTextContent(element, checkWith) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toHaveTextContent, this);
  var textContent = collectNormalizedText(element);
  return {
    pass: (0, utils_1.matches)(textContent, checkWith),
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      return (0, utils_1.getMessage)((0, jest_matcher_utils_1.matcherHint)((_this.isNot ? '.not' : '') + ".toHaveTextContent", 'element', ''), "Expected element " + to + " have text content", checkWith, 'Received', textContent);
    }
  };
}
exports.toHaveTextContent = toHaveTextContent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZVRleHRDb250ZW50IiwiamVzdF9tYXRjaGVyX3V0aWxzXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsImNvbGxlY3ROb3JtYWxpemVkVGV4dCIsImVsZW1lbnQiLCJjaGlsZHJlblRleHQiLCJjb2xsZWN0Q2hpbGRyZW5UZXh0Iiwiam9pbiIsIm5vcm1hbGl6ZSIsImNoaWxkcmVuIiwicmVzdWx0IiwiZm9yRWFjaCIsImNoaWxkIiwicHVzaCIsImNoZWNrV2l0aCIsImNoZWNrUmVhY3RFbGVtZW50IiwidGV4dENvbnRlbnQiLCJwYXNzIiwibWF0Y2hlcyIsIm1lc3NhZ2UiLCJ0byIsImlzTm90IiwiZ2V0TWVzc2FnZSIsIm1hdGNoZXJIaW50Il0sInNvdXJjZXMiOlsidG8taGF2ZS10ZXh0LWNvbnRlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvSGF2ZVRleHRDb250ZW50ID0gdm9pZCAwO1xuY29uc3QgamVzdF9tYXRjaGVyX3V0aWxzXzEgPSByZXF1aXJlKFwiamVzdC1tYXRjaGVyLXV0aWxzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuZnVuY3Rpb24gY29sbGVjdE5vcm1hbGl6ZWRUZXh0KGVsZW1lbnQpIHtcbiAgICBjb25zdCBjaGlsZHJlblRleHQgPSBjb2xsZWN0Q2hpbGRyZW5UZXh0KGVsZW1lbnQpLmpvaW4oJycpO1xuICAgIHJldHVybiAoMCwgdXRpbHNfMS5ub3JtYWxpemUpKGNoaWxkcmVuVGV4dCk7XG59XG5mdW5jdGlvbiBjb2xsZWN0Q2hpbGRyZW5UZXh0KGVsZW1lbnQpIHtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gW2VsZW1lbnRdO1xuICAgIGlmICghZWxlbWVudD8uY2hpbGRyZW4pXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBlbGVtZW50LmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgIHJlc3VsdC5wdXNoKC4uLmNvbGxlY3RDaGlsZHJlblRleHQoY2hpbGQpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gdG9IYXZlVGV4dENvbnRlbnQoZWxlbWVudCwgY2hlY2tXaXRoKSB7XG4gICAgKDAsIHV0aWxzXzEuY2hlY2tSZWFjdEVsZW1lbnQpKGVsZW1lbnQsIHRvSGF2ZVRleHRDb250ZW50LCB0aGlzKTtcbiAgICBjb25zdCB0ZXh0Q29udGVudCA9IGNvbGxlY3ROb3JtYWxpemVkVGV4dChlbGVtZW50KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXNzOiAoMCwgdXRpbHNfMS5tYXRjaGVzKSh0ZXh0Q29udGVudCwgY2hlY2tXaXRoKSxcbiAgICAgICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG8gPSB0aGlzLmlzTm90ID8gJ25vdCB0bycgOiAndG8nO1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmdldE1lc3NhZ2UpKCgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5tYXRjaGVySGludCkoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0hhdmVUZXh0Q29udGVudGAsICdlbGVtZW50JywgJycpLCBgRXhwZWN0ZWQgZWxlbWVudCAke3RvfSBoYXZlIHRleHQgY29udGVudGAsIGNoZWNrV2l0aCwgJ1JlY2VpdmVkJywgdGV4dENvbnRlbnQpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLnRvSGF2ZVRleHRDb250ZW50ID0gdG9IYXZlVGV4dENvbnRlbnQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUM7QUFBQTtBQUNiQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0UsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQ2xDLElBQU1DLG9CQUFvQixHQUFHQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDMUQsSUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQVNFLHFCQUFxQixDQUFDQyxPQUFPLEVBQUU7RUFDcEMsSUFBTUMsWUFBWSxHQUFHQyxtQkFBbUIsQ0FBQ0YsT0FBTyxDQUFDLENBQUNHLElBQUksQ0FBQyxFQUFFLENBQUM7RUFDMUQsT0FBTyxDQUFDLENBQUMsRUFBRUwsT0FBTyxDQUFDTSxTQUFTLEVBQUVILFlBQVksQ0FBQztBQUMvQztBQUNBLFNBQVNDLG1CQUFtQixDQUFDRixPQUFPLEVBQUU7RUFDbEMsSUFBSSxPQUFPQSxPQUFPLEtBQUssUUFBUSxFQUMzQixPQUFPLENBQUNBLE9BQU8sQ0FBQztFQUNwQixJQUFJLEVBQUNBLE9BQU8sWUFBUEEsT0FBTyxDQUFFSyxRQUFRLEdBQ2xCLE9BQU8sRUFBRTtFQUNiLElBQU1DLE1BQU0sR0FBRyxFQUFFO0VBQ2pCTixPQUFPLENBQUNLLFFBQVEsQ0FBQ0UsT0FBTyxDQUFDLFVBQUNDLEtBQUssRUFBSztJQUNoQ0YsTUFBTSxDQUFDRyxJQUFJLE9BQVhILE1BQU0sbUNBQVNKLG1CQUFtQixDQUFDTSxLQUFLLENBQUMsRUFBQztFQUM5QyxDQUFDLENBQUM7RUFDRixPQUFPRixNQUFNO0FBQ2pCO0FBQ0EsU0FBU1gsaUJBQWlCLENBQUNLLE9BQU8sRUFBRVUsU0FBUyxFQUFFO0VBQUE7RUFDM0MsQ0FBQyxDQUFDLEVBQUVaLE9BQU8sQ0FBQ2EsaUJBQWlCLEVBQUVYLE9BQU8sRUFBRUwsaUJBQWlCLEVBQUUsSUFBSSxDQUFDO0VBQ2hFLElBQU1pQixXQUFXLEdBQUdiLHFCQUFxQixDQUFDQyxPQUFPLENBQUM7RUFDbEQsT0FBTztJQUNIYSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUVmLE9BQU8sQ0FBQ2dCLE9BQU8sRUFBRUYsV0FBVyxFQUFFRixTQUFTLENBQUM7SUFDbERLLE9BQU8sRUFBRSxtQkFBTTtNQUNYLElBQU1DLEVBQUUsR0FBRyxLQUFJLENBQUNDLEtBQUssR0FBRyxRQUFRLEdBQUcsSUFBSTtNQUN2QyxPQUFPLENBQUMsQ0FBQyxFQUFFbkIsT0FBTyxDQUFDb0IsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFdEIsb0JBQW9CLENBQUN1QixXQUFXLEdBQUssS0FBSSxDQUFDRixLQUFLLEdBQUcsTUFBTSxHQUFHLEVBQUUsMEJBQXNCLFNBQVMsRUFBRSxFQUFFLENBQUMsd0JBQXNCRCxFQUFFLHlCQUFzQk4sU0FBUyxFQUFFLFVBQVUsRUFBRUUsV0FBVyxDQUFDO0lBQ3pOO0VBQ0osQ0FBQztBQUNMO0FBQ0FuQixPQUFPLENBQUNFLGlCQUFpQixHQUFHQSxpQkFBaUIifQ==