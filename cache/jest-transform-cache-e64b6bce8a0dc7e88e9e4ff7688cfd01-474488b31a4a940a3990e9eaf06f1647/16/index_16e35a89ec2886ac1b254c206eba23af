0733c4f3029862d07952fea973daeeed
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var ansiStyles = require('ansi-styles');
var _require = require('supports-color'),
  stdoutColor = _require.stdout,
  stderrColor = _require.stderr;
var _require2 = require('./util'),
  stringReplaceAll = _require2.stringReplaceAll,
  stringEncaseCRLFWithFirstIndex = _require2.stringEncaseCRLFWithFirstIndex;
var isArray = Array.isArray;
var levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];
var styles = Object.create(null);
var applyOptions = function applyOptions(object) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
    throw new Error('The `level` option should be an integer from 0 to 3');
  }
  var colorLevel = stdoutColor ? stdoutColor.level : 0;
  object.level = options.level === undefined ? colorLevel : options.level;
};
var ChalkClass = (0, _createClass2.default)(function ChalkClass(options) {
  (0, _classCallCheck2.default)(this, ChalkClass);
  return chalkFactory(options);
});
var chalkFactory = function chalkFactory(options) {
  var chalk = {};
  applyOptions(chalk, options);
  chalk.template = function () {
    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
      arguments_[_key] = arguments[_key];
    }
    return chalkTag.apply(void 0, [chalk.template].concat(arguments_));
  };
  Object.setPrototypeOf(chalk, Chalk.prototype);
  Object.setPrototypeOf(chalk.template, chalk);
  chalk.template.constructor = function () {
    throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
  };
  chalk.template.Instance = ChalkClass;
  return chalk.template;
};
function Chalk(options) {
  return chalkFactory(options);
}
var _loop = function _loop(styleName, style) {
  styles[styleName] = {
    get: function get() {
      var builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
      Object.defineProperty(this, styleName, {
        value: builder
      });
      return builder;
    }
  };
};
for (var _ref of Object.entries(ansiStyles)) {
  var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
  var styleName = _ref2[0];
  var style = _ref2[1];
  _loop(styleName, style);
}
styles.visible = {
  get: function get() {
    var builder = createBuilder(this, this._styler, true);
    Object.defineProperty(this, 'visible', {
      value: builder
    });
    return builder;
  }
};
var usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];
var _loop2 = function _loop2(model) {
  styles[model] = {
    get: function get() {
      var level = this.level;
      return function () {
        var _ansiStyles$color$lev;
        var styler = createStyler((_ansiStyles$color$lev = ansiStyles.color[levelMapping[level]])[model].apply(_ansiStyles$color$lev, arguments), ansiStyles.color.close, this._styler);
        return createBuilder(this, styler, this._isEmpty);
      };
    }
  };
};
for (var model of usedModels) {
  _loop2(model);
}
var _loop3 = function _loop3(_model) {
  var bgModel = 'bg' + _model[0].toUpperCase() + _model.slice(1);
  styles[bgModel] = {
    get: function get() {
      var level = this.level;
      return function () {
        var _ansiStyles$bgColor$l;
        var styler = createStyler((_ansiStyles$bgColor$l = ansiStyles.bgColor[levelMapping[level]])[_model].apply(_ansiStyles$bgColor$l, arguments), ansiStyles.bgColor.close, this._styler);
        return createBuilder(this, styler, this._isEmpty);
      };
    }
  };
};
for (var _model of usedModels) {
  _loop3(_model);
}
var proto = Object.defineProperties(function () {}, Object.assign({}, styles, {
  level: {
    enumerable: true,
    get: function get() {
      return this._generator.level;
    },
    set: function set(level) {
      this._generator.level = level;
    }
  }
}));
var createStyler = function createStyler(open, close, parent) {
  var openAll;
  var closeAll;
  if (parent === undefined) {
    openAll = open;
    closeAll = close;
  } else {
    openAll = parent.openAll + open;
    closeAll = close + parent.closeAll;
  }
  return {
    open: open,
    close: close,
    openAll: openAll,
    closeAll: closeAll,
    parent: parent
  };
};
var createBuilder = function createBuilder(self, _styler, _isEmpty) {
  var builder = function builder() {
    for (var _len2 = arguments.length, arguments_ = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      arguments_[_key2] = arguments[_key2];
    }
    if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
      return applyStyle(builder, chalkTag.apply(void 0, [builder].concat(arguments_)));
    }
    return applyStyle(builder, arguments_.length === 1 ? '' + arguments_[0] : arguments_.join(' '));
  };
  Object.setPrototypeOf(builder, proto);
  builder._generator = self;
  builder._styler = _styler;
  builder._isEmpty = _isEmpty;
  return builder;
};
var applyStyle = function applyStyle(self, string) {
  if (self.level <= 0 || !string) {
    return self._isEmpty ? '' : string;
  }
  var styler = self._styler;
  if (styler === undefined) {
    return string;
  }
  var _styler2 = styler,
    openAll = _styler2.openAll,
    closeAll = _styler2.closeAll;
  if (string.indexOf("\x1B") !== -1) {
    while (styler !== undefined) {
      string = stringReplaceAll(string, styler.close, styler.open);
      styler = styler.parent;
    }
  }
  var lfIndex = string.indexOf('\n');
  if (lfIndex !== -1) {
    string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
  }
  return openAll + string + closeAll;
};
var template;
var chalkTag = function chalkTag(chalk) {
  for (var _len3 = arguments.length, strings = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    strings[_key3 - 1] = arguments[_key3];
  }
  var firstString = strings[0];
  if (!isArray(firstString) || !isArray(firstString.raw)) {
    return strings.join(' ');
  }
  var arguments_ = strings.slice(1);
  var parts = [firstString.raw[0]];
  for (var i = 1; i < firstString.length; i++) {
    parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'), String(firstString.raw[i]));
  }
  if (template === undefined) {
    template = require('./templates');
  }
  return template(chalk, parts.join(''));
};
Object.defineProperties(Chalk.prototype, styles);
var chalk = Chalk();
chalk.supportsColor = stdoutColor;
chalk.stderr = Chalk({
  level: stderrColor ? stderrColor.level : 0
});
chalk.stderr.supportsColor = stderrColor;
module.exports = chalk;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,