{"version":3,"names":["mock","useNavigation","jest","fn","mockReturnValue","navigate","feature","loadFeature","uuid","uuidv4","store","defineFeature","test","given","when","then","and","navigation","configureStore","reducer","parkingSpaces","parkingSlice","screen","render","expect","toBeTruthy","input","getByPlaceholderText","button","getByTestId","fireEvent","changeText","not","toBeDisabled"],"sources":["base.steps.tsx"],"sourcesContent":["import React from 'react';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport 'react-native-get-random-values';\r\nimport {fireEvent, render, waitFor} from '@testing-library/react-native';\r\nimport '@testing-library/jest-native/extend-expect';\r\nimport {loadFeature, defineFeature} from 'jest-cucumber';\r\nimport {useNavigation} from '@react-navigation/native';\r\nimport {NativeStackNavigationProp} from '@react-navigation/native-stack';\r\nconst feature = loadFeature('./features/base.feature');\r\nimport {Provider} from 'react-redux';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\nimport parkingSlice, {\r\n  initializeParkingLot,\r\n} from '../../App/Reducer/parkingSlice';\r\nimport Base from '../../App/Base';\r\nconst uuid = uuidv4();\r\njest.mock('@react-navigation/native', () => {\r\n  return {\r\n    useNavigation: jest.fn().mockReturnValue({\r\n      navigate: jest.fn(),\r\n    }),\r\n  };\r\n});\r\nlet store: any;\r\ndefineFeature(feature, test => {\r\n  test('User enters the number of spaces', ({given, when, then, and}) => {\r\n    const navigation = useNavigation<NativeStackNavigationProp<any>>();\r\n    store = configureStore({\r\n      reducer: {\r\n        parkingSpaces: parkingSlice,\r\n      },\r\n    });\r\n    const screen = render(\r\n      <Provider store={store}>\r\n        <Base />\r\n      </Provider>,\r\n    );\r\n    given('the user is on the home page', () => {\r\n      expect(screen).toBeTruthy();\r\n    });\r\n    when('the user enters some input in the input field and submits', () => {\r\n      const input = screen.getByPlaceholderText(\r\n        'Enter the number of parking spaces',\r\n      );\r\n      const button = screen.getByTestId('submit-button');\r\n      fireEvent.changeText(input, '5');\r\n      expect(button).not.toBeDisabled();\r\n    });\r\n  });\r\n});\r\n/*const input = getByPlaceholderText('Enter the number of parking spaces');\r\n    const button = getByTestId('submit-button');\r\n    fireEvent.changeText(input, '5');\r\n    expect(button).not.toBeDisabled();*/\r\n"],"mappings":"AAgBA,cAAKA,IAAI,CAAC,0BAA0B,EAAE,YAAM;EAC1C,OAAO;IACLC,aAAa,EAAEC,IAAI,CAACC,EAAE,EAAE,CAACC,eAAe,CAAC;MACvCC,QAAQ,EAAEH,IAAI,CAACC,EAAE;IACnB,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAAC;AAtBH;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAAkC;AAAA;EAAA;IAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AANlC,IAAMG,OAAO,GAAG,IAAAC,yBAAW,EAAC,yBAAyB,CAAC;AAOtD,IAAMC,IAAI,GAAG,IAAAC,QAAM,GAAE;AAQrB,IAAIC,KAAU;AACd,IAAAC,2BAAa,EAACL,OAAO,EAAE,UAAAM,IAAI,EAAI;EAC7BA,IAAI,CAAC,kCAAkC,EAAE,gBAA8B;IAAA,IAA5BC,KAAK,QAALA,KAAK;MAAEC,IAAI,QAAJA,IAAI;MAAEC,IAAI,QAAJA,IAAI;MAAEC,GAAG,QAAHA,GAAG;IAC/D,IAAMC,UAAU,GAAG,IAAAhB,qBAAa,GAAkC;IAClES,KAAK,GAAG,IAAAQ,uBAAc,EAAC;MACrBC,OAAO,EAAE;QACPC,aAAa,EAAEC;MACjB;IACF,CAAC,CAAC;IACF,IAAMC,MAAM,GAAG,IAAAC,mBAAM,EACnB,qBAAC,oBAAQ;MAAC,KAAK,EAAEb,KAAM;MAAA,UACrB,qBAAC,aAAI;IAAG,EACC,CACZ;IACDG,KAAK,CAAC,8BAA8B,EAAE,YAAM;MAC1CW,MAAM,CAACF,MAAM,CAAC,CAACG,UAAU,EAAE;IAC7B,CAAC,CAAC;IACFX,IAAI,CAAC,2DAA2D,EAAE,YAAM;MACtE,IAAMY,KAAK,GAAGJ,MAAM,CAACK,oBAAoB,CACvC,oCAAoC,CACrC;MACD,IAAMC,MAAM,GAAGN,MAAM,CAACO,WAAW,CAAC,eAAe,CAAC;MAClDC,sBAAS,CAACC,UAAU,CAACL,KAAK,EAAE,GAAG,CAAC;MAChCF,MAAM,CAACI,MAAM,CAAC,CAACI,GAAG,CAACC,YAAY,EAAE;IACnC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}