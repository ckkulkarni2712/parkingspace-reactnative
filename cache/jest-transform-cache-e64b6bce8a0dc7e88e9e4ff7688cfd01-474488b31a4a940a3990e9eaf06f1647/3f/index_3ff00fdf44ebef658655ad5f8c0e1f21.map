{"version":3,"mappings":";;;;;;;;AAAA;AAgCAA;EAAA;EAAA;EAAAA;IAAAC;IAAAC;MAAA;IAAA;EAAA;AAAA;AA/BA;AACA;AAEA,IAAI,OAAOC,OAAO,KAAK,WAAW,IAAI,kBAACA,OAAO,CAACC,GAAG,aAAXD,aAAaE,sBAAsB,GAAE;EAM1E,IAAI,OAAOC,SAAS,KAAK,UAAU,EAAE;IAEnCA,SAAS,iCAAC,aAAY;MACpB,MAAM,oCAAe,GAAE;MACvB,iBAAO,GAAE;IACX,CAAC,EAAC;EACJ;EAEA,IAAI,OAAOC,SAAS,KAAK,UAAU,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;IAErE,IAAIC,6BAA6B,GAAG,iCAAwB,GAAE;IAC9DF,SAAS,CAAC,YAAM;MACdE,6BAA6B,GAAG,iCAAwB,GAAE;MAC1D,+BAAsB,EAAC,IAAI,CAAC;IAC9B,CAAC,CAAC;IAEFD,QAAQ,CAAC,YAAM;MACb,+BAAsB,EAACC,6BAA6B,CAAC;IACvD,CAAC,CAAC;EACJ;AACF","names":["Object","enumerable","get","process","env","RNTL_SKIP_AUTO_CLEANUP","afterEach","beforeAll","afterAll","previousIsReactActEnvironment"],"sources":["../src/index.ts"],"sourcesContent":["import { cleanup } from './pure';\nimport { flushMicroTasks } from './flushMicroTasks';\nimport { getIsReactActEnvironment, setReactActEnvironment } from './act';\n\nif (typeof process === 'undefined' || !process.env?.RNTL_SKIP_AUTO_CLEANUP) {\n  // If we're running in a test runner that supports afterEach\n  // then we'll automatically run cleanup afterEach test\n  // this ensures that tests run in isolation from each other\n  // if you don't like this then either import the `pure` module\n  // or set the RNTL_SKIP_AUTO_CLEANUP env variable to 'true'.\n  if (typeof afterEach === 'function') {\n    // eslint-disable-next-line no-undef\n    afterEach(async () => {\n      await flushMicroTasks();\n      cleanup();\n    });\n  }\n\n  if (typeof beforeAll === 'function' && typeof afterAll === 'function') {\n    // This matches the behavior of React < 18.\n    let previousIsReactActEnvironment = getIsReactActEnvironment();\n    beforeAll(() => {\n      previousIsReactActEnvironment = getIsReactActEnvironment();\n      setReactActEnvironment(true);\n    });\n\n    afterAll(() => {\n      setReactActEnvironment(previousIsReactActEnvironment);\n    });\n  }\n}\n\nexport * from './pure';\n"]}