cc25447a4408032fd97e000ae3e46c2b
"use strict";

module.exports = BufferWriter;
var Writer = require("./writer");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
var util = require("./util/minimal");
function BufferWriter() {
  Writer.call(this);
}
BufferWriter._configure = function () {
  BufferWriter.alloc = util._Buffer_allocUnsafe;
  BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
    buf.set(val, pos);
  } : function writeBytesBuffer_copy(val, buf, pos) {
    if (val.copy) val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;) buf[pos++] = val[i++];
  };
};
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
  if (util.isString(value)) value = util._Buffer_from(value, "base64");
  var len = value.length >>> 0;
  this.uint32(len);
  if (len) this._push(BufferWriter.writeBytesBuffer, len, value);
  return this;
};
function writeStringBuffer(val, buf, pos) {
  if (val.length < 40) util.utf8.write(val, buf, pos);else if (buf.utf8Write) buf.utf8Write(val, pos);else buf.write(val, pos);
}
BufferWriter.prototype.string = function write_string_buffer(value) {
  var len = util.Buffer.byteLength(value);
  this.uint32(len);
  if (len) this._push(writeStringBuffer, len, value);
  return this;
};
BufferWriter._configure();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQnVmZmVyV3JpdGVyIiwiV3JpdGVyIiwicmVxdWlyZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidXRpbCIsImNhbGwiLCJfY29uZmlndXJlIiwiYWxsb2MiLCJfQnVmZmVyX2FsbG9jVW5zYWZlIiwid3JpdGVCeXRlc0J1ZmZlciIsIkJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJzZXQiLCJuYW1lIiwid3JpdGVCeXRlc0J1ZmZlcl9zZXQiLCJ2YWwiLCJidWYiLCJwb3MiLCJ3cml0ZUJ5dGVzQnVmZmVyX2NvcHkiLCJjb3B5IiwibGVuZ3RoIiwiaSIsImJ5dGVzIiwid3JpdGVfYnl0ZXNfYnVmZmVyIiwidmFsdWUiLCJpc1N0cmluZyIsIl9CdWZmZXJfZnJvbSIsImxlbiIsInVpbnQzMiIsIl9wdXNoIiwid3JpdGVTdHJpbmdCdWZmZXIiLCJ1dGY4Iiwid3JpdGUiLCJ1dGY4V3JpdGUiLCJzdHJpbmciLCJ3cml0ZV9zdHJpbmdfYnVmZmVyIiwiYnl0ZUxlbmd0aCJdLCJzb3VyY2VzIjpbIndyaXRlcl9idWZmZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlcldyaXRlcjtcblxuLy8gZXh0ZW5kcyBXcml0ZXJcbnZhciBXcml0ZXIgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XG4oQnVmZmVyV3JpdGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoV3JpdGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyV3JpdGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciB3cml0ZXIgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHdyaXRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXG4gKiBAZXh0ZW5kcyBXcml0ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBCdWZmZXJXcml0ZXIoKSB7XG4gICAgV3JpdGVyLmNhbGwodGhpcyk7XG59XG5cbkJ1ZmZlcldyaXRlci5fY29uZmlndXJlID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEFsbG9jYXRlcyBhIGJ1ZmZlciBvZiB0aGUgc3BlY2lmaWVkIHNpemUuXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBCdWZmZXJcbiAgICAgKi9cbiAgICBCdWZmZXJXcml0ZXIuYWxsb2MgPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmU7XG5cbiAgICBCdWZmZXJXcml0ZXIud3JpdGVCeXRlc0J1ZmZlciA9IHV0aWwuQnVmZmVyICYmIHV0aWwuQnVmZmVyLnByb3RvdHlwZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgdXRpbC5CdWZmZXIucHJvdG90eXBlLnNldC5uYW1lID09PSBcInNldFwiXG4gICAgICAgID8gZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9zZXQodmFsLCBidWYsIHBvcykge1xuICAgICAgICAgIGJ1Zi5zZXQodmFsLCBwb3MpOyAvLyBmYXN0ZXIgdGhhbiBjb3B5IChyZXF1aXJlcyBub2RlID49IDQgd2hlcmUgQnVmZmVycyBleHRlbmQgVWludDhBcnJheSBhbmQgc2V0IGlzIHByb3Blcmx5IGluaGVyaXRlZClcbiAgICAgICAgICAvLyBhbHNvIHdvcmtzIGZvciBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICA6IGZ1bmN0aW9uIHdyaXRlQnl0ZXNCdWZmZXJfY29weSh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgICAgaWYgKHZhbC5jb3B5KSAvLyBCdWZmZXIgdmFsdWVzXG4gICAgICAgICAgICB2YWwuY29weShidWYsIHBvcywgMCwgdmFsLmxlbmd0aCk7XG4gICAgICAgICAgZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7KSAvLyBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICAgICAgICAgIGJ1Zltwb3MrK10gPSB2YWxbaSsrXTtcbiAgICAgICAgfTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS5ieXRlcyA9IGZ1bmN0aW9uIHdyaXRlX2J5dGVzX2J1ZmZlcih2YWx1ZSkge1xuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSlcbiAgICAgICAgdmFsdWUgPSB1dGlsLl9CdWZmZXJfZnJvbSh2YWx1ZSwgXCJiYXNlNjRcIik7XG4gICAgdmFyIGxlbiA9IHZhbHVlLmxlbmd0aCA+Pj4gMDtcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pXG4gICAgICAgIHRoaXMuX3B1c2goQnVmZmVyV3JpdGVyLndyaXRlQnl0ZXNCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gd3JpdGVTdHJpbmdCdWZmZXIodmFsLCBidWYsIHBvcykge1xuICAgIGlmICh2YWwubGVuZ3RoIDwgNDApIC8vIHBsYWluIGpzIGlzIGZhc3RlciBmb3Igc2hvcnQgc3RyaW5ncyAocHJvYmFibHkgZHVlIHRvIHJlZHVuZGFudCBhc3NlcnRpb25zKVxuICAgICAgICB1dGlsLnV0Zjgud3JpdGUodmFsLCBidWYsIHBvcyk7XG4gICAgZWxzZSBpZiAoYnVmLnV0ZjhXcml0ZSlcbiAgICAgICAgYnVmLnV0ZjhXcml0ZSh2YWwsIHBvcyk7XG4gICAgZWxzZVxuICAgICAgICBidWYud3JpdGUodmFsLCBwb3MpO1xufVxuXG4vKipcbiAqIEBvdmVycmlkZVxuICovXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHdyaXRlX3N0cmluZ19idWZmZXIodmFsdWUpIHtcbiAgICB2YXIgbGVuID0gdXRpbC5CdWZmZXIuYnl0ZUxlbmd0aCh2YWx1ZSk7XG4gICAgdGhpcy51aW50MzIobGVuKTtcbiAgICBpZiAobGVuKVxuICAgICAgICB0aGlzLl9wdXNoKHdyaXRlU3RyaW5nQnVmZmVyLCBsZW4sIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuLyoqXG4gKiBGaW5pc2hlcyB0aGUgd3JpdGUgb3BlcmF0aW9uLlxuICogQG5hbWUgQnVmZmVyV3JpdGVyI2ZpbmlzaFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBGaW5pc2hlZCBidWZmZXJcbiAqL1xuXG5CdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTtBQUc3QixJQUFJQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDaEMsQ0FBQ0YsWUFBWSxDQUFDRyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSixNQUFNLENBQUNFLFNBQVMsQ0FBQyxFQUFFRyxXQUFXLEdBQUdOLFlBQVk7QUFFckYsSUFBSU8sSUFBSSxHQUFHTCxPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFRcEMsU0FBU0YsWUFBWSxHQUFHO0VBQ3BCQyxNQUFNLENBQUNPLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDckI7QUFFQVIsWUFBWSxDQUFDUyxVQUFVLEdBQUcsWUFBWTtFQU9sQ1QsWUFBWSxDQUFDVSxLQUFLLEdBQUdILElBQUksQ0FBQ0ksbUJBQW1CO0VBRTdDWCxZQUFZLENBQUNZLGdCQUFnQixHQUFHTCxJQUFJLENBQUNNLE1BQU0sSUFBSU4sSUFBSSxDQUFDTSxNQUFNLENBQUNWLFNBQVMsWUFBWVcsVUFBVSxJQUFJUCxJQUFJLENBQUNNLE1BQU0sQ0FBQ1YsU0FBUyxDQUFDWSxHQUFHLENBQUNDLElBQUksS0FBSyxLQUFLLEdBQ2hJLFNBQVNDLG9CQUFvQixDQUFDQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0lBQzdDRCxHQUFHLENBQUNKLEdBQUcsQ0FBQ0csR0FBRyxFQUFFRSxHQUFHLENBQUM7RUFFbkIsQ0FBQyxHQUVDLFNBQVNDLHFCQUFxQixDQUFDSCxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0lBQzlDLElBQUlGLEdBQUcsQ0FBQ0ksSUFBSSxFQUNWSixHQUFHLENBQUNJLElBQUksQ0FBQ0gsR0FBRyxFQUFFQyxHQUFHLEVBQUUsQ0FBQyxFQUFFRixHQUFHLENBQUNLLE1BQU0sQ0FBQyxDQUFDLEtBQy9CLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTixHQUFHLENBQUNLLE1BQU0sR0FDakNKLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFLENBQUMsR0FBR0YsR0FBRyxDQUFDTSxDQUFDLEVBQUUsQ0FBQztFQUN6QixDQUFDO0FBQ1QsQ0FBQztBQU1EeEIsWUFBWSxDQUFDRyxTQUFTLENBQUNzQixLQUFLLEdBQUcsU0FBU0Msa0JBQWtCLENBQUNDLEtBQUssRUFBRTtFQUM5RCxJQUFJcEIsSUFBSSxDQUFDcUIsUUFBUSxDQUFDRCxLQUFLLENBQUMsRUFDcEJBLEtBQUssR0FBR3BCLElBQUksQ0FBQ3NCLFlBQVksQ0FBQ0YsS0FBSyxFQUFFLFFBQVEsQ0FBQztFQUM5QyxJQUFJRyxHQUFHLEdBQUdILEtBQUssQ0FBQ0osTUFBTSxLQUFLLENBQUM7RUFDNUIsSUFBSSxDQUFDUSxNQUFNLENBQUNELEdBQUcsQ0FBQztFQUNoQixJQUFJQSxHQUFHLEVBQ0gsSUFBSSxDQUFDRSxLQUFLLENBQUNoQyxZQUFZLENBQUNZLGdCQUFnQixFQUFFa0IsR0FBRyxFQUFFSCxLQUFLLENBQUM7RUFDekQsT0FBTyxJQUFJO0FBQ2YsQ0FBQztBQUVELFNBQVNNLGlCQUFpQixDQUFDZixHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQ3RDLElBQUlGLEdBQUcsQ0FBQ0ssTUFBTSxHQUFHLEVBQUUsRUFDZmhCLElBQUksQ0FBQzJCLElBQUksQ0FBQ0MsS0FBSyxDQUFDakIsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsQ0FBQyxDQUFDLEtBQzlCLElBQUlELEdBQUcsQ0FBQ2lCLFNBQVMsRUFDbEJqQixHQUFHLENBQUNpQixTQUFTLENBQUNsQixHQUFHLEVBQUVFLEdBQUcsQ0FBQyxDQUFDLEtBRXhCRCxHQUFHLENBQUNnQixLQUFLLENBQUNqQixHQUFHLEVBQUVFLEdBQUcsQ0FBQztBQUMzQjtBQUtBcEIsWUFBWSxDQUFDRyxTQUFTLENBQUNrQyxNQUFNLEdBQUcsU0FBU0MsbUJBQW1CLENBQUNYLEtBQUssRUFBRTtFQUNoRSxJQUFJRyxHQUFHLEdBQUd2QixJQUFJLENBQUNNLE1BQU0sQ0FBQzBCLFVBQVUsQ0FBQ1osS0FBSyxDQUFDO0VBQ3ZDLElBQUksQ0FBQ0ksTUFBTSxDQUFDRCxHQUFHLENBQUM7RUFDaEIsSUFBSUEsR0FBRyxFQUNILElBQUksQ0FBQ0UsS0FBSyxDQUFDQyxpQkFBaUIsRUFBRUgsR0FBRyxFQUFFSCxLQUFLLENBQUM7RUFDN0MsT0FBTyxJQUFJO0FBQ2YsQ0FBQztBQVVEM0IsWUFBWSxDQUFDUyxVQUFVLEVBQUUifQ==