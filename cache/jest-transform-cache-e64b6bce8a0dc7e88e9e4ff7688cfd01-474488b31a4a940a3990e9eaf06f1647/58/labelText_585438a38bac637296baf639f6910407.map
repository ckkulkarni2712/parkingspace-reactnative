{"version":3,"mappings":";;;;;;AACA;AAEA;AACA;AAaA,SAASA,mBAAmB,CAACC,QAA2B,EAAE;EACxD,OAAO,UAACC,IAAe,EAAEC,YAAiC,EAAK;IAC7D,OAAO,oBAAO,EACZF,QAAQ,EACPG,cAAI;MAAA,OACH,OAAOA,IAAI,CAACC,IAAI,KAAK,QAAQ,IAC7B,kCAAc,EAACJ,QAAQ,EAAEG,IAAI,EAAEF,IAAI,EAAEC,YAAY,CAAC;IAAA,GACpDA,YAAY,CACb;EACH,CAAC;AACH;AAEA,IAAMG,gBAAgB,GAAIC,SAApBD,gBAAgB,CAAIC,SAAoB;EAAA,6DACQC,MAAM,CAACD,SAAS,CAAE;AAAA,CAAE;AAC1E,IAAME,eAAe,GAAIF,SAAnBE,eAAe,CAAIF,SAAoB;EAAA,+DACWC,MAAM,CAACD,SAAS,CAAE;AAAA,CAAC;AAE3E,WAAoE,4BAAW,EAC7EP,mBAAmB,EACnBS,eAAe,EACfH,gBAAgB,CACjB;EAJOI,KAAK,QAALA,KAAK;EAAEC,QAAQ,QAARA,QAAQ;EAAEC,OAAO,QAAPA,OAAO;EAAEC,UAAU,QAAVA,UAAU;EAAEC,MAAM,QAANA,MAAM;EAAEC;AAe/C,IAAMC,sBAAsB,GACjCf,SADWe,sBAAsB,CACjCf,QAA2B;EAAA,OACH;IACxBgB,cAAc,EAAEP,KAAK,CAACT,QAAQ,CAAC;IAC/BiB,iBAAiB,EAAEP,QAAQ,CAACV,QAAQ,CAAC;IACrCkB,gBAAgB,EAAEP,OAAO,CAACX,QAAQ,CAAC;IACnCD,mBAAmB,EAAEa,UAAU,CAACZ,QAAQ,CAAC;IACzCmB,eAAe,EAAEN,MAAM,CAACb,QAAQ,CAAC;IACjCoB,kBAAkB,EAAEN,SAAS,CAACd,QAAQ;EACxC,CAAC;AAAA,CAAC;AAACqB","names":["queryAllByLabelText","instance","text","queryOptions","node","type","getMultipleError","labelText","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByLabelTextQueries","getByLabelText","getAllByLabelText","queryByLabelText","findByLabelText","findAllByLabelText","exports"],"sources":["../../src/queries/labelText.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { findAll } from '../helpers/findAll';\nimport { TextMatch, TextMatchOptions } from '../matches';\nimport { matchLabelText } from '../helpers/matchers/matchLabelText';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport { CommonQueryOptions } from './options';\n\ntype ByLabelTextOptions = CommonQueryOptions & TextMatchOptions;\n\nfunction queryAllByLabelText(instance: ReactTestInstance) {\n  return (text: TextMatch, queryOptions?: ByLabelTextOptions) => {\n    return findAll(\n      instance,\n      (node) =>\n        typeof node.type === 'string' &&\n        matchLabelText(instance, node, text, queryOptions),\n      queryOptions\n    );\n  };\n}\n\nconst getMultipleError = (labelText: TextMatch) =>\n  `Found multiple elements with accessibilityLabel: ${String(labelText)} `;\nconst getMissingError = (labelText: TextMatch) =>\n  `Unable to find an element with accessibilityLabel: ${String(labelText)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByLabelText,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByLabelTextQueries = {\n  getByLabelText: GetByQuery<TextMatch, ByLabelTextOptions>;\n  getAllByLabelText: GetAllByQuery<TextMatch, ByLabelTextOptions>;\n  queryByLabelText: QueryByQuery<TextMatch, ByLabelTextOptions>;\n  queryAllByLabelText: QueryAllByQuery<TextMatch, ByLabelTextOptions>;\n  findByLabelText: FindByQuery<TextMatch, ByLabelTextOptions>;\n  findAllByLabelText: FindAllByQuery<TextMatch, ByLabelTextOptions>;\n};\n\nexport const bindByLabelTextQueries = (\n  instance: ReactTestInstance\n): ByLabelTextQueries => ({\n  getByLabelText: getBy(instance),\n  getAllByLabelText: getAllBy(instance),\n  queryByLabelText: queryBy(instance),\n  queryAllByLabelText: queryAllBy(instance),\n  findByLabelText: findBy(instance),\n  findAllByLabelText: findAllBy(instance),\n});\n"]}