{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAyC;EAAA;IAAAA;EAAA;AAAA;AAAA,IAE5BC,cAAc;EAAA;EAAA;EACzBC,wBAAYC,OAA2B,EAAEC,QAAkB,EAAE;IAAA;IAAA;IAC3D,0BAAMD,OAAO;IACb,IAAIE,KAAK,CAACC,iBAAiB,EAAE;MAC3BD,KAAK,CAACC,iBAAiB,8CAAOF,QAAQ,CAAC;IACzC;IAAA;EACF;EAAA;AAAA,iCANkCC,KAAK;AAOxCE;AAEM,IAAMC,8BAA8B,GAAIC,SAAlCD,8BAA8B,CAAIC,KAAc;EAAA,OAC3D,IAAIJ,KAAK,sFAELI,KAAK,YAAYJ,KAAK,GAAGI,KAAK,CAACN,OAAO,GAAG,EAC1C,EACF;AAAA;AAACI;AAEG,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAmB,CAG9BD,KAAc,EACdE,IAAa,EACbC,KAAe,EACJ;EACX,IAAIC,YAAoB;EACxB,IAAIJ,KAAK,YAAYJ,KAAK,EAAE;IAE1BQ,YAAY,GAAGJ,KAAK,CAACN,OAAO,CAACW,OAAO,CAClC,kCAAkC,EAClC,EAAE,CACH;EACH,CAAC,MAAM,IAAIL,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7CI,YAAY,GAAGJ,KAAK,CAACM,QAAQ,EAAE;EACjC,CAAC,MAAM;IACLF,YAAY,GAAG,sBAAsB;EACvC;EAEA,IAAIF,IAAI,IAAIC,KAAK,EAAE;IACjBC,YAAY,eAAaF,IAAK,SAAG,yBAAY,EAACC,KAAK,EAAE;MAAEI,GAAG,EAAE;IAAK,CAAC,CAAG;EACvE;EACA,OAAOH,YAAY;AACrB,CAAC;AAACN;AAEK,IAAMU,kBAAkB,GAAG,SAArBA,kBAAkB,CAC7BR,KAAc,EACdL,QAAkB,EACT;EACT,IAAIK,KAAK,YAAYJ,KAAK,EAAE;IAC1B,IAAII,KAAK,CAACN,OAAO,CAACe,QAAQ,CAAC,oBAAoB,CAAC,EAAE;MAChD,OAAO,IAAI;IACb;IACA,MAAM,IAAIjB,cAAc,CAACQ,KAAK,CAACN,OAAO,EAAEC,QAAQ,CAAC;EACnD;EAEA,MAAM,IAAIH,cAAc,wCAGe,OAAOQ,KAAM,kBAChDA,KAAK,oBAALA,KAAK,CACJM,QAAQ,oBADTN,KAAK,CACJM,QAAQ,EAAK,GAChBX,QAAQ,CACT;AACH,CAAC;AAACG;AAEK,SAASY,cAAc,CAACC,MAAe,EAAEC,gBAAuB,EAAE;EACvE,IAAID,MAAM,YAAYf,KAAK,IAAIgB,gBAAgB,CAACC,KAAK,EAAE;IACrDF,MAAM,CAACE,KAAK,GAAGD,gBAAgB,CAACC,KAAK,CAACR,OAAO,CAC3CO,gBAAgB,CAAClB,OAAO,EACxBiB,MAAM,CAACjB,OAAO,CACf;EACH;AACF;AAEA,IAAMoB,MAA2C,GAAG,CAAC,CAAC;AAE/C,SAASC,uBAAuB,CAACC,YAAoB,EAAE;EAC5D,IAAIF,MAAM,CAACE,YAAY,CAAC,EAAE;IACxB;EACF;EAGAC,OAAO,CAACC,IAAI,yCAEHF,YAAa,sGACpB;EAEFF,MAAM,CAACE,YAAY,CAAC,GAAG,IAAI;AAC7B;AAEO,SAASG,yBAAyB,CACvCH,YAAoB,EACpBI,OAAe,EACf;EACA,MAAM,IAAIxB,KAAK,QACToB,YAAa,8GAAuGI,OAAQ,CACjI;AACH;AAEO,SAASC,yBAAyB,CACvCL,YAAoB,EACpBM,eAAuB,EACvB;EACA,MAAM,IAAI9B,cAAc,YACdwB,YAAa,0CAAkCM,eAAgB,0CACvED,yBAAyB,CAC1B;AACH","names":["default","ErrorWithStack","constructor","message","callsite","Error","captureStackTrace","exports","createLibraryNotSupportedError","error","prepareErrorMessage","name","value","errorMessage","replace","toString","min","createQueryByError","includes","copyStackTrace","target","stackTraceSource","stack","warned","printDeprecationWarning","functionName","console","warn","throwRemovedFunctionError","docsRef","throwRenamedFunctionError","newFunctionName"],"sources":["../../src/helpers/errors.ts"],"sourcesContent":["import prettyFormat from 'pretty-format';\n\nexport class ErrorWithStack extends Error {\n  constructor(message: string | undefined, callsite: Function) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, callsite);\n    }\n  }\n}\n\nexport const createLibraryNotSupportedError = (error: unknown): Error =>\n  new Error(\n    `Currently the only supported library to search by text is \"react-native\".\\n\\n${\n      error instanceof Error ? error.message : ''\n    }`\n  );\n\nexport const prepareErrorMessage = (\n  // TS states that error caught in a catch close are of type `unknown`\n  // most real cases will be `Error`, but better safe than sorry\n  error: unknown,\n  name?: string,\n  value?: unknown\n): string => {\n  let errorMessage: string;\n  if (error instanceof Error) {\n    // Strip info about custom predicate\n    errorMessage = error.message.replace(\n      / matching custom predicate[^]*/gm,\n      ''\n    );\n  } else if (error && typeof error === 'object') {\n    errorMessage = error.toString();\n  } else {\n    errorMessage = 'Caught unknown error';\n  }\n\n  if (name && value) {\n    errorMessage += ` with ${name} ${prettyFormat(value, { min: true })}`;\n  }\n  return errorMessage;\n};\n\nexport const createQueryByError = (\n  error: unknown,\n  callsite: Function\n): null => {\n  if (error instanceof Error) {\n    if (error.message.includes('No instances found')) {\n      return null;\n    }\n    throw new ErrorWithStack(error.message, callsite);\n  }\n\n  throw new ErrorWithStack(\n    // generic refining of `unknown` is very hard, you cannot do `'toString' in error` or anything like that\n    // Converting as any with extra safe optional chaining will do the job just as well\n    `Query: caught unknown error type: ${typeof error}, value: ${(\n      error as any\n    )?.toString?.()}`,\n    callsite\n  );\n};\n\nexport function copyStackTrace(target: unknown, stackTraceSource: Error) {\n  if (target instanceof Error && stackTraceSource.stack) {\n    target.stack = stackTraceSource.stack.replace(\n      stackTraceSource.message,\n      target.message\n    );\n  }\n}\n\nconst warned: { [functionName: string]: boolean } = {};\n\nexport function printDeprecationWarning(functionName: string) {\n  if (warned[functionName]) {\n    return;\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn(`\n  Deprecation Warning:\n  Use of ${functionName} is not recommended and will be deleted in future versions of @testing-library/react-native.\n  `);\n\n  warned[functionName] = true;\n}\n\nexport function throwRemovedFunctionError(\n  functionName: string,\n  docsRef: string\n) {\n  throw new Error(\n    `\"${functionName}\" has been removed.\\n\\nPlease consult: https://callstack.github.io/react-native-testing-library/docs/${docsRef}`\n  );\n}\n\nexport function throwRenamedFunctionError(\n  functionName: string,\n  newFunctionName: string\n) {\n  throw new ErrorWithStack(\n    `The \"${functionName}\" function has been renamed to \"${newFunctionName}\". Please replace all occurrences.`,\n    throwRenamedFunctionError\n  );\n}\n"]}