bbabd1bc9363d3c5c1ebb3ffedeef8f9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureHostComponentNamesIfNeeded = configureHostComponentNamesIfNeeded;
exports.getHostComponentNames = getHostComponentNames;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));
var _config = require("../config");
var _within = require("../within");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var userConfigErrorMessage = "There seems to be an issue with your configuration that prevents React Native Testing Library from working correctly.\nPlease check if you are using compatible versions of React Native and React Native Testing Library.";
function getHostComponentNames() {
  var hostComponentNames = (0, _config.getConfig)().hostComponentNames;
  if (!hostComponentNames) {
    hostComponentNames = detectHostComponentNames();
    (0, _config.configureInternal)({
      hostComponentNames: hostComponentNames
    });
  }
  return hostComponentNames;
}
function configureHostComponentNamesIfNeeded() {
  var configHostComponentNames = (0, _config.getConfig)().hostComponentNames;
  if (configHostComponentNames) {
    return;
  }
  var hostComponentNames = detectHostComponentNames();
  (0, _config.configureInternal)({
    hostComponentNames: hostComponentNames
  });
}
function detectHostComponentNames() {
  try {
    var renderer = _reactTestRenderer.default.create(_react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, {
      testID: "text"
    }, "Hello"), _react.default.createElement(_reactNative.TextInput, {
      testID: "textInput"
    })));
    var _ref = (0, _within.getQueriesForElement)(renderer.root),
      getByTestId = _ref.getByTestId;
    var textHostName = getByTestId('text').type;
    var textInputHostName = getByTestId('textInput').type;
    if (typeof textHostName !== 'string' || typeof textInputHostName !== 'string') {
      throw new Error('getByTestId returned non-host component');
    }
    return {
      text: textHostName,
      textInput: textInputHostName
    };
  } catch (error) {
    var errorMessage = error && typeof error === 'object' && 'message' in error ? error.message : null;
    throw new Error("Trying to detect host component names triggered the following error:\n\n" + errorMessage + "\n\n" + userConfigErrorMessage);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBaUQ7RUFBQTtJQUFBQTtFQUFBO0FBQUE7QUFFakQsSUFBTUMsc0JBQXNCLCtOQUN3RTtBQUU3RixTQUFTQyxxQkFBcUIsR0FBdUI7RUFDMUQsSUFBSUMsa0JBQWtCLEdBQUcscUJBQVMsR0FBRSxDQUFDQSxrQkFBa0I7RUFDdkQsSUFBSSxDQUFDQSxrQkFBa0IsRUFBRTtJQUN2QkEsa0JBQWtCLEdBQUdDLHdCQUF3QixFQUFFO0lBQy9DLDZCQUFpQixFQUFDO01BQUVEO0lBQW1CLENBQUMsQ0FBQztFQUMzQztFQUVBLE9BQU9BLGtCQUFrQjtBQUMzQjtBQUVPLFNBQVNFLG1DQUFtQyxHQUFHO0VBQ3BELElBQU1DLHdCQUF3QixHQUFHLHFCQUFTLEdBQUUsQ0FBQ0gsa0JBQWtCO0VBQy9ELElBQUlHLHdCQUF3QixFQUFFO0lBQzVCO0VBQ0Y7RUFFQSxJQUFNSCxrQkFBa0IsR0FBR0Msd0JBQXdCLEVBQUU7RUFDckQsNkJBQWlCLEVBQUM7SUFBRUQ7RUFBbUIsQ0FBQyxDQUFDO0FBQzNDO0FBRUEsU0FBU0Msd0JBQXdCLEdBQXVCO0VBQ3RELElBQUk7SUFDRixJQUFNRyxRQUFRLEdBQUdDLDBCQUFZLENBQUNDLE1BQU0sQ0FDbENDLDZCQUFDQyxpQkFBSSxRQUNIRCw2QkFBQ0MsaUJBQUk7TUFBQ0MsTUFBTSxFQUFDO0lBQU0sR0FBQyxPQUFLLENBQU8sRUFDaENGLDZCQUFDQyxzQkFBUztNQUFDQyxNQUFNLEVBQUM7SUFBVyxFQUFHLENBQzNCLENBQ1I7SUFFRCxXQUF3QixnQ0FBb0IsRUFBQ0wsUUFBUSxDQUFDTSxJQUFJLENBQUM7TUFBbkRDO0lBQ1IsSUFBTUMsWUFBWSxHQUFHRCxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUNFLElBQUk7SUFDN0MsSUFBTUMsaUJBQWlCLEdBQUdILFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQ0UsSUFBSTtJQUd2RCxJQUNFLE9BQU9ELFlBQVksS0FBSyxRQUFRLElBQ2hDLE9BQU9FLGlCQUFpQixLQUFLLFFBQVEsRUFDckM7TUFDQSxNQUFNLElBQUlDLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQztJQUM1RDtJQUVBLE9BQU87TUFDTEMsSUFBSSxFQUFFSixZQUFZO01BQ2xCSyxTQUFTLEVBQUVIO0lBQ2IsQ0FBQztFQUNILENBQUMsQ0FBQyxPQUFPSSxLQUFLLEVBQUU7SUFDZCxJQUFNQyxZQUFZLEdBQ2hCRCxLQUFLLElBQUksT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUlBLEtBQUssR0FDcERBLEtBQUssQ0FBQ0UsT0FBTyxHQUNiLElBQUk7SUFFVixNQUFNLElBQUlMLEtBQUssOEVBQzhESSxZQUFhLFlBQU1yQixzQkFBdUIsQ0FDdEg7RUFDSDtBQUNGIiwibmFtZXMiOlsiZGVmYXVsdCIsInVzZXJDb25maWdFcnJvck1lc3NhZ2UiLCJnZXRIb3N0Q29tcG9uZW50TmFtZXMiLCJob3N0Q29tcG9uZW50TmFtZXMiLCJkZXRlY3RIb3N0Q29tcG9uZW50TmFtZXMiLCJjb25maWd1cmVIb3N0Q29tcG9uZW50TmFtZXNJZk5lZWRlZCIsImNvbmZpZ0hvc3RDb21wb25lbnROYW1lcyIsInJlbmRlcmVyIiwiVGVzdFJlbmRlcmVyIiwiY3JlYXRlIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwidGVzdElEIiwicm9vdCIsImdldEJ5VGVzdElkIiwidGV4dEhvc3ROYW1lIiwidHlwZSIsInRleHRJbnB1dEhvc3ROYW1lIiwiRXJyb3IiLCJ0ZXh0IiwidGV4dElucHV0IiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJtZXNzYWdlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUZXh0LCBUZXh0SW5wdXQsIFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFRlc3RSZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IGNvbmZpZ3VyZUludGVybmFsLCBnZXRDb25maWcsIEhvc3RDb21wb25lbnROYW1lcyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBnZXRRdWVyaWVzRm9yRWxlbWVudCB9IGZyb20gJy4uL3dpdGhpbic7XG5cbmNvbnN0IHVzZXJDb25maWdFcnJvck1lc3NhZ2UgPSBgVGhlcmUgc2VlbXMgdG8gYmUgYW4gaXNzdWUgd2l0aCB5b3VyIGNvbmZpZ3VyYXRpb24gdGhhdCBwcmV2ZW50cyBSZWFjdCBOYXRpdmUgVGVzdGluZyBMaWJyYXJ5IGZyb20gd29ya2luZyBjb3JyZWN0bHkuXG5QbGVhc2UgY2hlY2sgaWYgeW91IGFyZSB1c2luZyBjb21wYXRpYmxlIHZlcnNpb25zIG9mIFJlYWN0IE5hdGl2ZSBhbmQgUmVhY3QgTmF0aXZlIFRlc3RpbmcgTGlicmFyeS5gO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9zdENvbXBvbmVudE5hbWVzKCk6IEhvc3RDb21wb25lbnROYW1lcyB7XG4gIGxldCBob3N0Q29tcG9uZW50TmFtZXMgPSBnZXRDb25maWcoKS5ob3N0Q29tcG9uZW50TmFtZXM7XG4gIGlmICghaG9zdENvbXBvbmVudE5hbWVzKSB7XG4gICAgaG9zdENvbXBvbmVudE5hbWVzID0gZGV0ZWN0SG9zdENvbXBvbmVudE5hbWVzKCk7XG4gICAgY29uZmlndXJlSW50ZXJuYWwoeyBob3N0Q29tcG9uZW50TmFtZXMgfSk7XG4gIH1cblxuICByZXR1cm4gaG9zdENvbXBvbmVudE5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlSG9zdENvbXBvbmVudE5hbWVzSWZOZWVkZWQoKSB7XG4gIGNvbnN0IGNvbmZpZ0hvc3RDb21wb25lbnROYW1lcyA9IGdldENvbmZpZygpLmhvc3RDb21wb25lbnROYW1lcztcbiAgaWYgKGNvbmZpZ0hvc3RDb21wb25lbnROYW1lcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGhvc3RDb21wb25lbnROYW1lcyA9IGRldGVjdEhvc3RDb21wb25lbnROYW1lcygpO1xuICBjb25maWd1cmVJbnRlcm5hbCh7IGhvc3RDb21wb25lbnROYW1lcyB9KTtcbn1cblxuZnVuY3Rpb24gZGV0ZWN0SG9zdENvbXBvbmVudE5hbWVzKCk6IEhvc3RDb21wb25lbnROYW1lcyB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBUZXN0UmVuZGVyZXIuY3JlYXRlKFxuICAgICAgPFZpZXc+XG4gICAgICAgIDxUZXh0IHRlc3RJRD1cInRleHRcIj5IZWxsbzwvVGV4dD5cbiAgICAgICAgPFRleHRJbnB1dCB0ZXN0SUQ9XCJ0ZXh0SW5wdXRcIiAvPlxuICAgICAgPC9WaWV3PlxuICAgICk7XG5cbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSBnZXRRdWVyaWVzRm9yRWxlbWVudChyZW5kZXJlci5yb290KTtcbiAgICBjb25zdCB0ZXh0SG9zdE5hbWUgPSBnZXRCeVRlc3RJZCgndGV4dCcpLnR5cGU7XG4gICAgY29uc3QgdGV4dElucHV0SG9zdE5hbWUgPSBnZXRCeVRlc3RJZCgndGV4dElucHV0JykudHlwZTtcblxuICAgIC8vIFRoaXMgY29kZSBwYXRoIHNob3VsZCBub3QgaGFwcGVuIGFzIGdldEJ5VGVzdElkIGFsd2F5cyByZXR1cm5zIGhvc3QgZWxlbWVudHMuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHRleHRIb3N0TmFtZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgIHR5cGVvZiB0ZXh0SW5wdXRIb3N0TmFtZSAhPT0gJ3N0cmluZydcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZ2V0QnlUZXN0SWQgcmV0dXJuZWQgbm9uLWhvc3QgY29tcG9uZW50Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IHRleHRIb3N0TmFtZSxcbiAgICAgIHRleHRJbnB1dDogdGV4dElucHV0SG9zdE5hbWUsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgZXJyb3IgJiYgdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiAnbWVzc2FnZScgaW4gZXJyb3JcbiAgICAgICAgPyBlcnJvci5tZXNzYWdlXG4gICAgICAgIDogbnVsbDtcblxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBUcnlpbmcgdG8gZGV0ZWN0IGhvc3QgY29tcG9uZW50IG5hbWVzIHRyaWdnZXJlZCB0aGUgZm9sbG93aW5nIGVycm9yOlxcblxcbiR7ZXJyb3JNZXNzYWdlfVxcblxcbiR7dXNlckNvbmZpZ0Vycm9yTWVzc2FnZX1gXG4gICAgKTtcbiAgfVxufVxuIl19