6fe4c625ddde4fdbb2f6798a09fd5c1d
"use strict";
var converter = exports;
var Enum = require("./enum"),
  util = require("./util");
function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
  if (field.resolvedType) {
    if (field.resolvedType instanceof Enum) {
      gen("switch(d%s){", prop);
      for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
        if (field.repeated && values[keys[i]] === field.typeDefault) gen("default:");
        gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
      }
      gen("}");
    } else gen("if(typeof d%s!==\"object\")", prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
  } else {
    var isUnsigned = false;
    switch (field.type) {
      case "double":
      case "float":
        gen("m%s=Number(d%s)", prop, prop);
        break;
      case "uint32":
      case "fixed32":
        gen("m%s=d%s>>>0", prop, prop);
        break;
      case "int32":
      case "sint32":
      case "sfixed32":
        gen("m%s=d%s|0", prop, prop);
        break;
      case "uint64":
        isUnsigned = true;
      case "int64":
      case "sint64":
      case "fixed64":
      case "sfixed64":
        gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)("else if(typeof d%s===\"string\")", prop)("m%s=parseInt(d%s,10)", prop, prop)("else if(typeof d%s===\"number\")", prop)("m%s=d%s", prop, prop)("else if(typeof d%s===\"object\")", prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
        break;
      case "bytes":
        gen("if(typeof d%s===\"string\")", prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length)", prop)("m%s=d%s", prop, prop);
        break;
      case "string":
        gen("m%s=String(d%s)", prop, prop);
        break;
      case "bool":
        gen("m%s=Boolean(d%s)", prop, prop);
        break;
    }
  }
  return gen;
}
converter.fromObject = function fromObject(mtype) {
  var fields = mtype.fieldsArray;
  var gen = util.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
  if (!fields.length) return gen("return new this.ctor");
  gen("var m=new this.ctor");
  for (var i = 0; i < fields.length; ++i) {
    var field = fields[i].resolve(),
      prop = util.safeProp(field.name);
    if (field.map) {
      gen("if(d%s){", prop)("if(typeof d%s!==\"object\")", prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
      genValuePartial_fromObject(gen, field, i, prop + "[ks[i]]")("}")("}");
    } else if (field.repeated) {
      gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
      genValuePartial_fromObject(gen, field, i, prop + "[i]")("}")("}");
    } else {
      if (!(field.resolvedType instanceof Enum)) gen("if(d%s!=null){", prop);
      genValuePartial_fromObject(gen, field, i, prop);
      if (!(field.resolvedType instanceof Enum)) gen("}");
    }
  }
  return gen("return m");
};
function genValuePartial_toObject(gen, field, fieldIndex, prop) {
  if (field.resolvedType) {
    if (field.resolvedType instanceof Enum) gen("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);else gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
  } else {
    var isUnsigned = false;
    switch (field.type) {
      case "double":
      case "float":
        gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
        break;
      case "uint64":
        isUnsigned = true;
      case "int64":
      case "sint64":
      case "fixed64":
      case "sfixed64":
        gen("if(typeof m%s===\"number\")", prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
        break;
      case "bytes":
        gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
        break;
      default:
        gen("d%s=m%s", prop, prop);
        break;
    }
  }
  return gen;
}
converter.toObject = function toObject(mtype) {
  var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
  if (!fields.length) return util.codegen()("return {}");
  var gen = util.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
  var repeatedFields = [],
    mapFields = [],
    normalFields = [],
    i = 0;
  for (; i < fields.length; ++i) if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
  if (repeatedFields.length) {
    gen("if(o.arrays||o.defaults){");
    for (i = 0; i < repeatedFields.length; ++i) gen("d%s=[]", util.safeProp(repeatedFields[i].name));
    gen("}");
  }
  if (mapFields.length) {
    gen("if(o.objects||o.defaults){");
    for (i = 0; i < mapFields.length; ++i) gen("d%s={}", util.safeProp(mapFields[i].name));
    gen("}");
  }
  if (normalFields.length) {
    gen("if(o.defaults){");
    for (i = 0; i < normalFields.length; ++i) {
      var field = normalFields[i],
        prop = util.safeProp(field.name);
      if (field.resolvedType instanceof Enum) gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);else if (field.long) gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());else if (field.bytes) {
        var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
        gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
      } else gen("d%s=%j", prop, field.typeDefault);
    }
    gen("}");
  }
  var hasKs2 = false;
  for (i = 0; i < fields.length; ++i) {
    var field = fields[i],
      index = mtype._fieldsArray.indexOf(field),
      prop = util.safeProp(field.name);
    if (field.map) {
      if (!hasKs2) {
        hasKs2 = true;
        gen("var ks2");
      }
      gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
      genValuePartial_toObject(gen, field, index, prop + "[ks2[j]]")("}");
    } else if (field.repeated) {
      gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
      genValuePartial_toObject(gen, field, index, prop + "[j]")("}");
    } else {
      gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name);
      genValuePartial_toObject(gen, field, index, prop);
      if (field.partOf) gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
    }
    gen("}");
  }
  return gen("return d");
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb252ZXJ0ZXIiLCJleHBvcnRzIiwiRW51bSIsInJlcXVpcmUiLCJ1dGlsIiwiZ2VuVmFsdWVQYXJ0aWFsX2Zyb21PYmplY3QiLCJnZW4iLCJmaWVsZCIsImZpZWxkSW5kZXgiLCJwcm9wIiwicmVzb2x2ZWRUeXBlIiwidmFsdWVzIiwia2V5cyIsIk9iamVjdCIsImkiLCJsZW5ndGgiLCJyZXBlYXRlZCIsInR5cGVEZWZhdWx0IiwiZnVsbE5hbWUiLCJpc1Vuc2lnbmVkIiwidHlwZSIsImZyb21PYmplY3QiLCJtdHlwZSIsImZpZWxkcyIsImZpZWxkc0FycmF5IiwiY29kZWdlbiIsIm5hbWUiLCJyZXNvbHZlIiwic2FmZVByb3AiLCJtYXAiLCJnZW5WYWx1ZVBhcnRpYWxfdG9PYmplY3QiLCJ0b09iamVjdCIsInNsaWNlIiwic29ydCIsImNvbXBhcmVGaWVsZHNCeUlkIiwicmVwZWF0ZWRGaWVsZHMiLCJtYXBGaWVsZHMiLCJub3JtYWxGaWVsZHMiLCJwYXJ0T2YiLCJwdXNoIiwidmFsdWVzQnlJZCIsImxvbmciLCJsb3ciLCJoaWdoIiwidW5zaWduZWQiLCJ0b1N0cmluZyIsInRvTnVtYmVyIiwiYnl0ZXMiLCJhcnJheURlZmF1bHQiLCJBcnJheSIsInByb3RvdHlwZSIsImNhbGwiLCJqb2luIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJoYXNLczIiLCJpbmRleCIsIl9maWVsZHNBcnJheSIsImluZGV4T2YiXSwic291cmNlcyI6WyJjb252ZXJ0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFJ1bnRpbWUgbWVzc2FnZSBmcm9tL3RvIHBsYWluIG9iamVjdCBjb252ZXJ0ZXJzLlxuICogQG5hbWVzcGFjZVxuICovXG52YXIgY29udmVydGVyID0gZXhwb3J0cztcblxudmFyIEVudW0gPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxuICAgIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBhcnRpYWwgdmFsdWUgZnJvbU9iamVjdCBjb252ZXRlci5cbiAqIEBwYXJhbSB7Q29kZWdlbn0gZ2VuIENvZGVnZW4gaW5zdGFuY2VcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSW5kZXggRmllbGQgaW5kZXhcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHJlZmVyZW5jZVxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gZ2VuVmFsdWVQYXJ0aWFsX2Zyb21PYmplY3QoZ2VuLCBmaWVsZCwgZmllbGRJbmRleCwgcHJvcCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbiAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlKSB7XG4gICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSB7IGdlblxuICAgICAgICAgICAgKFwic3dpdGNoKGQlcyl7XCIsIHByb3ApO1xuICAgICAgICAgICAgZm9yICh2YXIgdmFsdWVzID0gZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlcywga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZC5yZXBlYXRlZCAmJiB2YWx1ZXNba2V5c1tpXV0gPT09IGZpZWxkLnR5cGVEZWZhdWx0KSBnZW5cbiAgICAgICAgICAgICAgICAoXCJkZWZhdWx0OlwiKTtcbiAgICAgICAgICAgICAgICBnZW5cbiAgICAgICAgICAgICAgICAoXCJjYXNlJWo6XCIsIGtleXNbaV0pXG4gICAgICAgICAgICAgICAgKFwiY2FzZSAlaTpcIiwgdmFsdWVzW2tleXNbaV1dKVxuICAgICAgICAgICAgICAgICAgICAoXCJtJXM9JWpcIiwgcHJvcCwgdmFsdWVzW2tleXNbaV1dKVxuICAgICAgICAgICAgICAgICAgICAoXCJicmVha1wiKTtcbiAgICAgICAgICAgIH0gZ2VuXG4gICAgICAgICAgICAoXCJ9XCIpO1xuICAgICAgICB9IGVsc2UgZ2VuXG4gICAgICAgICAgICAoXCJpZih0eXBlb2YgZCVzIT09XFxcIm9iamVjdFxcXCIpXCIsIHByb3ApXG4gICAgICAgICAgICAgICAgKFwidGhyb3cgVHlwZUVycm9yKCVqKVwiLCBmaWVsZC5mdWxsTmFtZSArIFwiOiBvYmplY3QgZXhwZWN0ZWRcIilcbiAgICAgICAgICAgIChcIm0lcz10eXBlc1slaV0uZnJvbU9iamVjdChkJXMpXCIsIHByb3AsIGZpZWxkSW5kZXgsIHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpc1Vuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImRvdWJsZVwiOlxuICAgICAgICAgICAgY2FzZSBcImZsb2F0XCI6IGdlblxuICAgICAgICAgICAgICAgIChcIm0lcz1OdW1iZXIoZCVzKVwiLCBwcm9wLCBwcm9wKTsgLy8gYWxzbyBjYXRjaGVzIFwiTmFOXCIsIFwiSW5maW5pdHlcIlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInVpbnQzMlwiOlxuICAgICAgICAgICAgY2FzZSBcImZpeGVkMzJcIjogZ2VuXG4gICAgICAgICAgICAgICAgKFwibSVzPWQlcz4+PjBcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaW50MzJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzaW50MzJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzZml4ZWQzMlwiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJtJXM9ZCVzfDBcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgICAgICAgICAgaXNVbnNpZ25lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1mYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2ludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZml4ZWQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInNmaXhlZDY0XCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKHV0aWwuTG9uZylcIilcbiAgICAgICAgICAgICAgICAgICAgKFwiKG0lcz11dGlsLkxvbmcuZnJvbVZhbHVlKGQlcykpLnVuc2lnbmVkPSVqXCIsIHByb3AsIHByb3AsIGlzVW5zaWduZWQpXG4gICAgICAgICAgICAgICAgKFwiZWxzZSBpZih0eXBlb2YgZCVzPT09XFxcInN0cmluZ1xcXCIpXCIsIHByb3ApXG4gICAgICAgICAgICAgICAgICAgIChcIm0lcz1wYXJzZUludChkJXMsMTApXCIsIHByb3AsIHByb3ApXG4gICAgICAgICAgICAgICAgKFwiZWxzZSBpZih0eXBlb2YgZCVzPT09XFxcIm51bWJlclxcXCIpXCIsIHByb3ApXG4gICAgICAgICAgICAgICAgICAgIChcIm0lcz1kJXNcIiwgcHJvcCwgcHJvcClcbiAgICAgICAgICAgICAgICAoXCJlbHNlIGlmKHR5cGVvZiBkJXM9PT1cXFwib2JqZWN0XFxcIilcIiwgcHJvcClcbiAgICAgICAgICAgICAgICAgICAgKFwibSVzPW5ldyB1dGlsLkxvbmdCaXRzKGQlcy5sb3c+Pj4wLGQlcy5oaWdoPj4+MCkudG9OdW1iZXIoJXMpXCIsIHByb3AsIHByb3AsIHByb3AsIGlzVW5zaWduZWQgPyBcInRydWVcIiA6IFwiXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJ5dGVzXCI6IGdlblxuICAgICAgICAgICAgICAgIChcImlmKHR5cGVvZiBkJXM9PT1cXFwic3RyaW5nXFxcIilcIiwgcHJvcClcbiAgICAgICAgICAgICAgICAgICAgKFwidXRpbC5iYXNlNjQuZGVjb2RlKGQlcyxtJXM9dXRpbC5uZXdCdWZmZXIodXRpbC5iYXNlNjQubGVuZ3RoKGQlcykpLDApXCIsIHByb3AsIHByb3AsIHByb3ApXG4gICAgICAgICAgICAgICAgKFwiZWxzZSBpZihkJXMubGVuZ3RoKVwiLCBwcm9wKVxuICAgICAgICAgICAgICAgICAgICAoXCJtJXM9ZCVzXCIsIHByb3AsIHByb3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJtJXM9U3RyaW5nKGQlcylcIiwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYm9vbFwiOiBnZW5cbiAgICAgICAgICAgICAgICAoXCJtJXM9Qm9vbGVhbihkJXMpXCIsIHByb3AsIHByb3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLyogZGVmYXVsdDogZ2VuXG4gICAgICAgICAgICAgICAgKFwibSVzPWQlc1wiLCBwcm9wLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhazsgKi9cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2VuO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHBsYWluIG9iamVjdCB0byBydW50aW1lIG1lc3NhZ2UgY29udmVydGVyIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSB0eXBlLlxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKi9cbmNvbnZlcnRlci5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChtdHlwZSkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbiAgICB2YXIgZmllbGRzID0gbXR5cGUuZmllbGRzQXJyYXk7XG4gICAgdmFyIGdlbiA9IHV0aWwuY29kZWdlbihbXCJkXCJdLCBtdHlwZS5uYW1lICsgXCIkZnJvbU9iamVjdFwiKVxuICAgIChcImlmKGQgaW5zdGFuY2VvZiB0aGlzLmN0b3IpXCIpXG4gICAgICAgIChcInJldHVybiBkXCIpO1xuICAgIGlmICghZmllbGRzLmxlbmd0aCkgcmV0dXJuIGdlblxuICAgIChcInJldHVybiBuZXcgdGhpcy5jdG9yXCIpO1xuICAgIGdlblxuICAgIChcInZhciBtPW5ldyB0aGlzLmN0b3JcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGZpZWxkICA9IGZpZWxkc1tpXS5yZXNvbHZlKCksXG4gICAgICAgICAgICBwcm9wICAgPSB1dGlsLnNhZmVQcm9wKGZpZWxkLm5hbWUpO1xuXG4gICAgICAgIC8vIE1hcCBmaWVsZHNcbiAgICAgICAgaWYgKGZpZWxkLm1hcCkgeyBnZW5cbiAgICAoXCJpZihkJXMpe1wiLCBwcm9wKVxuICAgICAgICAoXCJpZih0eXBlb2YgZCVzIT09XFxcIm9iamVjdFxcXCIpXCIsIHByb3ApXG4gICAgICAgICAgICAoXCJ0aHJvdyBUeXBlRXJyb3IoJWopXCIsIGZpZWxkLmZ1bGxOYW1lICsgXCI6IG9iamVjdCBleHBlY3RlZFwiKVxuICAgICAgICAoXCJtJXM9e31cIiwgcHJvcClcbiAgICAgICAgKFwiZm9yKHZhciBrcz1PYmplY3Qua2V5cyhkJXMpLGk9MDtpPGtzLmxlbmd0aDsrK2kpe1wiLCBwcm9wKTtcbiAgICAgICAgICAgIGdlblZhbHVlUGFydGlhbF9mcm9tT2JqZWN0KGdlbiwgZmllbGQsIC8qIG5vdCBzb3J0ZWQgKi8gaSwgcHJvcCArIFwiW2tzW2ldXVwiKVxuICAgICAgICAoXCJ9XCIpXG4gICAgKFwifVwiKTtcblxuICAgICAgICAvLyBSZXBlYXRlZCBmaWVsZHNcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5yZXBlYXRlZCkgeyBnZW5cbiAgICAoXCJpZihkJXMpe1wiLCBwcm9wKVxuICAgICAgICAoXCJpZighQXJyYXkuaXNBcnJheShkJXMpKVwiLCBwcm9wKVxuICAgICAgICAgICAgKFwidGhyb3cgVHlwZUVycm9yKCVqKVwiLCBmaWVsZC5mdWxsTmFtZSArIFwiOiBhcnJheSBleHBlY3RlZFwiKVxuICAgICAgICAoXCJtJXM9W11cIiwgcHJvcClcbiAgICAgICAgKFwiZm9yKHZhciBpPTA7aTxkJXMubGVuZ3RoOysraSl7XCIsIHByb3ApO1xuICAgICAgICAgICAgZ2VuVmFsdWVQYXJ0aWFsX2Zyb21PYmplY3QoZ2VuLCBmaWVsZCwgLyogbm90IHNvcnRlZCAqLyBpLCBwcm9wICsgXCJbaV1cIilcbiAgICAgICAgKFwifVwiKVxuICAgIChcIn1cIik7XG5cbiAgICAgICAgLy8gTm9uLXJlcGVhdGVkIGZpZWxkc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCEoZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSkpIGdlbiAvLyBubyBuZWVkIHRvIHRlc3QgZm9yIG51bGwvdW5kZWZpbmVkIGlmIGFuIGVudW0gKHVzZXMgc3dpdGNoKVxuICAgIChcImlmKGQlcyE9bnVsbCl7XCIsIHByb3ApOyAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXG4gICAgICAgIGdlblZhbHVlUGFydGlhbF9mcm9tT2JqZWN0KGdlbiwgZmllbGQsIC8qIG5vdCBzb3J0ZWQgKi8gaSwgcHJvcCk7XG4gICAgICAgICAgICBpZiAoIShmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSkgZ2VuXG4gICAgKFwifVwiKTtcbiAgICAgICAgfVxuICAgIH0gcmV0dXJuIGdlblxuICAgIChcInJldHVybiBtXCIpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBwYXJ0aWFsIHZhbHVlIHRvT2JqZWN0IGNvbnZlcnRlci5cbiAqIEBwYXJhbSB7Q29kZWdlbn0gZ2VuIENvZGVnZW4gaW5zdGFuY2VcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSW5kZXggRmllbGQgaW5kZXhcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IHJlZmVyZW5jZVxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gZ2VuVmFsdWVQYXJ0aWFsX3RvT2JqZWN0KGdlbiwgZmllbGQsIGZpZWxkSW5kZXgsIHByb3ApIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSwgYmxvY2stc2NvcGVkLXZhciwgbm8tcmVkZWNsYXJlICovXG4gICAgaWYgKGZpZWxkLnJlc29sdmVkVHlwZSkge1xuICAgICAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSkgZ2VuXG4gICAgICAgICAgICAoXCJkJXM9by5lbnVtcz09PVN0cmluZz90eXBlc1slaV0udmFsdWVzW20lc106bSVzXCIsIHByb3AsIGZpZWxkSW5kZXgsIHByb3AsIHByb3ApO1xuICAgICAgICBlbHNlIGdlblxuICAgICAgICAgICAgKFwiZCVzPXR5cGVzWyVpXS50b09iamVjdChtJXMsbylcIiwgcHJvcCwgZmllbGRJbmRleCwgcHJvcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlzVW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZG91YmxlXCI6XG4gICAgICAgICAgICBjYXNlIFwiZmxvYXRcIjogZ2VuXG4gICAgICAgICAgICAoXCJkJXM9by5qc29uJiYhaXNGaW5pdGUobSVzKT9TdHJpbmcobSVzKTptJXNcIiwgcHJvcCwgcHJvcCwgcHJvcCwgcHJvcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgICAgICAgICAgaXNVbnNpZ25lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1mYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSBcImludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2ludDY0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZml4ZWQ2NFwiOlxuICAgICAgICAgICAgY2FzZSBcInNmaXhlZDY0XCI6IGdlblxuICAgICAgICAgICAgKFwiaWYodHlwZW9mIG0lcz09PVxcXCJudW1iZXJcXFwiKVwiLCBwcm9wKVxuICAgICAgICAgICAgICAgIChcImQlcz1vLmxvbmdzPT09U3RyaW5nP1N0cmluZyhtJXMpOm0lc1wiLCBwcm9wLCBwcm9wLCBwcm9wKVxuICAgICAgICAgICAgKFwiZWxzZVwiKSAvLyBMb25nLWxpa2VcbiAgICAgICAgICAgICAgICAoXCJkJXM9by5sb25ncz09PVN0cmluZz91dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobSVzKTpvLmxvbmdzPT09TnVtYmVyP25ldyB1dGlsLkxvbmdCaXRzKG0lcy5sb3c+Pj4wLG0lcy5oaWdoPj4+MCkudG9OdW1iZXIoJXMpOm0lc1wiLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wLCBpc1Vuc2lnbmVkID8gXCJ0cnVlXCI6IFwiXCIsIHByb3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJ5dGVzXCI6IGdlblxuICAgICAgICAgICAgKFwiZCVzPW8uYnl0ZXM9PT1TdHJpbmc/dXRpbC5iYXNlNjQuZW5jb2RlKG0lcywwLG0lcy5sZW5ndGgpOm8uYnl0ZXM9PT1BcnJheT9BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtJXMpOm0lc1wiLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IGdlblxuICAgICAgICAgICAgKFwiZCVzPW0lc1wiLCBwcm9wLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2VuO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHJ1bnRpbWUgbWVzc2FnZSB0byBwbGFpbiBvYmplY3QgY29udmVydGVyIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSB0eXBlLlxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXG4gKi9cbmNvbnZlcnRlci50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG10eXBlKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xuICAgIHZhciBmaWVsZHMgPSBtdHlwZS5maWVsZHNBcnJheS5zbGljZSgpLnNvcnQodXRpbC5jb21wYXJlRmllbGRzQnlJZCk7XG4gICAgaWYgKCFmaWVsZHMubGVuZ3RoKVxuICAgICAgICByZXR1cm4gdXRpbC5jb2RlZ2VuKCkoXCJyZXR1cm4ge31cIik7XG4gICAgdmFyIGdlbiA9IHV0aWwuY29kZWdlbihbXCJtXCIsIFwib1wiXSwgbXR5cGUubmFtZSArIFwiJHRvT2JqZWN0XCIpXG4gICAgKFwiaWYoIW8pXCIpXG4gICAgICAgIChcIm89e31cIilcbiAgICAoXCJ2YXIgZD17fVwiKTtcblxuICAgIHZhciByZXBlYXRlZEZpZWxkcyA9IFtdLFxuICAgICAgICBtYXBGaWVsZHMgPSBbXSxcbiAgICAgICAgbm9ybWFsRmllbGRzID0gW10sXG4gICAgICAgIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgZmllbGRzLmxlbmd0aDsgKytpKVxuICAgICAgICBpZiAoIWZpZWxkc1tpXS5wYXJ0T2YpXG4gICAgICAgICAgICAoIGZpZWxkc1tpXS5yZXNvbHZlKCkucmVwZWF0ZWQgPyByZXBlYXRlZEZpZWxkc1xuICAgICAgICAgICAgOiBmaWVsZHNbaV0ubWFwID8gbWFwRmllbGRzXG4gICAgICAgICAgICA6IG5vcm1hbEZpZWxkcykucHVzaChmaWVsZHNbaV0pO1xuXG4gICAgaWYgKHJlcGVhdGVkRmllbGRzLmxlbmd0aCkgeyBnZW5cbiAgICAoXCJpZihvLmFycmF5c3x8by5kZWZhdWx0cyl7XCIpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmVwZWF0ZWRGaWVsZHMubGVuZ3RoOyArK2kpIGdlblxuICAgICAgICAoXCJkJXM9W11cIiwgdXRpbC5zYWZlUHJvcChyZXBlYXRlZEZpZWxkc1tpXS5uYW1lKSk7XG4gICAgICAgIGdlblxuICAgIChcIn1cIik7XG4gICAgfVxuXG4gICAgaWYgKG1hcEZpZWxkcy5sZW5ndGgpIHsgZ2VuXG4gICAgKFwiaWYoby5vYmplY3RzfHxvLmRlZmF1bHRzKXtcIik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXBGaWVsZHMubGVuZ3RoOyArK2kpIGdlblxuICAgICAgICAoXCJkJXM9e31cIiwgdXRpbC5zYWZlUHJvcChtYXBGaWVsZHNbaV0ubmFtZSkpO1xuICAgICAgICBnZW5cbiAgICAoXCJ9XCIpO1xuICAgIH1cblxuICAgIGlmIChub3JtYWxGaWVsZHMubGVuZ3RoKSB7IGdlblxuICAgIChcImlmKG8uZGVmYXVsdHMpe1wiKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vcm1hbEZpZWxkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkID0gbm9ybWFsRmllbGRzW2ldLFxuICAgICAgICAgICAgICAgIHByb3AgID0gdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSBnZW5cbiAgICAgICAgKFwiZCVzPW8uZW51bXM9PT1TdHJpbmc/JWo6JWpcIiwgcHJvcCwgZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlc0J5SWRbZmllbGQudHlwZURlZmF1bHRdLCBmaWVsZC50eXBlRGVmYXVsdCk7XG4gICAgICAgICAgICBlbHNlIGlmIChmaWVsZC5sb25nKSBnZW5cbiAgICAgICAgKFwiaWYodXRpbC5Mb25nKXtcIilcbiAgICAgICAgICAgIChcInZhciBuPW5ldyB1dGlsLkxvbmcoJWksJWksJWopXCIsIGZpZWxkLnR5cGVEZWZhdWx0LmxvdywgZmllbGQudHlwZURlZmF1bHQuaGlnaCwgZmllbGQudHlwZURlZmF1bHQudW5zaWduZWQpXG4gICAgICAgICAgICAoXCJkJXM9by5sb25ncz09PVN0cmluZz9uLnRvU3RyaW5nKCk6by5sb25ncz09PU51bWJlcj9uLnRvTnVtYmVyKCk6blwiLCBwcm9wKVxuICAgICAgICAoXCJ9ZWxzZVwiKVxuICAgICAgICAgICAgKFwiZCVzPW8ubG9uZ3M9PT1TdHJpbmc/JWo6JWlcIiwgcHJvcCwgZmllbGQudHlwZURlZmF1bHQudG9TdHJpbmcoKSwgZmllbGQudHlwZURlZmF1bHQudG9OdW1iZXIoKSk7XG4gICAgICAgICAgICBlbHNlIGlmIChmaWVsZC5ieXRlcykge1xuICAgICAgICAgICAgICAgIHZhciBhcnJheURlZmF1bHQgPSBcIltcIiArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZpZWxkLnR5cGVEZWZhdWx0KS5qb2luKFwiLFwiKSArIFwiXVwiO1xuICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAoXCJpZihvLmJ5dGVzPT09U3RyaW5nKWQlcz0lalwiLCBwcm9wLCBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgZmllbGQudHlwZURlZmF1bHQpKVxuICAgICAgICAoXCJlbHNle1wiKVxuICAgICAgICAgICAgKFwiZCVzPSVzXCIsIHByb3AsIGFycmF5RGVmYXVsdClcbiAgICAgICAgICAgIChcImlmKG8uYnl0ZXMhPT1BcnJheSlkJXM9dXRpbC5uZXdCdWZmZXIoZCVzKVwiLCBwcm9wLCBwcm9wKVxuICAgICAgICAoXCJ9XCIpO1xuICAgICAgICAgICAgfSBlbHNlIGdlblxuICAgICAgICAoXCJkJXM9JWpcIiwgcHJvcCwgZmllbGQudHlwZURlZmF1bHQpOyAvLyBhbHNvIG1lc3NhZ2VzICg9bnVsbClcbiAgICAgICAgfSBnZW5cbiAgICAoXCJ9XCIpO1xuICAgIH1cbiAgICB2YXIgaGFzS3MyID0gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgZmllbGQgPSBmaWVsZHNbaV0sXG4gICAgICAgICAgICBpbmRleCA9IG10eXBlLl9maWVsZHNBcnJheS5pbmRleE9mKGZpZWxkKSxcbiAgICAgICAgICAgIHByb3AgID0gdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKTtcbiAgICAgICAgaWYgKGZpZWxkLm1hcCkge1xuICAgICAgICAgICAgaWYgKCFoYXNLczIpIHsgaGFzS3MyID0gdHJ1ZTsgZ2VuXG4gICAgKFwidmFyIGtzMlwiKTtcbiAgICAgICAgICAgIH0gZ2VuXG4gICAgKFwiaWYobSVzJiYoa3MyPU9iamVjdC5rZXlzKG0lcykpLmxlbmd0aCl7XCIsIHByb3AsIHByb3ApXG4gICAgICAgIChcImQlcz17fVwiLCBwcm9wKVxuICAgICAgICAoXCJmb3IodmFyIGo9MDtqPGtzMi5sZW5ndGg7KytqKXtcIik7XG4gICAgICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfdG9PYmplY3QoZ2VuLCBmaWVsZCwgLyogc29ydGVkICovIGluZGV4LCBwcm9wICsgXCJba3MyW2pdXVwiKVxuICAgICAgICAoXCJ9XCIpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLnJlcGVhdGVkKSB7IGdlblxuICAgIChcImlmKG0lcyYmbSVzLmxlbmd0aCl7XCIsIHByb3AsIHByb3ApXG4gICAgICAgIChcImQlcz1bXVwiLCBwcm9wKVxuICAgICAgICAoXCJmb3IodmFyIGo9MDtqPG0lcy5sZW5ndGg7KytqKXtcIiwgcHJvcCk7XG4gICAgICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfdG9PYmplY3QoZ2VuLCBmaWVsZCwgLyogc29ydGVkICovIGluZGV4LCBwcm9wICsgXCJbal1cIilcbiAgICAgICAgKFwifVwiKTtcbiAgICAgICAgfSBlbHNlIHsgZ2VuXG4gICAgKFwiaWYobSVzIT1udWxsJiZtLmhhc093blByb3BlcnR5KCVqKSl7XCIsIHByb3AsIGZpZWxkLm5hbWUpOyAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXG4gICAgICAgIGdlblZhbHVlUGFydGlhbF90b09iamVjdChnZW4sIGZpZWxkLCAvKiBzb3J0ZWQgKi8gaW5kZXgsIHByb3ApO1xuICAgICAgICBpZiAoZmllbGQucGFydE9mKSBnZW5cbiAgICAgICAgKFwiaWYoby5vbmVvZnMpXCIpXG4gICAgICAgICAgICAoXCJkJXM9JWpcIiwgdXRpbC5zYWZlUHJvcChmaWVsZC5wYXJ0T2YubmFtZSksIGZpZWxkLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGdlblxuICAgIChcIn1cIik7XG4gICAgfVxuICAgIHJldHVybiBnZW5cbiAgICAoXCJyZXR1cm4gZFwiKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFLWixJQUFJQSxTQUFTLEdBQUdDLE9BQU87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