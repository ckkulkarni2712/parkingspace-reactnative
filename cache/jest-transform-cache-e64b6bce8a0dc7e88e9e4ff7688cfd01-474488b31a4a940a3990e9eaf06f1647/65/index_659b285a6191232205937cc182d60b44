a732b66c088d7507939ea8881453ab18
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = diffSequence;
var pkg = 'diff-sequences';
var NOT_YET_SET = 0;
var countCommonItemsF = function countCommonItemsF(aIndex, aEnd, bIndex, bEnd, isCommon) {
  var nCommon = 0;
  while (aIndex < aEnd && bIndex < bEnd && isCommon(aIndex, bIndex)) {
    aIndex += 1;
    bIndex += 1;
    nCommon += 1;
  }
  return nCommon;
};
var countCommonItemsR = function countCommonItemsR(aStart, aIndex, bStart, bIndex, isCommon) {
  var nCommon = 0;
  while (aStart <= aIndex && bStart <= bIndex && isCommon(aIndex, bIndex)) {
    aIndex -= 1;
    bIndex -= 1;
    nCommon += 1;
  }
  return nCommon;
};
var extendPathsF = function extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF) {
  var iF = 0;
  var kF = -d;
  var aFirst = aIndexesF[iF];
  var aIndexPrev1 = aFirst;
  aIndexesF[iF] += countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
  var nF = d < iMaxF ? d : iMaxF;
  for (iF += 1, kF += 2; iF <= nF; iF += 1, kF += 2) {
    if (iF !== d && aIndexPrev1 < aIndexesF[iF]) {
      aFirst = aIndexesF[iF];
    } else {
      aFirst = aIndexPrev1 + 1;
      if (aEnd <= aFirst) {
        return iF - 1;
      }
    }
    aIndexPrev1 = aIndexesF[iF];
    aIndexesF[iF] = aFirst + countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
  }
  return iMaxF;
};
var extendPathsR = function extendPathsR(d, aStart, bStart, bR, isCommon, aIndexesR, iMaxR) {
  var iR = 0;
  var kR = d;
  var aFirst = aIndexesR[iR];
  var aIndexPrev1 = aFirst;
  aIndexesR[iR] -= countCommonItemsR(aStart, aFirst - 1, bStart, bR + aFirst - kR - 1, isCommon);
  var nR = d < iMaxR ? d : iMaxR;
  for (iR += 1, kR -= 2; iR <= nR; iR += 1, kR -= 2) {
    if (iR !== d && aIndexesR[iR] < aIndexPrev1) {
      aFirst = aIndexesR[iR];
    } else {
      aFirst = aIndexPrev1 - 1;
      if (aFirst < aStart) {
        return iR - 1;
      }
    }
    aIndexPrev1 = aIndexesR[iR];
    aIndexesR[iR] = aFirst - countCommonItemsR(aStart, aFirst - 1, bStart, bR + aFirst - kR - 1, isCommon);
  }
  return iMaxR;
};
var extendOverlappablePathsF = function extendOverlappablePathsF(d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) {
  var bF = bStart - aStart;
  var aLength = aEnd - aStart;
  var bLength = bEnd - bStart;
  var baDeltaLength = bLength - aLength;
  var kMinOverlapF = -baDeltaLength - (d - 1);
  var kMaxOverlapF = -baDeltaLength + (d - 1);
  var aIndexPrev1 = NOT_YET_SET;
  var nF = d < iMaxF ? d : iMaxF;
  for (var iF = 0, kF = -d; iF <= nF; iF += 1, kF += 2) {
    var insert = iF === 0 || iF !== d && aIndexPrev1 < aIndexesF[iF];
    var aLastPrev = insert ? aIndexesF[iF] : aIndexPrev1;
    var aFirst = insert ? aLastPrev : aLastPrev + 1;
    var bFirst = bF + aFirst - kF;
    var nCommonF = countCommonItemsF(aFirst + 1, aEnd, bFirst + 1, bEnd, isCommon);
    var aLast = aFirst + nCommonF;
    aIndexPrev1 = aIndexesF[iF];
    aIndexesF[iF] = aLast;
    if (kMinOverlapF <= kF && kF <= kMaxOverlapF) {
      var iR = (d - 1 - (kF + baDeltaLength)) / 2;
      if (iR <= iMaxR && aIndexesR[iR] - 1 <= aLast) {
        var bLastPrev = bF + aLastPrev - (insert ? kF + 1 : kF - 1);
        var nCommonR = countCommonItemsR(aStart, aLastPrev, bStart, bLastPrev, isCommon);
        var aIndexPrevFirst = aLastPrev - nCommonR;
        var bIndexPrevFirst = bLastPrev - nCommonR;
        var aEndPreceding = aIndexPrevFirst + 1;
        var bEndPreceding = bIndexPrevFirst + 1;
        division.nChangePreceding = d - 1;
        if (d - 1 === aEndPreceding + bEndPreceding - aStart - bStart) {
          division.aEndPreceding = aStart;
          division.bEndPreceding = bStart;
        } else {
          division.aEndPreceding = aEndPreceding;
          division.bEndPreceding = bEndPreceding;
        }
        division.nCommonPreceding = nCommonR;
        if (nCommonR !== 0) {
          division.aCommonPreceding = aEndPreceding;
          division.bCommonPreceding = bEndPreceding;
        }
        division.nCommonFollowing = nCommonF;
        if (nCommonF !== 0) {
          division.aCommonFollowing = aFirst + 1;
          division.bCommonFollowing = bFirst + 1;
        }
        var aStartFollowing = aLast + 1;
        var bStartFollowing = bFirst + nCommonF + 1;
        division.nChangeFollowing = d - 1;
        if (d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing) {
          division.aStartFollowing = aEnd;
          division.bStartFollowing = bEnd;
        } else {
          division.aStartFollowing = aStartFollowing;
          division.bStartFollowing = bStartFollowing;
        }
        return true;
      }
    }
  }
  return false;
};
var extendOverlappablePathsR = function extendOverlappablePathsR(d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division) {
  var bR = bEnd - aEnd;
  var aLength = aEnd - aStart;
  var bLength = bEnd - bStart;
  var baDeltaLength = bLength - aLength;
  var kMinOverlapR = baDeltaLength - d;
  var kMaxOverlapR = baDeltaLength + d;
  var aIndexPrev1 = NOT_YET_SET;
  var nR = d < iMaxR ? d : iMaxR;
  for (var iR = 0, kR = d; iR <= nR; iR += 1, kR -= 2) {
    var insert = iR === 0 || iR !== d && aIndexesR[iR] < aIndexPrev1;
    var aLastPrev = insert ? aIndexesR[iR] : aIndexPrev1;
    var aFirst = insert ? aLastPrev : aLastPrev - 1;
    var bFirst = bR + aFirst - kR;
    var nCommonR = countCommonItemsR(aStart, aFirst - 1, bStart, bFirst - 1, isCommon);
    var aLast = aFirst - nCommonR;
    aIndexPrev1 = aIndexesR[iR];
    aIndexesR[iR] = aLast;
    if (kMinOverlapR <= kR && kR <= kMaxOverlapR) {
      var iF = (d + (kR - baDeltaLength)) / 2;
      if (iF <= iMaxF && aLast - 1 <= aIndexesF[iF]) {
        var bLast = bFirst - nCommonR;
        division.nChangePreceding = d;
        if (d === aLast + bLast - aStart - bStart) {
          division.aEndPreceding = aStart;
          division.bEndPreceding = bStart;
        } else {
          division.aEndPreceding = aLast;
          division.bEndPreceding = bLast;
        }
        division.nCommonPreceding = nCommonR;
        if (nCommonR !== 0) {
          division.aCommonPreceding = aLast;
          division.bCommonPreceding = bLast;
        }
        division.nChangeFollowing = d - 1;
        if (d === 1) {
          division.nCommonFollowing = 0;
          division.aStartFollowing = aEnd;
          division.bStartFollowing = bEnd;
        } else {
          var bLastPrev = bR + aLastPrev - (insert ? kR - 1 : kR + 1);
          var nCommonF = countCommonItemsF(aLastPrev, aEnd, bLastPrev, bEnd, isCommon);
          division.nCommonFollowing = nCommonF;
          if (nCommonF !== 0) {
            division.aCommonFollowing = aLastPrev;
            division.bCommonFollowing = bLastPrev;
          }
          var aStartFollowing = aLastPrev + nCommonF;
          var bStartFollowing = bLastPrev + nCommonF;
          if (d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing) {
            division.aStartFollowing = aEnd;
            division.bStartFollowing = bEnd;
          } else {
            division.aStartFollowing = aStartFollowing;
            division.bStartFollowing = bStartFollowing;
          }
        }
        return true;
      }
    }
  }
  return false;
};
var divide = function divide(nChange, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, aIndexesR, division) {
  var bF = bStart - aStart;
  var bR = bEnd - aEnd;
  var aLength = aEnd - aStart;
  var bLength = bEnd - bStart;
  var baDeltaLength = bLength - aLength;
  var iMaxF = aLength;
  var iMaxR = aLength;
  aIndexesF[0] = aStart - 1;
  aIndexesR[0] = aEnd;
  if (baDeltaLength % 2 === 0) {
    var dMin = (nChange || baDeltaLength) / 2;
    var dMax = (aLength + bLength) / 2;
    for (var d = 1; d <= dMax; d += 1) {
      iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
      if (d < dMin) {
        iMaxR = extendPathsR(d, aStart, bStart, bR, isCommon, aIndexesR, iMaxR);
      } else if (extendOverlappablePathsR(d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division)) {
        return;
      }
    }
  } else {
    var _dMin = ((nChange || baDeltaLength) + 1) / 2;
    var _dMax = (aLength + bLength + 1) / 2;
    var _d = 1;
    iMaxF = extendPathsF(_d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
    for (_d += 1; _d <= _dMax; _d += 1) {
      iMaxR = extendPathsR(_d - 1, aStart, bStart, bR, isCommon, aIndexesR, iMaxR);
      if (_d < _dMin) {
        iMaxF = extendPathsF(_d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
      } else if (extendOverlappablePathsF(_d, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, iMaxF, aIndexesR, iMaxR, division)) {
        return;
      }
    }
  }
  throw new Error(pkg + ": no overlap aStart=" + aStart + " aEnd=" + aEnd + " bStart=" + bStart + " bEnd=" + bEnd);
};
var findSubsequences = function findSubsequences(nChange, aStart, aEnd, bStart, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division) {
  if (bEnd - bStart < aEnd - aStart) {
    transposed = !transposed;
    if (transposed && callbacks.length === 1) {
      var _callbacks$ = callbacks[0],
        _foundSubsequence = _callbacks$.foundSubsequence,
        _isCommon = _callbacks$.isCommon;
      callbacks[1] = {
        foundSubsequence: function foundSubsequence(nCommon, bCommon, aCommon) {
          _foundSubsequence(nCommon, aCommon, bCommon);
        },
        isCommon: function isCommon(bIndex, aIndex) {
          return _isCommon(aIndex, bIndex);
        }
      };
    }
    var tStart = aStart;
    var tEnd = aEnd;
    aStart = bStart;
    aEnd = bEnd;
    bStart = tStart;
    bEnd = tEnd;
  }
  var _callbacks = callbacks[transposed ? 1 : 0],
    foundSubsequence = _callbacks.foundSubsequence,
    isCommon = _callbacks.isCommon;
  divide(nChange, aStart, aEnd, bStart, bEnd, isCommon, aIndexesF, aIndexesR, division);
  var nChangePreceding = division.nChangePreceding,
    aEndPreceding = division.aEndPreceding,
    bEndPreceding = division.bEndPreceding,
    nCommonPreceding = division.nCommonPreceding,
    aCommonPreceding = division.aCommonPreceding,
    bCommonPreceding = division.bCommonPreceding,
    nCommonFollowing = division.nCommonFollowing,
    aCommonFollowing = division.aCommonFollowing,
    bCommonFollowing = division.bCommonFollowing,
    nChangeFollowing = division.nChangeFollowing,
    aStartFollowing = division.aStartFollowing,
    bStartFollowing = division.bStartFollowing;
  if (aStart < aEndPreceding && bStart < bEndPreceding) {
    findSubsequences(nChangePreceding, aStart, aEndPreceding, bStart, bEndPreceding, transposed, callbacks, aIndexesF, aIndexesR, division);
  }
  if (nCommonPreceding !== 0) {
    foundSubsequence(nCommonPreceding, aCommonPreceding, bCommonPreceding);
  }
  if (nCommonFollowing !== 0) {
    foundSubsequence(nCommonFollowing, aCommonFollowing, bCommonFollowing);
  }
  if (aStartFollowing < aEnd && bStartFollowing < bEnd) {
    findSubsequences(nChangeFollowing, aStartFollowing, aEnd, bStartFollowing, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division);
  }
};
var validateLength = function validateLength(name, arg) {
  if (typeof arg !== 'number') {
    throw new TypeError(pkg + ": " + name + " typeof " + typeof arg + " is not a number");
  }
  if (!Number.isSafeInteger(arg)) {
    throw new RangeError(pkg + ": " + name + " value " + arg + " is not a safe integer");
  }
  if (arg < 0) {
    throw new RangeError(pkg + ": " + name + " value " + arg + " is a negative integer");
  }
};
var validateCallback = function validateCallback(name, arg) {
  var type = typeof arg;
  if (type !== 'function') {
    throw new TypeError(pkg + ": " + name + " typeof " + type + " is not a function");
  }
};
function diffSequence(aLength, bLength, isCommon, foundSubsequence) {
  validateLength('aLength', aLength);
  validateLength('bLength', bLength);
  validateCallback('isCommon', isCommon);
  validateCallback('foundSubsequence', foundSubsequence);
  var nCommonF = countCommonItemsF(0, aLength, 0, bLength, isCommon);
  if (nCommonF !== 0) {
    foundSubsequence(nCommonF, 0, 0);
  }
  if (aLength !== nCommonF || bLength !== nCommonF) {
    var aStart = nCommonF;
    var bStart = nCommonF;
    var nCommonR = countCommonItemsR(aStart, aLength - 1, bStart, bLength - 1, isCommon);
    var aEnd = aLength - nCommonR;
    var bEnd = bLength - nCommonR;
    var nCommonFR = nCommonF + nCommonR;
    if (aLength !== nCommonFR && bLength !== nCommonFR) {
      var nChange = 0;
      var transposed = false;
      var callbacks = [{
        foundSubsequence: foundSubsequence,
        isCommon: isCommon
      }];
      var aIndexesF = [NOT_YET_SET];
      var aIndexesR = [NOT_YET_SET];
      var division = {
        aCommonFollowing: NOT_YET_SET,
        aCommonPreceding: NOT_YET_SET,
        aEndPreceding: NOT_YET_SET,
        aStartFollowing: NOT_YET_SET,
        bCommonFollowing: NOT_YET_SET,
        bCommonPreceding: NOT_YET_SET,
        bEndPreceding: NOT_YET_SET,
        bStartFollowing: NOT_YET_SET,
        nChangeFollowing: NOT_YET_SET,
        nChangePreceding: NOT_YET_SET,
        nCommonFollowing: NOT_YET_SET,
        nCommonPreceding: NOT_YET_SET
      };
      findSubsequences(nChange, aStart, aEnd, bStart, bEnd, transposed, callbacks, aIndexesF, aIndexesR, division);
    }
    if (nCommonR !== 0) {
      foundSubsequence(nCommonR, aEnd, bEnd);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,