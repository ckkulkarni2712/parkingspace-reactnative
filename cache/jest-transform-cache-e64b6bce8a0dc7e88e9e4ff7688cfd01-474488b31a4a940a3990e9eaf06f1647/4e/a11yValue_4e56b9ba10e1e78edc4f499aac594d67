a8a23156b5629cc41e572981174fd4b5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByA11yValueQueries = void 0;
var _accessiblity = require("../helpers/accessiblity");
var _deprecation = require("../helpers/deprecation");
var _findAll = require("../helpers/findAll");
var _accessibilityValue = require("../helpers/matchers/accessibilityValue");
var _makeQueries = require("./makeQueries");
var queryAllByA11yValue = function queryAllByA11yValue(instance) {
  return function queryAllByA11yValueFn(value, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return typeof node.type === 'string' && (0, _accessibilityValue.matchAccessibilityValue)(node, value);
    }, queryOptions);
  };
};
var formatQueryParams = function formatQueryParams(matcher) {
  var params = [];
  _accessiblity.accessiblityValueKeys.forEach(function (valueKey) {
    if (matcher[valueKey] !== undefined) {
      params.push(valueKey + " value: " + matcher[valueKey]);
    }
  });
  return params.join(', ');
};
var getMultipleError = function getMultipleError(matcher) {
  return "Found multiple elements with " + formatQueryParams(matcher);
};
var getMissingError = function getMissingError(matcher) {
  return "Unable to find an element with " + formatQueryParams(matcher);
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByA11yValue, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByA11yValueQueries = function bindByA11yValueQueries(instance) {
  var getByA11yValue = getBy(instance);
  var getAllByA11yValue = getAllBy(instance);
  var queryByA11yValue = queryBy(instance);
  var queryAllByA11yValue = queryAllBy(instance);
  var findByA11yValue = findBy(instance);
  var findAllByA11yValue = findAllBy(instance);
  return Object.assign({}, (0, _deprecation.deprecateQueries)({
    getByA11yValue: getByA11yValue,
    getAllByA11yValue: getAllByA11yValue,
    queryByA11yValue: queryByA11yValue,
    queryAllByA11yValue: queryAllByA11yValue,
    findByA11yValue: findByA11yValue,
    findAllByA11yValue: findAllByA11yValue,
    getByAccessibilityValue: getByA11yValue,
    getAllByAccessibilityValue: getAllByA11yValue,
    queryByAccessibilityValue: queryByA11yValue,
    queryAllByAccessibilityValue: queryAllByA11yValue,
    findByAccessibilityValue: findByA11yValue,
    findAllByAccessibilityValue: findAllByA11yValue
  }, 'Use expect(...).toHaveAccessibilityValue(...) matcher from "@testing-library/jest-native" package or {queryPrefix}ByRole(role, { value: ... }) query instead.'));
};
exports.bindByA11yValueQueries = bindByA11yValueQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,