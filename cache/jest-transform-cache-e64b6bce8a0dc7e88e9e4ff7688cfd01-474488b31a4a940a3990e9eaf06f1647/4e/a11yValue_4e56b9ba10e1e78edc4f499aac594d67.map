{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AACA;AAIA;AAWA,IAAMA,mBAAmB,GACvBC,SADID,mBAAmB,CACvBC,QAA2B;EAAA,OAK3B,SAASC,qBAAqB,CAACC,KAAK,EAAEC,YAAY,EAAE;IAClD,OAAO,oBAAO,EACZH,QAAQ,EACPI,cAAI;MAAA,OACH,OAAOA,IAAI,CAACC,IAAI,KAAK,QAAQ,IAAI,+CAAuB,EAACD,IAAI,EAAEF,KAAK,CAAC;IAAA,GACvEC,YAAY,CACb;EACH,CAAC;AAAA;AAEH,IAAMG,iBAAiB,GAAIC,SAArBD,iBAAiB,CAAIC,OAAkC,EAAK;EAChE,IAAMC,MAAgB,GAAG,EAAE;EAE3BC,mCAAqB,CAACC,OAAO,CAAEC,kBAAQ,EAAK;IAC1C,IAAIJ,OAAO,CAACI,QAAQ,CAAC,KAAKC,SAAS,EAAE;MACnCJ,MAAM,CAACK,IAAI,CAAIF,QAAS,gBAAUJ,OAAO,CAACI,QAAQ,CAAE,CAAE;IACxD;EACF,CAAC,CAAC;EAEF,OAAOH,MAAM,CAACM,IAAI,CAAC,IAAI,CAAC;AAC1B,CAAC;AAED,IAAMC,gBAAgB,GAAIR,SAApBQ,gBAAgB,CAAIR,OAAkC;EAAA,yCAC1BD,iBAAiB,CAACC,OAAO,CAAE;AAAA,CAAC;AAE9D,IAAMS,eAAe,GAAIT,SAAnBS,eAAe,CAAIT,OAAkC;EAAA,2CACvBD,iBAAiB,CAACC,OAAO,CAAE;AAAA,CAAC;AAEhE,WAAoE,4BAAW,EAC7ER,mBAAmB,EACnBiB,eAAe,EACfD,gBAAgB,CACjB;EAJOE,KAAK,QAALA,KAAK;EAAEC,QAAQ,QAARA,QAAQ;EAAEC,OAAO,QAAPA,OAAO;EAAEC,UAAU,QAAVA,UAAU;EAAEC,MAAM,QAANA,MAAM;EAAEC;AAiD/C,IAAMC,sBAAsB,GACjCvB,SADWuB,sBAAsB,CACjCvB,QAA2B,EACJ;EACvB,IAAMwB,cAAc,GAAGP,KAAK,CAACjB,QAAQ,CAAC;EACtC,IAAMyB,iBAAiB,GAAGP,QAAQ,CAAClB,QAAQ,CAAC;EAC5C,IAAM0B,gBAAgB,GAAGP,OAAO,CAACnB,QAAQ,CAAC;EAC1C,IAAMD,mBAAmB,GAAGqB,UAAU,CAACpB,QAAQ,CAAC;EAChD,IAAM2B,eAAe,GAAGN,MAAM,CAACrB,QAAQ,CAAC;EACxC,IAAM4B,kBAAkB,GAAGN,SAAS,CAACtB,QAAQ,CAAC;EAE9C,yBACK,iCAAgB,EACjB;IACEwB,cAAc,EAAdA,cAAc;IACdC,iBAAiB,EAAjBA,iBAAiB;IACjBC,gBAAgB,EAAhBA,gBAAgB;IAChB3B,mBAAmB,EAAnBA,mBAAmB;IACnB4B,eAAe,EAAfA,eAAe;IACfC,kBAAkB,EAAlBA,kBAAkB;IAClBC,uBAAuB,EAAEL,cAAc;IACvCM,0BAA0B,EAAEL,iBAAiB;IAC7CM,yBAAyB,EAAEL,gBAAgB;IAC3CM,4BAA4B,EAAEjC,mBAAmB;IACjDkC,wBAAwB,EAAEN,eAAe;IACzCO,2BAA2B,EAAEN;EAC/B,CAAC,EACD,+JAA+J;AAGrK,CAAC;AAACO","names":["queryAllByA11yValue","instance","queryAllByA11yValueFn","value","queryOptions","node","type","formatQueryParams","matcher","params","accessiblityValueKeys","forEach","valueKey","undefined","push","join","getMultipleError","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByA11yValueQueries","getByA11yValue","getAllByA11yValue","queryByA11yValue","findByA11yValue","findAllByA11yValue","getByAccessibilityValue","getAllByAccessibilityValue","queryByAccessibilityValue","queryAllByAccessibilityValue","findByAccessibilityValue","findAllByAccessibilityValue","exports"],"sources":["../../src/queries/a11yValue.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { accessiblityValueKeys } from '../helpers/accessiblity';\nimport { deprecateQueries } from '../helpers/deprecation';\nimport { findAll } from '../helpers/findAll';\nimport {\n  AccessibilityValueMatcher,\n  matchAccessibilityValue,\n} from '../helpers/matchers/accessibilityValue';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport { CommonQueryOptions } from './options';\n\nconst queryAllByA11yValue = (\n  instance: ReactTestInstance\n): ((\n  value: AccessibilityValueMatcher,\n  queryOptions?: CommonQueryOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByA11yValueFn(value, queryOptions) {\n    return findAll(\n      instance,\n      (node) =>\n        typeof node.type === 'string' && matchAccessibilityValue(node, value),\n      queryOptions\n    );\n  };\n\nconst formatQueryParams = (matcher: AccessibilityValueMatcher) => {\n  const params: string[] = [];\n\n  accessiblityValueKeys.forEach((valueKey) => {\n    if (matcher[valueKey] !== undefined) {\n      params.push(`${valueKey} value: ${matcher[valueKey]}`);\n    }\n  });\n\n  return params.join(', ');\n};\n\nconst getMultipleError = (matcher: AccessibilityValueMatcher) =>\n  `Found multiple elements with ${formatQueryParams(matcher)}`;\n\nconst getMissingError = (matcher: AccessibilityValueMatcher) =>\n  `Unable to find an element with ${formatQueryParams(matcher)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByA11yValue,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByA11yValueQueries = {\n  getByA11yValue: GetByQuery<AccessibilityValueMatcher, CommonQueryOptions>;\n  getAllByA11yValue: GetAllByQuery<\n    AccessibilityValueMatcher,\n    CommonQueryOptions\n  >;\n  queryByA11yValue: QueryByQuery<AccessibilityValueMatcher, CommonQueryOptions>;\n  queryAllByA11yValue: QueryAllByQuery<\n    AccessibilityValueMatcher,\n    CommonQueryOptions\n  >;\n  findByA11yValue: FindByQuery<AccessibilityValueMatcher, CommonQueryOptions>;\n  findAllByA11yValue: FindAllByQuery<\n    AccessibilityValueMatcher,\n    CommonQueryOptions\n  >;\n\n  getByAccessibilityValue: GetByQuery<\n    AccessibilityValueMatcher,\n    CommonQueryOptions\n  >;\n  getAllByAccessibilityValue: GetAllByQuery<\n    AccessibilityValueMatcher,\n    CommonQueryOptions\n  >;\n  queryByAccessibilityValue: QueryByQuery<\n    AccessibilityValueMatcher,\n    CommonQueryOptions\n  >;\n  queryAllByAccessibilityValue: QueryAllByQuery<\n    AccessibilityValueMatcher,\n    CommonQueryOptions\n  >;\n  findByAccessibilityValue: FindByQuery<\n    AccessibilityValueMatcher,\n    CommonQueryOptions\n  >;\n  findAllByAccessibilityValue: FindAllByQuery<\n    AccessibilityValueMatcher,\n    CommonQueryOptions\n  >;\n};\n\nexport const bindByA11yValueQueries = (\n  instance: ReactTestInstance\n): ByA11yValueQueries => {\n  const getByA11yValue = getBy(instance);\n  const getAllByA11yValue = getAllBy(instance);\n  const queryByA11yValue = queryBy(instance);\n  const queryAllByA11yValue = queryAllBy(instance);\n  const findByA11yValue = findBy(instance);\n  const findAllByA11yValue = findAllBy(instance);\n\n  return {\n    ...deprecateQueries(\n      {\n        getByA11yValue,\n        getAllByA11yValue,\n        queryByA11yValue,\n        queryAllByA11yValue,\n        findByA11yValue,\n        findAllByA11yValue,\n        getByAccessibilityValue: getByA11yValue,\n        getAllByAccessibilityValue: getAllByA11yValue,\n        queryByAccessibilityValue: queryByA11yValue,\n        queryAllByAccessibilityValue: queryAllByA11yValue,\n        findByAccessibilityValue: findByA11yValue,\n        findAllByAccessibilityValue: findAllByA11yValue,\n      },\n      'Use expect(...).toHaveAccessibilityValue(...) matcher from \"@testing-library/jest-native\" package or {queryPrefix}ByRole(role, { value: ... }) query instead.'\n    ),\n  };\n};\n"]}