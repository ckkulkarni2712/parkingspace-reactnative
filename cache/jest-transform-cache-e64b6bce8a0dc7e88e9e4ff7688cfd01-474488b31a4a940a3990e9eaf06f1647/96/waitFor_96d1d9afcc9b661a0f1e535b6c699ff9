a38cda6cb82025fe93b15c7049faff71
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = waitFor;
var _act = _interopRequireWildcard(require("./act"));
var _config = require("./config");
var _errors = require("./helpers/errors");
var _timers = require("./helpers/timers");
var _reactVersions = require("./react-versions");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var DEFAULT_INTERVAL = 50;
function waitForInternal(expectation, _ref) {
  var _ref$timeout = _ref.timeout,
    timeout = _ref$timeout === void 0 ? (0, _config.getConfig)().asyncUtilTimeout : _ref$timeout,
    _ref$interval = _ref.interval,
    interval = _ref$interval === void 0 ? DEFAULT_INTERVAL : _ref$interval,
    stackTraceError = _ref.stackTraceError,
    onTimeout = _ref.onTimeout;
  if (typeof expectation !== 'function') {
    throw new TypeError('Received `expectation` arg must be a function');
  }
  return new Promise(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (resolve, reject) {
      var lastError, intervalId;
      var finished = false;
      var promiseStatus = 'idle';
      var overallTimeoutTimer = null;
      var usingFakeTimers = (0, _timers.jestFakeTimersAreEnabled)();
      if (usingFakeTimers) {
        checkExpectation();
        var fakeTimeRemaining = timeout;
        while (!finished) {
          if (!(0, _timers.jestFakeTimersAreEnabled)()) {
            var error = new Error("Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
            if (stackTraceError) {
              (0, _errors.copyStackTrace)(error, stackTraceError);
            }
            reject(error);
            return;
          }
          if (fakeTimeRemaining <= 0) {
            handleTimeout();
            return;
          } else {
            fakeTimeRemaining -= interval;
          }
          jest.advanceTimersByTime(interval);
          checkExpectation();
          yield new Promise(function (resolve) {
            return (0, _timers.setImmediate)(resolve);
          });
        }
      } else {
        overallTimeoutTimer = (0, _timers.setTimeout)(handleTimeout, timeout);
        intervalId = setInterval(checkRealTimersCallback, interval);
        checkExpectation();
      }
      function onDone(done) {
        finished = true;
        if (overallTimeoutTimer) {
          (0, _timers.clearTimeout)(overallTimeoutTimer);
        }
        if (!usingFakeTimers) {
          clearInterval(intervalId);
        }
        if (done.type === 'error') {
          reject(done.error);
        } else {
          resolve(done.result);
        }
      }
      function checkRealTimersCallback() {
        if ((0, _timers.jestFakeTimersAreEnabled)()) {
          var _error = new Error("Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830");
          if (stackTraceError) {
            (0, _errors.copyStackTrace)(_error, stackTraceError);
          }
          return reject(_error);
        } else {
          return checkExpectation();
        }
      }
      function checkExpectation() {
        if (promiseStatus === 'pending') return;
        try {
          var result = expectation();
          if (typeof (result == null ? void 0 : result.then) === 'function') {
            var promiseResult = result;
            promiseStatus = 'pending';
            promiseResult.then(function (resolvedValue) {
              promiseStatus = 'resolved';
              onDone({
                type: 'result',
                result: resolvedValue
              });
              return;
            }, function (rejectedValue) {
              promiseStatus = 'rejected';
              lastError = rejectedValue;
              return;
            });
          } else {
            onDone({
              type: 'result',
              result: result
            });
          }
        } catch (error) {
          lastError = error;
        }
      }
      function handleTimeout() {
        var error;
        if (lastError) {
          error = lastError;
          if (stackTraceError) {
            (0, _errors.copyStackTrace)(error, stackTraceError);
          }
        } else {
          error = new Error('Timed out in waitFor.');
          if (stackTraceError) {
            (0, _errors.copyStackTrace)(error, stackTraceError);
          }
        }
        if (typeof onTimeout === 'function') {
          onTimeout(error);
        }
        onDone({
          type: 'error',
          error: error
        });
      }
    });
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
}
function waitFor(_x3, _x4) {
  return _waitFor.apply(this, arguments);
}
function _waitFor() {
  _waitFor = (0, _asyncToGenerator2.default)(function* (expectation, options) {
    var stackTraceError = new _errors.ErrorWithStack('STACK_TRACE_ERROR', waitFor);
    var optionsWithStackTrace = Object.assign({
      stackTraceError: stackTraceError
    }, options);
    if ((0, _reactVersions.checkReactVersionAtLeast)(18, 0)) {
      var previousActEnvironment = (0, _act.getIsReactActEnvironment)();
      (0, _act.setReactActEnvironment)(false);
      try {
        return yield waitForInternal(expectation, optionsWithStackTrace);
      } finally {
        (0, _act.setReactActEnvironment)(previousActEnvironment);
      }
    }
    if (!(0, _reactVersions.checkReactVersionAtLeast)(16, 9)) {
      return waitForInternal(expectation, optionsWithStackTrace);
    }
    var result;
    yield (0, _act.default)((0, _asyncToGenerator2.default)(function* () {
      result = yield waitForInternal(expectation, optionsWithStackTrace);
    }));
    return result;
  });
  return _waitFor.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,