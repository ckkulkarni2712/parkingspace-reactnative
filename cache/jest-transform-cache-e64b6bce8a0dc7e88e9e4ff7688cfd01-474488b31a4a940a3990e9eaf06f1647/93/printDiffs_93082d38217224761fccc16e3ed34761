2678544d79190d491562528f7d0bc31f
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.diffStringsUnified = exports.diffStringsRaw = void 0;
var _cleanupSemantic = require('./cleanupSemantic');
var _diffLines = require('./diffLines');
var _diffStrings = _interopRequireDefault(require('./diffStrings'));
var _getAlignedDiffs = _interopRequireDefault(require('./getAlignedDiffs'));
var _normalizeDiffOptions = require('./normalizeDiffOptions');
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var hasCommonDiff = function hasCommonDiff(diffs, isMultiline) {
  if (isMultiline) {
    var iLast = diffs.length - 1;
    return diffs.some(function (diff, i) {
      return diff[0] === _cleanupSemantic.DIFF_EQUAL && (i !== iLast || diff[1] !== '\n');
    });
  }
  return diffs.some(function (diff) {
    return diff[0] === _cleanupSemantic.DIFF_EQUAL;
  });
};
var diffStringsUnified = function diffStringsUnified(a, b, options) {
  if (a !== b && a.length !== 0 && b.length !== 0) {
    var isMultiline = a.includes('\n') || b.includes('\n');
    var diffs = diffStringsRaw(isMultiline ? a + "\n" : a, isMultiline ? b + "\n" : b, true);
    if (hasCommonDiff(diffs, isMultiline)) {
      var optionsNormalized = (0, _normalizeDiffOptions.normalizeDiffOptions)(options);
      var lines = (0, _getAlignedDiffs.default)(diffs, optionsNormalized.changeColor);
      return (0, _diffLines.printDiffLines)(lines, optionsNormalized);
    }
  }
  return (0, _diffLines.diffLinesUnified)(a.split('\n'), b.split('\n'), options);
};
exports.diffStringsUnified = diffStringsUnified;
var diffStringsRaw = function diffStringsRaw(a, b, cleanup) {
  var diffs = (0, _diffStrings.default)(a, b);
  if (cleanup) {
    (0, _cleanupSemantic.cleanupSemantic)(diffs);
  }
  return diffs;
};
exports.diffStringsRaw = diffStringsRaw;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRpZmZTdHJpbmdzVW5pZmllZCIsImRpZmZTdHJpbmdzUmF3IiwiX2NsZWFudXBTZW1hbnRpYyIsInJlcXVpcmUiLCJfZGlmZkxpbmVzIiwiX2RpZmZTdHJpbmdzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9nZXRBbGlnbmVkRGlmZnMiLCJfbm9ybWFsaXplRGlmZk9wdGlvbnMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhc0NvbW1vbkRpZmYiLCJkaWZmcyIsImlzTXVsdGlsaW5lIiwiaUxhc3QiLCJsZW5ndGgiLCJzb21lIiwiZGlmZiIsImkiLCJESUZGX0VRVUFMIiwiYSIsImIiLCJvcHRpb25zIiwiaW5jbHVkZXMiLCJvcHRpb25zTm9ybWFsaXplZCIsIm5vcm1hbGl6ZURpZmZPcHRpb25zIiwibGluZXMiLCJjaGFuZ2VDb2xvciIsInByaW50RGlmZkxpbmVzIiwiZGlmZkxpbmVzVW5pZmllZCIsInNwbGl0IiwiY2xlYW51cCIsImNsZWFudXBTZW1hbnRpYyJdLCJzb3VyY2VzIjpbInByaW50RGlmZnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGlmZlN0cmluZ3NVbmlmaWVkID0gZXhwb3J0cy5kaWZmU3RyaW5nc1JhdyA9IHZvaWQgMDtcbnZhciBfY2xlYW51cFNlbWFudGljID0gcmVxdWlyZSgnLi9jbGVhbnVwU2VtYW50aWMnKTtcbnZhciBfZGlmZkxpbmVzID0gcmVxdWlyZSgnLi9kaWZmTGluZXMnKTtcbnZhciBfZGlmZlN0cmluZ3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoJy4vZGlmZlN0cmluZ3MnKSk7XG52YXIgX2dldEFsaWduZWREaWZmcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnLi9nZXRBbGlnbmVkRGlmZnMnKSk7XG52YXIgX25vcm1hbGl6ZURpZmZPcHRpb25zID0gcmVxdWlyZSgnLi9ub3JtYWxpemVEaWZmT3B0aW9ucycpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IGhhc0NvbW1vbkRpZmYgPSAoZGlmZnMsIGlzTXVsdGlsaW5lKSA9PiB7XG4gIGlmIChpc011bHRpbGluZSkge1xuICAgIC8vIEltcG9ydGFudDogSWdub3JlIGNvbW1vbiBuZXdsaW5lIHRoYXQgd2FzIGFwcGVuZGVkIHRvIG11bHRpbGluZSBzdHJpbmdzIVxuICAgIGNvbnN0IGlMYXN0ID0gZGlmZnMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZGlmZnMuc29tZShcbiAgICAgIChkaWZmLCBpKSA9PlxuICAgICAgICBkaWZmWzBdID09PSBfY2xlYW51cFNlbWFudGljLkRJRkZfRVFVQUwgJiZcbiAgICAgICAgKGkgIT09IGlMYXN0IHx8IGRpZmZbMV0gIT09ICdcXG4nKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGRpZmZzLnNvbWUoZGlmZiA9PiBkaWZmWzBdID09PSBfY2xlYW51cFNlbWFudGljLkRJRkZfRVFVQUwpO1xufTtcblxuLy8gQ29tcGFyZSB0d28gc3RyaW5ncyBjaGFyYWN0ZXItYnktY2hhcmFjdGVyLlxuLy8gRm9ybWF0IGFzIGNvbXBhcmlzb24gbGluZXMgaW4gd2hpY2ggY2hhbmdlZCBzdWJzdHJpbmdzIGhhdmUgaW52ZXJzZSBjb2xvcnMuXG5jb25zdCBkaWZmU3RyaW5nc1VuaWZpZWQgPSAoYSwgYiwgb3B0aW9ucykgPT4ge1xuICBpZiAoYSAhPT0gYiAmJiBhLmxlbmd0aCAhPT0gMCAmJiBiLmxlbmd0aCAhPT0gMCkge1xuICAgIGNvbnN0IGlzTXVsdGlsaW5lID0gYS5pbmNsdWRlcygnXFxuJykgfHwgYi5pbmNsdWRlcygnXFxuJyk7XG5cbiAgICAvLyBnZXRBbGlnbmVkRGlmZnMgYXNzdW1lcyB0aGF0IGEgbmV3bGluZSB3YXMgYXBwZW5kZWQgdG8gdGhlIHN0cmluZ3MuXG4gICAgY29uc3QgZGlmZnMgPSBkaWZmU3RyaW5nc1JhdyhcbiAgICAgIGlzTXVsdGlsaW5lID8gYCR7YX1cXG5gIDogYSxcbiAgICAgIGlzTXVsdGlsaW5lID8gYCR7Yn1cXG5gIDogYixcbiAgICAgIHRydWUgLy8gY2xlYW51cFNlbWFudGljXG4gICAgKTtcblxuICAgIGlmIChoYXNDb21tb25EaWZmKGRpZmZzLCBpc011bHRpbGluZSkpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnNOb3JtYWxpemVkID0gKDAsIF9ub3JtYWxpemVEaWZmT3B0aW9ucy5ub3JtYWxpemVEaWZmT3B0aW9ucykoXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICk7XG4gICAgICBjb25zdCBsaW5lcyA9ICgwLCBfZ2V0QWxpZ25lZERpZmZzLmRlZmF1bHQpKFxuICAgICAgICBkaWZmcyxcbiAgICAgICAgb3B0aW9uc05vcm1hbGl6ZWQuY2hhbmdlQ29sb3JcbiAgICAgICk7XG4gICAgICByZXR1cm4gKDAsIF9kaWZmTGluZXMucHJpbnREaWZmTGluZXMpKGxpbmVzLCBvcHRpb25zTm9ybWFsaXplZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbCBiYWNrIHRvIGxpbmUtYnktbGluZSBkaWZmLlxuICByZXR1cm4gKDAsIF9kaWZmTGluZXMuZGlmZkxpbmVzVW5pZmllZCkoXG4gICAgYS5zcGxpdCgnXFxuJyksXG4gICAgYi5zcGxpdCgnXFxuJyksXG4gICAgb3B0aW9uc1xuICApO1xufTtcblxuLy8gQ29tcGFyZSB0d28gc3RyaW5ncyBjaGFyYWN0ZXItYnktY2hhcmFjdGVyLlxuLy8gT3B0aW9uYWxseSBjbGVhbiB1cCBzbWFsbCBjb21tb24gc3Vic3RyaW5ncywgYWxzbyBrbm93biBhcyBjaGFmZi5cbmV4cG9ydHMuZGlmZlN0cmluZ3NVbmlmaWVkID0gZGlmZlN0cmluZ3NVbmlmaWVkO1xuY29uc3QgZGlmZlN0cmluZ3NSYXcgPSAoYSwgYiwgY2xlYW51cCkgPT4ge1xuICBjb25zdCBkaWZmcyA9ICgwLCBfZGlmZlN0cmluZ3MuZGVmYXVsdCkoYSwgYik7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgKDAsIF9jbGVhbnVwU2VtYW50aWMuY2xlYW51cFNlbWFudGljKShkaWZmcyk7IC8vIGltcHVyZSBmdW5jdGlvblxuICB9XG5cbiAgcmV0dXJuIGRpZmZzO1xufTtcbmV4cG9ydHMuZGlmZlN0cmluZ3NSYXcgPSBkaWZmU3RyaW5nc1JhdztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGtCQUFrQixHQUFHRixPQUFPLENBQUNHLGNBQWMsR0FBRyxLQUFLLENBQUM7QUFDNUQsSUFBSUMsZ0JBQWdCLEdBQUdDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUNuRCxJQUFJQyxVQUFVLEdBQUdELE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDdkMsSUFBSUUsWUFBWSxHQUFHQyxzQkFBc0IsQ0FBQ0gsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ25FLElBQUlJLGdCQUFnQixHQUFHRCxzQkFBc0IsQ0FBQ0gsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDM0UsSUFBSUsscUJBQXFCLEdBQUdMLE9BQU8sQ0FBQyx3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