246c944a3502efb0d65741236f489931
"use strict";
var wrappers = exports;
var Message = require("./message");
wrappers[".google.protobuf.Any"] = {
  fromObject: function fromObject(object) {
    if (object && object["@type"]) {
      var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
      var type = this.lookup(name);
      if (type) {
        var type_url = object["@type"].charAt(0) === "." ? object["@type"].substr(1) : object["@type"];
        if (type_url.indexOf("/") === -1) {
          type_url = "/" + type_url;
        }
        return this.create({
          type_url: type_url,
          value: type.encode(type.fromObject(object)).finish()
        });
      }
    }
    return this.fromObject(object);
  },
  toObject: function toObject(message, options) {
    var googleApi = "type.googleapis.com/";
    var prefix = "";
    var name = "";
    if (options && options.json && message.type_url && message.value) {
      name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
      prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
      var type = this.lookup(name);
      if (type) message = type.decode(message.value);
    }
    if (!(message instanceof this.ctor) && message instanceof Message) {
      var object = message.$type.toObject(message, options);
      var messageName = message.$type.fullName[0] === "." ? message.$type.fullName.substr(1) : message.$type.fullName;
      if (prefix === "") {
        prefix = googleApi;
      }
      name = prefix + messageName;
      object["@type"] = name;
      return object;
    }
    return this.toObject(message, options);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3cmFwcGVycyIsImV4cG9ydHMiLCJNZXNzYWdlIiwicmVxdWlyZSIsImZyb21PYmplY3QiLCJvYmplY3QiLCJuYW1lIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJ0eXBlIiwibG9va3VwIiwidHlwZV91cmwiLCJjaGFyQXQiLCJzdWJzdHIiLCJpbmRleE9mIiwiY3JlYXRlIiwidmFsdWUiLCJlbmNvZGUiLCJmaW5pc2giLCJ0b09iamVjdCIsIm1lc3NhZ2UiLCJvcHRpb25zIiwiZ29vZ2xlQXBpIiwicHJlZml4IiwianNvbiIsImRlY29kZSIsImN0b3IiLCIkdHlwZSIsIm1lc3NhZ2VOYW1lIiwiZnVsbE5hbWUiXSwic291cmNlcyI6WyJ3cmFwcGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBXcmFwcGVycyBmb3IgY29tbW9uIHR5cGVzLlxuICogQHR5cGUge09iamVjdC48c3RyaW5nLElXcmFwcGVyPn1cbiAqIEBjb25zdFxuICovXG52YXIgd3JhcHBlcnMgPSBleHBvcnRzO1xuXG52YXIgTWVzc2FnZSA9IHJlcXVpcmUoXCIuL21lc3NhZ2VcIik7XG5cbi8qKlxuICogRnJvbSBvYmplY3QgY29udmVydGVyIHBhcnQgb2YgYW4ge0BsaW5rIElXcmFwcGVyfS5cbiAqIEB0eXBlZGVmIFdyYXBwZXJGcm9tT2JqZWN0Q29udmVydGVyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBvYmplY3QgUGxhaW4gb2JqZWN0XG4gKiBAcmV0dXJucyB7TWVzc2FnZTx7fT59IE1lc3NhZ2UgaW5zdGFuY2VcbiAqIEB0aGlzIFR5cGVcbiAqL1xuXG4vKipcbiAqIFRvIG9iamVjdCBjb252ZXJ0ZXIgcGFydCBvZiBhbiB7QGxpbmsgSVdyYXBwZXJ9LlxuICogQHR5cGVkZWYgV3JhcHBlclRvT2JqZWN0Q29udmVydGVyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge01lc3NhZ2U8e30+fSBtZXNzYWdlIE1lc3NhZ2UgaW5zdGFuY2VcbiAqIEBwYXJhbSB7SUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICogQHRoaXMgVHlwZVxuICovXG5cbi8qKlxuICogQ29tbW9uIHR5cGUgd3JhcHBlciBwYXJ0IG9mIHtAbGluayB3cmFwcGVyc30uXG4gKiBAaW50ZXJmYWNlIElXcmFwcGVyXG4gKiBAcHJvcGVydHkge1dyYXBwZXJGcm9tT2JqZWN0Q29udmVydGVyfSBbZnJvbU9iamVjdF0gRnJvbSBvYmplY3QgY29udmVydGVyXG4gKiBAcHJvcGVydHkge1dyYXBwZXJUb09iamVjdENvbnZlcnRlcn0gW3RvT2JqZWN0XSBUbyBvYmplY3QgY29udmVydGVyXG4gKi9cblxuLy8gQ3VzdG9tIHdyYXBwZXIgZm9yIEFueVxud3JhcHBlcnNbXCIuZ29vZ2xlLnByb3RvYnVmLkFueVwiXSA9IHtcblxuICAgIGZyb21PYmplY3Q6IGZ1bmN0aW9uKG9iamVjdCkge1xuXG4gICAgICAgIC8vIHVud3JhcCB2YWx1ZSB0eXBlIGlmIG1hcHBlZFxuICAgICAgICBpZiAob2JqZWN0ICYmIG9iamVjdFtcIkB0eXBlXCJdKSB7XG4gICAgICAgICAgICAgLy8gT25seSB1c2UgZnVsbHkgcXVhbGlmaWVkIHR5cGUgbmFtZSBhZnRlciB0aGUgbGFzdCAnLydcbiAgICAgICAgICAgIHZhciBuYW1lID0gb2JqZWN0W1wiQHR5cGVcIl0uc3Vic3RyaW5nKG9iamVjdFtcIkB0eXBlXCJdLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmxvb2t1cChuYW1lKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgICAgIC8vIHR5cGVfdXJsIGRvZXMgbm90IGFjY2VwdCBsZWFkaW5nIFwiLlwiXG4gICAgICAgICAgICAgICAgdmFyIHR5cGVfdXJsID0gb2JqZWN0W1wiQHR5cGVcIl0uY2hhckF0KDApID09PSBcIi5cIiA/XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdFtcIkB0eXBlXCJdLnN1YnN0cigxKSA6IG9iamVjdFtcIkB0eXBlXCJdO1xuICAgICAgICAgICAgICAgIC8vIHR5cGVfdXJsIHByZWZpeCBpcyBvcHRpb25hbCwgYnV0IHBhdGggc2VwZXJhdG9yIGlzIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVfdXJsLmluZGV4T2YoXCIvXCIpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlX3VybCA9IFwiL1wiICsgdHlwZV91cmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVfdXJsOiB0eXBlX3VybCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHR5cGUuZW5jb2RlKHR5cGUuZnJvbU9iamVjdChvYmplY3QpKS5maW5pc2goKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbU9iamVjdChvYmplY3QpO1xuICAgIH0sXG5cbiAgICB0b09iamVjdDogZnVuY3Rpb24obWVzc2FnZSwgb3B0aW9ucykge1xuXG4gICAgICAgIC8vIERlZmF1bHQgcHJlZml4XG4gICAgICAgIHZhciBnb29nbGVBcGkgPSBcInR5cGUuZ29vZ2xlYXBpcy5jb20vXCI7XG4gICAgICAgIHZhciBwcmVmaXggPSBcIlwiO1xuICAgICAgICB2YXIgbmFtZSA9IFwiXCI7XG5cbiAgICAgICAgLy8gZGVjb2RlIHZhbHVlIGlmIHJlcXVlc3RlZCBhbmQgdW5tYXBwZWRcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5qc29uICYmIG1lc3NhZ2UudHlwZV91cmwgJiYgbWVzc2FnZS52YWx1ZSkge1xuICAgICAgICAgICAgLy8gT25seSB1c2UgZnVsbHkgcXVhbGlmaWVkIHR5cGUgbmFtZSBhZnRlciB0aGUgbGFzdCAnLydcbiAgICAgICAgICAgIG5hbWUgPSBtZXNzYWdlLnR5cGVfdXJsLnN1YnN0cmluZyhtZXNzYWdlLnR5cGVfdXJsLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgICAgICAgICAgLy8gU2VwYXJhdGUgdGhlIHByZWZpeCB1c2VkXG4gICAgICAgICAgICBwcmVmaXggPSBtZXNzYWdlLnR5cGVfdXJsLnN1YnN0cmluZygwLCBtZXNzYWdlLnR5cGVfdXJsLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xuICAgICAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmxvb2t1cChuYW1lKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAodHlwZSlcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gdHlwZS5kZWNvZGUobWVzc2FnZS52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3cmFwIHZhbHVlIGlmIHVubWFwcGVkXG4gICAgICAgIGlmICghKG1lc3NhZ2UgaW5zdGFuY2VvZiB0aGlzLmN0b3IpICYmIG1lc3NhZ2UgaW5zdGFuY2VvZiBNZXNzYWdlKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gbWVzc2FnZS4kdHlwZS50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlTmFtZSA9IG1lc3NhZ2UuJHR5cGUuZnVsbE5hbWVbMF0gPT09IFwiLlwiID9cbiAgICAgICAgICAgICAgICBtZXNzYWdlLiR0eXBlLmZ1bGxOYW1lLnN1YnN0cigxKSA6IG1lc3NhZ2UuJHR5cGUuZnVsbE5hbWU7XG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIHR5cGUuZ29vZ2xlYXBpcy5jb20gcHJlZml4IGlmIG5vIHByZWZpeCBpcyB1c2VkXG4gICAgICAgICAgICBpZiAocHJlZml4ID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgcHJlZml4ID0gZ29vZ2xlQXBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmFtZSA9IHByZWZpeCArIG1lc3NhZ2VOYW1lO1xuICAgICAgICAgICAgb2JqZWN0W1wiQHR5cGVcIl0gPSBuYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgIH1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFPWixJQUFJQSxRQUFRLEdBQUdDLE9BQU87QUFFdEIsSUFBSUMsT0FBTyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBNkJsQ0gsUUFBUSxDQUFDLHNCQUFzQixDQUFDLEdBQUc7RUFFL0JJLFVBQVUsRUFBRSxvQkFBU0MsTUFBTSxFQUFFO0lBR3pCLElBQUlBLE1BQU0sSUFBSUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO01BRTNCLElBQUlDLElBQUksR0FBR0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDRSxTQUFTLENBQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQ0csV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUMxRSxJQUFJQyxJQUFJLEdBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUNKLElBQUksQ0FBQztNQUU1QixJQUFJRyxJQUFJLEVBQUU7UUFFTixJQUFJRSxRQUFRLEdBQUdOLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQ08sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FDNUNQLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQ1EsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHUixNQUFNLENBQUMsT0FBTyxDQUFDO1FBRS9DLElBQUlNLFFBQVEsQ0FBQ0csT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1VBQzlCSCxRQUFRLEdBQUcsR0FBRyxHQUFHQSxRQUFRO1FBQzdCO1FBQ0EsT0FBTyxJQUFJLENBQUNJLE1BQU0sQ0FBQztVQUNmSixRQUFRLEVBQUVBLFFBQVE7VUFDbEJLLEtBQUssRUFBRVAsSUFBSSxDQUFDUSxNQUFNLENBQUNSLElBQUksQ0FBQ0wsVUFBVSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDYSxNQUFNO1FBQ3RELENBQUMsQ0FBQztNQUNOO0lBQ0o7SUFFQSxPQUFPLElBQUksQ0FBQ2QsVUFBVSxDQUFDQyxNQUFNLENBQUM7RUFDbEMsQ0FBQztFQUVEYyxRQUFRLEVBQUUsa0JBQVNDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0lBR2pDLElBQUlDLFNBQVMsR0FBRyxzQkFBc0I7SUFDdEMsSUFBSUMsTUFBTSxHQUFHLEVBQUU7SUFDZixJQUFJakIsSUFBSSxHQUFHLEVBQUU7SUFHYixJQUFJZSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0csSUFBSSxJQUFJSixPQUFPLENBQUNULFFBQVEsSUFBSVMsT0FBTyxDQUFDSixLQUFLLEVBQUU7TUFFOURWLElBQUksR0FBR2MsT0FBTyxDQUFDVCxRQUFRLENBQUNKLFNBQVMsQ0FBQ2EsT0FBTyxDQUFDVCxRQUFRLENBQUNILFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7TUFFeEVlLE1BQU0sR0FBR0gsT0FBTyxDQUFDVCxRQUFRLENBQUNKLFNBQVMsQ0FBQyxDQUFDLEVBQUVhLE9BQU8sQ0FBQ1QsUUFBUSxDQUFDSCxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQzdFLElBQUlDLElBQUksR0FBRyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0osSUFBSSxDQUFDO01BRTVCLElBQUlHLElBQUksRUFDSlcsT0FBTyxHQUFHWCxJQUFJLENBQUNnQixNQUFNLENBQUNMLE9BQU8sQ0FBQ0osS0FBSyxDQUFDO0lBQzVDO0lBR0EsSUFBSSxFQUFFSSxPQUFPLFlBQVksSUFBSSxDQUFDTSxJQUFJLENBQUMsSUFBSU4sT0FBTyxZQUFZbEIsT0FBTyxFQUFFO01BQy9ELElBQUlHLE1BQU0sR0FBR2UsT0FBTyxDQUFDTyxLQUFLLENBQUNSLFFBQVEsQ0FBQ0MsT0FBTyxFQUFFQyxPQUFPLENBQUM7TUFDckQsSUFBSU8sV0FBVyxHQUFHUixPQUFPLENBQUNPLEtBQUssQ0FBQ0UsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FDL0NULE9BQU8sQ0FBQ08sS0FBSyxDQUFDRSxRQUFRLENBQUNoQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUdPLE9BQU8sQ0FBQ08sS0FBSyxDQUFDRSxRQUFRO01BRTdELElBQUlOLE1BQU0sS0FBSyxFQUFFLEVBQUU7UUFDZkEsTUFBTSxHQUFHRCxTQUFTO01BQ3RCO01BQ0FoQixJQUFJLEdBQUdpQixNQUFNLEdBQUdLLFdBQVc7TUFDM0J2QixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUdDLElBQUk7TUFDdEIsT0FBT0QsTUFBTTtJQUNqQjtJQUVBLE9BQU8sSUFBSSxDQUFDYyxRQUFRLENBQUNDLE9BQU8sRUFBRUMsT0FBTyxDQUFDO0VBQzFDO0FBQ0osQ0FBQyJ9