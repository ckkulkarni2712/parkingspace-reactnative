fc0fee7e8be0298177f73c2114111e33
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeOnTheScreen = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
function toBeOnTheScreen(element) {
  var _this = this;
  if (element !== null) {
    (0, utils_1.checkReactElement)(element, toBeOnTheScreen, this);
  }
  var pass = element === null ? false : getScreen().container === getRootElement(element);
  var errorFound = function errorFound() {
    return "expected element tree not to contain element but found:\n" + (0, utils_1.printElement)(element);
  };
  var errorNotFound = function errorNotFound() {
    return "element could not be found in the element tree";
  };
  return {
    pass: pass,
    message: function message() {
      return [(0, jest_matcher_utils_1.matcherHint)((_this.isNot ? '.not' : '') + ".toBeOnTheScreen", 'element', ''), '', (0, jest_matcher_utils_1.RECEIVED_COLOR)(_this.isNot ? errorFound() : errorNotFound())].join('\n');
    }
  };
}
exports.toBeOnTheScreen = toBeOnTheScreen;
function getRootElement(element) {
  var root = element;
  while (root.parent) {
    root = root.parent;
  }
  return root;
}
function getScreen() {
  try {
    var _require = require('@testing-library/react-native'),
      screen = _require.screen;
    if (!screen) {
      throw new Error('screen is undefined');
    }
    return screen;
  } catch (error) {
    throw new Error('Could not import `screen` object from @testing-library/react-native.\n\n' + 'Using toBeOnTheScreen() matcher requires @testing-library/react-native v10.1.0 or later to be added to your devDependencies.');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVPblRoZVNjcmVlbiIsImplc3RfbWF0Y2hlcl91dGlsc18xIiwicmVxdWlyZSIsInV0aWxzXzEiLCJlbGVtZW50IiwiY2hlY2tSZWFjdEVsZW1lbnQiLCJwYXNzIiwiZ2V0U2NyZWVuIiwiY29udGFpbmVyIiwiZ2V0Um9vdEVsZW1lbnQiLCJlcnJvckZvdW5kIiwicHJpbnRFbGVtZW50IiwiZXJyb3JOb3RGb3VuZCIsIm1lc3NhZ2UiLCJtYXRjaGVySGludCIsImlzTm90IiwiUkVDRUlWRURfQ09MT1IiLCJqb2luIiwicm9vdCIsInBhcmVudCIsInNjcmVlbiIsIkVycm9yIiwiZXJyb3IiXSwic291cmNlcyI6WyJ0by1iZS1vbi10aGUtc2NyZWVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b0JlT25UaGVTY3JlZW4gPSB2b2lkIDA7XG5jb25zdCBqZXN0X21hdGNoZXJfdXRpbHNfMSA9IHJlcXVpcmUoXCJqZXN0LW1hdGNoZXItdXRpbHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5mdW5jdGlvbiB0b0JlT25UaGVTY3JlZW4oZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICgwLCB1dGlsc18xLmNoZWNrUmVhY3RFbGVtZW50KShlbGVtZW50LCB0b0JlT25UaGVTY3JlZW4sIHRoaXMpO1xuICAgIH1cbiAgICBjb25zdCBwYXNzID0gZWxlbWVudCA9PT0gbnVsbCA/IGZhbHNlIDogZ2V0U2NyZWVuKCkuY29udGFpbmVyID09PSBnZXRSb290RWxlbWVudChlbGVtZW50KTtcbiAgICBjb25zdCBlcnJvckZvdW5kID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gYGV4cGVjdGVkIGVsZW1lbnQgdHJlZSBub3QgdG8gY29udGFpbiBlbGVtZW50IGJ1dCBmb3VuZDpcXG4keygwLCB1dGlsc18xLnByaW50RWxlbWVudCkoZWxlbWVudCl9YDtcbiAgICB9O1xuICAgIGNvbnN0IGVycm9yTm90Rm91bmQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBgZWxlbWVudCBjb3VsZCBub3QgYmUgZm91bmQgaW4gdGhlIGVsZW1lbnQgdHJlZWA7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXNzLFxuICAgICAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5tYXRjaGVySGludCkoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlT25UaGVTY3JlZW5gLCAnZWxlbWVudCcsICcnKSxcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEuUkVDRUlWRURfQ09MT1IpKHRoaXMuaXNOb3QgPyBlcnJvckZvdW5kKCkgOiBlcnJvck5vdEZvdW5kKCkpLFxuICAgICAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy50b0JlT25UaGVTY3JlZW4gPSB0b0JlT25UaGVTY3JlZW47XG5mdW5jdGlvbiBnZXRSb290RWxlbWVudChlbGVtZW50KSB7XG4gICAgbGV0IHJvb3QgPSBlbGVtZW50O1xuICAgIHdoaWxlIChyb290LnBhcmVudCkge1xuICAgICAgICByb290ID0gcm9vdC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiByb290O1xufVxuZnVuY3Rpb24gZ2V0U2NyZWVuKCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbiAgICAgICAgY29uc3QgeyBzY3JlZW4gfSA9IHJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJyk7XG4gICAgICAgIGlmICghc2NyZWVuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NjcmVlbiBpcyB1bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NyZWVuO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgaW1wb3J0IGBzY3JlZW5gIG9iamVjdCBmcm9tIEB0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlLlxcblxcbicgK1xuICAgICAgICAgICAgJ1VzaW5nIHRvQmVPblRoZVNjcmVlbigpIG1hdGNoZXIgcmVxdWlyZXMgQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUgdjEwLjEuMCBvciBsYXRlciB0byBiZSBhZGRlZCB0byB5b3VyIGRldkRlcGVuZGVuY2llcy4nKTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1pBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQUVDLEtBQUssRUFBRTtBQUFLLENBQUMsQ0FBQztBQUM3REQsT0FBTyxDQUFDRSxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLElBQU1DLG9CQUFvQixHQUFHQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDMUQsSUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQVNGLGVBQWUsQ0FBQ0ksT0FBTyxFQUFFO0VBQUE7RUFDOUIsSUFBSUEsT0FBTyxLQUFLLElBQUksRUFBRTtJQUNsQixDQUFDLENBQUMsRUFBRUQsT0FBTyxDQUFDRSxpQkFBaUIsRUFBRUQsT0FBTyxFQUFFSixlQUFlLEVBQUUsSUFBSSxDQUFDO0VBQ2xFO0VBQ0EsSUFBTU0sSUFBSSxHQUFHRixPQUFPLEtBQUssSUFBSSxHQUFHLEtBQUssR0FBR0csU0FBUyxFQUFFLENBQUNDLFNBQVMsS0FBS0MsY0FBYyxDQUFDTCxPQUFPLENBQUM7RUFDekYsSUFBTU0sVUFBVSxHQUFHLFNBQWJBLFVBQVUsR0FBUztJQUNyQixxRUFBbUUsQ0FBQyxDQUFDLEVBQUVQLE9BQU8sQ0FBQ1EsWUFBWSxFQUFFUCxPQUFPLENBQUM7RUFDekcsQ0FBQztFQUNELElBQU1RLGFBQWEsR0FBRyxTQUFoQkEsYUFBYSxHQUFTO0lBQ3hCO0VBQ0osQ0FBQztFQUNELE9BQU87SUFDSE4sSUFBSSxFQUFKQSxJQUFJO0lBQ0pPLE9BQU8sRUFBRSxtQkFBTTtNQUNYLE9BQU8sQ0FDSCxDQUFDLENBQUMsRUFBRVosb0JBQW9CLENBQUNhLFdBQVcsR0FBSyxLQUFJLENBQUNDLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRSx3QkFBb0IsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUNuRyxFQUFFLEVBQ0YsQ0FBQyxDQUFDLEVBQUVkLG9CQUFvQixDQUFDZSxjQUFjLEVBQUUsS0FBSSxDQUFDRCxLQUFLLEdBQUdMLFVBQVUsRUFBRSxHQUFHRSxhQUFhLEVBQUUsQ0FBQyxDQUN4RixDQUFDSyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hCO0VBQ0osQ0FBQztBQUNMO0FBQ0FuQixPQUFPLENBQUNFLGVBQWUsR0FBR0EsZUFBZTtBQUN6QyxTQUFTUyxjQUFjLENBQUNMLE9BQU8sRUFBRTtFQUM3QixJQUFJYyxJQUFJLEdBQUdkLE9BQU87RUFDbEIsT0FBT2MsSUFBSSxDQUFDQyxNQUFNLEVBQUU7SUFDaEJELElBQUksR0FBR0EsSUFBSSxDQUFDQyxNQUFNO0VBQ3RCO0VBQ0EsT0FBT0QsSUFBSTtBQUNmO0FBQ0EsU0FBU1gsU0FBUyxHQUFHO0VBQ2pCLElBQUk7SUFFQSxlQUFtQkwsT0FBTyxDQUFDLCtCQUErQixDQUFDO01BQW5Ea0IsTUFBTSxZQUFOQSxNQUFNO0lBQ2QsSUFBSSxDQUFDQSxNQUFNLEVBQUU7TUFDVCxNQUFNLElBQUlDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztJQUMxQztJQUNBLE9BQU9ELE1BQU07RUFDakIsQ0FBQyxDQUNELE9BQU9FLEtBQUssRUFBRTtJQUNWLE1BQU0sSUFBSUQsS0FBSyxDQUFDLDBFQUEwRSxHQUN0Riw4SEFBOEgsQ0FBQztFQUN2STtBQUNKIn0=