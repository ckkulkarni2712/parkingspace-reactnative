56ef6cea9c57c8988d93bfc1e3ab27ee
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeQueries = makeQueries;
var _errors = require("../helpers/errors");
var _waitFor = _interopRequireDefault(require("../waitFor"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var deprecatedKeys = ['timeout', 'interval', 'stackTraceError'];
function extractDeprecatedWaitForOptions(options) {
  if (!options) {
    return undefined;
  }
  var waitForOptions = {
    timeout: options.timeout,
    interval: options.interval,
    stackTraceError: options.stackTraceError
  };
  deprecatedKeys.forEach(function (key) {
    var option = options[key];
    if (option) {
      console.warn("Use of option \"" + key + "\" in a findBy* query options (2nd parameter) is deprecated. Please pass this option in the waitForOptions (3rd parameter). \nExample: \n\n  findByText(text, {}, { " + key + ": " + option.toString() + " })");
    }
  });
  return waitForOptions;
}
function makeQueries(queryAllByQuery, getMissingError, getMultipleError) {
  function getAllByQuery(instance) {
    return function getAllFn(predicate, options) {
      var results = queryAllByQuery(instance)(predicate, options);
      if (results.length === 0) {
        throw new _errors.ErrorWithStack(getMissingError(predicate, options), getAllFn);
      }
      return results;
    };
  }
  function queryByQuery(instance) {
    return function singleQueryFn(predicate, options) {
      var results = queryAllByQuery(instance)(predicate, options);
      if (results.length > 1) {
        throw new _errors.ErrorWithStack(getMultipleError(predicate, options), singleQueryFn);
      }
      if (results.length === 0) {
        return null;
      }
      return results[0];
    };
  }
  function getByQuery(instance) {
    return function getFn(predicate, options) {
      var results = queryAllByQuery(instance)(predicate, options);
      if (results.length > 1) {
        throw new _errors.ErrorWithStack(getMultipleError(predicate, options), getFn);
      }
      if (results.length === 0) {
        throw new _errors.ErrorWithStack(getMissingError(predicate, options), getFn);
      }
      return results[0];
    };
  }
  function findAllByQuery(instance) {
    return function findAllFn(predicate, queryOptions) {
      var waitForOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var deprecatedWaitForOptions = extractDeprecatedWaitForOptions(queryOptions);
      return (0, _waitFor.default)(function () {
        return getAllByQuery(instance)(predicate, queryOptions);
      }, Object.assign({}, deprecatedWaitForOptions, waitForOptions));
    };
  }
  function findByQuery(instance) {
    return function findFn(predicate, queryOptions) {
      var waitForOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var deprecatedWaitForOptions = extractDeprecatedWaitForOptions(queryOptions);
      return (0, _waitFor.default)(function () {
        return getByQuery(instance)(predicate, queryOptions);
      }, Object.assign({}, deprecatedWaitForOptions, waitForOptions));
    };
  }
  return {
    getBy: getByQuery,
    getAllBy: getAllByQuery,
    queryBy: queryByQuery,
    queryAllBy: queryAllByQuery,
    findBy: findByQuery,
    findAllBy: findAllByQuery
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,