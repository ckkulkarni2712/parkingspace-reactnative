7642e3a3eaebc77a619277ca42f05f8c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveStyle = void 0;
var react_native_1 = require("react-native");
var jest_matcher_utils_1 = require("jest-matcher-utils");
var jest_diff_1 = require("jest-diff");
var chalk_1 = __importDefault(require("chalk"));
var utils_1 = require("./utils");
function printoutStyles(style) {
  return Object.keys(style).sort().map(function (prop) {
    return Array.isArray(style[prop]) ? prop + ": " + JSON.stringify(style[prop], null, 2) + ";" : prop + ": " + style[prop] + ";";
  }).join('\n');
}
function narrow(expected, received) {
  return Object.keys(received).filter(function (prop) {
    return expected[prop];
  }).reduce(function (obj, prop) {
    return Object.assign(obj, (0, _defineProperty2.default)({}, prop, received[prop]));
  }, {});
}
function expectedDiff(expected, received) {
  var _diffOutput$replace;
  var receivedNarrow = narrow(expected, received);
  var diffOutput = (0, jest_diff_1.diff)(printoutStyles(expected), printoutStyles(receivedNarrow));
  return (_diffOutput$replace = diffOutput == null ? void 0 : diffOutput.replace(chalk_1.default.red('+ Received') + "\n", '')) != null ? _diffOutput$replace : '';
}
function toHaveStyle(element, style) {
  var _react_native_1$Style,
    _react_native_1$Style2,
    _this = this;
  (0, utils_1.checkReactElement)(element, toHaveStyle, this);
  var expected = (_react_native_1$Style = react_native_1.StyleSheet.flatten(style)) != null ? _react_native_1$Style : {};
  var received = (_react_native_1$Style2 = react_native_1.StyleSheet.flatten(element.props.style)) != null ? _react_native_1$Style2 : {};
  return {
    pass: Object.entries(expected).every(function (_ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        prop = _ref2[0],
        value = _ref2[1];
      return _this.equals(received == null ? void 0 : received[prop], value);
    }),
    message: function message() {
      var matcher = (_this.isNot ? '.not' : '') + ".toHaveStyle";
      return [(0, jest_matcher_utils_1.matcherHint)(matcher, 'element', ''), expectedDiff(expected, received)].join('\n\n');
    }
  };
}
exports.toHaveStyle = toHaveStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0b0hhdmVTdHlsZSIsInJlYWN0X25hdGl2ZV8xIiwicmVxdWlyZSIsImplc3RfbWF0Y2hlcl91dGlsc18xIiwiamVzdF9kaWZmXzEiLCJjaGFsa18xIiwidXRpbHNfMSIsInByaW50b3V0U3R5bGVzIiwic3R5bGUiLCJrZXlzIiwic29ydCIsIm1hcCIsInByb3AiLCJBcnJheSIsImlzQXJyYXkiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsIm5hcnJvdyIsImV4cGVjdGVkIiwicmVjZWl2ZWQiLCJmaWx0ZXIiLCJyZWR1Y2UiLCJvYmoiLCJhc3NpZ24iLCJleHBlY3RlZERpZmYiLCJyZWNlaXZlZE5hcnJvdyIsImRpZmZPdXRwdXQiLCJkaWZmIiwicmVwbGFjZSIsImRlZmF1bHQiLCJyZWQiLCJlbGVtZW50IiwiY2hlY2tSZWFjdEVsZW1lbnQiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsInByb3BzIiwicGFzcyIsImVudHJpZXMiLCJldmVyeSIsImVxdWFscyIsIm1lc3NhZ2UiLCJtYXRjaGVyIiwiaXNOb3QiLCJtYXRjaGVySGludCJdLCJzb3VyY2VzIjpbInRvLWhhdmUtc3R5bGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvSGF2ZVN0eWxlID0gdm9pZCAwO1xuY29uc3QgcmVhY3RfbmF0aXZlXzEgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuY29uc3QgamVzdF9tYXRjaGVyX3V0aWxzXzEgPSByZXF1aXJlKFwiamVzdC1tYXRjaGVyLXV0aWxzXCIpO1xuY29uc3QgamVzdF9kaWZmXzEgPSByZXF1aXJlKFwiamVzdC1kaWZmXCIpO1xuY29uc3QgY2hhbGtfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2hhbGtcIikpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuZnVuY3Rpb24gcHJpbnRvdXRTdHlsZXMoc3R5bGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGUpXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLm1hcCgocHJvcCkgPT4gQXJyYXkuaXNBcnJheShzdHlsZVtwcm9wXSlcbiAgICAgICAgPyBgJHtwcm9wfTogJHtKU09OLnN0cmluZ2lmeShzdHlsZVtwcm9wXSwgbnVsbCwgMil9O2BcbiAgICAgICAgOiBgJHtwcm9wfTogJHtzdHlsZVtwcm9wXX07YClcbiAgICAgICAgLmpvaW4oJ1xcbicpO1xufVxuLyoqXG4gKiBOYXJyb3dzIGRvd24gdGhlIHByb3BlcnRpZXMgaW4gcmVjZWl2ZWQgdG8gdGhvc2Ugd2l0aCBjb3VudGVycGFydHMgaW4gZXhwZWN0ZWRcbiAqL1xuZnVuY3Rpb24gbmFycm93KGV4cGVjdGVkLCByZWNlaXZlZCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhyZWNlaXZlZClcbiAgICAgICAgLmZpbHRlcigocHJvcCkgPT4gZXhwZWN0ZWRbcHJvcF0pXG4gICAgICAgIC5yZWR1Y2UoKG9iaiwgcHJvcCkgPT4gT2JqZWN0LmFzc2lnbihvYmosIHtcbiAgICAgICAgW3Byb3BdOiByZWNlaXZlZFtwcm9wXSxcbiAgICB9KSwge30pO1xufVxuLy8gSGlnaGxpZ2h0cyBvbmx5IHN0eWxlIHJ1bGVzIHRoYXQgd2VyZSBleHBlY3RlZCBidXQgd2VyZSBub3QgZm91bmQgaW4gdGhlXG4vLyByZWNlaXZlZCBjb21wdXRlZCBzdHlsZXNcbmZ1bmN0aW9uIGV4cGVjdGVkRGlmZihleHBlY3RlZCwgcmVjZWl2ZWQpIHtcbiAgICBjb25zdCByZWNlaXZlZE5hcnJvdyA9IG5hcnJvdyhleHBlY3RlZCwgcmVjZWl2ZWQpO1xuICAgIGNvbnN0IGRpZmZPdXRwdXQgPSAoMCwgamVzdF9kaWZmXzEuZGlmZikocHJpbnRvdXRTdHlsZXMoZXhwZWN0ZWQpLCBwcmludG91dFN0eWxlcyhyZWNlaXZlZE5hcnJvdykpO1xuICAgIC8vIFJlbW92ZSB0aGUgXCIrIFJlY2VpdmVkXCIgYW5ub3RhdGlvbiBiZWNhdXNlIHRoaXMgaXMgYSBvbmUtd2F5IGRpZmZcbiAgICByZXR1cm4gZGlmZk91dHB1dD8ucmVwbGFjZShgJHtjaGFsa18xLmRlZmF1bHQucmVkKCcrIFJlY2VpdmVkJyl9XFxuYCwgJycpID8/ICcnO1xufVxuZnVuY3Rpb24gdG9IYXZlU3R5bGUoZWxlbWVudCwgc3R5bGUpIHtcbiAgICAoMCwgdXRpbHNfMS5jaGVja1JlYWN0RWxlbWVudCkoZWxlbWVudCwgdG9IYXZlU3R5bGUsIHRoaXMpO1xuICAgIGNvbnN0IGV4cGVjdGVkID0gKHJlYWN0X25hdGl2ZV8xLlN0eWxlU2hlZXQuZmxhdHRlbihzdHlsZSkgPz8ge30pO1xuICAgIGNvbnN0IHJlY2VpdmVkID0gKHJlYWN0X25hdGl2ZV8xLlN0eWxlU2hlZXQuZmxhdHRlbihlbGVtZW50LnByb3BzLnN0eWxlKSA/PyB7fSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFzczogT2JqZWN0LmVudHJpZXMoZXhwZWN0ZWQpLmV2ZXJ5KChbcHJvcCwgdmFsdWVdKSA9PiB0aGlzLmVxdWFscyhyZWNlaXZlZD8uW3Byb3BdLCB2YWx1ZSkpLFxuICAgICAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVyID0gYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0hhdmVTdHlsZWA7XG4gICAgICAgICAgICByZXR1cm4gWygwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5tYXRjaGVySGludCkobWF0Y2hlciwgJ2VsZW1lbnQnLCAnJyksIGV4cGVjdGVkRGlmZihleHBlY3RlZCwgcmVjZWl2ZWQpXS5qb2luKCdcXG5cXG4nKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy50b0hhdmVTdHlsZSA9IHRvSGF2ZVN0eWxlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUFDO0FBQUE7QUFBQTtBQUNiLElBQUlBLGVBQWUsR0FBSSxJQUFJLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssVUFBVUMsR0FBRyxFQUFFO0VBQ25FLE9BQVFBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUlELEdBQUcsR0FBRztJQUFFLFNBQVMsRUFBRUE7RUFBSSxDQUFDO0FBQzdELENBQUM7QUFDREUsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdERCxPQUFPLENBQUNFLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDNUIsSUFBTUMsY0FBYyxHQUFHQyxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQzlDLElBQU1DLG9CQUFvQixHQUFHRCxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDMUQsSUFBTUUsV0FBVyxHQUFHRixPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3hDLElBQU1HLE9BQU8sR0FBR1osZUFBZSxDQUFDUyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakQsSUFBTUksT0FBTyxHQUFHSixPQUFPLENBQUMsU0FBUyxDQUFDO0FBQ2xDLFNBQVNLLGNBQWMsQ0FBQ0MsS0FBSyxFQUFFO0VBQzNCLE9BQU9aLE1BQU0sQ0FBQ2EsSUFBSSxDQUFDRCxLQUFLLENBQUMsQ0FDcEJFLElBQUksRUFBRSxDQUNOQyxHQUFHLENBQUMsVUFBQ0MsSUFBSTtJQUFBLE9BQUtDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDTixLQUFLLENBQUNJLElBQUksQ0FBQyxDQUFDLEdBQ3BDQSxJ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