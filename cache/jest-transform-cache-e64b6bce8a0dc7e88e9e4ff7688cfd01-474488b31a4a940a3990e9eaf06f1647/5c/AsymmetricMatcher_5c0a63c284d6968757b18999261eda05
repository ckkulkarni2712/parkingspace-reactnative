e586508a6e722ea48ecd71bb67fc2360
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _collections = require('../collections');
var Symbol = globalThis['jest-symbol-do-not-touch'] || globalThis.Symbol;
var asymmetricMatcher = typeof Symbol === 'function' && Symbol.for ? Symbol.for('jest.asymmetricMatcher') : 0x1357a5;
var SPACE = ' ';
var serialize = function serialize(val, config, indentation, depth, refs, printer) {
  var stringedValue = val.toString();
  if (stringedValue === 'ArrayContaining' || stringedValue === 'ArrayNotContaining') {
    if (++depth > config.maxDepth) {
      return "[" + stringedValue + "]";
    }
    return stringedValue + SPACE + "[" + (0, _collections.printListItems)(val.sample, config, indentation, depth, refs, printer) + "]";
  }
  if (stringedValue === 'ObjectContaining' || stringedValue === 'ObjectNotContaining') {
    if (++depth > config.maxDepth) {
      return "[" + stringedValue + "]";
    }
    return stringedValue + SPACE + "{" + (0, _collections.printObjectProperties)(val.sample, config, indentation, depth, refs, printer) + "}";
  }
  if (stringedValue === 'StringMatching' || stringedValue === 'StringNotMatching') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }
  if (stringedValue === 'StringContaining' || stringedValue === 'StringNotContaining') {
    return stringedValue + SPACE + printer(val.sample, config, indentation, depth, refs);
  }
  if (typeof val.toAsymmetricMatcher !== 'function') {
    throw new Error("Asymmetric matcher " + val.constructor.name + " does not implement toAsymmetricMatcher()");
  }
  return val.toAsymmetricMatcher();
};
exports.serialize = serialize;
var test = function test(val) {
  return val && val.$$typeof === asymmetricMatcher;
};
exports.test = test;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRlc3QiLCJzZXJpYWxpemUiLCJkZWZhdWx0IiwiX2NvbGxlY3Rpb25zIiwicmVxdWlyZSIsIlN5bWJvbCIsImdsb2JhbFRoaXMiLCJhc3ltbWV0cmljTWF0Y2hlciIsImZvciIsIlNQQUNFIiwidmFsIiwiY29uZmlnIiwiaW5kZW50YXRpb24iLCJkZXB0aCIsInJlZnMiLCJwcmludGVyIiwic3RyaW5nZWRWYWx1ZSIsInRvU3RyaW5nIiwibWF4RGVwdGgiLCJwcmludExpc3RJdGVtcyIsInNhbXBsZSIsInByaW50T2JqZWN0UHJvcGVydGllcyIsInRvQXN5bW1ldHJpY01hdGNoZXIiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsIiQkdHlwZW9mIiwicGx1Z2luIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJBc3ltbWV0cmljTWF0Y2hlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50ZXN0ID0gZXhwb3J0cy5zZXJpYWxpemUgPSBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NvbGxlY3Rpb25zID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWxUaGlzWydqZXN0LXN5bWJvbC1kby1ub3QtdG91Y2gnXSB8fCBnbG9iYWxUaGlzLlN5bWJvbDtcbmNvbnN0IGFzeW1tZXRyaWNNYXRjaGVyID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yXG4gICAgPyBTeW1ib2wuZm9yKCdqZXN0LmFzeW1tZXRyaWNNYXRjaGVyJylcbiAgICA6IDB4MTM1N2E1O1xuY29uc3QgU1BBQ0UgPSAnICc7XG5jb25zdCBzZXJpYWxpemUgPSAodmFsLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT4ge1xuICBjb25zdCBzdHJpbmdlZFZhbHVlID0gdmFsLnRvU3RyaW5nKCk7XG4gIGlmIChcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnQXJyYXlDb250YWluaW5nJyB8fFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdBcnJheU5vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgICByZXR1cm4gYFske3N0cmluZ2VkVmFsdWV9XWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtzdHJpbmdlZFZhbHVlICsgU1BBQ0V9WyR7KDAsIF9jb2xsZWN0aW9ucy5wcmludExpc3RJdGVtcykoXG4gICAgICB2YWwuc2FtcGxlLFxuICAgICAgY29uZmlnLFxuICAgICAgaW5kZW50YXRpb24sXG4gICAgICBkZXB0aCxcbiAgICAgIHJlZnMsXG4gICAgICBwcmludGVyXG4gICAgKX1dYDtcbiAgfVxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ09iamVjdENvbnRhaW5pbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ09iamVjdE5vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgICByZXR1cm4gYFske3N0cmluZ2VkVmFsdWV9XWA7XG4gICAgfVxuICAgIHJldHVybiBgJHtzdHJpbmdlZFZhbHVlICsgU1BBQ0V9eyR7KDAsIF9jb2xsZWN0aW9ucy5wcmludE9iamVjdFByb3BlcnRpZXMpKFxuICAgICAgdmFsLnNhbXBsZSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGluZGVudGF0aW9uLFxuICAgICAgZGVwdGgsXG4gICAgICByZWZzLFxuICAgICAgcHJpbnRlclxuICAgICl9fWA7XG4gIH1cbiAgaWYgKFxuICAgIHN0cmluZ2VkVmFsdWUgPT09ICdTdHJpbmdNYXRjaGluZycgfHxcbiAgICBzdHJpbmdlZFZhbHVlID09PSAnU3RyaW5nTm90TWF0Y2hpbmcnXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmdlZFZhbHVlICtcbiAgICAgIFNQQUNFICtcbiAgICAgIHByaW50ZXIodmFsLnNhbXBsZSwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMpXG4gICAgKTtcbiAgfVxuICBpZiAoXG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ1N0cmluZ0NvbnRhaW5pbmcnIHx8XG4gICAgc3RyaW5nZWRWYWx1ZSA9PT0gJ1N0cmluZ05vdENvbnRhaW5pbmcnXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmdlZFZhbHVlICtcbiAgICAgIFNQQUNFICtcbiAgICAgIHByaW50ZXIodmFsLnNhbXBsZSwgY29uZmlnLCBpbmRlbnRhdGlvbiwgZGVwdGgsIHJlZnMpXG4gICAgKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbC50b0FzeW1tZXRyaWNNYXRjaGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEFzeW1tZXRyaWMgbWF0Y2hlciAke3ZhbC5jb25zdHJ1Y3Rvci5uYW1lfSBkb2VzIG5vdCBpbXBsZW1lbnQgdG9Bc3ltbWV0cmljTWF0Y2hlcigpYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHZhbC50b0FzeW1tZXRyaWNNYXRjaGVyKCk7XG59O1xuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5jb25zdCB0ZXN0ID0gdmFsID0+IHZhbCAmJiB2YWwuJCR0eXBlb2YgPT09IGFzeW1tZXRyaWNNYXRjaGVyO1xuZXhwb3J0cy50ZXN0ID0gdGVzdDtcbmNvbnN0IHBsdWdpbiA9IHtcbiAgc2VyaWFsaXplLFxuICB0ZXN0XG59O1xudmFyIF9kZWZhdWx0ID0gcGx1Z2luO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVB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