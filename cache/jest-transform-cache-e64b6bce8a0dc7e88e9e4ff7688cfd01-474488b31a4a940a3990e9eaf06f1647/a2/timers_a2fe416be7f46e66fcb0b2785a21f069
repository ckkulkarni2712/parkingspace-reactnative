0ed87e575656168f537783b11aeec81b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jestFakeTimersAreEnabled = exports.clearTimeout = void 0;
exports.runWithRealTimers = runWithRealTimers;
exports.setTimeout = exports.setImmediate = void 0;
var globalObj = typeof window === 'undefined' ? global : window;
function runWithRealTimers(callback) {
  var fakeTimersType = getJestFakeTimersType();
  if (fakeTimersType) {
    jest.useRealTimers();
  }
  var callbackReturnValue = callback();
  if (fakeTimersType) {
    var fakeTimersConfig = getFakeTimersConfigFromType(fakeTimersType);
    jest.useFakeTimers(fakeTimersConfig);
  }
  return callbackReturnValue;
}
function getJestFakeTimersType() {
  if (typeof jest === 'undefined' || typeof globalObj.setTimeout === 'undefined' || process.env.RNTL_SKIP_AUTO_DETECT_FAKE_TIMERS) {
    return null;
  }
  if (typeof globalObj.setTimeout._isMockFunction !== 'undefined' && globalObj.setTimeout._isMockFunction) {
    return 'legacy';
  }
  if (typeof globalObj.setTimeout.clock !== 'undefined' && typeof jest.getRealSystemTime !== 'undefined') {
    try {
      jest.getRealSystemTime();
      return 'modern';
    } catch (_unused) {}
  }
  return null;
}
function getFakeTimersConfigFromType(type) {
  return type === 'legacy' ? {
    legacyFakeTimers: true
  } : {
    legacyFakeTimers: false
  };
}
var jestFakeTimersAreEnabled = function jestFakeTimersAreEnabled() {
  return Boolean(getJestFakeTimersType());
};
exports.jestFakeTimersAreEnabled = jestFakeTimersAreEnabled;
function setImmediatePolyfill(fn) {
  return globalObj.setTimeout(fn, 0);
}
function bindTimeFunctions() {
  return {
    clearTimeoutFn: globalObj.clearTimeout,
    setImmediateFn: globalObj.setImmediate || setImmediatePolyfill,
    setTimeoutFn: globalObj.setTimeout
  };
}
var _runWithRealTimers = runWithRealTimers(bindTimeFunctions),
  clearTimeoutFn = _runWithRealTimers.clearTimeoutFn,
  setImmediateFn = _runWithRealTimers.setImmediateFn,
  setTimeoutFn = _runWithRealTimers.setTimeoutFn;
exports.setTimeout = setTimeoutFn;
exports.setImmediate = setImmediateFn;
exports.clearTimeout = clearTimeoutFn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUcsT0FBT0MsTUFBTSxLQUFLLFdBQVcsR0FBR0MsTUFBTSxHQUFHRCxNQUFNO0FBS2pFLFNBQVNFLGlCQUFpQixDQUFJQyxRQUFpQixFQUFLO0VBQ2xELElBQU1DLGNBQWMsR0FBR0MscUJBQXFCLEVBQUU7RUFDOUMsSUFBSUQsY0FBYyxFQUFFO0lBQ2xCRSxJQUFJLENBQUNDLGFBQWEsRUFBRTtFQUN0QjtFQUVBLElBQU1DLG1CQUFtQixHQUFHTCxRQUFRLEVBQUU7RUFFdEMsSUFBSUMsY0FBYyxFQUFFO0lBQ2xCLElBQU1LLGdCQUFnQixHQUFHQywyQkFBMkIsQ0FBQ04sY0FBYyxDQUFDO0lBQ3BFRSxJQUFJLENBQUNLLGFBQWEsQ0FBQ0YsZ0JBQWdCLENBQUM7RUFDdEM7RUFFQSxPQUFPRCxtQkFBbUI7QUFDNUI7QUFFQSxTQUFTSCxxQkFBcUIsR0FBMkI7RUFFdkQsSUFDRSxPQUFPQyxJQUFJLEtBQUssV0FBVyxJQUMzQixPQUFPUCxTQUFTLENBQUNhLFVBQVUsS0FBSyxXQUFXLElBQzNDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsaUNBQWlDLEVBQzdDO0lBQ0EsT0FBTyxJQUFJO0VBQ2I7RUFFQSxJQUVFLE9BQU9oQixTQUFTLENBQUNhLFVBQVUsQ0FBQ0ksZUFBZSxLQUFLLFdBQVcsSUFFM0RqQixTQUFTLENBQUNhLFVBQVUsQ0FBQ0ksZUFBZSxFQUNwQztJQUNBLE9BQU8sUUFBUTtFQUNqQjtFQUVBLElBRUUsT0FBT2pCLFNBQVMsQ0FBQ2EsVUFBVSxDQUFDSyxLQUFLLEtBQUssV0FBVyxJQUNqRCxPQUFPWCxJQUFJLENBQUNZLGlCQUFpQixLQUFLLFdBQVcsRUFDN0M7SUFDQSxJQUFJO01BRUZaLElBQUksQ0FBQ1ksaUJBQWlCLEVBQUU7TUFDeEIsT0FBTyxRQUFRO0lBQ2pCLENBQUMsQ0FBQyxnQkFBTSxDQUNOO0VBRUo7RUFFQSxPQUFPLElBQUk7QUFDYjtBQUVBLFNBQVNSLDJCQUEyQixDQUFDUyxJQUFxQixFQUFFO0VBQzFELE9BQU9BLElBQUksS0FBSyxRQUFRLEdBQ3BCO0lBQUVDLGdCQUFnQixFQUFFO0VBQUssQ0FBQyxHQUMxQjtJQUFFQSxnQkFBZ0IsRUFBRTtFQUFNLENBQUM7QUFDakM7QUFFQSxJQUFNQyx3QkFBd0IsR0FBRyxTQUEzQkEsd0JBQXdCO0VBQUEsT0FDNUJDLE9BQU8sQ0FBQ2pCLHFCQUFxQixFQUFFLENBQUM7QUFBQTtBQUVsQ2tCO0FBQ0EsU0FBU0Msb0JBQW9CLENBQUNDLEVBQVksRUFBRTtFQUMxQyxPQUFPMUIsU0FBUyxDQUFDYSxVQUFVLENBQUNhLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDcEM7QUFRQSxTQUFTQyxpQkFBaUIsR0FBc0I7RUFDOUMsT0FBTztJQUNMQyxjQUFjLEVBQUU1QixTQUFTLENBQUM2QixZQUFZO0lBQ3RDQyxjQUFjLEVBQUU5QixTQUFTLENBQUMrQixZQUFZLElBQUlOLG9CQUFvQjtJQUM5RE8sWUFBWSxFQUFFaEMsU0FBUyxDQUFDYTtFQUMxQixDQUFDO0FBQ0g7QUFFQSx5QkFBeURWLGlCQUFpQixDQUN4RXdCLGlCQUFpQixDQUNHO0VBRmRDLGNBQWMsc0JBQWRBLGNBQWM7RUFBRUUsY0FBYyxzQkFBZEEsY0FBYztFQUFFRTtBQUVqQlI7QUFBQUE7QUFBQUEiLCJuYW1lcyI6WyJnbG9iYWxPYmoiLCJ3aW5kb3ciLCJnbG9iYWwiLCJydW5XaXRoUmVhbFRpbWVycyIsImNhbGxiYWNrIiwiZmFrZVRpbWVyc1R5cGUiLCJnZXRKZXN0RmFrZVRpbWVyc1R5cGUiLCJqZXN0IiwidXNlUmVhbFRpbWVycyIsImNhbGxiYWNrUmV0dXJuVmFsdWUiLCJmYWtlVGltZXJzQ29uZmlnIiwiZ2V0RmFrZVRpbWVyc0NvbmZpZ0Zyb21UeXBlIiwidXNlRmFrZVRpbWVycyIsInNldFRpbWVvdXQiLCJwcm9jZXNzIiwiZW52IiwiUk5UTF9TS0lQX0FVVE9fREVURUNUX0ZBS0VfVElNRVJTIiwiX2lzTW9ja0Z1bmN0aW9uIiwiY2xvY2siLCJnZXRSZWFsU3lzdGVtVGltZSIsInR5cGUiLCJsZWdhY3lGYWtlVGltZXJzIiwiamVzdEZha2VUaW1lcnNBcmVFbmFibGVkIiwiQm9vbGVhbiIsImV4cG9ydHMiLCJzZXRJbW1lZGlhdGVQb2x5ZmlsbCIsImZuIiwiYmluZFRpbWVGdW5jdGlvbnMiLCJjbGVhclRpbWVvdXRGbiIsImNsZWFyVGltZW91dCIsInNldEltbWVkaWF0ZUZuIiwic2V0SW1tZWRpYXRlIiwic2V0VGltZW91dEZuIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvdGltZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE1vc3QgY29udGVudCBvZiB0aGlzIGZpbGUgc291cmNlZCBkaXJlY3RseSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS90ZXN0aW5nLWxpYnJhcnkvZG9tLXRlc3RpbmctbGlicmFyeS9ibG9iL21haW4vc3JjL2hlbHBlcnMuanNcbi8qIGdsb2JhbHMgamVzdCAqL1xuY29uc3QgZ2xvYmFsT2JqID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3c7XG5cbnR5cGUgRmFrZVRpbWVyc1R5cGVzID0gJ21vZGVybicgfCAnbGVnYWN5JztcblxuLy8gQ3VycmVudGx5IHRoaXMgZm4gb25seSBzdXBwb3J0cyBqZXN0IHRpbWVycywgYnV0IGl0IGNvdWxkIHN1cHBvcnQgb3RoZXIgdGVzdCBydW5uZXJzIGluIHRoZSBmdXR1cmUuXG5mdW5jdGlvbiBydW5XaXRoUmVhbFRpbWVyczxUPihjYWxsYmFjazogKCkgPT4gVCk6IFQge1xuICBjb25zdCBmYWtlVGltZXJzVHlwZSA9IGdldEplc3RGYWtlVGltZXJzVHlwZSgpO1xuICBpZiAoZmFrZVRpbWVyc1R5cGUpIHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgfVxuXG4gIGNvbnN0IGNhbGxiYWNrUmV0dXJuVmFsdWUgPSBjYWxsYmFjaygpO1xuXG4gIGlmIChmYWtlVGltZXJzVHlwZSkge1xuICAgIGNvbnN0IGZha2VUaW1lcnNDb25maWcgPSBnZXRGYWtlVGltZXJzQ29uZmlnRnJvbVR5cGUoZmFrZVRpbWVyc1R5cGUpO1xuICAgIGplc3QudXNlRmFrZVRpbWVycyhmYWtlVGltZXJzQ29uZmlnKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFja1JldHVyblZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRKZXN0RmFrZVRpbWVyc1R5cGUoKTogRmFrZVRpbWVyc1R5cGVzIHwgbnVsbCB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoXG4gICAgdHlwZW9mIGplc3QgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIGdsb2JhbE9iai5zZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHByb2Nlc3MuZW52LlJOVExfU0tJUF9BVVRPX0RFVEVDVF9GQUtFX1RJTUVSU1xuICApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGplc3QgbXV0YXRlcyBzZXRUaW1lb3V0XG4gICAgdHlwZW9mIGdsb2JhbE9iai5zZXRUaW1lb3V0Ll9pc01vY2tGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGplc3QgbXV0YXRlcyBzZXRUaW1lb3V0XG4gICAgZ2xvYmFsT2JqLnNldFRpbWVvdXQuX2lzTW9ja0Z1bmN0aW9uXG4gICkge1xuICAgIHJldHVybiAnbGVnYWN5JztcbiAgfVxuXG4gIGlmIChcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGplc3QgbXV0YXRlcyBzZXRUaW1lb3V0XG4gICAgdHlwZW9mIGdsb2JhbE9iai5zZXRUaW1lb3V0LmNsb2NrICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBqZXN0LmdldFJlYWxTeXN0ZW1UaW1lICE9PSAndW5kZWZpbmVkJ1xuICApIHtcbiAgICB0cnkge1xuICAgICAgLy8gamVzdC5nZXRSZWFsU3lzdGVtVGltZSBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgSmVzdCdzIGBtb2Rlcm5gIGZha2UgdGltZXJzIGFuZCBvdGhlcndpc2UgdGhyb3dzXG4gICAgICBqZXN0LmdldFJlYWxTeXN0ZW1UaW1lKCk7XG4gICAgICByZXR1cm4gJ21vZGVybic7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBub3QgdXNpbmcgSmVzdCdzIG1vZGVybiBmYWtlIHRpbWVyc1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRGYWtlVGltZXJzQ29uZmlnRnJvbVR5cGUodHlwZTogRmFrZVRpbWVyc1R5cGVzKSB7XG4gIHJldHVybiB0eXBlID09PSAnbGVnYWN5J1xuICAgID8geyBsZWdhY3lGYWtlVGltZXJzOiB0cnVlIH1cbiAgICA6IHsgbGVnYWN5RmFrZVRpbWVyczogZmFsc2UgfTtcbn1cblxuY29uc3QgamVzdEZha2VUaW1lcnNBcmVFbmFibGVkID0gKCk6IGJvb2xlYW4gPT5cbiAgQm9vbGVhbihnZXRKZXN0RmFrZVRpbWVyc1R5cGUoKSk7XG5cbi8vIHdlIG9ubHkgcnVuIG91ciB0ZXN0cyBpbiBub2RlLCBhbmQgc2V0SW1tZWRpYXRlIGlzIHN1cHBvcnRlZCBpbiBub2RlLlxuZnVuY3Rpb24gc2V0SW1tZWRpYXRlUG9seWZpbGwoZm46IEZ1bmN0aW9uKSB7XG4gIHJldHVybiBnbG9iYWxPYmouc2V0VGltZW91dChmbiwgMCk7XG59XG5cbnR5cGUgQmluZFRpbWVGdW5jdGlvbnMgPSB7XG4gIGNsZWFyVGltZW91dEZuOiB0eXBlb2YgY2xlYXJUaW1lb3V0O1xuICBzZXRJbW1lZGlhdGVGbjogdHlwZW9mIHNldEltbWVkaWF0ZTtcbiAgc2V0VGltZW91dEZuOiB0eXBlb2Ygc2V0VGltZW91dDtcbn07XG5cbmZ1bmN0aW9uIGJpbmRUaW1lRnVuY3Rpb25zKCk6IEJpbmRUaW1lRnVuY3Rpb25zIHtcbiAgcmV0dXJuIHtcbiAgICBjbGVhclRpbWVvdXRGbjogZ2xvYmFsT2JqLmNsZWFyVGltZW91dCxcbiAgICBzZXRJbW1lZGlhdGVGbjogZ2xvYmFsT2JqLnNldEltbWVkaWF0ZSB8fCBzZXRJbW1lZGlhdGVQb2x5ZmlsbCxcbiAgICBzZXRUaW1lb3V0Rm46IGdsb2JhbE9iai5zZXRUaW1lb3V0LFxuICB9O1xufVxuXG5jb25zdCB7IGNsZWFyVGltZW91dEZuLCBzZXRJbW1lZGlhdGVGbiwgc2V0VGltZW91dEZuIH0gPSBydW5XaXRoUmVhbFRpbWVycyhcbiAgYmluZFRpbWVGdW5jdGlvbnNcbikgYXMgQmluZFRpbWVGdW5jdGlvbnM7XG5cbmV4cG9ydCB7XG4gIHJ1bldpdGhSZWFsVGltZXJzLFxuICBqZXN0RmFrZVRpbWVyc0FyZUVuYWJsZWQsXG4gIGNsZWFyVGltZW91dEZuIGFzIGNsZWFyVGltZW91dCxcbiAgc2V0SW1tZWRpYXRlRm4gYXMgc2V0SW1tZWRpYXRlLFxuICBzZXRUaW1lb3V0Rm4gYXMgc2V0VGltZW91dCxcbn07XG4iXX0=