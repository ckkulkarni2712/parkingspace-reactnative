21330cf77a3699dd0e27dd38c9e9422d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeEnabled = exports.toBeDisabled = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
var DISABLE_TYPES = ['Button', 'Slider', 'Switch', 'Text', 'TouchableHighlight', 'TouchableOpacity', 'TouchableWithoutFeedback', 'TouchableNativeFeedback', 'View', 'TextInput', 'Pressable'];
function isElementDisabled(element) {
  var _element$props, _element$props2, _element$props3, _element$props3$acces, _element$props4, _element$props4$acces;
  if ((0, utils_1.getType)(element) === 'TextInput' && (element == null ? void 0 : (_element$props = element.props) == null ? void 0 : _element$props.editable) === false) {
    return true;
  }
  if (!DISABLE_TYPES.includes((0, utils_1.getType)(element))) {
    return false;
  }
  return !!(element != null && (_element$props2 = element.props) != null && _element$props2.disabled) || !!(element != null && (_element$props3 = element.props) != null && (_element$props3$acces = _element$props3.accessibilityState) != null && _element$props3$acces.disabled) || !!(element != null && (_element$props4 = element.props) != null && (_element$props4$acces = _element$props4.accessibilityStates) != null && _element$props4$acces.includes('disabled'));
}
function isAncestorDisabled(element) {
  var parent = element.parent;
  return parent != null && (isElementDisabled(element) || isAncestorDisabled(parent));
}
function toBeDisabled(element) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toBeDisabled, this);
  var isDisabled = isElementDisabled(element) || isAncestorDisabled(element);
  return {
    pass: isDisabled,
    message: function message() {
      var is = isDisabled ? 'is' : 'is not';
      return [(0, jest_matcher_utils_1.matcherHint)((_this.isNot ? '.not' : '') + ".toBeDisabled", 'element', ''), '', "Received element " + is + " disabled:", (0, utils_1.printElement)(element)].join('\n');
    }
  };
}
exports.toBeDisabled = toBeDisabled;
function toBeEnabled(element) {
  var _this2 = this;
  (0, utils_1.checkReactElement)(element, toBeEnabled, this);
  var isEnabled = !isElementDisabled(element) && !isAncestorDisabled(element);
  return {
    pass: isEnabled,
    message: function message() {
      var is = isEnabled ? 'is' : 'is not';
      return [(0, jest_matcher_utils_1.matcherHint)((_this2.isNot ? '.not' : '') + ".toBeEnabled", 'element', ''), '', "Received element " + is + " enabled:", (0, utils_1.printElement)(element)].join('\n');
    }
  };
}
exports.toBeEnabled = toBeEnabled;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVFbmFibGVkIiwidG9CZURpc2FibGVkIiwiamVzdF9tYXRjaGVyX3V0aWxzXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsIkRJU0FCTEVfVFlQRVMiLCJpc0VsZW1lbnREaXNhYmxlZCIsImVsZW1lbnQiLCJnZXRUeXBlIiwicHJvcHMiLCJlZGl0YWJsZSIsImluY2x1ZGVzIiwiZGlzYWJsZWQiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJhY2Nlc3NpYmlsaXR5U3RhdGVzIiwiaXNBbmNlc3RvckRpc2FibGVkIiwicGFyZW50IiwiY2hlY2tSZWFjdEVsZW1lbnQiLCJpc0Rpc2FibGVkIiwicGFzcyIsIm1lc3NhZ2UiLCJpcyIsIm1hdGNoZXJIaW50IiwiaXNOb3QiLCJwcmludEVsZW1lbnQiLCJqb2luIiwiaXNFbmFibGVkIl0sInNvdXJjZXMiOlsidG8tYmUtZGlzYWJsZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvQmVFbmFibGVkID0gZXhwb3J0cy50b0JlRGlzYWJsZWQgPSB2b2lkIDA7XG5jb25zdCBqZXN0X21hdGNoZXJfdXRpbHNfMSA9IHJlcXVpcmUoXCJqZXN0LW1hdGNoZXItdXRpbHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG4vLyBFbGVtZW50cyB0aGF0IHN1cHBvcnQgJ2Rpc2FibGVkJ1xuY29uc3QgRElTQUJMRV9UWVBFUyA9IFtcbiAgICAnQnV0dG9uJyxcbiAgICAnU2xpZGVyJyxcbiAgICAnU3dpdGNoJyxcbiAgICAnVGV4dCcsXG4gICAgJ1RvdWNoYWJsZUhpZ2hsaWdodCcsXG4gICAgJ1RvdWNoYWJsZU9wYWNpdHknLFxuICAgICdUb3VjaGFibGVXaXRob3V0RmVlZGJhY2snLFxuICAgICdUb3VjaGFibGVOYXRpdmVGZWVkYmFjaycsXG4gICAgJ1ZpZXcnLFxuICAgICdUZXh0SW5wdXQnLFxuICAgICdQcmVzc2FibGUnLFxuXTtcbmZ1bmN0aW9uIGlzRWxlbWVudERpc2FibGVkKGVsZW1lbnQpIHtcbiAgICBpZiAoKDAsIHV0aWxzXzEuZ2V0VHlwZSkoZWxlbWVudCkgPT09ICdUZXh0SW5wdXQnICYmIGVsZW1lbnQ/LnByb3BzPy5lZGl0YWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghRElTQUJMRV9UWVBFUy5pbmNsdWRlcygoMCwgdXRpbHNfMS5nZXRUeXBlKShlbGVtZW50KSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKCEhZWxlbWVudD8ucHJvcHM/LmRpc2FibGVkIHx8XG4gICAgICAgICEhZWxlbWVudD8ucHJvcHM/LmFjY2Vzc2liaWxpdHlTdGF0ZT8uZGlzYWJsZWQgfHxcbiAgICAgICAgISFlbGVtZW50Py5wcm9wcz8uYWNjZXNzaWJpbGl0eVN0YXRlcz8uaW5jbHVkZXMoJ2Rpc2FibGVkJykpO1xufVxuZnVuY3Rpb24gaXNBbmNlc3RvckRpc2FibGVkKGVsZW1lbnQpIHtcbiAgICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgICByZXR1cm4gcGFyZW50ICE9IG51bGwgJiYgKGlzRWxlbWVudERpc2FibGVkKGVsZW1lbnQpIHx8IGlzQW5jZXN0b3JEaXNhYmxlZChwYXJlbnQpKTtcbn1cbmZ1bmN0aW9uIHRvQmVEaXNhYmxlZChlbGVtZW50KSB7XG4gICAgKDAsIHV0aWxzXzEuY2hlY2tSZWFjdEVsZW1lbnQpKGVsZW1lbnQsIHRvQmVEaXNhYmxlZCwgdGhpcyk7XG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IGlzRWxlbWVudERpc2FibGVkKGVsZW1lbnQpIHx8IGlzQW5jZXN0b3JEaXNhYmxlZChlbGVtZW50KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXNzOiBpc0Rpc2FibGVkLFxuICAgICAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpcyA9IGlzRGlzYWJsZWQgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5tYXRjaGVySGludCkoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlRGlzYWJsZWRgLCAnZWxlbWVudCcsICcnKSxcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICBgUmVjZWl2ZWQgZWxlbWVudCAke2lzfSBkaXNhYmxlZDpgLFxuICAgICAgICAgICAgICAgICgwLCB1dGlsc18xLnByaW50RWxlbWVudCkoZWxlbWVudCksXG4gICAgICAgICAgICBdLmpvaW4oJ1xcbicpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLnRvQmVEaXNhYmxlZCA9IHRvQmVEaXNhYmxlZDtcbmZ1bmN0aW9uIHRvQmVFbmFibGVkKGVsZW1lbnQpIHtcbiAgICAoMCwgdXRpbHNfMS5jaGVja1JlYWN0RWxlbWVudCkoZWxlbWVudCwgdG9CZUVuYWJsZWQsIHRoaXMpO1xuICAgIGNvbnN0IGlzRW5hYmxlZCA9ICFpc0VsZW1lbnREaXNhYmxlZChlbGVtZW50KSAmJiAhaXNBbmNlc3RvckRpc2FibGVkKGVsZW1lbnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhc3M6IGlzRW5hYmxlZCxcbiAgICAgICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXMgPSBpc0VuYWJsZWQgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5tYXRjaGVySGludCkoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlRW5hYmxlZGAsICdlbGVtZW50JywgJycpLFxuICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IGVuYWJsZWQ6YCxcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5wcmludEVsZW1lbnQpKGVsZW1lbnQpLFxuICAgICAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy50b0JlRW5hYmxlZCA9IHRvQmVFbmFibGVkO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0UsV0FBVyxHQUFHRixPQUFPLENBQUNHLFlBQVksR0FBRyxLQUFLLENBQUM7QUFDbkQsSUFBTUMsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUMxRCxJQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFFbEMsSUFBTUUsYUFBYSxHQUFHLENBQ2xCLFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUSxFQUNSLE1BQU0sRUFDTixvQkFBb0IsRUFDcEIsa0JBQWtCLEVBQ2xCLDBCQUEwQixFQUMxQix5QkFBeUIsRUFDekIsTUFBTSxFQUNOLFdBQVcsRUFDWCxXQUFXLENBQ2Q7QUFDRCxTQUFTQyxpQkFBaUIsQ0FBQ0MsT0FBTyxFQUFFO0VBQUE7RUFDaEMsSUFBSSxDQUFDLENBQUMsRUFBRUgsT0FBTyxDQUFDSSxPQUFPLEVBQUVELE9BQU8sQ0FBQyxLQUFLLFdBQVcsSUFBSSxDQUFBQSxPQUFPLHNDQUFQQSxPQUFPLENBQUVFLEtBQUsscUJBQWQsZUFBZ0JDLFFBQVEsTUFBSyxLQUFLLEVBQUU7SUFDckYsT0FBTyxJQUFJO0VBQ2Y7RUFDQSxJQUFJLENBQUNMLGFBQWEsQ0FBQ00sUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFUCxPQUFPLENBQUNJLE9BQU8sRUFBRUQsT0FBTyxD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