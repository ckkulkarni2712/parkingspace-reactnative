c8052567d189fe443e63aa0408e86c0d
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _markup = require('./lib/markup');
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var FRAGMENT_NODE = 11;
var ELEMENT_REGEXP = /^((HTML|SVG)\w*)?Element$/;
var testHasAttribute = function testHasAttribute(val) {
  try {
    return typeof val.hasAttribute === 'function' && val.hasAttribute('is');
  } catch (_unused) {
    return false;
  }
};
var testNode = function testNode(val) {
  var constructorName = val.constructor.name;
  var nodeType = val.nodeType,
    tagName = val.tagName;
  var isCustomElement = typeof tagName === 'string' && tagName.includes('-') || testHasAttribute(val);
  return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === 'Text' || nodeType === COMMENT_NODE && constructorName === 'Comment' || nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment';
};
var test = function test(val) {
  var _val$constructor;
  return (val == null ? void 0 : (_val$constructor = val.constructor) == null ? void 0 : _val$constructor.name) && testNode(val);
};
exports.test = test;
function nodeIsText(node) {
  return node.nodeType === TEXT_NODE;
}
function nodeIsComment(node) {
  return node.nodeType === COMMENT_NODE;
}
function nodeIsFragment(node) {
  return node.nodeType === FRAGMENT_NODE;
}
var serialize = function serialize(node, config, indentation, depth, refs, printer) {
  if (nodeIsText(node)) {
    return (0, _markup.printText)(node.data, config);
  }
  if (nodeIsComment(node)) {
    return (0, _markup.printComment)(node.data, config);
  }
  var type = nodeIsFragment(node) ? 'DocumentFragment' : node.tagName.toLowerCase();
  if (++depth > config.maxDepth) {
    return (0, _markup.printElementAsLeaf)(type, config);
  }
  return (0, _markup.printElement)(type, (0, _markup.printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes).map(function (attr) {
    return attr.name;
  }).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce(function (props, attribute) {
    props[attribute.name] = attribute.value;
    return props;
  }, {}), config, indentation + config.indent, depth, refs, printer), (0, _markup.printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);
};
exports.serialize = serialize;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRlc3QiLCJzZXJpYWxpemUiLCJkZWZhdWx0IiwiX21hcmt1cCIsInJlcXVpcmUiLCJFTEVNRU5UX05PREUiLCJURVhUX05PREUiLCJDT01NRU5UX05PREUiLCJGUkFHTUVOVF9OT0RFIiwiRUxFTUVOVF9SRUdFWFAiLCJ0ZXN0SGFzQXR0cmlidXRlIiwidmFsIiwiaGFzQXR0cmlidXRlIiwidGVzdE5vZGUiLCJjb25zdHJ1Y3Rvck5hbWUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJub2RlVHlwZSIsInRhZ05hbWUiLCJpc0N1c3RvbUVsZW1lbnQiLCJpbmNsdWRlcyIsIm5vZGVJc1RleHQiLCJub2RlIiwibm9kZUlzQ29tbWVudCIsIm5vZGVJc0ZyYWdtZW50IiwiY29uZmlnIiwiaW5kZW50YXRpb24iLCJkZXB0aCIsInJlZnMiLCJwcmludGVyIiwicHJpbnRUZXh0IiwiZGF0YSIsInByaW50Q29tbWVudCIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsIm1heERlcHRoIiwicHJpbnRFbGVtZW50QXNMZWFmIiwicHJpbnRFbGVtZW50IiwicHJpbnRQcm9wcyIsIkFycmF5IiwiZnJvbSIsImF0dHJpYnV0ZXMiLCJtYXAiLCJhdHRyIiwic29ydCIsInJlZHVjZSIsInByb3BzIiwiYXR0cmlidXRlIiwiaW5kZW50IiwicHJpbnRDaGlsZHJlbiIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImNoaWxkTm9kZXMiLCJjaGlsZHJlbiIsInBsdWdpbiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiRE9NRWxlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50ZXN0ID0gZXhwb3J0cy5zZXJpYWxpemUgPSBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX21hcmt1cCA9IHJlcXVpcmUoJy4vbGliL21hcmt1cCcpO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IEVMRU1FTlRfTk9ERSA9IDE7XG5jb25zdCBURVhUX05PREUgPSAzO1xuY29uc3QgQ09NTUVOVF9OT0RFID0gODtcbmNvbnN0IEZSQUdNRU5UX05PREUgPSAxMTtcbmNvbnN0IEVMRU1FTlRfUkVHRVhQID0gL14oKEhUTUx8U1ZHKVxcdyopP0VsZW1lbnQkLztcbmNvbnN0IHRlc3RIYXNBdHRyaWJ1dGUgPSB2YWwgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsLmhhc0F0dHJpYnV0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuaGFzQXR0cmlidXRlKCdpcycpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5jb25zdCB0ZXN0Tm9kZSA9IHZhbCA9PiB7XG4gIGNvbnN0IGNvbnN0cnVjdG9yTmFtZSA9IHZhbC5jb25zdHJ1Y3Rvci5uYW1lO1xuICBjb25zdCB7bm9kZVR5cGUsIHRhZ05hbWV9ID0gdmFsO1xuICBjb25zdCBpc0N1c3RvbUVsZW1lbnQgPVxuICAgICh0eXBlb2YgdGFnTmFtZSA9PT0gJ3N0cmluZycgJiYgdGFnTmFtZS5pbmNsdWRlcygnLScpKSB8fFxuICAgIHRlc3RIYXNBdHRyaWJ1dGUodmFsKTtcbiAgcmV0dXJuIChcbiAgICAobm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJlxuICAgICAgKEVMRU1FTlRfUkVHRVhQLnRlc3QoY29uc3RydWN0b3JOYW1lKSB8fCBpc0N1c3RvbUVsZW1lbnQpKSB8fFxuICAgIChub2RlVHlwZSA9PT0gVEVYVF9OT0RFICYmIGNvbnN0cnVjdG9yTmFtZSA9PT0gJ1RleHQnKSB8fFxuICAgIChub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFICYmIGNvbnN0cnVjdG9yTmFtZSA9PT0gJ0NvbW1lbnQnKSB8fFxuICAgIChub2RlVHlwZSA9PT0gRlJBR01FTlRfTk9ERSAmJiBjb25zdHJ1Y3Rvck5hbWUgPT09ICdEb2N1bWVudEZyYWdtZW50JylcbiAgKTtcbn07XG5jb25zdCB0ZXN0ID0gdmFsID0+IHZhbD8uY29uc3RydWN0b3I/Lm5hbWUgJiYgdGVzdE5vZGUodmFsKTtcbmV4cG9ydHMudGVzdCA9IHRlc3Q7XG5mdW5jdGlvbiBub2RlSXNUZXh0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERTtcbn1cbmZ1bmN0aW9uIG5vZGVJc0NvbW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFO1xufVxuZnVuY3Rpb24gbm9kZUlzRnJhZ21lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gRlJBR01FTlRfTk9ERTtcbn1cbmNvbnN0IHNlcmlhbGl6ZSA9IChub2RlLCBjb25maWcsIGluZGVudGF0aW9uLCBkZXB0aCwgcmVmcywgcHJpbnRlcikgPT4ge1xuICBpZiAobm9kZUlzVGV4dChub2RlKSkge1xuICAgIHJldHVybiAoMCwgX21hcmt1cC5wcmludFRleHQpKG5vZGUuZGF0YSwgY29uZmlnKTtcbiAgfVxuICBpZiAobm9kZUlzQ29tbWVudChub2RlKSkge1xuICAgIHJldHVybiAoMCwgX21hcmt1cC5wcmludENvbW1lbnQpKG5vZGUuZGF0YSwgY29uZmlnKTtcbiAgfVxuICBjb25zdCB0eXBlID0gbm9kZUlzRnJhZ21lbnQobm9kZSlcbiAgICA/ICdEb2N1bWVudEZyYWdtZW50J1xuICAgIDogbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgcmV0dXJuICgwLCBfbWFya3VwLnByaW50RWxlbWVudEFzTGVhZikodHlwZSwgY29uZmlnKTtcbiAgfVxuICByZXR1cm4gKDAsIF9tYXJrdXAucHJpbnRFbGVtZW50KShcbiAgICB0eXBlLFxuICAgICgwLCBfbWFya3VwLnByaW50UHJvcHMpKFxuICAgICAgbm9kZUlzRnJhZ21lbnQobm9kZSlcbiAgICAgICAgPyBbXVxuICAgICAgICA6IEFycmF5LmZyb20obm9kZS5hdHRyaWJ1dGVzKVxuICAgICAgICAgICAgLm1hcChhdHRyID0+IGF0dHIubmFtZSlcbiAgICAgICAgICAgIC5zb3J0KCksXG4gICAgICBub2RlSXNGcmFnbWVudChub2RlKVxuICAgICAgICA/IHt9XG4gICAgICAgIDogQXJyYXkuZnJvbShub2RlLmF0dHJpYnV0ZXMpLnJlZHVjZSgocHJvcHMsIGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgICAgICAgcHJvcHNbYXR0cmlidXRlLm5hbWVdID0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICAgIH0sIHt9KSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIGluZGVudGF0aW9uICsgY29uZmlnLmluZGVudCxcbiAgICAgIGRlcHRoLFxuICAgICAgcmVmcyxcbiAgICAgIHByaW50ZXJcbiAgICApLFxuICAgICgwLCBfbWFya3VwLnByaW50Q2hpbGRyZW4pKFxuICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZS5jaGlsZE5vZGVzIHx8IG5vZGUuY2hpbGRyZW4pLFxuICAgICAgY29uZmlnLFxuICAgICAgaW5kZW50YXRpb24gKyBjb25maWcuaW5kZW50LFxuICAgICAgZGVwdGgsXG4gICAgICByZWZzLFxuICAgICAgcHJpbnRlclxuICAgICksXG4gICAgY29uZmlnLFxuICAgIGluZGVudGF0aW9uXG4gICk7XG59O1xuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5jb25zdCBwbHVnaW4gPSB7XG4gIHNlcmlhbGl6ZSxcbiAgdGVzdFxufTtcbnZhciBfZGVmYXVsdCA9IHBsdWdpbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsSUFBSSxHQUFHRixPQUFPLENBQUNHLFNBQVMsR0FBR0gsT0FBTyxDQUFDSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQzNELElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQVFyQyxJQUFNQyxZQUFZLEdBQUcsQ0FBQztBQUN0QixJQUFNQyxTQUFTLEdBQUcsQ0FBQztBQUNuQixJQUFNQyxZQUFZLEdBQUcsQ0FBQztBQUN0QixJQUFNQyxhQUFhLEdBQUcsRUFBRTtBQUN4QixJQUFNQyxjQUFjLEdBQUcsMkJBQTJCO0FBQ2xELElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0IsQ0FBR0MsR0FBRyxFQUFJO0VBQzlCLElBQUk7SUFDRixPQUFPLE9BQU9BLEdBQUcsQ0FBQ0MsWUFBWSxLQUFLLFVBQVUsSUFBSUQsR0FBRyxDQUFDQyxZQUFZLENBQUMsSUFBSSxDQUFDO0VBQ3pFLENBQUMsQ0FBQyxnQkFBTTtJQUNOLE9BQU8sS0FBSztFQUNkO0FBQ0YsQ0FBQztBQUNELElBQU1DLFFBQVEsR0FBRyxTQUFYQSxRQUFRLENBQUdGLEdBQUcsRUFBSTtFQUN0QixJQUFNRyxlQUFlLEdBQUdILEdBQUcsQ0FBQ0ksV0FBVyxDQUFDQyxJQUFJO0VBQzVDLElBQU9DLFFBQVEsR0FBYU4sR0FBRyxDQUF4Qk0sUUFBUTtJQUFFQyxPQUFPLEdBQUlQLEdBQUcsQ0FBZE8sT0FBTztFQUN4QixJQUFNQyxlQUFlLEdBQ2xCLE9BQU9ELE9BQU8sS0FBSyxRQUFRLElBQUlBLE9BQU8sQ0FBQ0UsUUFBUSxD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