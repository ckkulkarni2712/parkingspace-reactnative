48fbd127176bc11852951aa47f113c4d
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _uuid = require("uuid");
require("react-native-get-random-values");
var _reactNative = require("@testing-library/react-native");
var _jestCucumber = require("jest-cucumber");
var _native = require("@react-navigation/native");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _parkingSlice = _interopRequireDefault(require("../../App/Reducer/parkingSlice"));
var _Base = _interopRequireDefault(require("../../App/Base"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var feature = (0, _jestCucumber.loadFeature)('./features/base.feature');
var uuid = (0, _uuid.v4)();
var store;
(0, _jestCucumber.defineFeature)(feature, function (test) {
  test('User enters the number of spaces', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    var navigation = (0, _native.useNavigation)();
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
      store: store,
      children: (0, _jsxRuntime.jsx)(_Base.default, {})
    }));
    given('the user is on the home page', function () {
      expect(screen).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwidXVpZCIsInV1aWR2NCIsInN0b3JlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwiYW5kIiwibmF2aWdhdGlvbiIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsInBhcmtpbmdTcGFjZXMiLCJwYXJraW5nU2xpY2UiLCJzY3JlZW4iLCJyZW5kZXIiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Il0sInNvdXJjZXMiOlsiYmFzZS5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHt2NCBhcyB1dWlkdjR9IGZyb20gJ3V1aWQnO1xyXG5pbXBvcnQgJ3JlYWN0LW5hdGl2ZS1nZXQtcmFuZG9tLXZhbHVlcyc7XHJcbmltcG9ydCB7ZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHtsb2FkRmVhdHVyZSwgZGVmaW5lRmVhdHVyZX0gZnJvbSAnamVzdC1jdWN1bWJlcic7XHJcbmltcG9ydCB7dXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoJy4vZmVhdHVyZXMvYmFzZS5mZWF0dXJlJyk7XHJcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHtjb25maWd1cmVTdG9yZX0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XHJcbmltcG9ydCBwYXJraW5nU2xpY2UsIHtcclxuICBpbml0aWFsaXplUGFya2luZ0xvdCxcclxufSBmcm9tICcuLi8uLi9BcHAvUmVkdWNlci9wYXJraW5nU2xpY2UnO1xyXG5pbXBvcnQgQmFzZSBmcm9tICcuLi8uLi9BcHAvQmFzZSc7XHJcbmNvbnN0IHV1aWQgPSB1dWlkdjQoKTtcclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcbmxldCBzdG9yZTogYW55O1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsIHRlc3QgPT4ge1xyXG4gIHRlc3QoJ1VzZXIgZW50ZXJzIHRoZSBudW1iZXIgb2Ygc3BhY2VzJywgKHtnaXZlbiwgd2hlbiwgdGhlbiwgYW5kfSkgPT4ge1xyXG4gICAgY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG4gICAgc3RvcmUgPSBjb25maWd1cmVTdG9yZSh7XHJcbiAgICAgIHJlZHVjZXI6IHtcclxuICAgICAgICBwYXJraW5nU3BhY2VzOiBwYXJraW5nU2xpY2UsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPEJhc2UgLz5cclxuICAgICAgPC9Qcm92aWRlcj4sXHJcbiAgICApO1xyXG4gICAgZ2l2ZW4oJ3RoZSB1c2VyIGlzIG9uIHRoZSBob21lIHBhZ2UnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuLypjb25zdCBpbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCdFbnRlciB0aGUgbnVtYmVyIG9mIHBhcmtpbmcgc3BhY2VzJyk7XHJcbiAgICBjb25zdCBidXR0b24gPSBnZXRCeVRlc3RJZCgnc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoaW5wdXQsICc1Jyk7XHJcbiAgICBleHBlY3QoYnV0dG9uKS5ub3QudG9CZURpc2FibGVkKCk7Ki9cclxuIl0sIm1hcHBpbmdzIjoiQUFlQSxjQUFLQSxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0MsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVILElBQUksQ0FBQ0MsRUFBRTtJQUNuQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDO0FBckJIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUdBO0FBQWtDO0FBQUE7RUFBQTtJQUFBO0VBQUE7SUFBQTtFQUFBO0VBQUE7QUFBQTtBQU5sQyxJQUFNRyxPQUFPLEdBQUcsSUFBQUMseUJBQVcsRUFBQyx5QkFBeUIsQ0FBQztBQU90RCxJQUFNQyxJQUFJLEdBQUcsSUFBQUMsUUFBTSxHQUFFO0FBUXJCLElBQUlDLEtBQVU7QUFDZCxJQUFBQywyQkFBYSxFQUFDTCxPQUFPLEVBQUUsVUFBQU0sSUFBSSxFQUFJO0VBQzdCQSxJQUFJLENBQUMsa0NBQWtDLEVBQUUsZ0JBQThCO0lBQUEsSUFBNUJDLEtBQUssUUFBTEEsS0FBSztNQUFFQyxJQUFJLFFBQUpBLElBQUk7TUFBRUMsSUFBSSxRQUFKQSxJQUFJO01BQUVDLEdBQUcsUUFBSEEsR0FBRztJQUMvRCxJQUFNQyxVQUFVLEdBQUcsSUFBQWhCLHFCQUFhLEdBQWtDO0lBQ2xFUyxLQUFLLEdBQUcsSUFBQVEsdUJBQWMsRUFBQztNQUNyQkMsT0FBTyxFQUFFO1FBQ1BDLGFBQWEsRUFBRUM7TUFDakI7SUFDRixDQUFDLENBQUM7SUFDRixJQUFNQyxNQUFNLEdBQUcsSUFBQUMsbUJBQU0sRUFDbkIscUJBQUMsb0JBQVE7TUFBQyxLQUFLLEVBQUViLEtBQU07TUFBQSxVQUNyQixxQkFBQyxhQUFJO0lBQUcsRUFDQyxDQUNaO0lBQ0RHLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxZQUFNO01BQzFDVyxNQUFNLENBQUNGLE1BQU0sQ0FBQyxDQUFDRyxVQUFVLEVBQUU7SUFDN0IsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=