5bf41ff7a6cbeda8ee724b3f6d35391d
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _collections = require('../collections');
var SPACE = ' ';
var OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];
var ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;
var testName = function testName(name) {
  return OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
};
var test = function test(val) {
  return val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
};
exports.test = test;
var isNamedNodeMap = function isNamedNodeMap(collection) {
  return collection.constructor.name === 'NamedNodeMap';
};
var serialize = function serialize(collection, config, indentation, depth, refs, printer) {
  var name = collection.constructor.name;
  if (++depth > config.maxDepth) {
    return "[" + name + "]";
  }
  return (config.min ? '' : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? "{" + (0, _collections.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce(function (props, attribute) {
    props[attribute.name] = attribute.value;
    return props;
  }, {}) : Object.assign({}, collection), config, indentation, depth, refs, printer) + "}" : "[" + (0, _collections.printListItems)(Array.from(collection), config, indentation, depth, refs, printer) + "]");
};
exports.serialize = serialize;
var plugin = {
  serialize: serialize,
  test: test
};
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRlc3QiLCJzZXJpYWxpemUiLCJkZWZhdWx0IiwiX2NvbGxlY3Rpb25zIiwicmVxdWlyZSIsIlNQQUNFIiwiT0JKRUNUX05BTUVTIiwiQVJSQVlfUkVHRVhQIiwidGVzdE5hbWUiLCJuYW1lIiwiaW5kZXhPZiIsInZhbCIsImNvbnN0cnVjdG9yIiwiaXNOYW1lZE5vZGVNYXAiLCJjb2xsZWN0aW9uIiwiY29uZmlnIiwiaW5kZW50YXRpb24iLCJkZXB0aCIsInJlZnMiLCJwcmludGVyIiwibWF4RGVwdGgiLCJtaW4iLCJwcmludE9iamVjdFByb3BlcnRpZXMiLCJBcnJheSIsImZyb20iLCJyZWR1Y2UiLCJwcm9wcyIsImF0dHJpYnV0ZSIsInByaW50TGlzdEl0ZW1zIiwicGx1Z2luIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJET01Db2xsZWN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRlc3QgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY29sbGVjdGlvbnMgPSByZXF1aXJlKCcuLi9jb2xsZWN0aW9ucycpO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmNvbnN0IFNQQUNFID0gJyAnO1xuY29uc3QgT0JKRUNUX05BTUVTID0gWydET01TdHJpbmdNYXAnLCAnTmFtZWROb2RlTWFwJ107XG5jb25zdCBBUlJBWV9SRUdFWFAgPSAvXihIVE1MXFx3KkNvbGxlY3Rpb258Tm9kZUxpc3QpJC87XG5jb25zdCB0ZXN0TmFtZSA9IG5hbWUgPT5cbiAgT0JKRUNUX05BTUVTLmluZGV4T2YobmFtZSkgIT09IC0xIHx8IEFSUkFZX1JFR0VYUC50ZXN0KG5hbWUpO1xuY29uc3QgdGVzdCA9IHZhbCA9PlxuICB2YWwgJiZcbiAgdmFsLmNvbnN0cnVjdG9yICYmXG4gICEhdmFsLmNvbnN0cnVjdG9yLm5hbWUgJiZcbiAgdGVzdE5hbWUodmFsLmNvbnN0cnVjdG9yLm5hbWUpO1xuZXhwb3J0cy50ZXN0ID0gdGVzdDtcbmNvbnN0IGlzTmFtZWROb2RlTWFwID0gY29sbGVjdGlvbiA9PlxuICBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdOYW1lZE5vZGVNYXAnO1xuY29uc3Qgc2VyaWFsaXplID0gKGNvbGxlY3Rpb24sIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzLCBwcmludGVyKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmICgrK2RlcHRoID4gY29uZmlnLm1heERlcHRoKSB7XG4gICAgcmV0dXJuIGBbJHtuYW1lfV1gO1xuICB9XG4gIHJldHVybiAoXG4gICAgKGNvbmZpZy5taW4gPyAnJyA6IG5hbWUgKyBTUEFDRSkgK1xuICAgIChPQkpFQ1RfTkFNRVMuaW5kZXhPZihuYW1lKSAhPT0gLTFcbiAgICAgID8gYHskeygwLCBfY29sbGVjdGlvbnMucHJpbnRPYmplY3RQcm9wZXJ0aWVzKShcbiAgICAgICAgICBpc05hbWVkTm9kZU1hcChjb2xsZWN0aW9uKVxuICAgICAgICAgICAgPyBBcnJheS5mcm9tKGNvbGxlY3Rpb24pLnJlZHVjZSgocHJvcHMsIGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHByb3BzW2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgICAgICAgICAgIH0sIHt9KVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgLi4uY29sbGVjdGlvblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBpbmRlbnRhdGlvbixcbiAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICByZWZzLFxuICAgICAgICAgIHByaW50ZXJcbiAgICAgICAgKX19YFxuICAgICAgOiBgWyR7KDAsIF9jb2xsZWN0aW9ucy5wcmludExpc3RJdGVtcykoXG4gICAgICAgICAgQXJyYXkuZnJvbShjb2xsZWN0aW9uKSxcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgcmVmcyxcbiAgICAgICAgICBwcmludGVyXG4gICAgICAgICl9XWApXG4gICk7XG59O1xuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG5jb25zdCBwbHVnaW4gPSB7XG4gIHNlcmlhbGl6ZSxcbiAgdGVzdFxufTtcbnZhciBfZGVmYXVsdCA9IHBsdWdpbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsSUFBSSxHQUFHRixPQUFPLENBQUNHLFNBQVMsR0FBR0gsT0FBTyxDQUFDSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQzNELElBQUlDLFlBQVksR0FBR0MsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBUTVDLElBQU1DLEtBQUssR0FBRyxHQUFHO0FBQ2pCLElBQU1DLFlBQVksR0FBRyxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUM7QUFDckQsSUFBTUMsWUFBWSxHQUFHLGdDQUFnQztBQUNyRCxJQUFNQyxRQUFRLEdBQUcsU0FBWEEsUUFBUSxDQUFHQyxJQUFJO0VBQUEsT0FDbkJILFlBQVksQ0FBQ0ksT0FBTyxDQUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSUYsWUFBWSxDQUFDUCxJQUFJLENBQUNTLElBQUksQ0FBQztBQUFBO0FBQzlELElBQU1ULElBQUksR0FBRyxTQUFQQSxJQUFJLENBQUdXLEdBQUc7RUFBQSxPQUNkQSxHQUFHLElBQ0hBLEdBQUcsQ0FBQ0MsV0FBVyxJQUNmLENBQUMsQ0FBQ0QsR0FBRyxDQUFDQyxXQUFXLENBQUNILElBQUksSUFDdEJELFFBQVEsQ0FBQ0csR0FBRyxDQUFDQyxXQUFXLENBQUNILElBQUksQ0FBQztBQUFBO0FBQ2hDWCxPQUFPLENBQUNFLElBQUksR0FBR0EsSUFBSTtBQUNuQixJQUFNYSxjQUFjLEdBQUcsU0FBakJBLGNBQWMsQ0FBR0MsVUFBVTtFQUFBLE9BQy9CQSxVQUFVLENBQUNGLFdBQVcsQ0FBQ0gsSUFBSSxLQUFLLGNBQWM7QUFBQTtBQUNoRCxJQUFNUixTQUFTLEdBQUcsU0FBWkEsU0FBUyxDQUFJYSxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFLO0VBQzNFLElBQU1WLElBQUksR0FBR0ssVUFBVSxDQUFDRixXQUFXLENBQUNILElBQUk7RUFDeEMsSUFBSSxFQUFFUSxLQUFLLEdBQUdGLE1BQU0sQ0FBQ0ssUUFBUSxFQUFFO0lBQzdCLGFBQVdYLElBQUk7RUFDakI7RUFDQSxPQUNFLENBQUNNLE1BQU0sQ0FBQ00sR0FBRyxHQUFHLEVBQUUsR0FBR1osSUFBSSxHQUFHSixLQUFLLEtBQzlCQyxZQUFZLENBQUNJLE9BQU8sQ0FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQzFCLENBQUMsQ0FBQyxFQUFFTixZQUFZLENBQUNtQixxQkFBcUIsRUFDeENULGNBQWMsQ0FBQ0MsVUFBVSxDQUFDLEdBQ3RCUyxLQUFLLENBQUNDLElBQUksQ0FBQ1YsVUFBVSxDQUFDLENBQUNXLE1BQU0sQ0FBQyxVQUFDQyxLQUFLLEVBQUVDLFNBQVMsRUFBSztJQUNsREQsS0FBSyxDQUFDQyxTQUFTLENBQUNsQixJQUFJLENBQUMsR0FBR2tCLFNBQVMsQ0FBQzVCLEtBQUs7SUFDdkMsT0FBTzJCLEtBQUs7RUFDZCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMscUJBRURaLFVBQVUsQ0FDZCxFQUNMQyxNQUFNLEVBQ05DLFdBQVcsRUFDWEMsS0FBSyxFQUNMQyxJQUFJLEVBQ0pDLE9BQU8sQ0FDUixlQUNHLENBQUMsQ0FBQyxFQUFFaEIsWUFBWSxDQUFDeUIsY0FBYyxFQUNqQ0wsS0FBSyxDQUFDQyxJQUFJLENBQUNWLFVBQVUsQ0FBQyxFQUN0QkMsTUFBTSxFQUNOQyxXQUFXLEVBQ1hDLEtBQUssRUFDTEMsSUFBSSxFQUNKQyxPQUFPLENBQ1IsTUFBRyxDQUFDO0FBRWIsQ0FBQztBQUNEckIsT0FBTyxDQUFDRyxTQUFTLEdBQUdBLFNBQVM7QUFDN0IsSUFBTTRCLE1BQU0sR0FBRztFQUNiNUIsU0FBUyxFQUFUQSxTQUFTO0VBQ1RELElBQUksRUFBSkE7QUFDRixDQUFDO0FBQ0QsSUFBSThCLFFBQVEsR0FBR0QsTUFBTTtBQUNyQi9CLE9BQU8sQ0FBQ0ksT0FBTyxHQUFHNEIsUUFBUSJ9