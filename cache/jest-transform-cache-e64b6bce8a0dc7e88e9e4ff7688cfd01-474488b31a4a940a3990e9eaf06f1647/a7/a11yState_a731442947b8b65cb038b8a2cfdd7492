cb17abc5228bfcbf07c2f5bd25f7961b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByA11yStateQueries = void 0;
var _accessiblity = require("../helpers/accessiblity");
var _deprecation = require("../helpers/deprecation");
var _findAll = require("../helpers/findAll");
var _accessibilityState = require("../helpers/matchers/accessibilityState");
var _makeQueries = require("./makeQueries");
var queryAllByA11yState = function queryAllByA11yState(instance) {
  return function queryAllByA11yStateFn(matcher, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return typeof node.type === 'string' && (0, _accessibilityState.matchAccessibilityState)(node, matcher);
    }, queryOptions);
  };
};
var buildErrorMessage = function buildErrorMessage() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var errors = [];
  _accessiblity.accessibilityStateKeys.forEach(function (stateKey) {
    if (state[stateKey] !== undefined) {
      errors.push(stateKey + " state: " + state[stateKey]);
    }
  });
  return errors.join(', ');
};
var getMultipleError = function getMultipleError(state) {
  return "Found multiple elements with " + buildErrorMessage(state);
};
var getMissingError = function getMissingError(state) {
  return "Unable to find an element with " + buildErrorMessage(state);
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByA11yState, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByA11yStateQueries = function bindByA11yStateQueries(instance) {
  var getByA11yState = getBy(instance);
  var getAllByA11yState = getAllBy(instance);
  var queryByA11yState = queryBy(instance);
  var queryAllByA11yState = queryAllBy(instance);
  var findByA11yState = findBy(instance);
  var findAllByA11yState = findAllBy(instance);
  return Object.assign({}, (0, _deprecation.deprecateQueries)({
    getByA11yState: getByA11yState,
    getAllByA11yState: getAllByA11yState,
    queryByA11yState: queryByA11yState,
    queryAllByA11yState: queryAllByA11yState,
    findByA11yState: findByA11yState,
    findAllByA11yState: findAllByA11yState,
    getByAccessibilityState: getByA11yState,
    getAllByAccessibilityState: getAllByA11yState,
    queryByAccessibilityState: queryByA11yState,
    queryAllByAccessibilityState: queryAllByA11yState,
    findByAccessibilityState: findByA11yState,
    findAllByAccessibilityState: findAllByA11yState
  }, 'Use {queryPrefix}ByRole(role, { disabled, selected, checked, busy, expanded }) query or expect(...).toHaveAccessibilityState(...) matcher from "@testing-library/jest-native" package instead.'));
};
exports.bindByA11yStateQueries = bindByA11yStateQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,