{"version":3,"mappings":";;;;;;AAEA;AACA;AACA;AACA;AACA;AAWA,IAAMA,mBAAmB,GACvBC,SADID,mBAAmB,CACvBC,QAA2B;EAAA,OAK3B,SAASC,qBAAqB,CAACC,OAAO,EAAEC,YAAY,EAAE;IACpD,OAAO,oBAAO,EACZH,QAAQ,EACPI,cAAI;MAAA,OACH,OAAOA,IAAI,CAACC,IAAI,KAAK,QAAQ,IAAI,+CAAuB,EAACD,IAAI,EAAEF,OAAO,CAAC;IAAA,GACzEC,YAAY,CACb;EACH,CAAC;AAAA;AAEH,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiB,GAAuC;EAAA,IAAnCC,KAAyB,uEAAG,CAAC,CAAC;EACvD,IAAMC,MAAgB,GAAG,EAAE;EAE3BC,oCAAsB,CAACC,OAAO,CAAEC,kBAAQ,EAAK;IAC3C,IAAIJ,KAAK,CAACI,QAAQ,CAAC,KAAKC,SAAS,EAAE;MACjCJ,MAAM,CAACK,IAAI,CAAIF,QAAS,gBAAUJ,KAAK,CAACI,QAAQ,CAAE,CAAE;IACtD;EACF,CAAC,CAAC;EAEF,OAAOH,MAAM,CAACM,IAAI,CAAC,IAAI,CAAC;AAC1B,CAAC;AAED,IAAMC,gBAAgB,GAAIR,SAApBQ,gBAAgB,CAAIR,KAAyB;EAAA,yCACjBD,iBAAiB,CAACC,KAAK,CAAE;AAAA,CAAC;AAE5D,IAAMS,eAAe,GAAIT,SAAnBS,eAAe,CAAIT,KAAyB;EAAA,2CACdD,iBAAiB,CAACC,KAAK,CAAE;AAAA,CAAC;AAE9D,WAAoE,4BAAW,EAC7ER,mBAAmB,EACnBiB,eAAe,EACfD,gBAAgB,CACjB;EAJOE,KAAK,QAALA,KAAK;EAAEC,QAAQ,QAARA,QAAQ;EAAEC,OAAO,QAAPA,OAAO;EAAEC,UAAU,QAAVA,UAAU;EAAEC,MAAM,QAANA,MAAM;EAAEC;AAkC/C,IAAMC,sBAAsB,GACjCvB,SADWuB,sBAAsB,CACjCvB,QAA2B,EACJ;EACvB,IAAMwB,cAAc,GAAGP,KAAK,CAACjB,QAAQ,CAAC;EACtC,IAAMyB,iBAAiB,GAAGP,QAAQ,CAAClB,QAAQ,CAAC;EAC5C,IAAM0B,gBAAgB,GAAGP,OAAO,CAACnB,QAAQ,CAAC;EAC1C,IAAMD,mBAAmB,GAAGqB,UAAU,CAACpB,QAAQ,CAAC;EAChD,IAAM2B,eAAe,GAAGN,MAAM,CAACrB,QAAQ,CAAC;EACxC,IAAM4B,kBAAkB,GAAGN,SAAS,CAACtB,QAAQ,CAAC;EAE9C,yBACK,iCAAgB,EACjB;IACEwB,cAAc,EAAdA,cAAc;IACdC,iBAAiB,EAAjBA,iBAAiB;IACjBC,gBAAgB,EAAhBA,gBAAgB;IAChB3B,mBAAmB,EAAnBA,mBAAmB;IACnB4B,eAAe,EAAfA,eAAe;IACfC,kBAAkB,EAAlBA,kBAAkB;IAClBC,uBAAuB,EAAEL,cAAc;IACvCM,0BAA0B,EAAEL,iBAAiB;IAC7CM,yBAAyB,EAAEL,gBAAgB;IAC3CM,4BAA4B,EAAEjC,mBAAmB;IACjDkC,wBAAwB,EAAEN,eAAe;IACzCO,2BAA2B,EAAEN;EAC/B,CAAC,EACD,gMAAgM;AAGtM,CAAC;AAACO","names":["queryAllByA11yState","instance","queryAllByA11yStateFn","matcher","queryOptions","node","type","buildErrorMessage","state","errors","accessibilityStateKeys","forEach","stateKey","undefined","push","join","getMultipleError","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByA11yStateQueries","getByA11yState","getAllByA11yState","queryByA11yState","findByA11yState","findAllByA11yState","getByAccessibilityState","getAllByAccessibilityState","queryByAccessibilityState","queryAllByAccessibilityState","findByAccessibilityState","findAllByAccessibilityState","exports"],"sources":["../../src/queries/a11yState.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { AccessibilityState } from 'react-native';\nimport { accessibilityStateKeys } from '../helpers/accessiblity';\nimport { deprecateQueries } from '../helpers/deprecation';\nimport { findAll } from '../helpers/findAll';\nimport { matchAccessibilityState } from '../helpers/matchers/accessibilityState';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport { CommonQueryOptions } from './options';\n\nconst queryAllByA11yState = (\n  instance: ReactTestInstance\n): ((\n  matcher: AccessibilityState,\n  queryOptions?: CommonQueryOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByA11yStateFn(matcher, queryOptions) {\n    return findAll(\n      instance,\n      (node) =>\n        typeof node.type === 'string' && matchAccessibilityState(node, matcher),\n      queryOptions\n    );\n  };\n\nconst buildErrorMessage = (state: AccessibilityState = {}) => {\n  const errors: string[] = [];\n\n  accessibilityStateKeys.forEach((stateKey) => {\n    if (state[stateKey] !== undefined) {\n      errors.push(`${stateKey} state: ${state[stateKey]}`);\n    }\n  });\n\n  return errors.join(', ');\n};\n\nconst getMultipleError = (state: AccessibilityState) =>\n  `Found multiple elements with ${buildErrorMessage(state)}`;\n\nconst getMissingError = (state: AccessibilityState) =>\n  `Unable to find an element with ${buildErrorMessage(state)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByA11yState,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByA11yStateQueries = {\n  getByA11yState: GetByQuery<AccessibilityState, CommonQueryOptions>;\n  getAllByA11yState: GetAllByQuery<AccessibilityState, CommonQueryOptions>;\n  queryByA11yState: QueryByQuery<AccessibilityState, CommonQueryOptions>;\n  queryAllByA11yState: QueryAllByQuery<AccessibilityState, CommonQueryOptions>;\n  findByA11yState: FindByQuery<AccessibilityState, CommonQueryOptions>;\n  findAllByA11yState: FindAllByQuery<AccessibilityState, CommonQueryOptions>;\n\n  getByAccessibilityState: GetByQuery<AccessibilityState, CommonQueryOptions>;\n  getAllByAccessibilityState: GetAllByQuery<\n    AccessibilityState,\n    CommonQueryOptions\n  >;\n  queryByAccessibilityState: QueryByQuery<\n    AccessibilityState,\n    CommonQueryOptions\n  >;\n  queryAllByAccessibilityState: QueryAllByQuery<\n    AccessibilityState,\n    CommonQueryOptions\n  >;\n  findByAccessibilityState: FindByQuery<AccessibilityState, CommonQueryOptions>;\n  findAllByAccessibilityState: FindAllByQuery<\n    AccessibilityState,\n    CommonQueryOptions\n  >;\n};\n\nexport const bindByA11yStateQueries = (\n  instance: ReactTestInstance\n): ByA11yStateQueries => {\n  const getByA11yState = getBy(instance);\n  const getAllByA11yState = getAllBy(instance);\n  const queryByA11yState = queryBy(instance);\n  const queryAllByA11yState = queryAllBy(instance);\n  const findByA11yState = findBy(instance);\n  const findAllByA11yState = findAllBy(instance);\n\n  return {\n    ...deprecateQueries(\n      {\n        getByA11yState,\n        getAllByA11yState,\n        queryByA11yState,\n        queryAllByA11yState,\n        findByA11yState,\n        findAllByA11yState,\n        getByAccessibilityState: getByA11yState,\n        getAllByAccessibilityState: getAllByA11yState,\n        queryByAccessibilityState: queryByA11yState,\n        queryAllByAccessibilityState: queryAllByA11yState,\n        findByAccessibilityState: findByA11yState,\n        findAllByAccessibilityState: findAllByA11yState,\n      },\n      'Use {queryPrefix}ByRole(role, { disabled, selected, checked, busy, expanded }) query or expect(...).toHaveAccessibilityState(...) matcher from \"@testing-library/jest-native\" package instead.'\n    ),\n  };\n};\n"]}