14f51d52e4ea9f2efcd5f3ffd20a3802
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printElement = exports.isEmpty = exports.normalize = exports.matches = exports.getMessage = exports.getType = exports.checkReactElement = exports.ReactElementTypeError = exports.printDeprecationWarning = void 0;
var redent_1 = __importDefault(require("redent"));
var jest_matcher_utils_1 = require("jest-matcher-utils");
var pretty_format_1 = __importStar(require("pretty-format"));
var _pretty_format_1$plug = pretty_format_1.plugins,
  ReactTestComponent = _pretty_format_1$plug.ReactTestComponent,
  ReactElement = _pretty_format_1$plug.ReactElement;
var VALID_ELEMENTS = ['Image', 'Text', 'TextInput', 'Modal', 'View', 'RefreshControl', 'ScrollView', 'ActivityIndicator', 'ListView', 'ListViewDataSource'];
var ReactElementTypeError = function (_Error) {
  (0, _inherits2.default)(ReactElementTypeError, _Error);
  var _super = _createSuper(ReactElementTypeError);
  function ReactElementTypeError(received, matcherFn, context) {
    var _this;
    (0, _classCallCheck2.default)(this, ReactElementTypeError);
    _this = _super.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace((0, _assertThisInitialized2.default)(_this), matcherFn);
    }
    var withType = '';
    try {
      withType = (0, jest_matcher_utils_1.printWithType)('Received', received, jest_matcher_utils_1.printReceived);
    } catch (e) {}
    _this.message = [(0, jest_matcher_utils_1.matcherHint)((context.isNot ? '.not' : '') + "." + matcherFn.name, 'received', ''), '', (0, jest_matcher_utils_1.RECEIVED_COLOR)('received') + " value must be a React Element.", withType].join('\n');
    return _this;
  }
  return (0, _createClass2.default)(ReactElementTypeError);
}((0, _wrapNativeSuper2.default)(Error));
exports.ReactElementTypeError = ReactElementTypeError;
function checkReactElement(element, matcherFn, context) {
  if (!element) {
    throw new ReactElementTypeError(element, matcherFn, context);
  }
  if (!element._fiber && !VALID_ELEMENTS.includes(element.type.toString())) {
    throw new ReactElementTypeError(element, matcherFn, context);
  }
}
exports.checkReactElement = checkReactElement;
function getType(_ref) {
  var type = _ref.type;
  return type.displayName || type.name || type;
}
exports.getType = getType;
function printElement(element) {
  if (element == null) {
    return 'null';
  }
  return (0, redent_1.default)((0, pretty_format_1.default)({
    $$typeof: Symbol.for('react.test.json'),
    type: element.type,
    props: element.props
  }, {
    plugins: [ReactTestComponent, ReactElement],
    printFunctionName: false,
    printBasicPrototype: false,
    highlight: true
  }), 2);
}
exports.printElement = printElement;
function display(value) {
  return typeof value === 'string' ? value : (0, jest_matcher_utils_1.stringify)(value);
}
function getMessage(matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
  return [matcher + "\n", expectedLabel + ":\n" + (0, jest_matcher_utils_1.EXPECTED_COLOR)((0, redent_1.default)(display(expectedValue), 2)), receivedLabel + ":\n" + (0, jest_matcher_utils_1.RECEIVED_COLOR)((0, redent_1.default)(display(receivedValue), 2))].join('\n');
}
exports.getMessage = getMessage;
function matches(textToMatch, matcher) {
  if (matcher instanceof RegExp) {
    return matcher.test(textToMatch);
  }
  return textToMatch.includes(matcher);
}
exports.matches = matches;
function normalize(text) {
  return text.replace(/\s+/g, ' ').trim();
}
exports.normalize = normalize;
function isEmpty(value) {
  if (!value) {
    return true;
  }
  if (Array.isArray(value)) {
    return value.length === 0;
  }
  if (typeof value === 'object') {
    return Object.keys(value).length === 0;
  }
  return false;
}
exports.isEmpty = isEmpty;
var warned = {};
function printDeprecationWarning(functionName, message) {
  if (warned[functionName]) {
    return;
  }
  console.warn("Deprecation Warning:\n" + message);
  warned[functionName] = true;
}
exports.printDeprecationWarning = printDeprecationWarning;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,