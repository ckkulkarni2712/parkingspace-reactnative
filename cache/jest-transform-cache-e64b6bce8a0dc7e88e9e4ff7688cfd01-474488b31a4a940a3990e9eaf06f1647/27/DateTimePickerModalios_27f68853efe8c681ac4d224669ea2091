02c20a711be9cb242563f9542222ea3a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.confirmButtonStyles = exports.cancelButtonStyles = exports.HIGHLIGHT_COLOR_LIGHT = exports.HIGHLIGHT_COLOR_DARK = exports.DateTimePickerModal = exports.ConfirmButton = exports.CancelButton = exports.BUTTON_FONT_WEIGHT = exports.BUTTON_FONT_SIZE = exports.BUTTON_FONT_COLOR = exports.BORDER_RADIUS = exports.BORDER_COLOR_DARK = exports.BORDER_COLOR = exports.BACKGROUND_COLOR_LIGHT = exports.BACKGROUND_COLOR_DARK = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _datetimepicker = _interopRequireDefault(require("@react-native-community/datetimepicker"));
var _Modal = _interopRequireDefault(require("./Modal"));
var _utils = require("./utils");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["cancelButtonTestID", "confirmButtonTestID", "cancelTextIOS", "confirmTextIOS", "customCancelButtonIOS", "customConfirmButtonIOS", "customHeaderIOS", "customPickerIOS", "date", "display", "isDarkModeEnabled", "isVisible", "modalStyleIOS", "modalPropsIOS", "pickerContainerStyleIOS", "pickerStyleIOS", "onCancel", "onConfirm", "onChange", "onHide", "backdropStyleIOS", "buttonTextColorIOS"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var BACKGROUND_COLOR_LIGHT = "white";
exports.BACKGROUND_COLOR_LIGHT = BACKGROUND_COLOR_LIGHT;
var BACKGROUND_COLOR_DARK = "#0E0E0E";
exports.BACKGROUND_COLOR_DARK = BACKGROUND_COLOR_DARK;
var BORDER_COLOR = "#d5d5d5";
exports.BORDER_COLOR = BORDER_COLOR;
var BORDER_COLOR_DARK = "#272729";
exports.BORDER_COLOR_DARK = BORDER_COLOR_DARK;
var BORDER_RADIUS = 13;
exports.BORDER_RADIUS = BORDER_RADIUS;
var BUTTON_FONT_WEIGHT = "normal";
exports.BUTTON_FONT_WEIGHT = BUTTON_FONT_WEIGHT;
var BUTTON_FONT_COLOR = "#007ff9";
exports.BUTTON_FONT_COLOR = BUTTON_FONT_COLOR;
var BUTTON_FONT_SIZE = 20;
exports.BUTTON_FONT_SIZE = BUTTON_FONT_SIZE;
var HIGHLIGHT_COLOR_DARK = "#444444";
exports.HIGHLIGHT_COLOR_DARK = HIGHLIGHT_COLOR_DARK;
var HIGHLIGHT_COLOR_LIGHT = "#ebebeb";
exports.HIGHLIGHT_COLOR_LIGHT = HIGHLIGHT_COLOR_LIGHT;
var DateTimePickerModal = function (_React$PureComponent) {
  (0, _inherits2.default)(DateTimePickerModal, _React$PureComponent);
  var _super = _createSuper(DateTimePickerModal);
  function DateTimePickerModal() {
    var _this;
    (0, _classCallCheck2.default)(this, DateTimePickerModal);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      currentDate: _this.props.date,
      isPickerVisible: _this.props.isVisible
    };
    _this.didPressConfirm = false;
    _this.handleCancel = function () {
      _this.didPressConfirm = false;
      _this.props.onCancel();
    };
    _this.handleConfirm = function () {
      _this.didPressConfirm = true;
      _this.props.onConfirm(_this.state.currentDate);
    };
    _this.handleHide = function () {
      var onHide = _this.props.onHide;
      if (onHide) {
        onHide(_this.didPressConfirm, _this.state.currentDate);
      }
      _this.setState({
        isPickerVisible: false
      });
    };
    _this.handleChange = function (event, date) {
      if (_this.props.onChange) {
        _this.props.onChange(date);
      }
      _this.setState({
        currentDate: date
      });
    };
    return _this;
  }
  (0, _createClass2.default)(DateTimePickerModal, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        cancelButtonTestID = _this$props.cancelButtonTestID,
        confirmButtonTestID = _this$props.confirmButtonTestID,
        cancelTextIOS = _this$props.cancelTextIOS,
        confirmTextIOS = _this$props.confirmTextIOS,
        customCancelButtonIOS = _this$props.customCancelButtonIOS,
        customConfirmButtonIOS = _this$props.customConfirmButtonIOS,
        customHeaderIOS = _this$props.customHeaderIOS,
        customPickerIOS = _this$props.customPickerIOS,
        date = _this$props.date,
        display = _this$props.display,
        isDarkModeEnabled = _this$props.isDarkModeEnabled,
        isVisible = _this$props.isVisible,
        modalStyleIOS = _this$props.modalStyleIOS,
        modalPropsIOS = _this$props.modalPropsIOS,
        pickerContainerStyleIOS = _this$props.pickerContainerStyleIOS,
        pickerStyleIOS = _this$props.pickerStyleIOS,
        onCancel = _this$props.onCancel,
        onConfirm = _this$props.onConfirm,
        onChange = _this$props.onChange,
        onHide = _this$props.onHide,
        backdropStyleIOS = _this$props.backdropStyleIOS,
        buttonTextColorIOS = _this$props.buttonTextColorIOS,
        otherProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var isAppearanceModuleAvailable = !!(_reactNative.Appearance && _reactNative.Appearance.getColorScheme);
      var _isDarkModeEnabled = isDarkModeEnabled === undefined && isAppearanceModuleAvailable ? _reactNative.Appearance.getColorScheme() === "dark" : isDarkModeEnabled || false;
      var ConfirmButtonComponent = customConfirmButtonIOS || ConfirmButton;
      var CancelButtonComponent = customCancelButtonIOS || CancelButton;
      var PickerComponent = customPickerIOS || _datetimepicker.default;
      var HeaderComponent = customHeaderIOS;
      var themedContainerStyle = _isDarkModeEnabled ? pickerStyles.containerDark : pickerStyles.containerLight;
      return (0, _jsxRuntime.jsxs)(_Modal.default, Object.assign({
        isVisible: isVisible,
        contentStyle: [pickerStyles.modal, modalStyleIOS],
        onBackdropPress: this.handleCancel,
        onHide: this.handleHide,
        backdropStyle: backdropStyleIOS
      }, modalPropsIOS, {
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [pickerStyles.container, themedContainerStyle, pickerContainerStyleIOS],
          children: [HeaderComponent && (0, _jsxRuntime.jsx)(HeaderComponent, {}), !HeaderComponent && display === "inline" && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: pickerStyles.headerFiller
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [display === "inline" ? pickerStyles.pickerInline : pickerStyles.pickerSpinner, pickerStyleIOS],
            children: (0, _jsxRuntime.jsx)(PickerComponent, Object.assign({
              display: display || "spinner"
            }, otherProps, {
              value: this.state.currentDate,
              onChange: this.handleChange
            }))
          }), (0, _jsxRuntime.jsx)(ConfirmButtonComponent, {
            confirmButtonTestID: confirmButtonTestID,
            isDarkModeEnabled: _isDarkModeEnabled,
            onPress: this.handleConfirm,
            label: confirmTextIOS,
            buttonTextColorIOS: buttonTextColorIOS
          })]
        }), (0, _jsxRuntime.jsx)(CancelButtonComponent, {
          cancelButtonTestID: cancelButtonTestID,
          isDarkModeEnabled: _isDarkModeEnabled,
          onPress: this.handleCancel,
          label: cancelTextIOS,
          buttonTextColorIOS: buttonTextColorIOS
        })]
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.isVisible && !state.isPickerVisible) {
        return {
          currentDate: props.date,
          isPickerVisible: true
        };
      }
      return null;
    }
  }]);
  return DateTimePickerModal;
}(_react.default.PureComponent);
exports.DateTimePickerModal = DateTimePickerModal;
DateTimePickerModal.propTypes = {
  buttonTextColorIOS: _propTypes.default.string,
  cancelButtonTestID: _propTypes.default.string,
  confirmButtonTestID: _propTypes.default.string,
  cancelTextIOS: _propTypes.default.string,
  confirmTextIOS: _propTypes.default.string,
  customCancelButtonIOS: _propTypes.default.elementType,
  customConfirmButtonIOS: _propTypes.default.elementType,
  customHeaderIOS: _propTypes.default.elementType,
  customPickerIOS: _propTypes.default.elementType,
  date: _propTypes.default.instanceOf(Date),
  modalPropsIOS: _propTypes.default.any,
  modalStyleIOS: _propTypes.default.any,
  isDarkModeEnabled: _propTypes.default.bool,
  isVisible: _propTypes.default.bool,
  pickerContainerStyleIOS: _propTypes.default.any,
  pickerStyleIOS: _propTypes.default.any,
  backdropStyleIOS: _propTypes.default.any,
  onCancel: _propTypes.default.func.isRequired,
  onConfirm: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func,
  onHide: _propTypes.default.func,
  maximumDate: _propTypes.default.instanceOf(Date),
  minimumDate: _propTypes.default.instanceOf(Date)
};
DateTimePickerModal.defaultProps = {
  cancelTextIOS: "Cancel",
  confirmTextIOS: "Confirm",
  modalPropsIOS: {},
  date: new Date(),
  isDarkModeEnabled: undefined,
  isVisible: false,
  pickerContainerStyleIOS: {},
  pickerStyleIOS: {},
  backdropStyleIOS: {}
};
var pickerStyles = _reactNative.StyleSheet.create({
  modal: {
    justifyContent: "flex-end",
    margin: 10
  },
  container: {
    borderRadius: BORDER_RADIUS,
    marginBottom: 8,
    overflow: "hidden"
  },
  pickerSpinner: {
    marginBottom: 8
  },
  pickerInline: {
    paddingHorizontal: 12,
    paddingTop: 14
  },
  containerLight: {
    backgroundColor: BACKGROUND_COLOR_LIGHT
  },
  containerDark: {
    backgroundColor: BACKGROUND_COLOR_DARK
  }
});
var ConfirmButton = function ConfirmButton(_ref) {
  var isDarkModeEnabled = _ref.isDarkModeEnabled,
    confirmButtonTestID = _ref.confirmButtonTestID,
    onPress = _ref.onPress,
    label = _ref.label,
    buttonTextColorIOS = _ref.buttonTextColorIOS,
    _ref$style = _ref.style,
    style = _ref$style === void 0 ? confirmButtonStyles : _ref$style;
  var themedButtonStyle = isDarkModeEnabled ? confirmButtonStyles.buttonDark : confirmButtonStyles.buttonLight;
  var underlayColor = isDarkModeEnabled ? HIGHLIGHT_COLOR_DARK : HIGHLIGHT_COLOR_LIGHT;
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableHighlight, {
    testID: confirmButtonTestID,
    style: [themedButtonStyle, style.button],
    underlayColor: underlayColor,
    onPress: onPress,
    accessible: true,
    accessibilityRole: "button",
    accessibilityLabel: label,
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [style.text, buttonTextColorIOS && {
        color: buttonTextColorIOS
      }],
      children: label
    })
  });
};
exports.ConfirmButton = ConfirmButton;
var confirmButtonStyles = _reactNative.StyleSheet.create({
  button: {
    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
    backgroundColor: "transparent",
    height: 57,
    justifyContent: "center"
  },
  buttonLight: {
    borderColor: BORDER_COLOR
  },
  buttonDark: {
    borderColor: BORDER_COLOR_DARK
  },
  text: {
    textAlign: "center",
    color: BUTTON_FONT_COLOR,
    fontSize: BUTTON_FONT_SIZE,
    fontWeight: BUTTON_FONT_WEIGHT,
    backgroundColor: "transparent"
  }
});
exports.confirmButtonStyles = confirmButtonStyles;
var CancelButton = function CancelButton(_ref2) {
  var cancelButtonTestID = _ref2.cancelButtonTestID,
    isDarkModeEnabled = _ref2.isDarkModeEnabled,
    onPress = _ref2.onPress,
    label = _ref2.label,
    buttonTextColorIOS = _ref2.buttonTextColorIOS,
    _ref2$style = _ref2.style,
    style = _ref2$style === void 0 ? cancelButtonStyles : _ref2$style;
  var themedButtonStyle = isDarkModeEnabled ? cancelButtonStyles.buttonDark : cancelButtonStyles.buttonLight;
  var underlayColor = isDarkModeEnabled ? HIGHLIGHT_COLOR_DARK : HIGHLIGHT_COLOR_LIGHT;
  return (0, _jsxRuntime.jsx)(_reactNative.TouchableHighlight, {
    testID: cancelButtonTestID,
    style: [style.button, themedButtonStyle],
    underlayColor: underlayColor,
    onPress: onPress,
    accessible: true,
    accessibilityRole: "button",
    accessibilityLabel: label,
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [style.text, buttonTextColorIOS && {
        color: buttonTextColorIOS
      }],
      children: label
    })
  });
};
exports.CancelButton = CancelButton;
var cancelButtonStyles = _reactNative.StyleSheet.create({
  button: {
    borderRadius: BORDER_RADIUS,
    height: 57,
    marginBottom: (0, _utils.isIphoneX)() ? 20 : 0,
    justifyContent: "center"
  },
  buttonLight: {
    backgroundColor: BACKGROUND_COLOR_LIGHT
  },
  buttonDark: {
    backgroundColor: BACKGROUND_COLOR_DARK
  },
  text: {
    padding: 10,
    textAlign: "center",
    color: BUTTON_FONT_COLOR,
    fontSize: BUTTON_FONT_SIZE,
    fontWeight: "600",
    backgroundColor: "transparent"
  }
});
exports.cancelButtonStyles = cancelButtonStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,