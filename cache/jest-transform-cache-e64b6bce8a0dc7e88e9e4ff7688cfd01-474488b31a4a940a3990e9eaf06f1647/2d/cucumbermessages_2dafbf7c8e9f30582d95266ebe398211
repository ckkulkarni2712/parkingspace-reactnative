624f5aa76d02b87e0610ff1f9c39f81e
"use strict";

var $protobuf = require("protobufjs/minimal");
var $Reader = $protobuf.Reader,
  $Writer = $protobuf.Writer,
  $util = $protobuf.util;
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
$root.io = function () {
  var io = {};
  io.cucumber = function () {
    var cucumber = {};
    cucumber.messages = function () {
      var messages = {};
      messages.Timestamp = function () {
        function Timestamp(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
        Timestamp.prototype.nanos = 0;
        Timestamp.create = function create(properties) {
          return new Timestamp(properties);
        };
        Timestamp.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.seconds != null && message.hasOwnProperty("seconds")) writer.uint32(8).int64(message.seconds);
          if (message.nanos != null && message.hasOwnProperty("nanos")) writer.uint32(16).int32(message.nanos);
          return writer;
        };
        Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Timestamp.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.Timestamp();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.seconds = reader.int64();
                break;
              case 2:
                message.nanos = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Timestamp.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Timestamp.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.seconds != null && message.hasOwnProperty("seconds")) if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high))) return "seconds: integer|Long expected";
          if (message.nanos != null && message.hasOwnProperty("nanos")) if (!$util.isInteger(message.nanos)) return "nanos: integer expected";
          return null;
        };
        Timestamp.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.Timestamp) return object;
          var message = new $root.io.cucumber.messages.Timestamp();
          if (object.seconds != null) if ($util.Long) (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;else if (typeof object.seconds === "string") message.seconds = parseInt(object.seconds, 10);else if (typeof object.seconds === "number") message.seconds = object.seconds;else if (typeof object.seconds === "object") message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
          if (object.nanos != null) message.nanos = object.nanos | 0;
          return message;
        };
        Timestamp.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else object.seconds = options.longs === String ? "0" : 0;
            object.nanos = 0;
          }
          if (message.seconds != null && message.hasOwnProperty("seconds")) if (typeof message.seconds === "number") object.seconds = options.longs === String ? String(message.seconds) : message.seconds;else object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
          if (message.nanos != null && message.hasOwnProperty("nanos")) object.nanos = message.nanos;
          return object;
        };
        Timestamp.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Timestamp;
      }();
      messages.Duration = function () {
        function Duration(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
        Duration.prototype.nanos = 0;
        Duration.create = function create(properties) {
          return new Duration(properties);
        };
        Duration.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.seconds != null && message.hasOwnProperty("seconds")) writer.uint32(8).int64(message.seconds);
          if (message.nanos != null && message.hasOwnProperty("nanos")) writer.uint32(16).int32(message.nanos);
          return writer;
        };
        Duration.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Duration.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.Duration();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.seconds = reader.int64();
                break;
              case 2:
                message.nanos = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Duration.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Duration.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.seconds != null && message.hasOwnProperty("seconds")) if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high))) return "seconds: integer|Long expected";
          if (message.nanos != null && message.hasOwnProperty("nanos")) if (!$util.isInteger(message.nanos)) return "nanos: integer expected";
          return null;
        };
        Duration.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.Duration) return object;
          var message = new $root.io.cucumber.messages.Duration();
          if (object.seconds != null) if ($util.Long) (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;else if (typeof object.seconds === "string") message.seconds = parseInt(object.seconds, 10);else if (typeof object.seconds === "number") message.seconds = object.seconds;else if (typeof object.seconds === "object") message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
          if (object.nanos != null) message.nanos = object.nanos | 0;
          return message;
        };
        Duration.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            if ($util.Long) {
              var long = new $util.Long(0, 0, false);
              object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else object.seconds = options.longs === String ? "0" : 0;
            object.nanos = 0;
          }
          if (message.seconds != null && message.hasOwnProperty("seconds")) if (typeof message.seconds === "number") object.seconds = options.longs === String ? String(message.seconds) : message.seconds;else object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
          if (message.nanos != null && message.hasOwnProperty("nanos")) object.nanos = message.nanos;
          return object;
        };
        Duration.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Duration;
      }();
      messages.Envelope = function () {
        function Envelope(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        Envelope.prototype.source = null;
        Envelope.prototype.gherkinDocument = null;
        Envelope.prototype.pickle = null;
        Envelope.prototype.attachment = null;
        Envelope.prototype.testCaseStarted = null;
        Envelope.prototype.testStepStarted = null;
        Envelope.prototype.testStepFinished = null;
        Envelope.prototype.testCaseFinished = null;
        Envelope.prototype.pickleAccepted = null;
        Envelope.prototype.pickleRejected = null;
        Envelope.prototype.testCasePrepared = null;
        Envelope.prototype.testRunStarted = null;
        Envelope.prototype.testRunFinished = null;
        Envelope.prototype.commandStart = null;
        Envelope.prototype.commandActionComplete = null;
        Envelope.prototype.commandRunBeforeTestRunHooks = null;
        Envelope.prototype.commandInitializeTestCase = null;
        Envelope.prototype.commandRunBeforeTestCaseHook = null;
        Envelope.prototype.commandRunTestStep = null;
        Envelope.prototype.commandRunAfterTestCaseHook = null;
        Envelope.prototype.commandRunAfterTestRunHooks = null;
        Envelope.prototype.commandGenerateSnippet = null;
        Envelope.prototype.commandError = "";
        Envelope.prototype.testCase = null;
        Envelope.prototype.stepDefinition = null;
        Envelope.prototype.hook = null;
        var $oneOfFields;
        Object.defineProperty(Envelope.prototype, "message", {
          get: $util.oneOfGetter($oneOfFields = ["source", "gherkinDocument", "pickle", "attachment", "testCaseStarted", "testStepStarted", "testStepFinished", "testCaseFinished", "pickleAccepted", "pickleRejected", "testCasePrepared", "testRunStarted", "testRunFinished", "commandStart", "commandActionComplete", "commandRunBeforeTestRunHooks", "commandInitializeTestCase", "commandRunBeforeTestCaseHook", "commandRunTestStep", "commandRunAfterTestCaseHook", "commandRunAfterTestRunHooks", "commandGenerateSnippet", "commandError", "testCase", "stepDefinition", "hook"]),
          set: $util.oneOfSetter($oneOfFields)
        });
        Envelope.create = function create(properties) {
          return new Envelope(properties);
        };
        Envelope.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.source != null && message.hasOwnProperty("source")) $root.io.cucumber.messages.Source.encode(message.source, writer.uint32(10).fork()).ldelim();
          if (message.gherkinDocument != null && message.hasOwnProperty("gherkinDocument")) $root.io.cucumber.messages.GherkinDocument.encode(message.gherkinDocument, writer.uint32(18).fork()).ldelim();
          if (message.pickle != null && message.hasOwnProperty("pickle")) $root.io.cucumber.messages.Pickle.encode(message.pickle, writer.uint32(26).fork()).ldelim();
          if (message.attachment != null && message.hasOwnProperty("attachment")) $root.io.cucumber.messages.Attachment.encode(message.attachment, writer.uint32(34).fork()).ldelim();
          if (message.testCaseStarted != null && message.hasOwnProperty("testCaseStarted")) $root.io.cucumber.messages.TestCaseStarted.encode(message.testCaseStarted, writer.uint32(42).fork()).ldelim();
          if (message.testStepStarted != null && message.hasOwnProperty("testStepStarted")) $root.io.cucumber.messages.TestStepStarted.encode(message.testStepStarted, writer.uint32(50).fork()).ldelim();
          if (message.testStepFinished != null && message.hasOwnProperty("testStepFinished")) $root.io.cucumber.messages.TestStepFinished.encode(message.testStepFinished, writer.uint32(58).fork()).ldelim();
          if (message.testCaseFinished != null && message.hasOwnProperty("testCaseFinished")) $root.io.cucumber.messages.TestCaseFinished.encode(message.testCaseFinished, writer.uint32(66).fork()).ldelim();
          if (message.pickleAccepted != null && message.hasOwnProperty("pickleAccepted")) $root.io.cucumber.messages.PickleAccepted.encode(message.pickleAccepted, writer.uint32(74).fork()).ldelim();
          if (message.pickleRejected != null && message.hasOwnProperty("pickleRejected")) $root.io.cucumber.messages.PickleRejected.encode(message.pickleRejected, writer.uint32(82).fork()).ldelim();
          if (message.testCasePrepared != null && message.hasOwnProperty("testCasePrepared")) $root.io.cucumber.messages.TestCasePrepared.encode(message.testCasePrepared, writer.uint32(90).fork()).ldelim();
          if (message.testRunStarted != null && message.hasOwnProperty("testRunStarted")) $root.io.cucumber.messages.TestRunStarted.encode(message.testRunStarted, writer.uint32(98).fork()).ldelim();
          if (message.testRunFinished != null && message.hasOwnProperty("testRunFinished")) $root.io.cucumber.messages.TestRunFinished.encode(message.testRunFinished, writer.uint32(106).fork()).ldelim();
          if (message.commandStart != null && message.hasOwnProperty("commandStart")) $root.io.cucumber.messages.CommandStart.encode(message.commandStart, writer.uint32(114).fork()).ldelim();
          if (message.commandActionComplete != null && message.hasOwnProperty("commandActionComplete")) $root.io.cucumber.messages.CommandActionComplete.encode(message.commandActionComplete, writer.uint32(122).fork()).ldelim();
          if (message.commandRunBeforeTestRunHooks != null && message.hasOwnProperty("commandRunBeforeTestRunHooks")) $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.encode(message.commandRunBeforeTestRunHooks, writer.uint32(130).fork()).ldelim();
          if (message.commandInitializeTestCase != null && message.hasOwnProperty("commandInitializeTestCase")) $root.io.cucumber.messages.CommandInitializeTestCase.encode(message.commandInitializeTestCase, writer.uint32(138).fork()).ldelim();
          if (message.commandRunBeforeTestCaseHook != null && message.hasOwnProperty("commandRunBeforeTestCaseHook")) $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.encode(message.commandRunBeforeTestCaseHook, writer.uint32(146).fork()).ldelim();
          if (message.commandRunTestStep != null && message.hasOwnProperty("commandRunTestStep")) $root.io.cucumber.messages.CommandRunTestStep.encode(message.commandRunTestStep, writer.uint32(154).fork()).ldelim();
          if (message.commandRunAfterTestCaseHook != null && message.hasOwnProperty("commandRunAfterTestCaseHook")) $root.io.cucumber.messages.CommandRunAfterTestCaseHook.encode(message.commandRunAfterTestCaseHook, writer.uint32(162).fork()).ldelim();
          if (message.commandRunAfterTestRunHooks != null && message.hasOwnProperty("commandRunAfterTestRunHooks")) $root.io.cucumber.messages.CommandRunAfterTestRunHooks.encode(message.commandRunAfterTestRunHooks, writer.uint32(170).fork()).ldelim();
          if (message.commandGenerateSnippet != null && message.hasOwnProperty("commandGenerateSnippet")) $root.io.cucumber.messages.CommandGenerateSnippet.encode(message.commandGenerateSnippet, writer.uint32(178).fork()).ldelim();
          if (message.commandError != null && message.hasOwnProperty("commandError")) writer.uint32(186).string(message.commandError);
          if (message.testCase != null && message.hasOwnProperty("testCase")) $root.io.cucumber.messages.TestCase.encode(message.testCase, writer.uint32(194).fork()).ldelim();
          if (message.stepDefinition != null && message.hasOwnProperty("stepDefinition")) $root.io.cucumber.messages.StepDefinition.encode(message.stepDefinition, writer.uint32(202).fork()).ldelim();
          if (message.hook != null && message.hasOwnProperty("hook")) $root.io.cucumber.messages.Hook.encode(message.hook, writer.uint32(210).fork()).ldelim();
          return writer;
        };
        Envelope.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Envelope.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.Envelope();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.source = $root.io.cucumber.messages.Source.decode(reader, reader.uint32());
                break;
              case 2:
                message.gherkinDocument = $root.io.cucumber.messages.GherkinDocument.decode(reader, reader.uint32());
                break;
              case 3:
                message.pickle = $root.io.cucumber.messages.Pickle.decode(reader, reader.uint32());
                break;
              case 4:
                message.attachment = $root.io.cucumber.messages.Attachment.decode(reader, reader.uint32());
                break;
              case 5:
                message.testCaseStarted = $root.io.cucumber.messages.TestCaseStarted.decode(reader, reader.uint32());
                break;
              case 6:
                message.testStepStarted = $root.io.cucumber.messages.TestStepStarted.decode(reader, reader.uint32());
                break;
              case 7:
                message.testStepFinished = $root.io.cucumber.messages.TestStepFinished.decode(reader, reader.uint32());
                break;
              case 8:
                message.testCaseFinished = $root.io.cucumber.messages.TestCaseFinished.decode(reader, reader.uint32());
                break;
              case 9:
                message.pickleAccepted = $root.io.cucumber.messages.PickleAccepted.decode(reader, reader.uint32());
                break;
              case 10:
                message.pickleRejected = $root.io.cucumber.messages.PickleRejected.decode(reader, reader.uint32());
                break;
              case 11:
                message.testCasePrepared = $root.io.cucumber.messages.TestCasePrepared.decode(reader, reader.uint32());
                break;
              case 12:
                message.testRunStarted = $root.io.cucumber.messages.TestRunStarted.decode(reader, reader.uint32());
                break;
              case 13:
                message.testRunFinished = $root.io.cucumber.messages.TestRunFinished.decode(reader, reader.uint32());
                break;
              case 14:
                message.commandStart = $root.io.cucumber.messages.CommandStart.decode(reader, reader.uint32());
                break;
              case 15:
                message.commandActionComplete = $root.io.cucumber.messages.CommandActionComplete.decode(reader, reader.uint32());
                break;
              case 16:
                message.commandRunBeforeTestRunHooks = $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.decode(reader, reader.uint32());
                break;
              case 17:
                message.commandInitializeTestCase = $root.io.cucumber.messages.CommandInitializeTestCase.decode(reader, reader.uint32());
                break;
              case 18:
                message.commandRunBeforeTestCaseHook = $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.decode(reader, reader.uint32());
                break;
              case 19:
                message.commandRunTestStep = $root.io.cucumber.messages.CommandRunTestStep.decode(reader, reader.uint32());
                break;
              case 20:
                message.commandRunAfterTestCaseHook = $root.io.cucumber.messages.CommandRunAfterTestCaseHook.decode(reader, reader.uint32());
                break;
              case 21:
                message.commandRunAfterTestRunHooks = $root.io.cucumber.messages.CommandRunAfterTestRunHooks.decode(reader, reader.uint32());
                break;
              case 22:
                message.commandGenerateSnippet = $root.io.cucumber.messages.CommandGenerateSnippet.decode(reader, reader.uint32());
                break;
              case 23:
                message.commandError = reader.string();
                break;
              case 24:
                message.testCase = $root.io.cucumber.messages.TestCase.decode(reader, reader.uint32());
                break;
              case 25:
                message.stepDefinition = $root.io.cucumber.messages.StepDefinition.decode(reader, reader.uint32());
                break;
              case 26:
                message.hook = $root.io.cucumber.messages.Hook.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Envelope.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Envelope.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          var properties = {};
          if (message.source != null && message.hasOwnProperty("source")) {
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.Source.verify(message.source);
              if (error) return "source." + error;
            }
          }
          if (message.gherkinDocument != null && message.hasOwnProperty("gherkinDocument")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.GherkinDocument.verify(message.gherkinDocument);
              if (error) return "gherkinDocument." + error;
            }
          }
          if (message.pickle != null && message.hasOwnProperty("pickle")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.Pickle.verify(message.pickle);
              if (error) return "pickle." + error;
            }
          }
          if (message.attachment != null && message.hasOwnProperty("attachment")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.Attachment.verify(message.attachment);
              if (error) return "attachment." + error;
            }
          }
          if (message.testCaseStarted != null && message.hasOwnProperty("testCaseStarted")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.TestCaseStarted.verify(message.testCaseStarted);
              if (error) return "testCaseStarted." + error;
            }
          }
          if (message.testStepStarted != null && message.hasOwnProperty("testStepStarted")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.TestStepStarted.verify(message.testStepStarted);
              if (error) return "testStepStarted." + error;
            }
          }
          if (message.testStepFinished != null && message.hasOwnProperty("testStepFinished")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.TestStepFinished.verify(message.testStepFinished);
              if (error) return "testStepFinished." + error;
            }
          }
          if (message.testCaseFinished != null && message.hasOwnProperty("testCaseFinished")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.TestCaseFinished.verify(message.testCaseFinished);
              if (error) return "testCaseFinished." + error;
            }
          }
          if (message.pickleAccepted != null && message.hasOwnProperty("pickleAccepted")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.PickleAccepted.verify(message.pickleAccepted);
              if (error) return "pickleAccepted." + error;
            }
          }
          if (message.pickleRejected != null && message.hasOwnProperty("pickleRejected")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.PickleRejected.verify(message.pickleRejected);
              if (error) return "pickleRejected." + error;
            }
          }
          if (message.testCasePrepared != null && message.hasOwnProperty("testCasePrepared")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.TestCasePrepared.verify(message.testCasePrepared);
              if (error) return "testCasePrepared." + error;
            }
          }
          if (message.testRunStarted != null && message.hasOwnProperty("testRunStarted")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.TestRunStarted.verify(message.testRunStarted);
              if (error) return "testRunStarted." + error;
            }
          }
          if (message.testRunFinished != null && message.hasOwnProperty("testRunFinished")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.TestRunFinished.verify(message.testRunFinished);
              if (error) return "testRunFinished." + error;
            }
          }
          if (message.commandStart != null && message.hasOwnProperty("commandStart")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.CommandStart.verify(message.commandStart);
              if (error) return "commandStart." + error;
            }
          }
          if (message.commandActionComplete != null && message.hasOwnProperty("commandActionComplete")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.CommandActionComplete.verify(message.commandActionComplete);
              if (error) return "commandActionComplete." + error;
            }
          }
          if (message.commandRunBeforeTestRunHooks != null && message.hasOwnProperty("commandRunBeforeTestRunHooks")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.verify(message.commandRunBeforeTestRunHooks);
              if (error) return "commandRunBeforeTestRunHooks." + error;
            }
          }
          if (message.commandInitializeTestCase != null && message.hasOwnProperty("commandInitializeTestCase")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.CommandInitializeTestCase.verify(message.commandInitializeTestCase);
              if (error) return "commandInitializeTestCase." + error;
            }
          }
          if (message.commandRunBeforeTestCaseHook != null && message.hasOwnProperty("commandRunBeforeTestCaseHook")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.verify(message.commandRunBeforeTestCaseHook);
              if (error) return "commandRunBeforeTestCaseHook." + error;
            }
          }
          if (message.commandRunTestStep != null && message.hasOwnProperty("commandRunTestStep")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.CommandRunTestStep.verify(message.commandRunTestStep);
              if (error) return "commandRunTestStep." + error;
            }
          }
          if (message.commandRunAfterTestCaseHook != null && message.hasOwnProperty("commandRunAfterTestCaseHook")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.CommandRunAfterTestCaseHook.verify(message.commandRunAfterTestCaseHook);
              if (error) return "commandRunAfterTestCaseHook." + error;
            }
          }
          if (message.commandRunAfterTestRunHooks != null && message.hasOwnProperty("commandRunAfterTestRunHooks")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.CommandRunAfterTestRunHooks.verify(message.commandRunAfterTestRunHooks);
              if (error) return "commandRunAfterTestRunHooks." + error;
            }
          }
          if (message.commandGenerateSnippet != null && message.hasOwnProperty("commandGenerateSnippet")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.CommandGenerateSnippet.verify(message.commandGenerateSnippet);
              if (error) return "commandGenerateSnippet." + error;
            }
          }
          if (message.commandError != null && message.hasOwnProperty("commandError")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            if (!$util.isString(message.commandError)) return "commandError: string expected";
          }
          if (message.testCase != null && message.hasOwnProperty("testCase")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.TestCase.verify(message.testCase);
              if (error) return "testCase." + error;
            }
          }
          if (message.stepDefinition != null && message.hasOwnProperty("stepDefinition")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.StepDefinition.verify(message.stepDefinition);
              if (error) return "stepDefinition." + error;
            }
          }
          if (message.hook != null && message.hasOwnProperty("hook")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.Hook.verify(message.hook);
              if (error) return "hook." + error;
            }
          }
          return null;
        };
        Envelope.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.Envelope) return object;
          var message = new $root.io.cucumber.messages.Envelope();
          if (object.source != null) {
            if (typeof object.source !== "object") throw TypeError(".io.cucumber.messages.Envelope.source: object expected");
            message.source = $root.io.cucumber.messages.Source.fromObject(object.source);
          }
          if (object.gherkinDocument != null) {
            if (typeof object.gherkinDocument !== "object") throw TypeError(".io.cucumber.messages.Envelope.gherkinDocument: object expected");
            message.gherkinDocument = $root.io.cucumber.messages.GherkinDocument.fromObject(object.gherkinDocument);
          }
          if (object.pickle != null) {
            if (typeof object.pickle !== "object") throw TypeError(".io.cucumber.messages.Envelope.pickle: object expected");
            message.pickle = $root.io.cucumber.messages.Pickle.fromObject(object.pickle);
          }
          if (object.attachment != null) {
            if (typeof object.attachment !== "object") throw TypeError(".io.cucumber.messages.Envelope.attachment: object expected");
            message.attachment = $root.io.cucumber.messages.Attachment.fromObject(object.attachment);
          }
          if (object.testCaseStarted != null) {
            if (typeof object.testCaseStarted !== "object") throw TypeError(".io.cucumber.messages.Envelope.testCaseStarted: object expected");
            message.testCaseStarted = $root.io.cucumber.messages.TestCaseStarted.fromObject(object.testCaseStarted);
          }
          if (object.testStepStarted != null) {
            if (typeof object.testStepStarted !== "object") throw TypeError(".io.cucumber.messages.Envelope.testStepStarted: object expected");
            message.testStepStarted = $root.io.cucumber.messages.TestStepStarted.fromObject(object.testStepStarted);
          }
          if (object.testStepFinished != null) {
            if (typeof object.testStepFinished !== "object") throw TypeError(".io.cucumber.messages.Envelope.testStepFinished: object expected");
            message.testStepFinished = $root.io.cucumber.messages.TestStepFinished.fromObject(object.testStepFinished);
          }
          if (object.testCaseFinished != null) {
            if (typeof object.testCaseFinished !== "object") throw TypeError(".io.cucumber.messages.Envelope.testCaseFinished: object expected");
            message.testCaseFinished = $root.io.cucumber.messages.TestCaseFinished.fromObject(object.testCaseFinished);
          }
          if (object.pickleAccepted != null) {
            if (typeof object.pickleAccepted !== "object") throw TypeError(".io.cucumber.messages.Envelope.pickleAccepted: object expected");
            message.pickleAccepted = $root.io.cucumber.messages.PickleAccepted.fromObject(object.pickleAccepted);
          }
          if (object.pickleRejected != null) {
            if (typeof object.pickleRejected !== "object") throw TypeError(".io.cucumber.messages.Envelope.pickleRejected: object expected");
            message.pickleRejected = $root.io.cucumber.messages.PickleRejected.fromObject(object.pickleRejected);
          }
          if (object.testCasePrepared != null) {
            if (typeof object.testCasePrepared !== "object") throw TypeError(".io.cucumber.messages.Envelope.testCasePrepared: object expected");
            message.testCasePrepared = $root.io.cucumber.messages.TestCasePrepared.fromObject(object.testCasePrepared);
          }
          if (object.testRunStarted != null) {
            if (typeof object.testRunStarted !== "object") throw TypeError(".io.cucumber.messages.Envelope.testRunStarted: object expected");
            message.testRunStarted = $root.io.cucumber.messages.TestRunStarted.fromObject(object.testRunStarted);
          }
          if (object.testRunFinished != null) {
            if (typeof object.testRunFinished !== "object") throw TypeError(".io.cucumber.messages.Envelope.testRunFinished: object expected");
            message.testRunFinished = $root.io.cucumber.messages.TestRunFinished.fromObject(object.testRunFinished);
          }
          if (object.commandStart != null) {
            if (typeof object.commandStart !== "object") throw TypeError(".io.cucumber.messages.Envelope.commandStart: object expected");
            message.commandStart = $root.io.cucumber.messages.CommandStart.fromObject(object.commandStart);
          }
          if (object.commandActionComplete != null) {
            if (typeof object.commandActionComplete !== "object") throw TypeError(".io.cucumber.messages.Envelope.commandActionComplete: object expected");
            message.commandActionComplete = $root.io.cucumber.messages.CommandActionComplete.fromObject(object.commandActionComplete);
          }
          if (object.commandRunBeforeTestRunHooks != null) {
            if (typeof object.commandRunBeforeTestRunHooks !== "object") throw TypeError(".io.cucumber.messages.Envelope.commandRunBeforeTestRunHooks: object expected");
            message.commandRunBeforeTestRunHooks = $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.fromObject(object.commandRunBeforeTestRunHooks);
          }
          if (object.commandInitializeTestCase != null) {
            if (typeof object.commandInitializeTestCase !== "object") throw TypeError(".io.cucumber.messages.Envelope.commandInitializeTestCase: object expected");
            message.commandInitializeTestCase = $root.io.cucumber.messages.CommandInitializeTestCase.fromObject(object.commandInitializeTestCase);
          }
          if (object.commandRunBeforeTestCaseHook != null) {
            if (typeof object.commandRunBeforeTestCaseHook !== "object") throw TypeError(".io.cucumber.messages.Envelope.commandRunBeforeTestCaseHook: object expected");
            message.commandRunBeforeTestCaseHook = $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.fromObject(object.commandRunBeforeTestCaseHook);
          }
          if (object.commandRunTestStep != null) {
            if (typeof object.commandRunTestStep !== "object") throw TypeError(".io.cucumber.messages.Envelope.commandRunTestStep: object expected");
            message.commandRunTestStep = $root.io.cucumber.messages.CommandRunTestStep.fromObject(object.commandRunTestStep);
          }
          if (object.commandRunAfterTestCaseHook != null) {
            if (typeof object.commandRunAfterTestCaseHook !== "object") throw TypeError(".io.cucumber.messages.Envelope.commandRunAfterTestCaseHook: object expected");
            message.commandRunAfterTestCaseHook = $root.io.cucumber.messages.CommandRunAfterTestCaseHook.fromObject(object.commandRunAfterTestCaseHook);
          }
          if (object.commandRunAfterTestRunHooks != null) {
            if (typeof object.commandRunAfterTestRunHooks !== "object") throw TypeError(".io.cucumber.messages.Envelope.commandRunAfterTestRunHooks: object expected");
            message.commandRunAfterTestRunHooks = $root.io.cucumber.messages.CommandRunAfterTestRunHooks.fromObject(object.commandRunAfterTestRunHooks);
          }
          if (object.commandGenerateSnippet != null) {
            if (typeof object.commandGenerateSnippet !== "object") throw TypeError(".io.cucumber.messages.Envelope.commandGenerateSnippet: object expected");
            message.commandGenerateSnippet = $root.io.cucumber.messages.CommandGenerateSnippet.fromObject(object.commandGenerateSnippet);
          }
          if (object.commandError != null) message.commandError = String(object.commandError);
          if (object.testCase != null) {
            if (typeof object.testCase !== "object") throw TypeError(".io.cucumber.messages.Envelope.testCase: object expected");
            message.testCase = $root.io.cucumber.messages.TestCase.fromObject(object.testCase);
          }
          if (object.stepDefinition != null) {
            if (typeof object.stepDefinition !== "object") throw TypeError(".io.cucumber.messages.Envelope.stepDefinition: object expected");
            message.stepDefinition = $root.io.cucumber.messages.StepDefinition.fromObject(object.stepDefinition);
          }
          if (object.hook != null) {
            if (typeof object.hook !== "object") throw TypeError(".io.cucumber.messages.Envelope.hook: object expected");
            message.hook = $root.io.cucumber.messages.Hook.fromObject(object.hook);
          }
          return message;
        };
        Envelope.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (message.source != null && message.hasOwnProperty("source")) {
            object.source = $root.io.cucumber.messages.Source.toObject(message.source, options);
            if (options.oneofs) object.message = "source";
          }
          if (message.gherkinDocument != null && message.hasOwnProperty("gherkinDocument")) {
            object.gherkinDocument = $root.io.cucumber.messages.GherkinDocument.toObject(message.gherkinDocument, options);
            if (options.oneofs) object.message = "gherkinDocument";
          }
          if (message.pickle != null && message.hasOwnProperty("pickle")) {
            object.pickle = $root.io.cucumber.messages.Pickle.toObject(message.pickle, options);
            if (options.oneofs) object.message = "pickle";
          }
          if (message.attachment != null && message.hasOwnProperty("attachment")) {
            object.attachment = $root.io.cucumber.messages.Attachment.toObject(message.attachment, options);
            if (options.oneofs) object.message = "attachment";
          }
          if (message.testCaseStarted != null && message.hasOwnProperty("testCaseStarted")) {
            object.testCaseStarted = $root.io.cucumber.messages.TestCaseStarted.toObject(message.testCaseStarted, options);
            if (options.oneofs) object.message = "testCaseStarted";
          }
          if (message.testStepStarted != null && message.hasOwnProperty("testStepStarted")) {
            object.testStepStarted = $root.io.cucumber.messages.TestStepStarted.toObject(message.testStepStarted, options);
            if (options.oneofs) object.message = "testStepStarted";
          }
          if (message.testStepFinished != null && message.hasOwnProperty("testStepFinished")) {
            object.testStepFinished = $root.io.cucumber.messages.TestStepFinished.toObject(message.testStepFinished, options);
            if (options.oneofs) object.message = "testStepFinished";
          }
          if (message.testCaseFinished != null && message.hasOwnProperty("testCaseFinished")) {
            object.testCaseFinished = $root.io.cucumber.messages.TestCaseFinished.toObject(message.testCaseFinished, options);
            if (options.oneofs) object.message = "testCaseFinished";
          }
          if (message.pickleAccepted != null && message.hasOwnProperty("pickleAccepted")) {
            object.pickleAccepted = $root.io.cucumber.messages.PickleAccepted.toObject(message.pickleAccepted, options);
            if (options.oneofs) object.message = "pickleAccepted";
          }
          if (message.pickleRejected != null && message.hasOwnProperty("pickleRejected")) {
            object.pickleRejected = $root.io.cucumber.messages.PickleRejected.toObject(message.pickleRejected, options);
            if (options.oneofs) object.message = "pickleRejected";
          }
          if (message.testCasePrepared != null && message.hasOwnProperty("testCasePrepared")) {
            object.testCasePrepared = $root.io.cucumber.messages.TestCasePrepared.toObject(message.testCasePrepared, options);
            if (options.oneofs) object.message = "testCasePrepared";
          }
          if (message.testRunStarted != null && message.hasOwnProperty("testRunStarted")) {
            object.testRunStarted = $root.io.cucumber.messages.TestRunStarted.toObject(message.testRunStarted, options);
            if (options.oneofs) object.message = "testRunStarted";
          }
          if (message.testRunFinished != null && message.hasOwnProperty("testRunFinished")) {
            object.testRunFinished = $root.io.cucumber.messages.TestRunFinished.toObject(message.testRunFinished, options);
            if (options.oneofs) object.message = "testRunFinished";
          }
          if (message.commandStart != null && message.hasOwnProperty("commandStart")) {
            object.commandStart = $root.io.cucumber.messages.CommandStart.toObject(message.commandStart, options);
            if (options.oneofs) object.message = "commandStart";
          }
          if (message.commandActionComplete != null && message.hasOwnProperty("commandActionComplete")) {
            object.commandActionComplete = $root.io.cucumber.messages.CommandActionComplete.toObject(message.commandActionComplete, options);
            if (options.oneofs) object.message = "commandActionComplete";
          }
          if (message.commandRunBeforeTestRunHooks != null && message.hasOwnProperty("commandRunBeforeTestRunHooks")) {
            object.commandRunBeforeTestRunHooks = $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.toObject(message.commandRunBeforeTestRunHooks, options);
            if (options.oneofs) object.message = "commandRunBeforeTestRunHooks";
          }
          if (message.commandInitializeTestCase != null && message.hasOwnProperty("commandInitializeTestCase")) {
            object.commandInitializeTestCase = $root.io.cucumber.messages.CommandInitializeTestCase.toObject(message.commandInitializeTestCase, options);
            if (options.oneofs) object.message = "commandInitializeTestCase";
          }
          if (message.commandRunBeforeTestCaseHook != null && message.hasOwnProperty("commandRunBeforeTestCaseHook")) {
            object.commandRunBeforeTestCaseHook = $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.toObject(message.commandRunBeforeTestCaseHook, options);
            if (options.oneofs) object.message = "commandRunBeforeTestCaseHook";
          }
          if (message.commandRunTestStep != null && message.hasOwnProperty("commandRunTestStep")) {
            object.commandRunTestStep = $root.io.cucumber.messages.CommandRunTestStep.toObject(message.commandRunTestStep, options);
            if (options.oneofs) object.message = "commandRunTestStep";
          }
          if (message.commandRunAfterTestCaseHook != null && message.hasOwnProperty("commandRunAfterTestCaseHook")) {
            object.commandRunAfterTestCaseHook = $root.io.cucumber.messages.CommandRunAfterTestCaseHook.toObject(message.commandRunAfterTestCaseHook, options);
            if (options.oneofs) object.message = "commandRunAfterTestCaseHook";
          }
          if (message.commandRunAfterTestRunHooks != null && message.hasOwnProperty("commandRunAfterTestRunHooks")) {
            object.commandRunAfterTestRunHooks = $root.io.cucumber.messages.CommandRunAfterTestRunHooks.toObject(message.commandRunAfterTestRunHooks, options);
            if (options.oneofs) object.message = "commandRunAfterTestRunHooks";
          }
          if (message.commandGenerateSnippet != null && message.hasOwnProperty("commandGenerateSnippet")) {
            object.commandGenerateSnippet = $root.io.cucumber.messages.CommandGenerateSnippet.toObject(message.commandGenerateSnippet, options);
            if (options.oneofs) object.message = "commandGenerateSnippet";
          }
          if (message.commandError != null && message.hasOwnProperty("commandError")) {
            object.commandError = message.commandError;
            if (options.oneofs) object.message = "commandError";
          }
          if (message.testCase != null && message.hasOwnProperty("testCase")) {
            object.testCase = $root.io.cucumber.messages.TestCase.toObject(message.testCase, options);
            if (options.oneofs) object.message = "testCase";
          }
          if (message.stepDefinition != null && message.hasOwnProperty("stepDefinition")) {
            object.stepDefinition = $root.io.cucumber.messages.StepDefinition.toObject(message.stepDefinition, options);
            if (options.oneofs) object.message = "stepDefinition";
          }
          if (message.hook != null && message.hasOwnProperty("hook")) {
            object.hook = $root.io.cucumber.messages.Hook.toObject(message.hook, options);
            if (options.oneofs) object.message = "hook";
          }
          return object;
        };
        Envelope.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Envelope;
      }();
      messages.Location = function () {
        function Location(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        Location.prototype.line = 0;
        Location.prototype.column = 0;
        Location.create = function create(properties) {
          return new Location(properties);
        };
        Location.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.line != null && message.hasOwnProperty("line")) writer.uint32(8).uint32(message.line);
          if (message.column != null && message.hasOwnProperty("column")) writer.uint32(16).uint32(message.column);
          return writer;
        };
        Location.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Location.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.Location();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.line = reader.uint32();
                break;
              case 2:
                message.column = reader.uint32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Location.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Location.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.line != null && message.hasOwnProperty("line")) if (!$util.isInteger(message.line)) return "line: integer expected";
          if (message.column != null && message.hasOwnProperty("column")) if (!$util.isInteger(message.column)) return "column: integer expected";
          return null;
        };
        Location.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.Location) return object;
          var message = new $root.io.cucumber.messages.Location();
          if (object.line != null) message.line = object.line >>> 0;
          if (object.column != null) message.column = object.column >>> 0;
          return message;
        };
        Location.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.line = 0;
            object.column = 0;
          }
          if (message.line != null && message.hasOwnProperty("line")) object.line = message.line;
          if (message.column != null && message.hasOwnProperty("column")) object.column = message.column;
          return object;
        };
        Location.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Location;
      }();
      messages.SourceReference = function () {
        function SourceReference(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        SourceReference.prototype.uri = "";
        SourceReference.prototype.location = null;
        SourceReference.create = function create(properties) {
          return new SourceReference(properties);
        };
        SourceReference.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.uri != null && message.hasOwnProperty("uri")) writer.uint32(10).string(message.uri);
          if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(18).fork()).ldelim();
          return writer;
        };
        SourceReference.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        SourceReference.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.SourceReference();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.uri = reader.string();
                break;
              case 2:
                message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        SourceReference.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        SourceReference.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.uri != null && message.hasOwnProperty("uri")) if (!$util.isString(message.uri)) return "uri: string expected";
          if (message.location != null && message.hasOwnProperty("location")) {
            var error = $root.io.cucumber.messages.Location.verify(message.location);
            if (error) return "location." + error;
          }
          return null;
        };
        SourceReference.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.SourceReference) return object;
          var message = new $root.io.cucumber.messages.SourceReference();
          if (object.uri != null) message.uri = String(object.uri);
          if (object.location != null) {
            if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.SourceReference.location: object expected");
            message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
          }
          return message;
        };
        SourceReference.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.uri = "";
            object.location = null;
          }
          if (message.uri != null && message.hasOwnProperty("uri")) object.uri = message.uri;
          if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
          return object;
        };
        SourceReference.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return SourceReference;
      }();
      messages.Media = function () {
        function Media(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        Media.prototype.encoding = 0;
        Media.prototype.contentType = "";
        Media.create = function create(properties) {
          return new Media(properties);
        };
        Media.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.encoding != null && message.hasOwnProperty("encoding")) writer.uint32(8).int32(message.encoding);
          if (message.contentType != null && message.hasOwnProperty("contentType")) writer.uint32(18).string(message.contentType);
          return writer;
        };
        Media.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Media.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.Media();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.encoding = reader.int32();
                break;
              case 2:
                message.contentType = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Media.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Media.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.encoding != null && message.hasOwnProperty("encoding")) switch (message.encoding) {
            default:
              return "encoding: enum value expected";
            case 0:
            case 1:
              break;
          }
          if (message.contentType != null && message.hasOwnProperty("contentType")) if (!$util.isString(message.contentType)) return "contentType: string expected";
          return null;
        };
        Media.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.Media) return object;
          var message = new $root.io.cucumber.messages.Media();
          switch (object.encoding) {
            case "BASE64":
            case 0:
              message.encoding = 0;
              break;
            case "UTF8":
            case 1:
              message.encoding = 1;
              break;
          }
          if (object.contentType != null) message.contentType = String(object.contentType);
          return message;
        };
        Media.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.encoding = options.enums === String ? "BASE64" : 0;
            object.contentType = "";
          }
          if (message.encoding != null && message.hasOwnProperty("encoding")) object.encoding = options.enums === String ? $root.io.cucumber.messages.Media.Encoding[message.encoding] : message.encoding;
          if (message.contentType != null && message.hasOwnProperty("contentType")) object.contentType = message.contentType;
          return object;
        };
        Media.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        Media.Encoding = function () {
          var valuesById = {},
            values = Object.create(valuesById);
          values[valuesById[0] = "BASE64"] = 0;
          values[valuesById[1] = "UTF8"] = 1;
          return values;
        }();
        return Media;
      }();
      messages.Source = function () {
        function Source(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        Source.prototype.uri = "";
        Source.prototype.data = "";
        Source.prototype.media = null;
        Source.create = function create(properties) {
          return new Source(properties);
        };
        Source.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.uri != null && message.hasOwnProperty("uri")) writer.uint32(10).string(message.uri);
          if (message.data != null && message.hasOwnProperty("data")) writer.uint32(18).string(message.data);
          if (message.media != null && message.hasOwnProperty("media")) $root.io.cucumber.messages.Media.encode(message.media, writer.uint32(26).fork()).ldelim();
          return writer;
        };
        Source.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Source.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.Source();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.uri = reader.string();
                break;
              case 2:
                message.data = reader.string();
                break;
              case 3:
                message.media = $root.io.cucumber.messages.Media.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Source.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Source.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.uri != null && message.hasOwnProperty("uri")) if (!$util.isString(message.uri)) return "uri: string expected";
          if (message.data != null && message.hasOwnProperty("data")) if (!$util.isString(message.data)) return "data: string expected";
          if (message.media != null && message.hasOwnProperty("media")) {
            var error = $root.io.cucumber.messages.Media.verify(message.media);
            if (error) return "media." + error;
          }
          return null;
        };
        Source.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.Source) return object;
          var message = new $root.io.cucumber.messages.Source();
          if (object.uri != null) message.uri = String(object.uri);
          if (object.data != null) message.data = String(object.data);
          if (object.media != null) {
            if (typeof object.media !== "object") throw TypeError(".io.cucumber.messages.Source.media: object expected");
            message.media = $root.io.cucumber.messages.Media.fromObject(object.media);
          }
          return message;
        };
        Source.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.uri = "";
            object.data = "";
            object.media = null;
          }
          if (message.uri != null && message.hasOwnProperty("uri")) object.uri = message.uri;
          if (message.data != null && message.hasOwnProperty("data")) object.data = message.data;
          if (message.media != null && message.hasOwnProperty("media")) object.media = $root.io.cucumber.messages.Media.toObject(message.media, options);
          return object;
        };
        Source.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Source;
      }();
      messages.GherkinDocument = function () {
        function GherkinDocument(properties) {
          this.comments = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        GherkinDocument.prototype.uri = "";
        GherkinDocument.prototype.feature = null;
        GherkinDocument.prototype.comments = $util.emptyArray;
        GherkinDocument.create = function create(properties) {
          return new GherkinDocument(properties);
        };
        GherkinDocument.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.uri != null && message.hasOwnProperty("uri")) writer.uint32(10).string(message.uri);
          if (message.feature != null && message.hasOwnProperty("feature")) $root.io.cucumber.messages.GherkinDocument.Feature.encode(message.feature, writer.uint32(18).fork()).ldelim();
          if (message.comments != null && message.comments.length) for (var i = 0; i < message.comments.length; ++i) $root.io.cucumber.messages.GherkinDocument.Comment.encode(message.comments[i], writer.uint32(26).fork()).ldelim();
          return writer;
        };
        GherkinDocument.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        GherkinDocument.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.GherkinDocument();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.uri = reader.string();
                break;
              case 2:
                message.feature = $root.io.cucumber.messages.GherkinDocument.Feature.decode(reader, reader.uint32());
                break;
              case 3:
                if (!(message.comments && message.comments.length)) message.comments = [];
                message.comments.push($root.io.cucumber.messages.GherkinDocument.Comment.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        GherkinDocument.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        GherkinDocument.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.uri != null && message.hasOwnProperty("uri")) if (!$util.isString(message.uri)) return "uri: string expected";
          if (message.feature != null && message.hasOwnProperty("feature")) {
            var error = $root.io.cucumber.messages.GherkinDocument.Feature.verify(message.feature);
            if (error) return "feature." + error;
          }
          if (message.comments != null && message.hasOwnProperty("comments")) {
            if (!Array.isArray(message.comments)) return "comments: array expected";
            for (var i = 0; i < message.comments.length; ++i) {
              var error = $root.io.cucumber.messages.GherkinDocument.Comment.verify(message.comments[i]);
              if (error) return "comments." + error;
            }
          }
          return null;
        };
        GherkinDocument.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.GherkinDocument) return object;
          var message = new $root.io.cucumber.messages.GherkinDocument();
          if (object.uri != null) message.uri = String(object.uri);
          if (object.feature != null) {
            if (typeof object.feature !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.feature: object expected");
            message.feature = $root.io.cucumber.messages.GherkinDocument.Feature.fromObject(object.feature);
          }
          if (object.comments) {
            if (!Array.isArray(object.comments)) throw TypeError(".io.cucumber.messages.GherkinDocument.comments: array expected");
            message.comments = [];
            for (var i = 0; i < object.comments.length; ++i) {
              if (typeof object.comments[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.comments: object expected");
              message.comments[i] = $root.io.cucumber.messages.GherkinDocument.Comment.fromObject(object.comments[i]);
            }
          }
          return message;
        };
        GherkinDocument.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) object.comments = [];
          if (options.defaults) {
            object.uri = "";
            object.feature = null;
          }
          if (message.uri != null && message.hasOwnProperty("uri")) object.uri = message.uri;
          if (message.feature != null && message.hasOwnProperty("feature")) object.feature = $root.io.cucumber.messages.GherkinDocument.Feature.toObject(message.feature, options);
          if (message.comments && message.comments.length) {
            object.comments = [];
            for (var j = 0; j < message.comments.length; ++j) object.comments[j] = $root.io.cucumber.messages.GherkinDocument.Comment.toObject(message.comments[j], options);
          }
          return object;
        };
        GherkinDocument.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        GherkinDocument.Comment = function () {
          function Comment(properties) {
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
          }
          Comment.prototype.location = null;
          Comment.prototype.text = "";
          Comment.create = function create(properties) {
            return new Comment(properties);
          };
          Comment.encode = function encode(message, writer) {
            if (!writer) writer = $Writer.create();
            if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
            if (message.text != null && message.hasOwnProperty("text")) writer.uint32(18).string(message.text);
            return writer;
          };
          Comment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Comment.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length,
              message = new $root.io.cucumber.messages.GherkinDocument.Comment();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                  break;
                case 2:
                  message.text = reader.string();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Comment.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader)) reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Comment.verify = function verify(message) {
            if (typeof message !== "object" || message === null) return "object expected";
            if (message.location != null && message.hasOwnProperty("location")) {
              var error = $root.io.cucumber.messages.Location.verify(message.location);
              if (error) return "location." + error;
            }
            if (message.text != null && message.hasOwnProperty("text")) if (!$util.isString(message.text)) return "text: string expected";
            return null;
          };
          Comment.fromObject = function fromObject(object) {
            if (object instanceof $root.io.cucumber.messages.GherkinDocument.Comment) return object;
            var message = new $root.io.cucumber.messages.GherkinDocument.Comment();
            if (object.location != null) {
              if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Comment.location: object expected");
              message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
            }
            if (object.text != null) message.text = String(object.text);
            return message;
          };
          Comment.toObject = function toObject(message, options) {
            if (!options) options = {};
            var object = {};
            if (options.defaults) {
              object.location = null;
              object.text = "";
            }
            if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
            if (message.text != null && message.hasOwnProperty("text")) object.text = message.text;
            return object;
          };
          Comment.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          return Comment;
        }();
        GherkinDocument.Feature = function () {
          function Feature(properties) {
            this.tags = [];
            this.children = [];
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
          }
          Feature.prototype.location = null;
          Feature.prototype.tags = $util.emptyArray;
          Feature.prototype.language = "";
          Feature.prototype.keyword = "";
          Feature.prototype.name = "";
          Feature.prototype.description = "";
          Feature.prototype.children = $util.emptyArray;
          Feature.create = function create(properties) {
            return new Feature(properties);
          };
          Feature.encode = function encode(message, writer) {
            if (!writer) writer = $Writer.create();
            if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
            if (message.tags != null && message.tags.length) for (var i = 0; i < message.tags.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.Tag.encode(message.tags[i], writer.uint32(18).fork()).ldelim();
            if (message.language != null && message.hasOwnProperty("language")) writer.uint32(26).string(message.language);
            if (message.keyword != null && message.hasOwnProperty("keyword")) writer.uint32(34).string(message.keyword);
            if (message.name != null && message.hasOwnProperty("name")) writer.uint32(42).string(message.name);
            if (message.description != null && message.hasOwnProperty("description")) writer.uint32(50).string(message.description);
            if (message.children != null && message.children.length) for (var i = 0; i < message.children.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.encode(message.children[i], writer.uint32(58).fork()).ldelim();
            return writer;
          };
          Feature.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Feature.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length,
              message = new $root.io.cucumber.messages.GherkinDocument.Feature();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                  break;
                case 2:
                  if (!(message.tags && message.tags.length)) message.tags = [];
                  message.tags.push($root.io.cucumber.messages.GherkinDocument.Feature.Tag.decode(reader, reader.uint32()));
                  break;
                case 3:
                  message.language = reader.string();
                  break;
                case 4:
                  message.keyword = reader.string();
                  break;
                case 5:
                  message.name = reader.string();
                  break;
                case 6:
                  message.description = reader.string();
                  break;
                case 7:
                  if (!(message.children && message.children.length)) message.children = [];
                  message.children.push($root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Feature.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader)) reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Feature.verify = function verify(message) {
            if (typeof message !== "object" || message === null) return "object expected";
            if (message.location != null && message.hasOwnProperty("location")) {
              var error = $root.io.cucumber.messages.Location.verify(message.location);
              if (error) return "location." + error;
            }
            if (message.tags != null && message.hasOwnProperty("tags")) {
              if (!Array.isArray(message.tags)) return "tags: array expected";
              for (var i = 0; i < message.tags.length; ++i) {
                var error = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.verify(message.tags[i]);
                if (error) return "tags." + error;
              }
            }
            if (message.language != null && message.hasOwnProperty("language")) if (!$util.isString(message.language)) return "language: string expected";
            if (message.keyword != null && message.hasOwnProperty("keyword")) if (!$util.isString(message.keyword)) return "keyword: string expected";
            if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
            if (message.description != null && message.hasOwnProperty("description")) if (!$util.isString(message.description)) return "description: string expected";
            if (message.children != null && message.hasOwnProperty("children")) {
              if (!Array.isArray(message.children)) return "children: array expected";
              for (var i = 0; i < message.children.length; ++i) {
                var error = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.verify(message.children[i]);
                if (error) return "children." + error;
              }
            }
            return null;
          };
          Feature.fromObject = function fromObject(object) {
            if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature) return object;
            var message = new $root.io.cucumber.messages.GherkinDocument.Feature();
            if (object.location != null) {
              if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.location: object expected");
              message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
            }
            if (object.tags) {
              if (!Array.isArray(object.tags)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.tags: array expected");
              message.tags = [];
              for (var i = 0; i < object.tags.length; ++i) {
                if (typeof object.tags[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.tags: object expected");
                message.tags[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.fromObject(object.tags[i]);
              }
            }
            if (object.language != null) message.language = String(object.language);
            if (object.keyword != null) message.keyword = String(object.keyword);
            if (object.name != null) message.name = String(object.name);
            if (object.description != null) message.description = String(object.description);
            if (object.children) {
              if (!Array.isArray(object.children)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.children: array expected");
              message.children = [];
              for (var i = 0; i < object.children.length; ++i) {
                if (typeof object.children[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.children: object expected");
                message.children[i] = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.fromObject(object.children[i]);
              }
            }
            return message;
          };
          Feature.toObject = function toObject(message, options) {
            if (!options) options = {};
            var object = {};
            if (options.arrays || options.defaults) {
              object.tags = [];
              object.children = [];
            }
            if (options.defaults) {
              object.location = null;
              object.language = "";
              object.keyword = "";
              object.name = "";
              object.description = "";
            }
            if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
            if (message.tags && message.tags.length) {
              object.tags = [];
              for (var j = 0; j < message.tags.length; ++j) object.tags[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.toObject(message.tags[j], options);
            }
            if (message.language != null && message.hasOwnProperty("language")) object.language = message.language;
            if (message.keyword != null && message.hasOwnProperty("keyword")) object.keyword = message.keyword;
            if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
            if (message.description != null && message.hasOwnProperty("description")) object.description = message.description;
            if (message.children && message.children.length) {
              object.children = [];
              for (var j = 0; j < message.children.length; ++j) object.children[j] = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.toObject(message.children[j], options);
            }
            return object;
          };
          Feature.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          Feature.Tag = function () {
            function Tag(properties) {
              if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
            }
            Tag.prototype.location = null;
            Tag.prototype.name = "";
            Tag.prototype.id = "";
            Tag.create = function create(properties) {
              return new Tag(properties);
            };
            Tag.encode = function encode(message, writer) {
              if (!writer) writer = $Writer.create();
              if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
              if (message.name != null && message.hasOwnProperty("name")) writer.uint32(18).string(message.name);
              if (message.id != null && message.hasOwnProperty("id")) writer.uint32(26).string(message.id);
              return writer;
            };
            Tag.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Tag.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
              var end = length === undefined ? reader.len : reader.pos + length,
                message = new $root.io.cucumber.messages.GherkinDocument.Feature.Tag();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                    break;
                  case 2:
                    message.name = reader.string();
                    break;
                  case 3:
                    message.id = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Tag.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader)) reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Tag.verify = function verify(message) {
              if (typeof message !== "object" || message === null) return "object expected";
              if (message.location != null && message.hasOwnProperty("location")) {
                var error = $root.io.cucumber.messages.Location.verify(message.location);
                if (error) return "location." + error;
              }
              if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
              if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
              return null;
            };
            Tag.fromObject = function fromObject(object) {
              if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Tag) return object;
              var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Tag();
              if (object.location != null) {
                if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Tag.location: object expected");
                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
              }
              if (object.name != null) message.name = String(object.name);
              if (object.id != null) message.id = String(object.id);
              return message;
            };
            Tag.toObject = function toObject(message, options) {
              if (!options) options = {};
              var object = {};
              if (options.defaults) {
                object.location = null;
                object.name = "";
                object.id = "";
              }
              if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
              if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
              if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
              return object;
            };
            Tag.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Tag;
          }();
          Feature.FeatureChild = function () {
            function FeatureChild(properties) {
              if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
            }
            FeatureChild.prototype.rule = null;
            FeatureChild.prototype.background = null;
            FeatureChild.prototype.scenario = null;
            var $oneOfFields;
            Object.defineProperty(FeatureChild.prototype, "value", {
              get: $util.oneOfGetter($oneOfFields = ["rule", "background", "scenario"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            FeatureChild.create = function create(properties) {
              return new FeatureChild(properties);
            };
            FeatureChild.encode = function encode(message, writer) {
              if (!writer) writer = $Writer.create();
              if (message.rule != null && message.hasOwnProperty("rule")) $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.encode(message.rule, writer.uint32(10).fork()).ldelim();
              if (message.background != null && message.hasOwnProperty("background")) $root.io.cucumber.messages.GherkinDocument.Feature.Background.encode(message.background, writer.uint32(18).fork()).ldelim();
              if (message.scenario != null && message.hasOwnProperty("scenario")) $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.encode(message.scenario, writer.uint32(26).fork()).ldelim();
              return writer;
            };
            FeatureChild.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FeatureChild.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
              var end = length === undefined ? reader.len : reader.pos + length,
                message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.rule = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.decode(reader, reader.uint32());
                    break;
                  case 2:
                    message.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.decode(reader, reader.uint32());
                    break;
                  case 3:
                    message.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FeatureChild.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader)) reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FeatureChild.verify = function verify(message) {
              if (typeof message !== "object" || message === null) return "object expected";
              var properties = {};
              if (message.rule != null && message.hasOwnProperty("rule")) {
                properties.value = 1;
                {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.verify(message.rule);
                  if (error) return "rule." + error;
                }
              }
              if (message.background != null && message.hasOwnProperty("background")) {
                if (properties.value === 1) return "value: multiple values";
                properties.value = 1;
                {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.Background.verify(message.background);
                  if (error) return "background." + error;
                }
              }
              if (message.scenario != null && message.hasOwnProperty("scenario")) {
                if (properties.value === 1) return "value: multiple values";
                properties.value = 1;
                {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.verify(message.scenario);
                  if (error) return "scenario." + error;
                }
              }
              return null;
            };
            FeatureChild.fromObject = function fromObject(object) {
              if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild) return object;
              var message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild();
              if (object.rule != null) {
                if (typeof object.rule !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.rule: object expected");
                message.rule = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.fromObject(object.rule);
              }
              if (object.background != null) {
                if (typeof object.background !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.background: object expected");
                message.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.fromObject(object.background);
              }
              if (object.scenario != null) {
                if (typeof object.scenario !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.scenario: object expected");
                message.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.fromObject(object.scenario);
              }
              return message;
            };
            FeatureChild.toObject = function toObject(message, options) {
              if (!options) options = {};
              var object = {};
              if (message.rule != null && message.hasOwnProperty("rule")) {
                object.rule = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.toObject(message.rule, options);
                if (options.oneofs) object.value = "rule";
              }
              if (message.background != null && message.hasOwnProperty("background")) {
                object.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.toObject(message.background, options);
                if (options.oneofs) object.value = "background";
              }
              if (message.scenario != null && message.hasOwnProperty("scenario")) {
                object.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.toObject(message.scenario, options);
                if (options.oneofs) object.value = "scenario";
              }
              return object;
            };
            FeatureChild.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FeatureChild.Rule = function () {
              function Rule(properties) {
                this.children = [];
                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
              }
              Rule.prototype.location = null;
              Rule.prototype.keyword = "";
              Rule.prototype.name = "";
              Rule.prototype.description = "";
              Rule.prototype.children = $util.emptyArray;
              Rule.create = function create(properties) {
                return new Rule(properties);
              };
              Rule.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
                if (message.keyword != null && message.hasOwnProperty("keyword")) writer.uint32(18).string(message.keyword);
                if (message.name != null && message.hasOwnProperty("name")) writer.uint32(26).string(message.name);
                if (message.description != null && message.hasOwnProperty("description")) writer.uint32(34).string(message.description);
                if (message.children != null && message.children.length) for (var i = 0; i < message.children.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.encode(message.children[i], writer.uint32(42).fork()).ldelim();
                return writer;
              };
              Rule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Rule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length,
                  message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                      break;
                    case 2:
                      message.keyword = reader.string();
                      break;
                    case 3:
                      message.name = reader.string();
                      break;
                    case 4:
                      message.description = reader.string();
                      break;
                    case 5:
                      if (!(message.children && message.children.length)) message.children = [];
                      message.children.push($root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.decode(reader, reader.uint32()));
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Rule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Rule.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                  var error = $root.io.cucumber.messages.Location.verify(message.location);
                  if (error) return "location." + error;
                }
                if (message.keyword != null && message.hasOwnProperty("keyword")) if (!$util.isString(message.keyword)) return "keyword: string expected";
                if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
                if (message.description != null && message.hasOwnProperty("description")) if (!$util.isString(message.description)) return "description: string expected";
                if (message.children != null && message.hasOwnProperty("children")) {
                  if (!Array.isArray(message.children)) return "children: array expected";
                  for (var i = 0; i < message.children.length; ++i) {
                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.verify(message.children[i]);
                    if (error) return "children." + error;
                  }
                }
                return null;
              };
              Rule.fromObject = function fromObject(object) {
                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule) return object;
                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule();
                if (object.location != null) {
                  if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.location: object expected");
                  message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
                }
                if (object.keyword != null) message.keyword = String(object.keyword);
                if (object.name != null) message.name = String(object.name);
                if (object.description != null) message.description = String(object.description);
                if (object.children) {
                  if (!Array.isArray(object.children)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.children: array expected");
                  message.children = [];
                  for (var i = 0; i < object.children.length; ++i) {
                    if (typeof object.children[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.children: object expected");
                    message.children[i] = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.fromObject(object.children[i]);
                  }
                }
                return message;
              };
              Rule.toObject = function toObject(message, options) {
                if (!options) options = {};
                var object = {};
                if (options.arrays || options.defaults) object.children = [];
                if (options.defaults) {
                  object.location = null;
                  object.keyword = "";
                  object.name = "";
                  object.description = "";
                }
                if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
                if (message.keyword != null && message.hasOwnProperty("keyword")) object.keyword = message.keyword;
                if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
                if (message.description != null && message.hasOwnProperty("description")) object.description = message.description;
                if (message.children && message.children.length) {
                  object.children = [];
                  for (var j = 0; j < message.children.length; ++j) object.children[j] = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.toObject(message.children[j], options);
                }
                return object;
              };
              Rule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Rule;
            }();
            FeatureChild.RuleChild = function () {
              function RuleChild(properties) {
                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
              }
              RuleChild.prototype.background = null;
              RuleChild.prototype.scenario = null;
              var $oneOfFields;
              Object.defineProperty(RuleChild.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["background", "scenario"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              RuleChild.create = function create(properties) {
                return new RuleChild(properties);
              };
              RuleChild.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.background != null && message.hasOwnProperty("background")) $root.io.cucumber.messages.GherkinDocument.Feature.Background.encode(message.background, writer.uint32(10).fork()).ldelim();
                if (message.scenario != null && message.hasOwnProperty("scenario")) $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.encode(message.scenario, writer.uint32(18).fork()).ldelim();
                return writer;
              };
              RuleChild.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              RuleChild.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length,
                  message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.decode(reader, reader.uint32());
                      break;
                    case 2:
                      message.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.decode(reader, reader.uint32());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              RuleChild.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              RuleChild.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                var properties = {};
                if (message.background != null && message.hasOwnProperty("background")) {
                  properties.value = 1;
                  {
                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Background.verify(message.background);
                    if (error) return "background." + error;
                  }
                }
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                  if (properties.value === 1) return "value: multiple values";
                  properties.value = 1;
                  {
                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.verify(message.scenario);
                    if (error) return "scenario." + error;
                  }
                }
                return null;
              };
              RuleChild.fromObject = function fromObject(object) {
                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild) return object;
                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild();
                if (object.background != null) {
                  if (typeof object.background !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.background: object expected");
                  message.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.fromObject(object.background);
                }
                if (object.scenario != null) {
                  if (typeof object.scenario !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.scenario: object expected");
                  message.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.fromObject(object.scenario);
                }
                return message;
              };
              RuleChild.toObject = function toObject(message, options) {
                if (!options) options = {};
                var object = {};
                if (message.background != null && message.hasOwnProperty("background")) {
                  object.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.toObject(message.background, options);
                  if (options.oneofs) object.value = "background";
                }
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                  object.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.toObject(message.scenario, options);
                  if (options.oneofs) object.value = "scenario";
                }
                return object;
              };
              RuleChild.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return RuleChild;
            }();
            return FeatureChild;
          }();
          Feature.Background = function () {
            function Background(properties) {
              this.steps = [];
              if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
            }
            Background.prototype.location = null;
            Background.prototype.keyword = "";
            Background.prototype.name = "";
            Background.prototype.description = "";
            Background.prototype.steps = $util.emptyArray;
            Background.create = function create(properties) {
              return new Background(properties);
            };
            Background.encode = function encode(message, writer) {
              if (!writer) writer = $Writer.create();
              if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
              if (message.keyword != null && message.hasOwnProperty("keyword")) writer.uint32(18).string(message.keyword);
              if (message.name != null && message.hasOwnProperty("name")) writer.uint32(26).string(message.name);
              if (message.description != null && message.hasOwnProperty("description")) writer.uint32(34).string(message.description);
              if (message.steps != null && message.steps.length) for (var i = 0; i < message.steps.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.Step.encode(message.steps[i], writer.uint32(42).fork()).ldelim();
              return writer;
            };
            Background.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Background.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
              var end = length === undefined ? reader.len : reader.pos + length,
                message = new $root.io.cucumber.messages.GherkinDocument.Feature.Background();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                    break;
                  case 2:
                    message.keyword = reader.string();
                    break;
                  case 3:
                    message.name = reader.string();
                    break;
                  case 4:
                    message.description = reader.string();
                    break;
                  case 5:
                    if (!(message.steps && message.steps.length)) message.steps = [];
                    message.steps.push($root.io.cucumber.messages.GherkinDocument.Feature.Step.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Background.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader)) reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Background.verify = function verify(message) {
              if (typeof message !== "object" || message === null) return "object expected";
              if (message.location != null && message.hasOwnProperty("location")) {
                var error = $root.io.cucumber.messages.Location.verify(message.location);
                if (error) return "location." + error;
              }
              if (message.keyword != null && message.hasOwnProperty("keyword")) if (!$util.isString(message.keyword)) return "keyword: string expected";
              if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
              if (message.description != null && message.hasOwnProperty("description")) if (!$util.isString(message.description)) return "description: string expected";
              if (message.steps != null && message.hasOwnProperty("steps")) {
                if (!Array.isArray(message.steps)) return "steps: array expected";
                for (var i = 0; i < message.steps.length; ++i) {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.Step.verify(message.steps[i]);
                  if (error) return "steps." + error;
                }
              }
              return null;
            };
            Background.fromObject = function fromObject(object) {
              if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Background) return object;
              var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Background();
              if (object.location != null) {
                if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Background.location: object expected");
                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
              }
              if (object.keyword != null) message.keyword = String(object.keyword);
              if (object.name != null) message.name = String(object.name);
              if (object.description != null) message.description = String(object.description);
              if (object.steps) {
                if (!Array.isArray(object.steps)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Background.steps: array expected");
                message.steps = [];
                for (var i = 0; i < object.steps.length; ++i) {
                  if (typeof object.steps[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Background.steps: object expected");
                  message.steps[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Step.fromObject(object.steps[i]);
                }
              }
              return message;
            };
            Background.toObject = function toObject(message, options) {
              if (!options) options = {};
              var object = {};
              if (options.arrays || options.defaults) object.steps = [];
              if (options.defaults) {
                object.location = null;
                object.keyword = "";
                object.name = "";
                object.description = "";
              }
              if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
              if (message.keyword != null && message.hasOwnProperty("keyword")) object.keyword = message.keyword;
              if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
              if (message.description != null && message.hasOwnProperty("description")) object.description = message.description;
              if (message.steps && message.steps.length) {
                object.steps = [];
                for (var j = 0; j < message.steps.length; ++j) object.steps[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Step.toObject(message.steps[j], options);
              }
              return object;
            };
            Background.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Background;
          }();
          Feature.Scenario = function () {
            function Scenario(properties) {
              this.tags = [];
              this.steps = [];
              this.examples = [];
              if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
            }
            Scenario.prototype.location = null;
            Scenario.prototype.tags = $util.emptyArray;
            Scenario.prototype.keyword = "";
            Scenario.prototype.name = "";
            Scenario.prototype.description = "";
            Scenario.prototype.steps = $util.emptyArray;
            Scenario.prototype.examples = $util.emptyArray;
            Scenario.prototype.id = "";
            Scenario.create = function create(properties) {
              return new Scenario(properties);
            };
            Scenario.encode = function encode(message, writer) {
              if (!writer) writer = $Writer.create();
              if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
              if (message.tags != null && message.tags.length) for (var i = 0; i < message.tags.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.Tag.encode(message.tags[i], writer.uint32(18).fork()).ldelim();
              if (message.keyword != null && message.hasOwnProperty("keyword")) writer.uint32(26).string(message.keyword);
              if (message.name != null && message.hasOwnProperty("name")) writer.uint32(34).string(message.name);
              if (message.description != null && message.hasOwnProperty("description")) writer.uint32(42).string(message.description);
              if (message.steps != null && message.steps.length) for (var i = 0; i < message.steps.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.Step.encode(message.steps[i], writer.uint32(50).fork()).ldelim();
              if (message.examples != null && message.examples.length) for (var i = 0; i < message.examples.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.encode(message.examples[i], writer.uint32(58).fork()).ldelim();
              if (message.id != null && message.hasOwnProperty("id")) writer.uint32(66).string(message.id);
              return writer;
            };
            Scenario.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Scenario.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
              var end = length === undefined ? reader.len : reader.pos + length,
                message = new $root.io.cucumber.messages.GherkinDocument.Feature.Scenario();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                    break;
                  case 2:
                    if (!(message.tags && message.tags.length)) message.tags = [];
                    message.tags.push($root.io.cucumber.messages.GherkinDocument.Feature.Tag.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.keyword = reader.string();
                    break;
                  case 4:
                    message.name = reader.string();
                    break;
                  case 5:
                    message.description = reader.string();
                    break;
                  case 6:
                    if (!(message.steps && message.steps.length)) message.steps = [];
                    message.steps.push($root.io.cucumber.messages.GherkinDocument.Feature.Step.decode(reader, reader.uint32()));
                    break;
                  case 7:
                    if (!(message.examples && message.examples.length)) message.examples = [];
                    message.examples.push($root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.decode(reader, reader.uint32()));
                    break;
                  case 8:
                    message.id = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Scenario.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader)) reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Scenario.verify = function verify(message) {
              if (typeof message !== "object" || message === null) return "object expected";
              if (message.location != null && message.hasOwnProperty("location")) {
                var error = $root.io.cucumber.messages.Location.verify(message.location);
                if (error) return "location." + error;
              }
              if (message.tags != null && message.hasOwnProperty("tags")) {
                if (!Array.isArray(message.tags)) return "tags: array expected";
                for (var i = 0; i < message.tags.length; ++i) {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.verify(message.tags[i]);
                  if (error) return "tags." + error;
                }
              }
              if (message.keyword != null && message.hasOwnProperty("keyword")) if (!$util.isString(message.keyword)) return "keyword: string expected";
              if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
              if (message.description != null && message.hasOwnProperty("description")) if (!$util.isString(message.description)) return "description: string expected";
              if (message.steps != null && message.hasOwnProperty("steps")) {
                if (!Array.isArray(message.steps)) return "steps: array expected";
                for (var i = 0; i < message.steps.length; ++i) {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.Step.verify(message.steps[i]);
                  if (error) return "steps." + error;
                }
              }
              if (message.examples != null && message.hasOwnProperty("examples")) {
                if (!Array.isArray(message.examples)) return "examples: array expected";
                for (var i = 0; i < message.examples.length; ++i) {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.verify(message.examples[i]);
                  if (error) return "examples." + error;
                }
              }
              if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
              return null;
            };
            Scenario.fromObject = function fromObject(object) {
              if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Scenario) return object;
              var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Scenario();
              if (object.location != null) {
                if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.location: object expected");
                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
              }
              if (object.tags) {
                if (!Array.isArray(object.tags)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.tags: array expected");
                message.tags = [];
                for (var i = 0; i < object.tags.length; ++i) {
                  if (typeof object.tags[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.tags: object expected");
                  message.tags[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.fromObject(object.tags[i]);
                }
              }
              if (object.keyword != null) message.keyword = String(object.keyword);
              if (object.name != null) message.name = String(object.name);
              if (object.description != null) message.description = String(object.description);
              if (object.steps) {
                if (!Array.isArray(object.steps)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.steps: array expected");
                message.steps = [];
                for (var i = 0; i < object.steps.length; ++i) {
                  if (typeof object.steps[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.steps: object expected");
                  message.steps[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Step.fromObject(object.steps[i]);
                }
              }
              if (object.examples) {
                if (!Array.isArray(object.examples)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.examples: array expected");
                message.examples = [];
                for (var i = 0; i < object.examples.length; ++i) {
                  if (typeof object.examples[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.examples: object expected");
                  message.examples[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.fromObject(object.examples[i]);
                }
              }
              if (object.id != null) message.id = String(object.id);
              return message;
            };
            Scenario.toObject = function toObject(message, options) {
              if (!options) options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.tags = [];
                object.steps = [];
                object.examples = [];
              }
              if (options.defaults) {
                object.location = null;
                object.keyword = "";
                object.name = "";
                object.description = "";
                object.id = "";
              }
              if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
              if (message.tags && message.tags.length) {
                object.tags = [];
                for (var j = 0; j < message.tags.length; ++j) object.tags[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.toObject(message.tags[j], options);
              }
              if (message.keyword != null && message.hasOwnProperty("keyword")) object.keyword = message.keyword;
              if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
              if (message.description != null && message.hasOwnProperty("description")) object.description = message.description;
              if (message.steps && message.steps.length) {
                object.steps = [];
                for (var j = 0; j < message.steps.length; ++j) object.steps[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Step.toObject(message.steps[j], options);
              }
              if (message.examples && message.examples.length) {
                object.examples = [];
                for (var j = 0; j < message.examples.length; ++j) object.examples[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.toObject(message.examples[j], options);
              }
              if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
              return object;
            };
            Scenario.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Scenario.Examples = function () {
              function Examples(properties) {
                this.tags = [];
                this.tableBody = [];
                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
              }
              Examples.prototype.location = null;
              Examples.prototype.tags = $util.emptyArray;
              Examples.prototype.keyword = "";
              Examples.prototype.name = "";
              Examples.prototype.description = "";
              Examples.prototype.tableHeader = null;
              Examples.prototype.tableBody = $util.emptyArray;
              Examples.create = function create(properties) {
                return new Examples(properties);
              };
              Examples.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
                if (message.tags != null && message.tags.length) for (var i = 0; i < message.tags.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.Tag.encode(message.tags[i], writer.uint32(18).fork()).ldelim();
                if (message.keyword != null && message.hasOwnProperty("keyword")) writer.uint32(26).string(message.keyword);
                if (message.name != null && message.hasOwnProperty("name")) writer.uint32(34).string(message.name);
                if (message.description != null && message.hasOwnProperty("description")) writer.uint32(42).string(message.description);
                if (message.tableHeader != null && message.hasOwnProperty("tableHeader")) $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.encode(message.tableHeader, writer.uint32(50).fork()).ldelim();
                if (message.tableBody != null && message.tableBody.length) for (var i = 0; i < message.tableBody.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.encode(message.tableBody[i], writer.uint32(58).fork()).ldelim();
                return writer;
              };
              Examples.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Examples.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length,
                  message = new $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                      break;
                    case 2:
                      if (!(message.tags && message.tags.length)) message.tags = [];
                      message.tags.push($root.io.cucumber.messages.GherkinDocument.Feature.Tag.decode(reader, reader.uint32()));
                      break;
                    case 3:
                      message.keyword = reader.string();
                      break;
                    case 4:
                      message.name = reader.string();
                      break;
                    case 5:
                      message.description = reader.string();
                      break;
                    case 6:
                      message.tableHeader = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.decode(reader, reader.uint32());
                      break;
                    case 7:
                      if (!(message.tableBody && message.tableBody.length)) message.tableBody = [];
                      message.tableBody.push($root.io.cucumber.messages.GherkinDocument.Feature.TableRow.decode(reader, reader.uint32()));
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Examples.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Examples.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                  var error = $root.io.cucumber.messages.Location.verify(message.location);
                  if (error) return "location." + error;
                }
                if (message.tags != null && message.hasOwnProperty("tags")) {
                  if (!Array.isArray(message.tags)) return "tags: array expected";
                  for (var i = 0; i < message.tags.length; ++i) {
                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.verify(message.tags[i]);
                    if (error) return "tags." + error;
                  }
                }
                if (message.keyword != null && message.hasOwnProperty("keyword")) if (!$util.isString(message.keyword)) return "keyword: string expected";
                if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
                if (message.description != null && message.hasOwnProperty("description")) if (!$util.isString(message.description)) return "description: string expected";
                if (message.tableHeader != null && message.hasOwnProperty("tableHeader")) {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.verify(message.tableHeader);
                  if (error) return "tableHeader." + error;
                }
                if (message.tableBody != null && message.hasOwnProperty("tableBody")) {
                  if (!Array.isArray(message.tableBody)) return "tableBody: array expected";
                  for (var i = 0; i < message.tableBody.length; ++i) {
                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.verify(message.tableBody[i]);
                    if (error) return "tableBody." + error;
                  }
                }
                return null;
              };
              Examples.fromObject = function fromObject(object) {
                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples) return object;
                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples();
                if (object.location != null) {
                  if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.location: object expected");
                  message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
                }
                if (object.tags) {
                  if (!Array.isArray(object.tags)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tags: array expected");
                  message.tags = [];
                  for (var i = 0; i < object.tags.length; ++i) {
                    if (typeof object.tags[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tags: object expected");
                    message.tags[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.fromObject(object.tags[i]);
                  }
                }
                if (object.keyword != null) message.keyword = String(object.keyword);
                if (object.name != null) message.name = String(object.name);
                if (object.description != null) message.description = String(object.description);
                if (object.tableHeader != null) {
                  if (typeof object.tableHeader !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tableHeader: object expected");
                  message.tableHeader = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.fromObject(object.tableHeader);
                }
                if (object.tableBody) {
                  if (!Array.isArray(object.tableBody)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tableBody: array expected");
                  message.tableBody = [];
                  for (var i = 0; i < object.tableBody.length; ++i) {
                    if (typeof object.tableBody[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tableBody: object expected");
                    message.tableBody[i] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.fromObject(object.tableBody[i]);
                  }
                }
                return message;
              };
              Examples.toObject = function toObject(message, options) {
                if (!options) options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.tags = [];
                  object.tableBody = [];
                }
                if (options.defaults) {
                  object.location = null;
                  object.keyword = "";
                  object.name = "";
                  object.description = "";
                  object.tableHeader = null;
                }
                if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
                if (message.tags && message.tags.length) {
                  object.tags = [];
                  for (var j = 0; j < message.tags.length; ++j) object.tags[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.toObject(message.tags[j], options);
                }
                if (message.keyword != null && message.hasOwnProperty("keyword")) object.keyword = message.keyword;
                if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
                if (message.description != null && message.hasOwnProperty("description")) object.description = message.description;
                if (message.tableHeader != null && message.hasOwnProperty("tableHeader")) object.tableHeader = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.toObject(message.tableHeader, options);
                if (message.tableBody && message.tableBody.length) {
                  object.tableBody = [];
                  for (var j = 0; j < message.tableBody.length; ++j) object.tableBody[j] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.toObject(message.tableBody[j], options);
                }
                return object;
              };
              Examples.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Examples;
            }();
            return Scenario;
          }();
          Feature.TableRow = function () {
            function TableRow(properties) {
              this.cells = [];
              if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
            }
            TableRow.prototype.location = null;
            TableRow.prototype.cells = $util.emptyArray;
            TableRow.prototype.id = "";
            TableRow.create = function create(properties) {
              return new TableRow(properties);
            };
            TableRow.encode = function encode(message, writer) {
              if (!writer) writer = $Writer.create();
              if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
              if (message.cells != null && message.cells.length) for (var i = 0; i < message.cells.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.encode(message.cells[i], writer.uint32(18).fork()).ldelim();
              if (message.id != null && message.hasOwnProperty("id")) writer.uint32(26).string(message.id);
              return writer;
            };
            TableRow.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            TableRow.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
              var end = length === undefined ? reader.len : reader.pos + length,
                message = new $root.io.cucumber.messages.GherkinDocument.Feature.TableRow();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                    break;
                  case 2:
                    if (!(message.cells && message.cells.length)) message.cells = [];
                    message.cells.push($root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.id = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            TableRow.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader)) reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            TableRow.verify = function verify(message) {
              if (typeof message !== "object" || message === null) return "object expected";
              if (message.location != null && message.hasOwnProperty("location")) {
                var error = $root.io.cucumber.messages.Location.verify(message.location);
                if (error) return "location." + error;
              }
              if (message.cells != null && message.hasOwnProperty("cells")) {
                if (!Array.isArray(message.cells)) return "cells: array expected";
                for (var i = 0; i < message.cells.length; ++i) {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.verify(message.cells[i]);
                  if (error) return "cells." + error;
                }
              }
              if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
              return null;
            };
            TableRow.fromObject = function fromObject(object) {
              if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.TableRow) return object;
              var message = new $root.io.cucumber.messages.GherkinDocument.Feature.TableRow();
              if (object.location != null) {
                if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.TableRow.location: object expected");
                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
              }
              if (object.cells) {
                if (!Array.isArray(object.cells)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.TableRow.cells: array expected");
                message.cells = [];
                for (var i = 0; i < object.cells.length; ++i) {
                  if (typeof object.cells[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.TableRow.cells: object expected");
                  message.cells[i] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.fromObject(object.cells[i]);
                }
              }
              if (object.id != null) message.id = String(object.id);
              return message;
            };
            TableRow.toObject = function toObject(message, options) {
              if (!options) options = {};
              var object = {};
              if (options.arrays || options.defaults) object.cells = [];
              if (options.defaults) {
                object.location = null;
                object.id = "";
              }
              if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
              if (message.cells && message.cells.length) {
                object.cells = [];
                for (var j = 0; j < message.cells.length; ++j) object.cells[j] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.toObject(message.cells[j], options);
              }
              if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
              return object;
            };
            TableRow.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            TableRow.TableCell = function () {
              function TableCell(properties) {
                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
              }
              TableCell.prototype.location = null;
              TableCell.prototype.value = "";
              TableCell.create = function create(properties) {
                return new TableCell(properties);
              };
              TableCell.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
                if (message.value != null && message.hasOwnProperty("value")) writer.uint32(18).string(message.value);
                return writer;
              };
              TableCell.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              TableCell.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length,
                  message = new $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                      break;
                    case 2:
                      message.value = reader.string();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              TableCell.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              TableCell.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                  var error = $root.io.cucumber.messages.Location.verify(message.location);
                  if (error) return "location." + error;
                }
                if (message.value != null && message.hasOwnProperty("value")) if (!$util.isString(message.value)) return "value: string expected";
                return null;
              };
              TableCell.fromObject = function fromObject(object) {
                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell) return object;
                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell();
                if (object.location != null) {
                  if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.location: object expected");
                  message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
                }
                if (object.value != null) message.value = String(object.value);
                return message;
              };
              TableCell.toObject = function toObject(message, options) {
                if (!options) options = {};
                var object = {};
                if (options.defaults) {
                  object.location = null;
                  object.value = "";
                }
                if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
                if (message.value != null && message.hasOwnProperty("value")) object.value = message.value;
                return object;
              };
              TableCell.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return TableCell;
            }();
            return TableRow;
          }();
          Feature.Step = function () {
            function Step(properties) {
              if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
            }
            Step.prototype.location = null;
            Step.prototype.keyword = "";
            Step.prototype.text = "";
            Step.prototype.docString = null;
            Step.prototype.dataTable = null;
            Step.prototype.id = "";
            var $oneOfFields;
            Object.defineProperty(Step.prototype, "argument", {
              get: $util.oneOfGetter($oneOfFields = ["docString", "dataTable"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            Step.create = function create(properties) {
              return new Step(properties);
            };
            Step.encode = function encode(message, writer) {
              if (!writer) writer = $Writer.create();
              if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
              if (message.keyword != null && message.hasOwnProperty("keyword")) writer.uint32(18).string(message.keyword);
              if (message.text != null && message.hasOwnProperty("text")) writer.uint32(26).string(message.text);
              if (message.docString != null && message.hasOwnProperty("docString")) $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.encode(message.docString, writer.uint32(42).fork()).ldelim();
              if (message.dataTable != null && message.hasOwnProperty("dataTable")) $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.encode(message.dataTable, writer.uint32(50).fork()).ldelim();
              if (message.id != null && message.hasOwnProperty("id")) writer.uint32(58).string(message.id);
              return writer;
            };
            Step.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Step.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
              var end = length === undefined ? reader.len : reader.pos + length,
                message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                    break;
                  case 2:
                    message.keyword = reader.string();
                    break;
                  case 3:
                    message.text = reader.string();
                    break;
                  case 5:
                    message.docString = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.decode(reader, reader.uint32());
                    break;
                  case 6:
                    message.dataTable = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.decode(reader, reader.uint32());
                    break;
                  case 7:
                    message.id = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Step.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader)) reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Step.verify = function verify(message) {
              if (typeof message !== "object" || message === null) return "object expected";
              var properties = {};
              if (message.location != null && message.hasOwnProperty("location")) {
                var error = $root.io.cucumber.messages.Location.verify(message.location);
                if (error) return "location." + error;
              }
              if (message.keyword != null && message.hasOwnProperty("keyword")) if (!$util.isString(message.keyword)) return "keyword: string expected";
              if (message.text != null && message.hasOwnProperty("text")) if (!$util.isString(message.text)) return "text: string expected";
              if (message.docString != null && message.hasOwnProperty("docString")) {
                properties.argument = 1;
                {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.verify(message.docString);
                  if (error) return "docString." + error;
                }
              }
              if (message.dataTable != null && message.hasOwnProperty("dataTable")) {
                if (properties.argument === 1) return "argument: multiple values";
                properties.argument = 1;
                {
                  var error = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.verify(message.dataTable);
                  if (error) return "dataTable." + error;
                }
              }
              if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
              return null;
            };
            Step.fromObject = function fromObject(object) {
              if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Step) return object;
              var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step();
              if (object.location != null) {
                if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Step.location: object expected");
                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
              }
              if (object.keyword != null) message.keyword = String(object.keyword);
              if (object.text != null) message.text = String(object.text);
              if (object.docString != null) {
                if (typeof object.docString !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Step.docString: object expected");
                message.docString = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.fromObject(object.docString);
              }
              if (object.dataTable != null) {
                if (typeof object.dataTable !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Step.dataTable: object expected");
                message.dataTable = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.fromObject(object.dataTable);
              }
              if (object.id != null) message.id = String(object.id);
              return message;
            };
            Step.toObject = function toObject(message, options) {
              if (!options) options = {};
              var object = {};
              if (options.defaults) {
                object.location = null;
                object.keyword = "";
                object.text = "";
                object.id = "";
              }
              if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
              if (message.keyword != null && message.hasOwnProperty("keyword")) object.keyword = message.keyword;
              if (message.text != null && message.hasOwnProperty("text")) object.text = message.text;
              if (message.docString != null && message.hasOwnProperty("docString")) {
                object.docString = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.toObject(message.docString, options);
                if (options.oneofs) object.argument = "docString";
              }
              if (message.dataTable != null && message.hasOwnProperty("dataTable")) {
                object.dataTable = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.toObject(message.dataTable, options);
                if (options.oneofs) object.argument = "dataTable";
              }
              if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
              return object;
            };
            Step.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Step.DataTable = function () {
              function DataTable(properties) {
                this.rows = [];
                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
              }
              DataTable.prototype.location = null;
              DataTable.prototype.rows = $util.emptyArray;
              DataTable.create = function create(properties) {
                return new DataTable(properties);
              };
              DataTable.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
                if (message.rows != null && message.rows.length) for (var i = 0; i < message.rows.length; ++i) $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.encode(message.rows[i], writer.uint32(18).fork()).ldelim();
                return writer;
              };
              DataTable.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              DataTable.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length,
                  message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                      break;
                    case 2:
                      if (!(message.rows && message.rows.length)) message.rows = [];
                      message.rows.push($root.io.cucumber.messages.GherkinDocument.Feature.TableRow.decode(reader, reader.uint32()));
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              DataTable.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              DataTable.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                  var error = $root.io.cucumber.messages.Location.verify(message.location);
                  if (error) return "location." + error;
                }
                if (message.rows != null && message.hasOwnProperty("rows")) {
                  if (!Array.isArray(message.rows)) return "rows: array expected";
                  for (var i = 0; i < message.rows.length; ++i) {
                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.verify(message.rows[i]);
                    if (error) return "rows." + error;
                  }
                }
                return null;
              };
              DataTable.fromObject = function fromObject(object) {
                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable) return object;
                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable();
                if (object.location != null) {
                  if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.location: object expected");
                  message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
                }
                if (object.rows) {
                  if (!Array.isArray(object.rows)) throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.rows: array expected");
                  message.rows = [];
                  for (var i = 0; i < object.rows.length; ++i) {
                    if (typeof object.rows[i] !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.rows: object expected");
                    message.rows[i] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.fromObject(object.rows[i]);
                  }
                }
                return message;
              };
              DataTable.toObject = function toObject(message, options) {
                if (!options) options = {};
                var object = {};
                if (options.arrays || options.defaults) object.rows = [];
                if (options.defaults) object.location = null;
                if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
                if (message.rows && message.rows.length) {
                  object.rows = [];
                  for (var j = 0; j < message.rows.length; ++j) object.rows[j] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.toObject(message.rows[j], options);
                }
                return object;
              };
              DataTable.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return DataTable;
            }();
            Step.DocString = function () {
              function DocString(properties) {
                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
              }
              DocString.prototype.location = null;
              DocString.prototype.contentType = "";
              DocString.prototype.content = "";
              DocString.prototype.delimiter = "";
              DocString.create = function create(properties) {
                return new DocString(properties);
              };
              DocString.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.location != null && message.hasOwnProperty("location")) $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(10).fork()).ldelim();
                if (message.contentType != null && message.hasOwnProperty("contentType")) writer.uint32(18).string(message.contentType);
                if (message.content != null && message.hasOwnProperty("content")) writer.uint32(26).string(message.content);
                if (message.delimiter != null && message.hasOwnProperty("delimiter")) writer.uint32(34).string(message.delimiter);
                return writer;
              };
              DocString.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              DocString.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length,
                  message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());
                      break;
                    case 2:
                      message.contentType = reader.string();
                      break;
                    case 3:
                      message.content = reader.string();
                      break;
                    case 4:
                      message.delimiter = reader.string();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              DocString.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              DocString.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                  var error = $root.io.cucumber.messages.Location.verify(message.location);
                  if (error) return "location." + error;
                }
                if (message.contentType != null && message.hasOwnProperty("contentType")) if (!$util.isString(message.contentType)) return "contentType: string expected";
                if (message.content != null && message.hasOwnProperty("content")) if (!$util.isString(message.content)) return "content: string expected";
                if (message.delimiter != null && message.hasOwnProperty("delimiter")) if (!$util.isString(message.delimiter)) return "delimiter: string expected";
                return null;
              };
              DocString.fromObject = function fromObject(object) {
                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString) return object;
                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString();
                if (object.location != null) {
                  if (typeof object.location !== "object") throw TypeError(".io.cucumber.messages.GherkinDocument.Feature.Step.DocString.location: object expected");
                  message.location = $root.io.cucumber.messages.Location.fromObject(object.location);
                }
                if (object.contentType != null) message.contentType = String(object.contentType);
                if (object.content != null) message.content = String(object.content);
                if (object.delimiter != null) message.delimiter = String(object.delimiter);
                return message;
              };
              DocString.toObject = function toObject(message, options) {
                if (!options) options = {};
                var object = {};
                if (options.defaults) {
                  object.location = null;
                  object.contentType = "";
                  object.content = "";
                  object.delimiter = "";
                }
                if (message.location != null && message.hasOwnProperty("location")) object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);
                if (message.contentType != null && message.hasOwnProperty("contentType")) object.contentType = message.contentType;
                if (message.content != null && message.hasOwnProperty("content")) object.content = message.content;
                if (message.delimiter != null && message.hasOwnProperty("delimiter")) object.delimiter = message.delimiter;
                return object;
              };
              DocString.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return DocString;
            }();
            return Step;
          }();
          return Feature;
        }();
        return GherkinDocument;
      }();
      messages.Attachment = function () {
        function Attachment(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        Attachment.prototype.source = null;
        Attachment.prototype.data = "";
        Attachment.prototype.media = null;
        Attachment.prototype.testStepId = "";
        Attachment.prototype.testCaseStartedId = "";
        Attachment.create = function create(properties) {
          return new Attachment(properties);
        };
        Attachment.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.source != null && message.hasOwnProperty("source")) $root.io.cucumber.messages.SourceReference.encode(message.source, writer.uint32(10).fork()).ldelim();
          if (message.data != null && message.hasOwnProperty("data")) writer.uint32(18).string(message.data);
          if (message.media != null && message.hasOwnProperty("media")) $root.io.cucumber.messages.Media.encode(message.media, writer.uint32(26).fork()).ldelim();
          if (message.testStepId != null && message.hasOwnProperty("testStepId")) writer.uint32(34).string(message.testStepId);
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) writer.uint32(42).string(message.testCaseStartedId);
          return writer;
        };
        Attachment.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Attachment.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.Attachment();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.source = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());
                break;
              case 2:
                message.data = reader.string();
                break;
              case 3:
                message.media = $root.io.cucumber.messages.Media.decode(reader, reader.uint32());
                break;
              case 4:
                message.testStepId = reader.string();
                break;
              case 5:
                message.testCaseStartedId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Attachment.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Attachment.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.source != null && message.hasOwnProperty("source")) {
            var error = $root.io.cucumber.messages.SourceReference.verify(message.source);
            if (error) return "source." + error;
          }
          if (message.data != null && message.hasOwnProperty("data")) if (!$util.isString(message.data)) return "data: string expected";
          if (message.media != null && message.hasOwnProperty("media")) {
            var error = $root.io.cucumber.messages.Media.verify(message.media);
            if (error) return "media." + error;
          }
          if (message.testStepId != null && message.hasOwnProperty("testStepId")) if (!$util.isString(message.testStepId)) return "testStepId: string expected";
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) if (!$util.isString(message.testCaseStartedId)) return "testCaseStartedId: string expected";
          return null;
        };
        Attachment.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.Attachment) return object;
          var message = new $root.io.cucumber.messages.Attachment();
          if (object.source != null) {
            if (typeof object.source !== "object") throw TypeError(".io.cucumber.messages.Attachment.source: object expected");
            message.source = $root.io.cucumber.messages.SourceReference.fromObject(object.source);
          }
          if (object.data != null) message.data = String(object.data);
          if (object.media != null) {
            if (typeof object.media !== "object") throw TypeError(".io.cucumber.messages.Attachment.media: object expected");
            message.media = $root.io.cucumber.messages.Media.fromObject(object.media);
          }
          if (object.testStepId != null) message.testStepId = String(object.testStepId);
          if (object.testCaseStartedId != null) message.testCaseStartedId = String(object.testCaseStartedId);
          return message;
        };
        Attachment.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.source = null;
            object.data = "";
            object.media = null;
            object.testStepId = "";
            object.testCaseStartedId = "";
          }
          if (message.source != null && message.hasOwnProperty("source")) object.source = $root.io.cucumber.messages.SourceReference.toObject(message.source, options);
          if (message.data != null && message.hasOwnProperty("data")) object.data = message.data;
          if (message.media != null && message.hasOwnProperty("media")) object.media = $root.io.cucumber.messages.Media.toObject(message.media, options);
          if (message.testStepId != null && message.hasOwnProperty("testStepId")) object.testStepId = message.testStepId;
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) object.testCaseStartedId = message.testCaseStartedId;
          return object;
        };
        Attachment.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Attachment;
      }();
      messages.Pickle = function () {
        function Pickle(properties) {
          this.steps = [];
          this.tags = [];
          this.astNodeIds = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        Pickle.prototype.id = "";
        Pickle.prototype.uri = "";
        Pickle.prototype.name = "";
        Pickle.prototype.language = "";
        Pickle.prototype.steps = $util.emptyArray;
        Pickle.prototype.tags = $util.emptyArray;
        Pickle.prototype.astNodeIds = $util.emptyArray;
        Pickle.create = function create(properties) {
          return new Pickle(properties);
        };
        Pickle.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.id != null && message.hasOwnProperty("id")) writer.uint32(10).string(message.id);
          if (message.uri != null && message.hasOwnProperty("uri")) writer.uint32(18).string(message.uri);
          if (message.name != null && message.hasOwnProperty("name")) writer.uint32(26).string(message.name);
          if (message.language != null && message.hasOwnProperty("language")) writer.uint32(34).string(message.language);
          if (message.steps != null && message.steps.length) for (var i = 0; i < message.steps.length; ++i) $root.io.cucumber.messages.Pickle.PickleStep.encode(message.steps[i], writer.uint32(42).fork()).ldelim();
          if (message.tags != null && message.tags.length) for (var i = 0; i < message.tags.length; ++i) $root.io.cucumber.messages.Pickle.PickleTag.encode(message.tags[i], writer.uint32(50).fork()).ldelim();
          if (message.astNodeIds != null && message.astNodeIds.length) for (var i = 0; i < message.astNodeIds.length; ++i) writer.uint32(58).string(message.astNodeIds[i]);
          return writer;
        };
        Pickle.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Pickle.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.Pickle();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.id = reader.string();
                break;
              case 2:
                message.uri = reader.string();
                break;
              case 3:
                message.name = reader.string();
                break;
              case 4:
                message.language = reader.string();
                break;
              case 5:
                if (!(message.steps && message.steps.length)) message.steps = [];
                message.steps.push($root.io.cucumber.messages.Pickle.PickleStep.decode(reader, reader.uint32()));
                break;
              case 6:
                if (!(message.tags && message.tags.length)) message.tags = [];
                message.tags.push($root.io.cucumber.messages.Pickle.PickleTag.decode(reader, reader.uint32()));
                break;
              case 7:
                if (!(message.astNodeIds && message.astNodeIds.length)) message.astNodeIds = [];
                message.astNodeIds.push(reader.string());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Pickle.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Pickle.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
          if (message.uri != null && message.hasOwnProperty("uri")) if (!$util.isString(message.uri)) return "uri: string expected";
          if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
          if (message.language != null && message.hasOwnProperty("language")) if (!$util.isString(message.language)) return "language: string expected";
          if (message.steps != null && message.hasOwnProperty("steps")) {
            if (!Array.isArray(message.steps)) return "steps: array expected";
            for (var i = 0; i < message.steps.length; ++i) {
              var error = $root.io.cucumber.messages.Pickle.PickleStep.verify(message.steps[i]);
              if (error) return "steps." + error;
            }
          }
          if (message.tags != null && message.hasOwnProperty("tags")) {
            if (!Array.isArray(message.tags)) return "tags: array expected";
            for (var i = 0; i < message.tags.length; ++i) {
              var error = $root.io.cucumber.messages.Pickle.PickleTag.verify(message.tags[i]);
              if (error) return "tags." + error;
            }
          }
          if (message.astNodeIds != null && message.hasOwnProperty("astNodeIds")) {
            if (!Array.isArray(message.astNodeIds)) return "astNodeIds: array expected";
            for (var i = 0; i < message.astNodeIds.length; ++i) if (!$util.isString(message.astNodeIds[i])) return "astNodeIds: string[] expected";
          }
          return null;
        };
        Pickle.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.Pickle) return object;
          var message = new $root.io.cucumber.messages.Pickle();
          if (object.id != null) message.id = String(object.id);
          if (object.uri != null) message.uri = String(object.uri);
          if (object.name != null) message.name = String(object.name);
          if (object.language != null) message.language = String(object.language);
          if (object.steps) {
            if (!Array.isArray(object.steps)) throw TypeError(".io.cucumber.messages.Pickle.steps: array expected");
            message.steps = [];
            for (var i = 0; i < object.steps.length; ++i) {
              if (typeof object.steps[i] !== "object") throw TypeError(".io.cucumber.messages.Pickle.steps: object expected");
              message.steps[i] = $root.io.cucumber.messages.Pickle.PickleStep.fromObject(object.steps[i]);
            }
          }
          if (object.tags) {
            if (!Array.isArray(object.tags)) throw TypeError(".io.cucumber.messages.Pickle.tags: array expected");
            message.tags = [];
            for (var i = 0; i < object.tags.length; ++i) {
              if (typeof object.tags[i] !== "object") throw TypeError(".io.cucumber.messages.Pickle.tags: object expected");
              message.tags[i] = $root.io.cucumber.messages.Pickle.PickleTag.fromObject(object.tags[i]);
            }
          }
          if (object.astNodeIds) {
            if (!Array.isArray(object.astNodeIds)) throw TypeError(".io.cucumber.messages.Pickle.astNodeIds: array expected");
            message.astNodeIds = [];
            for (var i = 0; i < object.astNodeIds.length; ++i) message.astNodeIds[i] = String(object.astNodeIds[i]);
          }
          return message;
        };
        Pickle.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) {
            object.steps = [];
            object.tags = [];
            object.astNodeIds = [];
          }
          if (options.defaults) {
            object.id = "";
            object.uri = "";
            object.name = "";
            object.language = "";
          }
          if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
          if (message.uri != null && message.hasOwnProperty("uri")) object.uri = message.uri;
          if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
          if (message.language != null && message.hasOwnProperty("language")) object.language = message.language;
          if (message.steps && message.steps.length) {
            object.steps = [];
            for (var j = 0; j < message.steps.length; ++j) object.steps[j] = $root.io.cucumber.messages.Pickle.PickleStep.toObject(message.steps[j], options);
          }
          if (message.tags && message.tags.length) {
            object.tags = [];
            for (var j = 0; j < message.tags.length; ++j) object.tags[j] = $root.io.cucumber.messages.Pickle.PickleTag.toObject(message.tags[j], options);
          }
          if (message.astNodeIds && message.astNodeIds.length) {
            object.astNodeIds = [];
            for (var j = 0; j < message.astNodeIds.length; ++j) object.astNodeIds[j] = message.astNodeIds[j];
          }
          return object;
        };
        Pickle.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        Pickle.PickleTag = function () {
          function PickleTag(properties) {
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
          }
          PickleTag.prototype.name = "";
          PickleTag.prototype.astNodeId = "";
          PickleTag.create = function create(properties) {
            return new PickleTag(properties);
          };
          PickleTag.encode = function encode(message, writer) {
            if (!writer) writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name")) writer.uint32(10).string(message.name);
            if (message.astNodeId != null && message.hasOwnProperty("astNodeId")) writer.uint32(18).string(message.astNodeId);
            return writer;
          };
          PickleTag.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          PickleTag.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length,
              message = new $root.io.cucumber.messages.Pickle.PickleTag();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.name = reader.string();
                  break;
                case 2:
                  message.astNodeId = reader.string();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          PickleTag.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader)) reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          PickleTag.verify = function verify(message) {
            if (typeof message !== "object" || message === null) return "object expected";
            if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
            if (message.astNodeId != null && message.hasOwnProperty("astNodeId")) if (!$util.isString(message.astNodeId)) return "astNodeId: string expected";
            return null;
          };
          PickleTag.fromObject = function fromObject(object) {
            if (object instanceof $root.io.cucumber.messages.Pickle.PickleTag) return object;
            var message = new $root.io.cucumber.messages.Pickle.PickleTag();
            if (object.name != null) message.name = String(object.name);
            if (object.astNodeId != null) message.astNodeId = String(object.astNodeId);
            return message;
          };
          PickleTag.toObject = function toObject(message, options) {
            if (!options) options = {};
            var object = {};
            if (options.defaults) {
              object.name = "";
              object.astNodeId = "";
            }
            if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
            if (message.astNodeId != null && message.hasOwnProperty("astNodeId")) object.astNodeId = message.astNodeId;
            return object;
          };
          PickleTag.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          return PickleTag;
        }();
        Pickle.PickleStep = function () {
          function PickleStep(properties) {
            this.astNodeIds = [];
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
          }
          PickleStep.prototype.text = "";
          PickleStep.prototype.argument = null;
          PickleStep.prototype.id = "";
          PickleStep.prototype.astNodeIds = $util.emptyArray;
          PickleStep.create = function create(properties) {
            return new PickleStep(properties);
          };
          PickleStep.encode = function encode(message, writer) {
            if (!writer) writer = $Writer.create();
            if (message.text != null && message.hasOwnProperty("text")) writer.uint32(10).string(message.text);
            if (message.argument != null && message.hasOwnProperty("argument")) $root.io.cucumber.messages.PickleStepArgument.encode(message.argument, writer.uint32(18).fork()).ldelim();
            if (message.id != null && message.hasOwnProperty("id")) writer.uint32(26).string(message.id);
            if (message.astNodeIds != null && message.astNodeIds.length) for (var i = 0; i < message.astNodeIds.length; ++i) writer.uint32(34).string(message.astNodeIds[i]);
            return writer;
          };
          PickleStep.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          PickleStep.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length,
              message = new $root.io.cucumber.messages.Pickle.PickleStep();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.text = reader.string();
                  break;
                case 2:
                  message.argument = $root.io.cucumber.messages.PickleStepArgument.decode(reader, reader.uint32());
                  break;
                case 3:
                  message.id = reader.string();
                  break;
                case 4:
                  if (!(message.astNodeIds && message.astNodeIds.length)) message.astNodeIds = [];
                  message.astNodeIds.push(reader.string());
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          PickleStep.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader)) reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          PickleStep.verify = function verify(message) {
            if (typeof message !== "object" || message === null) return "object expected";
            if (message.text != null && message.hasOwnProperty("text")) if (!$util.isString(message.text)) return "text: string expected";
            if (message.argument != null && message.hasOwnProperty("argument")) {
              var error = $root.io.cucumber.messages.PickleStepArgument.verify(message.argument);
              if (error) return "argument." + error;
            }
            if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
            if (message.astNodeIds != null && message.hasOwnProperty("astNodeIds")) {
              if (!Array.isArray(message.astNodeIds)) return "astNodeIds: array expected";
              for (var i = 0; i < message.astNodeIds.length; ++i) if (!$util.isString(message.astNodeIds[i])) return "astNodeIds: string[] expected";
            }
            return null;
          };
          PickleStep.fromObject = function fromObject(object) {
            if (object instanceof $root.io.cucumber.messages.Pickle.PickleStep) return object;
            var message = new $root.io.cucumber.messages.Pickle.PickleStep();
            if (object.text != null) message.text = String(object.text);
            if (object.argument != null) {
              if (typeof object.argument !== "object") throw TypeError(".io.cucumber.messages.Pickle.PickleStep.argument: object expected");
              message.argument = $root.io.cucumber.messages.PickleStepArgument.fromObject(object.argument);
            }
            if (object.id != null) message.id = String(object.id);
            if (object.astNodeIds) {
              if (!Array.isArray(object.astNodeIds)) throw TypeError(".io.cucumber.messages.Pickle.PickleStep.astNodeIds: array expected");
              message.astNodeIds = [];
              for (var i = 0; i < object.astNodeIds.length; ++i) message.astNodeIds[i] = String(object.astNodeIds[i]);
            }
            return message;
          };
          PickleStep.toObject = function toObject(message, options) {
            if (!options) options = {};
            var object = {};
            if (options.arrays || options.defaults) object.astNodeIds = [];
            if (options.defaults) {
              object.text = "";
              object.argument = null;
              object.id = "";
            }
            if (message.text != null && message.hasOwnProperty("text")) object.text = message.text;
            if (message.argument != null && message.hasOwnProperty("argument")) object.argument = $root.io.cucumber.messages.PickleStepArgument.toObject(message.argument, options);
            if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
            if (message.astNodeIds && message.astNodeIds.length) {
              object.astNodeIds = [];
              for (var j = 0; j < message.astNodeIds.length; ++j) object.astNodeIds[j] = message.astNodeIds[j];
            }
            return object;
          };
          PickleStep.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          return PickleStep;
        }();
        return Pickle;
      }();
      messages.PickleStepArgument = function () {
        function PickleStepArgument(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        PickleStepArgument.prototype.docString = null;
        PickleStepArgument.prototype.dataTable = null;
        var $oneOfFields;
        Object.defineProperty(PickleStepArgument.prototype, "message", {
          get: $util.oneOfGetter($oneOfFields = ["docString", "dataTable"]),
          set: $util.oneOfSetter($oneOfFields)
        });
        PickleStepArgument.create = function create(properties) {
          return new PickleStepArgument(properties);
        };
        PickleStepArgument.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.docString != null && message.hasOwnProperty("docString")) $root.io.cucumber.messages.PickleStepArgument.PickleDocString.encode(message.docString, writer.uint32(10).fork()).ldelim();
          if (message.dataTable != null && message.hasOwnProperty("dataTable")) $root.io.cucumber.messages.PickleStepArgument.PickleTable.encode(message.dataTable, writer.uint32(18).fork()).ldelim();
          return writer;
        };
        PickleStepArgument.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        PickleStepArgument.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.PickleStepArgument();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.docString = $root.io.cucumber.messages.PickleStepArgument.PickleDocString.decode(reader, reader.uint32());
                break;
              case 2:
                message.dataTable = $root.io.cucumber.messages.PickleStepArgument.PickleTable.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        PickleStepArgument.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        PickleStepArgument.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          var properties = {};
          if (message.docString != null && message.hasOwnProperty("docString")) {
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.PickleStepArgument.PickleDocString.verify(message.docString);
              if (error) return "docString." + error;
            }
          }
          if (message.dataTable != null && message.hasOwnProperty("dataTable")) {
            if (properties.message === 1) return "message: multiple values";
            properties.message = 1;
            {
              var error = $root.io.cucumber.messages.PickleStepArgument.PickleTable.verify(message.dataTable);
              if (error) return "dataTable." + error;
            }
          }
          return null;
        };
        PickleStepArgument.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.PickleStepArgument) return object;
          var message = new $root.io.cucumber.messages.PickleStepArgument();
          if (object.docString != null) {
            if (typeof object.docString !== "object") throw TypeError(".io.cucumber.messages.PickleStepArgument.docString: object expected");
            message.docString = $root.io.cucumber.messages.PickleStepArgument.PickleDocString.fromObject(object.docString);
          }
          if (object.dataTable != null) {
            if (typeof object.dataTable !== "object") throw TypeError(".io.cucumber.messages.PickleStepArgument.dataTable: object expected");
            message.dataTable = $root.io.cucumber.messages.PickleStepArgument.PickleTable.fromObject(object.dataTable);
          }
          return message;
        };
        PickleStepArgument.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (message.docString != null && message.hasOwnProperty("docString")) {
            object.docString = $root.io.cucumber.messages.PickleStepArgument.PickleDocString.toObject(message.docString, options);
            if (options.oneofs) object.message = "docString";
          }
          if (message.dataTable != null && message.hasOwnProperty("dataTable")) {
            object.dataTable = $root.io.cucumber.messages.PickleStepArgument.PickleTable.toObject(message.dataTable, options);
            if (options.oneofs) object.message = "dataTable";
          }
          return object;
        };
        PickleStepArgument.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        PickleStepArgument.PickleDocString = function () {
          function PickleDocString(properties) {
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
          }
          PickleDocString.prototype.contentType = "";
          PickleDocString.prototype.content = "";
          PickleDocString.create = function create(properties) {
            return new PickleDocString(properties);
          };
          PickleDocString.encode = function encode(message, writer) {
            if (!writer) writer = $Writer.create();
            if (message.contentType != null && message.hasOwnProperty("contentType")) writer.uint32(10).string(message.contentType);
            if (message.content != null && message.hasOwnProperty("content")) writer.uint32(18).string(message.content);
            return writer;
          };
          PickleDocString.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          PickleDocString.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length,
              message = new $root.io.cucumber.messages.PickleStepArgument.PickleDocString();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.contentType = reader.string();
                  break;
                case 2:
                  message.content = reader.string();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          PickleDocString.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader)) reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          PickleDocString.verify = function verify(message) {
            if (typeof message !== "object" || message === null) return "object expected";
            if (message.contentType != null && message.hasOwnProperty("contentType")) if (!$util.isString(message.contentType)) return "contentType: string expected";
            if (message.content != null && message.hasOwnProperty("content")) if (!$util.isString(message.content)) return "content: string expected";
            return null;
          };
          PickleDocString.fromObject = function fromObject(object) {
            if (object instanceof $root.io.cucumber.messages.PickleStepArgument.PickleDocString) return object;
            var message = new $root.io.cucumber.messages.PickleStepArgument.PickleDocString();
            if (object.contentType != null) message.contentType = String(object.contentType);
            if (object.content != null) message.content = String(object.content);
            return message;
          };
          PickleDocString.toObject = function toObject(message, options) {
            if (!options) options = {};
            var object = {};
            if (options.defaults) {
              object.contentType = "";
              object.content = "";
            }
            if (message.contentType != null && message.hasOwnProperty("contentType")) object.contentType = message.contentType;
            if (message.content != null && message.hasOwnProperty("content")) object.content = message.content;
            return object;
          };
          PickleDocString.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          return PickleDocString;
        }();
        PickleStepArgument.PickleTable = function () {
          function PickleTable(properties) {
            this.rows = [];
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
          }
          PickleTable.prototype.rows = $util.emptyArray;
          PickleTable.create = function create(properties) {
            return new PickleTable(properties);
          };
          PickleTable.encode = function encode(message, writer) {
            if (!writer) writer = $Writer.create();
            if (message.rows != null && message.rows.length) for (var i = 0; i < message.rows.length; ++i) $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.encode(message.rows[i], writer.uint32(10).fork()).ldelim();
            return writer;
          };
          PickleTable.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          PickleTable.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length,
              message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  if (!(message.rows && message.rows.length)) message.rows = [];
                  message.rows.push($root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          PickleTable.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader)) reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          PickleTable.verify = function verify(message) {
            if (typeof message !== "object" || message === null) return "object expected";
            if (message.rows != null && message.hasOwnProperty("rows")) {
              if (!Array.isArray(message.rows)) return "rows: array expected";
              for (var i = 0; i < message.rows.length; ++i) {
                var error = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.verify(message.rows[i]);
                if (error) return "rows." + error;
              }
            }
            return null;
          };
          PickleTable.fromObject = function fromObject(object) {
            if (object instanceof $root.io.cucumber.messages.PickleStepArgument.PickleTable) return object;
            var message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable();
            if (object.rows) {
              if (!Array.isArray(object.rows)) throw TypeError(".io.cucumber.messages.PickleStepArgument.PickleTable.rows: array expected");
              message.rows = [];
              for (var i = 0; i < object.rows.length; ++i) {
                if (typeof object.rows[i] !== "object") throw TypeError(".io.cucumber.messages.PickleStepArgument.PickleTable.rows: object expected");
                message.rows[i] = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.fromObject(object.rows[i]);
              }
            }
            return message;
          };
          PickleTable.toObject = function toObject(message, options) {
            if (!options) options = {};
            var object = {};
            if (options.arrays || options.defaults) object.rows = [];
            if (message.rows && message.rows.length) {
              object.rows = [];
              for (var j = 0; j < message.rows.length; ++j) object.rows[j] = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.toObject(message.rows[j], options);
            }
            return object;
          };
          PickleTable.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          PickleTable.PickleTableRow = function () {
            function PickleTableRow(properties) {
              this.cells = [];
              if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
            }
            PickleTableRow.prototype.cells = $util.emptyArray;
            PickleTableRow.create = function create(properties) {
              return new PickleTableRow(properties);
            };
            PickleTableRow.encode = function encode(message, writer) {
              if (!writer) writer = $Writer.create();
              if (message.cells != null && message.cells.length) for (var i = 0; i < message.cells.length; ++i) $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.encode(message.cells[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            PickleTableRow.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            PickleTableRow.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
              var end = length === undefined ? reader.len : reader.pos + length,
                message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.cells && message.cells.length)) message.cells = [];
                    message.cells.push($root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            PickleTableRow.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader)) reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            PickleTableRow.verify = function verify(message) {
              if (typeof message !== "object" || message === null) return "object expected";
              if (message.cells != null && message.hasOwnProperty("cells")) {
                if (!Array.isArray(message.cells)) return "cells: array expected";
                for (var i = 0; i < message.cells.length; ++i) {
                  var error = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.verify(message.cells[i]);
                  if (error) return "cells." + error;
                }
              }
              return null;
            };
            PickleTableRow.fromObject = function fromObject(object) {
              if (object instanceof $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow) return object;
              var message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow();
              if (object.cells) {
                if (!Array.isArray(object.cells)) throw TypeError(".io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.cells: array expected");
                message.cells = [];
                for (var i = 0; i < object.cells.length; ++i) {
                  if (typeof object.cells[i] !== "object") throw TypeError(".io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.cells: object expected");
                  message.cells[i] = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.fromObject(object.cells[i]);
                }
              }
              return message;
            };
            PickleTableRow.toObject = function toObject(message, options) {
              if (!options) options = {};
              var object = {};
              if (options.arrays || options.defaults) object.cells = [];
              if (message.cells && message.cells.length) {
                object.cells = [];
                for (var j = 0; j < message.cells.length; ++j) object.cells[j] = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.toObject(message.cells[j], options);
              }
              return object;
            };
            PickleTableRow.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            PickleTableRow.PickleTableCell = function () {
              function PickleTableCell(properties) {
                if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
              }
              PickleTableCell.prototype.value = "";
              PickleTableCell.create = function create(properties) {
                return new PickleTableCell(properties);
              };
              PickleTableCell.encode = function encode(message, writer) {
                if (!writer) writer = $Writer.create();
                if (message.value != null && message.hasOwnProperty("value")) writer.uint32(10).string(message.value);
                return writer;
              };
              PickleTableCell.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              PickleTableCell.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length,
                  message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.value = reader.string();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              PickleTableCell.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader)) reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              PickleTableCell.verify = function verify(message) {
                if (typeof message !== "object" || message === null) return "object expected";
                if (message.value != null && message.hasOwnProperty("value")) if (!$util.isString(message.value)) return "value: string expected";
                return null;
              };
              PickleTableCell.fromObject = function fromObject(object) {
                if (object instanceof $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell) return object;
                var message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell();
                if (object.value != null) message.value = String(object.value);
                return message;
              };
              PickleTableCell.toObject = function toObject(message, options) {
                if (!options) options = {};
                var object = {};
                if (options.defaults) object.value = "";
                if (message.value != null && message.hasOwnProperty("value")) object.value = message.value;
                return object;
              };
              PickleTableCell.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return PickleTableCell;
            }();
            return PickleTableRow;
          }();
          return PickleTable;
        }();
        return PickleStepArgument;
      }();
      messages.TestCase = function () {
        function TestCase(properties) {
          this.testSteps = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestCase.prototype.id = "";
        TestCase.prototype.pickleId = "";
        TestCase.prototype.testSteps = $util.emptyArray;
        TestCase.create = function create(properties) {
          return new TestCase(properties);
        };
        TestCase.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.id != null && message.hasOwnProperty("id")) writer.uint32(10).string(message.id);
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) writer.uint32(18).string(message.pickleId);
          if (message.testSteps != null && message.testSteps.length) for (var i = 0; i < message.testSteps.length; ++i) $root.io.cucumber.messages.TestCase.TestStep.encode(message.testSteps[i], writer.uint32(26).fork()).ldelim();
          return writer;
        };
        TestCase.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestCase.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestCase();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.id = reader.string();
                break;
              case 2:
                message.pickleId = reader.string();
                break;
              case 3:
                if (!(message.testSteps && message.testSteps.length)) message.testSteps = [];
                message.testSteps.push($root.io.cucumber.messages.TestCase.TestStep.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestCase.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestCase.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) if (!$util.isString(message.pickleId)) return "pickleId: string expected";
          if (message.testSteps != null && message.hasOwnProperty("testSteps")) {
            if (!Array.isArray(message.testSteps)) return "testSteps: array expected";
            for (var i = 0; i < message.testSteps.length; ++i) {
              var error = $root.io.cucumber.messages.TestCase.TestStep.verify(message.testSteps[i]);
              if (error) return "testSteps." + error;
            }
          }
          return null;
        };
        TestCase.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestCase) return object;
          var message = new $root.io.cucumber.messages.TestCase();
          if (object.id != null) message.id = String(object.id);
          if (object.pickleId != null) message.pickleId = String(object.pickleId);
          if (object.testSteps) {
            if (!Array.isArray(object.testSteps)) throw TypeError(".io.cucumber.messages.TestCase.testSteps: array expected");
            message.testSteps = [];
            for (var i = 0; i < object.testSteps.length; ++i) {
              if (typeof object.testSteps[i] !== "object") throw TypeError(".io.cucumber.messages.TestCase.testSteps: object expected");
              message.testSteps[i] = $root.io.cucumber.messages.TestCase.TestStep.fromObject(object.testSteps[i]);
            }
          }
          return message;
        };
        TestCase.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) object.testSteps = [];
          if (options.defaults) {
            object.id = "";
            object.pickleId = "";
          }
          if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) object.pickleId = message.pickleId;
          if (message.testSteps && message.testSteps.length) {
            object.testSteps = [];
            for (var j = 0; j < message.testSteps.length; ++j) object.testSteps[j] = $root.io.cucumber.messages.TestCase.TestStep.toObject(message.testSteps[j], options);
          }
          return object;
        };
        TestCase.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        TestCase.TestStep = function () {
          function TestStep(properties) {
            this.stepDefinitionIds = [];
            this.stepMatchArguments = [];
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
          }
          TestStep.prototype.id = "";
          TestStep.prototype.pickleStepId = "";
          TestStep.prototype.stepDefinitionIds = $util.emptyArray;
          TestStep.prototype.stepMatchArguments = $util.emptyArray;
          TestStep.prototype.hookId = "";
          TestStep.create = function create(properties) {
            return new TestStep(properties);
          };
          TestStep.encode = function encode(message, writer) {
            if (!writer) writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id")) writer.uint32(10).string(message.id);
            if (message.pickleStepId != null && message.hasOwnProperty("pickleStepId")) writer.uint32(18).string(message.pickleStepId);
            if (message.stepDefinitionIds != null && message.stepDefinitionIds.length) for (var i = 0; i < message.stepDefinitionIds.length; ++i) writer.uint32(26).string(message.stepDefinitionIds[i]);
            if (message.stepMatchArguments != null && message.stepMatchArguments.length) for (var i = 0; i < message.stepMatchArguments.length; ++i) $root.io.cucumber.messages.StepMatchArgument.encode(message.stepMatchArguments[i], writer.uint32(34).fork()).ldelim();
            if (message.hookId != null && message.hasOwnProperty("hookId")) writer.uint32(42).string(message.hookId);
            return writer;
          };
          TestStep.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          TestStep.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length,
              message = new $root.io.cucumber.messages.TestCase.TestStep();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.id = reader.string();
                  break;
                case 2:
                  message.pickleStepId = reader.string();
                  break;
                case 3:
                  if (!(message.stepDefinitionIds && message.stepDefinitionIds.length)) message.stepDefinitionIds = [];
                  message.stepDefinitionIds.push(reader.string());
                  break;
                case 4:
                  if (!(message.stepMatchArguments && message.stepMatchArguments.length)) message.stepMatchArguments = [];
                  message.stepMatchArguments.push($root.io.cucumber.messages.StepMatchArgument.decode(reader, reader.uint32()));
                  break;
                case 5:
                  message.hookId = reader.string();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          TestStep.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader)) reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          TestStep.verify = function verify(message) {
            if (typeof message !== "object" || message === null) return "object expected";
            if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
            if (message.pickleStepId != null && message.hasOwnProperty("pickleStepId")) if (!$util.isString(message.pickleStepId)) return "pickleStepId: string expected";
            if (message.stepDefinitionIds != null && message.hasOwnProperty("stepDefinitionIds")) {
              if (!Array.isArray(message.stepDefinitionIds)) return "stepDefinitionIds: array expected";
              for (var i = 0; i < message.stepDefinitionIds.length; ++i) if (!$util.isString(message.stepDefinitionIds[i])) return "stepDefinitionIds: string[] expected";
            }
            if (message.stepMatchArguments != null && message.hasOwnProperty("stepMatchArguments")) {
              if (!Array.isArray(message.stepMatchArguments)) return "stepMatchArguments: array expected";
              for (var i = 0; i < message.stepMatchArguments.length; ++i) {
                var error = $root.io.cucumber.messages.StepMatchArgument.verify(message.stepMatchArguments[i]);
                if (error) return "stepMatchArguments." + error;
              }
            }
            if (message.hookId != null && message.hasOwnProperty("hookId")) if (!$util.isString(message.hookId)) return "hookId: string expected";
            return null;
          };
          TestStep.fromObject = function fromObject(object) {
            if (object instanceof $root.io.cucumber.messages.TestCase.TestStep) return object;
            var message = new $root.io.cucumber.messages.TestCase.TestStep();
            if (object.id != null) message.id = String(object.id);
            if (object.pickleStepId != null) message.pickleStepId = String(object.pickleStepId);
            if (object.stepDefinitionIds) {
              if (!Array.isArray(object.stepDefinitionIds)) throw TypeError(".io.cucumber.messages.TestCase.TestStep.stepDefinitionIds: array expected");
              message.stepDefinitionIds = [];
              for (var i = 0; i < object.stepDefinitionIds.length; ++i) message.stepDefinitionIds[i] = String(object.stepDefinitionIds[i]);
            }
            if (object.stepMatchArguments) {
              if (!Array.isArray(object.stepMatchArguments)) throw TypeError(".io.cucumber.messages.TestCase.TestStep.stepMatchArguments: array expected");
              message.stepMatchArguments = [];
              for (var i = 0; i < object.stepMatchArguments.length; ++i) {
                if (typeof object.stepMatchArguments[i] !== "object") throw TypeError(".io.cucumber.messages.TestCase.TestStep.stepMatchArguments: object expected");
                message.stepMatchArguments[i] = $root.io.cucumber.messages.StepMatchArgument.fromObject(object.stepMatchArguments[i]);
              }
            }
            if (object.hookId != null) message.hookId = String(object.hookId);
            return message;
          };
          TestStep.toObject = function toObject(message, options) {
            if (!options) options = {};
            var object = {};
            if (options.arrays || options.defaults) {
              object.stepDefinitionIds = [];
              object.stepMatchArguments = [];
            }
            if (options.defaults) {
              object.id = "";
              object.pickleStepId = "";
              object.hookId = "";
            }
            if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
            if (message.pickleStepId != null && message.hasOwnProperty("pickleStepId")) object.pickleStepId = message.pickleStepId;
            if (message.stepDefinitionIds && message.stepDefinitionIds.length) {
              object.stepDefinitionIds = [];
              for (var j = 0; j < message.stepDefinitionIds.length; ++j) object.stepDefinitionIds[j] = message.stepDefinitionIds[j];
            }
            if (message.stepMatchArguments && message.stepMatchArguments.length) {
              object.stepMatchArguments = [];
              for (var j = 0; j < message.stepMatchArguments.length; ++j) object.stepMatchArguments[j] = $root.io.cucumber.messages.StepMatchArgument.toObject(message.stepMatchArguments[j], options);
            }
            if (message.hookId != null && message.hasOwnProperty("hookId")) object.hookId = message.hookId;
            return object;
          };
          TestStep.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          return TestStep;
        }();
        return TestCase;
      }();
      messages.PickleAccepted = function () {
        function PickleAccepted(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        PickleAccepted.prototype.pickleId = "";
        PickleAccepted.create = function create(properties) {
          return new PickleAccepted(properties);
        };
        PickleAccepted.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) writer.uint32(10).string(message.pickleId);
          return writer;
        };
        PickleAccepted.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        PickleAccepted.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.PickleAccepted();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.pickleId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        PickleAccepted.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        PickleAccepted.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) if (!$util.isString(message.pickleId)) return "pickleId: string expected";
          return null;
        };
        PickleAccepted.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.PickleAccepted) return object;
          var message = new $root.io.cucumber.messages.PickleAccepted();
          if (object.pickleId != null) message.pickleId = String(object.pickleId);
          return message;
        };
        PickleAccepted.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) object.pickleId = "";
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) object.pickleId = message.pickleId;
          return object;
        };
        PickleAccepted.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return PickleAccepted;
      }();
      messages.PickleRejected = function () {
        function PickleRejected(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        PickleRejected.prototype.pickleId = "";
        PickleRejected.create = function create(properties) {
          return new PickleRejected(properties);
        };
        PickleRejected.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) writer.uint32(18).string(message.pickleId);
          return writer;
        };
        PickleRejected.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        PickleRejected.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.PickleRejected();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 2:
                message.pickleId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        PickleRejected.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        PickleRejected.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) if (!$util.isString(message.pickleId)) return "pickleId: string expected";
          return null;
        };
        PickleRejected.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.PickleRejected) return object;
          var message = new $root.io.cucumber.messages.PickleRejected();
          if (object.pickleId != null) message.pickleId = String(object.pickleId);
          return message;
        };
        PickleRejected.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) object.pickleId = "";
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) object.pickleId = message.pickleId;
          return object;
        };
        PickleRejected.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return PickleRejected;
      }();
      messages.TestRunStarted = function () {
        function TestRunStarted(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestRunStarted.prototype.timestamp = null;
        TestRunStarted.create = function create(properties) {
          return new TestRunStarted(properties);
        };
        TestRunStarted.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(10).fork()).ldelim();
          return writer;
        };
        TestRunStarted.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestRunStarted.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestRunStarted();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestRunStarted.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestRunStarted.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
            var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);
            if (error) return "timestamp." + error;
          }
          return null;
        };
        TestRunStarted.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestRunStarted) return object;
          var message = new $root.io.cucumber.messages.TestRunStarted();
          if (object.timestamp != null) {
            if (typeof object.timestamp !== "object") throw TypeError(".io.cucumber.messages.TestRunStarted.timestamp: object expected");
            message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);
          }
          return message;
        };
        TestRunStarted.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) object.timestamp = null;
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);
          return object;
        };
        TestRunStarted.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return TestRunStarted;
      }();
      messages.TestCasePreparedStep = function () {
        function TestCasePreparedStep(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestCasePreparedStep.prototype.sourceLocation = null;
        TestCasePreparedStep.prototype.actionLocation = null;
        TestCasePreparedStep.create = function create(properties) {
          return new TestCasePreparedStep(properties);
        };
        TestCasePreparedStep.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.sourceLocation != null && message.hasOwnProperty("sourceLocation")) $root.io.cucumber.messages.SourceReference.encode(message.sourceLocation, writer.uint32(10).fork()).ldelim();
          if (message.actionLocation != null && message.hasOwnProperty("actionLocation")) $root.io.cucumber.messages.SourceReference.encode(message.actionLocation, writer.uint32(18).fork()).ldelim();
          return writer;
        };
        TestCasePreparedStep.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestCasePreparedStep.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestCasePreparedStep();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.sourceLocation = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());
                break;
              case 2:
                message.actionLocation = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestCasePreparedStep.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestCasePreparedStep.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.sourceLocation != null && message.hasOwnProperty("sourceLocation")) {
            var error = $root.io.cucumber.messages.SourceReference.verify(message.sourceLocation);
            if (error) return "sourceLocation." + error;
          }
          if (message.actionLocation != null && message.hasOwnProperty("actionLocation")) {
            var error = $root.io.cucumber.messages.SourceReference.verify(message.actionLocation);
            if (error) return "actionLocation." + error;
          }
          return null;
        };
        TestCasePreparedStep.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestCasePreparedStep) return object;
          var message = new $root.io.cucumber.messages.TestCasePreparedStep();
          if (object.sourceLocation != null) {
            if (typeof object.sourceLocation !== "object") throw TypeError(".io.cucumber.messages.TestCasePreparedStep.sourceLocation: object expected");
            message.sourceLocation = $root.io.cucumber.messages.SourceReference.fromObject(object.sourceLocation);
          }
          if (object.actionLocation != null) {
            if (typeof object.actionLocation !== "object") throw TypeError(".io.cucumber.messages.TestCasePreparedStep.actionLocation: object expected");
            message.actionLocation = $root.io.cucumber.messages.SourceReference.fromObject(object.actionLocation);
          }
          return message;
        };
        TestCasePreparedStep.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.sourceLocation = null;
            object.actionLocation = null;
          }
          if (message.sourceLocation != null && message.hasOwnProperty("sourceLocation")) object.sourceLocation = $root.io.cucumber.messages.SourceReference.toObject(message.sourceLocation, options);
          if (message.actionLocation != null && message.hasOwnProperty("actionLocation")) object.actionLocation = $root.io.cucumber.messages.SourceReference.toObject(message.actionLocation, options);
          return object;
        };
        TestCasePreparedStep.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return TestCasePreparedStep;
      }();
      messages.TestCasePrepared = function () {
        function TestCasePrepared(properties) {
          this.steps = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestCasePrepared.prototype.pickleId = "";
        TestCasePrepared.prototype.steps = $util.emptyArray;
        TestCasePrepared.create = function create(properties) {
          return new TestCasePrepared(properties);
        };
        TestCasePrepared.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) writer.uint32(10).string(message.pickleId);
          if (message.steps != null && message.steps.length) for (var i = 0; i < message.steps.length; ++i) $root.io.cucumber.messages.TestCasePreparedStep.encode(message.steps[i], writer.uint32(18).fork()).ldelim();
          return writer;
        };
        TestCasePrepared.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestCasePrepared.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestCasePrepared();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.pickleId = reader.string();
                break;
              case 2:
                if (!(message.steps && message.steps.length)) message.steps = [];
                message.steps.push($root.io.cucumber.messages.TestCasePreparedStep.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestCasePrepared.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestCasePrepared.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) if (!$util.isString(message.pickleId)) return "pickleId: string expected";
          if (message.steps != null && message.hasOwnProperty("steps")) {
            if (!Array.isArray(message.steps)) return "steps: array expected";
            for (var i = 0; i < message.steps.length; ++i) {
              var error = $root.io.cucumber.messages.TestCasePreparedStep.verify(message.steps[i]);
              if (error) return "steps." + error;
            }
          }
          return null;
        };
        TestCasePrepared.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestCasePrepared) return object;
          var message = new $root.io.cucumber.messages.TestCasePrepared();
          if (object.pickleId != null) message.pickleId = String(object.pickleId);
          if (object.steps) {
            if (!Array.isArray(object.steps)) throw TypeError(".io.cucumber.messages.TestCasePrepared.steps: array expected");
            message.steps = [];
            for (var i = 0; i < object.steps.length; ++i) {
              if (typeof object.steps[i] !== "object") throw TypeError(".io.cucumber.messages.TestCasePrepared.steps: object expected");
              message.steps[i] = $root.io.cucumber.messages.TestCasePreparedStep.fromObject(object.steps[i]);
            }
          }
          return message;
        };
        TestCasePrepared.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) object.steps = [];
          if (options.defaults) object.pickleId = "";
          if (message.pickleId != null && message.hasOwnProperty("pickleId")) object.pickleId = message.pickleId;
          if (message.steps && message.steps.length) {
            object.steps = [];
            for (var j = 0; j < message.steps.length; ++j) object.steps[j] = $root.io.cucumber.messages.TestCasePreparedStep.toObject(message.steps[j], options);
          }
          return object;
        };
        TestCasePrepared.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return TestCasePrepared;
      }();
      messages.TestCaseStarted = function () {
        function TestCaseStarted(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestCaseStarted.prototype.timestamp = null;
        TestCaseStarted.prototype.platform = null;
        TestCaseStarted.prototype.attempt = 0;
        TestCaseStarted.prototype.testCaseId = "";
        TestCaseStarted.prototype.id = "";
        TestCaseStarted.create = function create(properties) {
          return new TestCaseStarted(properties);
        };
        TestCaseStarted.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(10).fork()).ldelim();
          if (message.platform != null && message.hasOwnProperty("platform")) $root.io.cucumber.messages.TestCaseStarted.Platform.encode(message.platform, writer.uint32(18).fork()).ldelim();
          if (message.attempt != null && message.hasOwnProperty("attempt")) writer.uint32(24).uint32(message.attempt);
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) writer.uint32(34).string(message.testCaseId);
          if (message.id != null && message.hasOwnProperty("id")) writer.uint32(42).string(message.id);
          return writer;
        };
        TestCaseStarted.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestCaseStarted.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestCaseStarted();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());
                break;
              case 2:
                message.platform = $root.io.cucumber.messages.TestCaseStarted.Platform.decode(reader, reader.uint32());
                break;
              case 3:
                message.attempt = reader.uint32();
                break;
              case 4:
                message.testCaseId = reader.string();
                break;
              case 5:
                message.id = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestCaseStarted.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestCaseStarted.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
            var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);
            if (error) return "timestamp." + error;
          }
          if (message.platform != null && message.hasOwnProperty("platform")) {
            var error = $root.io.cucumber.messages.TestCaseStarted.Platform.verify(message.platform);
            if (error) return "platform." + error;
          }
          if (message.attempt != null && message.hasOwnProperty("attempt")) if (!$util.isInteger(message.attempt)) return "attempt: integer expected";
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) if (!$util.isString(message.testCaseId)) return "testCaseId: string expected";
          if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
          return null;
        };
        TestCaseStarted.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestCaseStarted) return object;
          var message = new $root.io.cucumber.messages.TestCaseStarted();
          if (object.timestamp != null) {
            if (typeof object.timestamp !== "object") throw TypeError(".io.cucumber.messages.TestCaseStarted.timestamp: object expected");
            message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);
          }
          if (object.platform != null) {
            if (typeof object.platform !== "object") throw TypeError(".io.cucumber.messages.TestCaseStarted.platform: object expected");
            message.platform = $root.io.cucumber.messages.TestCaseStarted.Platform.fromObject(object.platform);
          }
          if (object.attempt != null) message.attempt = object.attempt >>> 0;
          if (object.testCaseId != null) message.testCaseId = String(object.testCaseId);
          if (object.id != null) message.id = String(object.id);
          return message;
        };
        TestCaseStarted.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.timestamp = null;
            object.platform = null;
            object.attempt = 0;
            object.testCaseId = "";
            object.id = "";
          }
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);
          if (message.platform != null && message.hasOwnProperty("platform")) object.platform = $root.io.cucumber.messages.TestCaseStarted.Platform.toObject(message.platform, options);
          if (message.attempt != null && message.hasOwnProperty("attempt")) object.attempt = message.attempt;
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) object.testCaseId = message.testCaseId;
          if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
          return object;
        };
        TestCaseStarted.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        TestCaseStarted.Platform = function () {
          function Platform(properties) {
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
          }
          Platform.prototype.implementation = "";
          Platform.prototype.version = "";
          Platform.prototype.os = "";
          Platform.prototype.cpu = "";
          Platform.create = function create(properties) {
            return new Platform(properties);
          };
          Platform.encode = function encode(message, writer) {
            if (!writer) writer = $Writer.create();
            if (message.implementation != null && message.hasOwnProperty("implementation")) writer.uint32(10).string(message.implementation);
            if (message.version != null && message.hasOwnProperty("version")) writer.uint32(18).string(message.version);
            if (message.os != null && message.hasOwnProperty("os")) writer.uint32(26).string(message.os);
            if (message.cpu != null && message.hasOwnProperty("cpu")) writer.uint32(34).string(message.cpu);
            return writer;
          };
          Platform.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Platform.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length,
              message = new $root.io.cucumber.messages.TestCaseStarted.Platform();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.implementation = reader.string();
                  break;
                case 2:
                  message.version = reader.string();
                  break;
                case 3:
                  message.os = reader.string();
                  break;
                case 4:
                  message.cpu = reader.string();
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Platform.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader)) reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Platform.verify = function verify(message) {
            if (typeof message !== "object" || message === null) return "object expected";
            if (message.implementation != null && message.hasOwnProperty("implementation")) if (!$util.isString(message.implementation)) return "implementation: string expected";
            if (message.version != null && message.hasOwnProperty("version")) if (!$util.isString(message.version)) return "version: string expected";
            if (message.os != null && message.hasOwnProperty("os")) if (!$util.isString(message.os)) return "os: string expected";
            if (message.cpu != null && message.hasOwnProperty("cpu")) if (!$util.isString(message.cpu)) return "cpu: string expected";
            return null;
          };
          Platform.fromObject = function fromObject(object) {
            if (object instanceof $root.io.cucumber.messages.TestCaseStarted.Platform) return object;
            var message = new $root.io.cucumber.messages.TestCaseStarted.Platform();
            if (object.implementation != null) message.implementation = String(object.implementation);
            if (object.version != null) message.version = String(object.version);
            if (object.os != null) message.os = String(object.os);
            if (object.cpu != null) message.cpu = String(object.cpu);
            return message;
          };
          Platform.toObject = function toObject(message, options) {
            if (!options) options = {};
            var object = {};
            if (options.defaults) {
              object.implementation = "";
              object.version = "";
              object.os = "";
              object.cpu = "";
            }
            if (message.implementation != null && message.hasOwnProperty("implementation")) object.implementation = message.implementation;
            if (message.version != null && message.hasOwnProperty("version")) object.version = message.version;
            if (message.os != null && message.hasOwnProperty("os")) object.os = message.os;
            if (message.cpu != null && message.hasOwnProperty("cpu")) object.cpu = message.cpu;
            return object;
          };
          Platform.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          return Platform;
        }();
        return TestCaseStarted;
      }();
      messages.TestCaseFinished = function () {
        function TestCaseFinished(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestCaseFinished.prototype.timestamp = null;
        TestCaseFinished.prototype.testResult = null;
        TestCaseFinished.prototype.testCaseStartedId = "";
        TestCaseFinished.create = function create(properties) {
          return new TestCaseFinished(properties);
        };
        TestCaseFinished.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(10).fork()).ldelim();
          if (message.testResult != null && message.hasOwnProperty("testResult")) $root.io.cucumber.messages.TestResult.encode(message.testResult, writer.uint32(18).fork()).ldelim();
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) writer.uint32(26).string(message.testCaseStartedId);
          return writer;
        };
        TestCaseFinished.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestCaseFinished.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestCaseFinished();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());
                break;
              case 2:
                message.testResult = $root.io.cucumber.messages.TestResult.decode(reader, reader.uint32());
                break;
              case 3:
                message.testCaseStartedId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestCaseFinished.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestCaseFinished.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
            var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);
            if (error) return "timestamp." + error;
          }
          if (message.testResult != null && message.hasOwnProperty("testResult")) {
            var error = $root.io.cucumber.messages.TestResult.verify(message.testResult);
            if (error) return "testResult." + error;
          }
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) if (!$util.isString(message.testCaseStartedId)) return "testCaseStartedId: string expected";
          return null;
        };
        TestCaseFinished.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestCaseFinished) return object;
          var message = new $root.io.cucumber.messages.TestCaseFinished();
          if (object.timestamp != null) {
            if (typeof object.timestamp !== "object") throw TypeError(".io.cucumber.messages.TestCaseFinished.timestamp: object expected");
            message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);
          }
          if (object.testResult != null) {
            if (typeof object.testResult !== "object") throw TypeError(".io.cucumber.messages.TestCaseFinished.testResult: object expected");
            message.testResult = $root.io.cucumber.messages.TestResult.fromObject(object.testResult);
          }
          if (object.testCaseStartedId != null) message.testCaseStartedId = String(object.testCaseStartedId);
          return message;
        };
        TestCaseFinished.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.timestamp = null;
            object.testResult = null;
            object.testCaseStartedId = "";
          }
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);
          if (message.testResult != null && message.hasOwnProperty("testResult")) object.testResult = $root.io.cucumber.messages.TestResult.toObject(message.testResult, options);
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) object.testCaseStartedId = message.testCaseStartedId;
          return object;
        };
        TestCaseFinished.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return TestCaseFinished;
      }();
      messages.TestStepStarted = function () {
        function TestStepStarted(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestStepStarted.prototype.timestamp = null;
        TestStepStarted.prototype.testStepId = "";
        TestStepStarted.prototype.testCaseStartedId = "";
        TestStepStarted.create = function create(properties) {
          return new TestStepStarted(properties);
        };
        TestStepStarted.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(10).fork()).ldelim();
          if (message.testStepId != null && message.hasOwnProperty("testStepId")) writer.uint32(18).string(message.testStepId);
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) writer.uint32(26).string(message.testCaseStartedId);
          return writer;
        };
        TestStepStarted.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestStepStarted.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestStepStarted();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());
                break;
              case 2:
                message.testStepId = reader.string();
                break;
              case 3:
                message.testCaseStartedId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestStepStarted.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestStepStarted.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
            var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);
            if (error) return "timestamp." + error;
          }
          if (message.testStepId != null && message.hasOwnProperty("testStepId")) if (!$util.isString(message.testStepId)) return "testStepId: string expected";
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) if (!$util.isString(message.testCaseStartedId)) return "testCaseStartedId: string expected";
          return null;
        };
        TestStepStarted.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestStepStarted) return object;
          var message = new $root.io.cucumber.messages.TestStepStarted();
          if (object.timestamp != null) {
            if (typeof object.timestamp !== "object") throw TypeError(".io.cucumber.messages.TestStepStarted.timestamp: object expected");
            message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);
          }
          if (object.testStepId != null) message.testStepId = String(object.testStepId);
          if (object.testCaseStartedId != null) message.testCaseStartedId = String(object.testCaseStartedId);
          return message;
        };
        TestStepStarted.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.timestamp = null;
            object.testStepId = "";
            object.testCaseStartedId = "";
          }
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);
          if (message.testStepId != null && message.hasOwnProperty("testStepId")) object.testStepId = message.testStepId;
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) object.testCaseStartedId = message.testCaseStartedId;
          return object;
        };
        TestStepStarted.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return TestStepStarted;
      }();
      messages.TestStepFinished = function () {
        function TestStepFinished(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestStepFinished.prototype.testResult = null;
        TestStepFinished.prototype.timestamp = null;
        TestStepFinished.prototype.testStepId = "";
        TestStepFinished.prototype.testCaseStartedId = "";
        TestStepFinished.create = function create(properties) {
          return new TestStepFinished(properties);
        };
        TestStepFinished.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.testResult != null && message.hasOwnProperty("testResult")) $root.io.cucumber.messages.TestResult.encode(message.testResult, writer.uint32(10).fork()).ldelim();
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(18).fork()).ldelim();
          if (message.testStepId != null && message.hasOwnProperty("testStepId")) writer.uint32(26).string(message.testStepId);
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) writer.uint32(34).string(message.testCaseStartedId);
          return writer;
        };
        TestStepFinished.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestStepFinished.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestStepFinished();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.testResult = $root.io.cucumber.messages.TestResult.decode(reader, reader.uint32());
                break;
              case 2:
                message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());
                break;
              case 3:
                message.testStepId = reader.string();
                break;
              case 4:
                message.testCaseStartedId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestStepFinished.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestStepFinished.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.testResult != null && message.hasOwnProperty("testResult")) {
            var error = $root.io.cucumber.messages.TestResult.verify(message.testResult);
            if (error) return "testResult." + error;
          }
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
            var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);
            if (error) return "timestamp." + error;
          }
          if (message.testStepId != null && message.hasOwnProperty("testStepId")) if (!$util.isString(message.testStepId)) return "testStepId: string expected";
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) if (!$util.isString(message.testCaseStartedId)) return "testCaseStartedId: string expected";
          return null;
        };
        TestStepFinished.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestStepFinished) return object;
          var message = new $root.io.cucumber.messages.TestStepFinished();
          if (object.testResult != null) {
            if (typeof object.testResult !== "object") throw TypeError(".io.cucumber.messages.TestStepFinished.testResult: object expected");
            message.testResult = $root.io.cucumber.messages.TestResult.fromObject(object.testResult);
          }
          if (object.timestamp != null) {
            if (typeof object.timestamp !== "object") throw TypeError(".io.cucumber.messages.TestStepFinished.timestamp: object expected");
            message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);
          }
          if (object.testStepId != null) message.testStepId = String(object.testStepId);
          if (object.testCaseStartedId != null) message.testCaseStartedId = String(object.testCaseStartedId);
          return message;
        };
        TestStepFinished.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.testResult = null;
            object.timestamp = null;
            object.testStepId = "";
            object.testCaseStartedId = "";
          }
          if (message.testResult != null && message.hasOwnProperty("testResult")) object.testResult = $root.io.cucumber.messages.TestResult.toObject(message.testResult, options);
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);
          if (message.testStepId != null && message.hasOwnProperty("testStepId")) object.testStepId = message.testStepId;
          if (message.testCaseStartedId != null && message.hasOwnProperty("testCaseStartedId")) object.testCaseStartedId = message.testCaseStartedId;
          return object;
        };
        TestStepFinished.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return TestStepFinished;
      }();
      messages.TestResult = function () {
        function TestResult(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestResult.prototype.status = 0;
        TestResult.prototype.message = "";
        TestResult.prototype.duration = null;
        TestResult.prototype.willBeRetried = false;
        TestResult.create = function create(properties) {
          return new TestResult(properties);
        };
        TestResult.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.status != null && message.hasOwnProperty("status")) writer.uint32(8).int32(message.status);
          if (message.message != null && message.hasOwnProperty("message")) writer.uint32(18).string(message.message);
          if (message.duration != null && message.hasOwnProperty("duration")) $root.io.cucumber.messages.Duration.encode(message.duration, writer.uint32(26).fork()).ldelim();
          if (message.willBeRetried != null && message.hasOwnProperty("willBeRetried")) writer.uint32(32).bool(message.willBeRetried);
          return writer;
        };
        TestResult.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestResult.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestResult();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.status = reader.int32();
                break;
              case 2:
                message.message = reader.string();
                break;
              case 3:
                message.duration = $root.io.cucumber.messages.Duration.decode(reader, reader.uint32());
                break;
              case 4:
                message.willBeRetried = reader.bool();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestResult.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestResult.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.status != null && message.hasOwnProperty("status")) switch (message.status) {
            default:
              return "status: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
              break;
          }
          if (message.message != null && message.hasOwnProperty("message")) if (!$util.isString(message.message)) return "message: string expected";
          if (message.duration != null && message.hasOwnProperty("duration")) {
            var error = $root.io.cucumber.messages.Duration.verify(message.duration);
            if (error) return "duration." + error;
          }
          if (message.willBeRetried != null && message.hasOwnProperty("willBeRetried")) if (typeof message.willBeRetried !== "boolean") return "willBeRetried: boolean expected";
          return null;
        };
        TestResult.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestResult) return object;
          var message = new $root.io.cucumber.messages.TestResult();
          switch (object.status) {
            case "UNKNOWN":
            case 0:
              message.status = 0;
              break;
            case "PASSED":
            case 1:
              message.status = 1;
              break;
            case "SKIPPED":
            case 2:
              message.status = 2;
              break;
            case "PENDING":
            case 3:
              message.status = 3;
              break;
            case "UNDEFINED":
            case 4:
              message.status = 4;
              break;
            case "AMBIGUOUS":
            case 5:
              message.status = 5;
              break;
            case "FAILED":
            case 6:
              message.status = 6;
              break;
          }
          if (object.message != null) message.message = String(object.message);
          if (object.duration != null) {
            if (typeof object.duration !== "object") throw TypeError(".io.cucumber.messages.TestResult.duration: object expected");
            message.duration = $root.io.cucumber.messages.Duration.fromObject(object.duration);
          }
          if (object.willBeRetried != null) message.willBeRetried = Boolean(object.willBeRetried);
          return message;
        };
        TestResult.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.status = options.enums === String ? "UNKNOWN" : 0;
            object.message = "";
            object.duration = null;
            object.willBeRetried = false;
          }
          if (message.status != null && message.hasOwnProperty("status")) object.status = options.enums === String ? $root.io.cucumber.messages.TestResult.Status[message.status] : message.status;
          if (message.message != null && message.hasOwnProperty("message")) object.message = message.message;
          if (message.duration != null && message.hasOwnProperty("duration")) object.duration = $root.io.cucumber.messages.Duration.toObject(message.duration, options);
          if (message.willBeRetried != null && message.hasOwnProperty("willBeRetried")) object.willBeRetried = message.willBeRetried;
          return object;
        };
        TestResult.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        TestResult.Status = function () {
          var valuesById = {},
            values = Object.create(valuesById);
          values[valuesById[0] = "UNKNOWN"] = 0;
          values[valuesById[1] = "PASSED"] = 1;
          values[valuesById[2] = "SKIPPED"] = 2;
          values[valuesById[3] = "PENDING"] = 3;
          values[valuesById[4] = "UNDEFINED"] = 4;
          values[valuesById[5] = "AMBIGUOUS"] = 5;
          values[valuesById[6] = "FAILED"] = 6;
          return values;
        }();
        return TestResult;
      }();
      messages.TestRunFinished = function () {
        function TestRunFinished(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        TestRunFinished.prototype.success = false;
        TestRunFinished.prototype.timestamp = null;
        TestRunFinished.create = function create(properties) {
          return new TestRunFinished(properties);
        };
        TestRunFinished.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.success != null && message.hasOwnProperty("success")) writer.uint32(8).bool(message.success);
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(18).fork()).ldelim();
          return writer;
        };
        TestRunFinished.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        TestRunFinished.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.TestRunFinished();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.success = reader.bool();
                break;
              case 2:
                message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        TestRunFinished.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        TestRunFinished.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.success != null && message.hasOwnProperty("success")) if (typeof message.success !== "boolean") return "success: boolean expected";
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
            var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);
            if (error) return "timestamp." + error;
          }
          return null;
        };
        TestRunFinished.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.TestRunFinished) return object;
          var message = new $root.io.cucumber.messages.TestRunFinished();
          if (object.success != null) message.success = Boolean(object.success);
          if (object.timestamp != null) {
            if (typeof object.timestamp !== "object") throw TypeError(".io.cucumber.messages.TestRunFinished.timestamp: object expected");
            message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);
          }
          return message;
        };
        TestRunFinished.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.success = false;
            object.timestamp = null;
          }
          if (message.success != null && message.hasOwnProperty("success")) object.success = message.success;
          if (message.timestamp != null && message.hasOwnProperty("timestamp")) object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);
          return object;
        };
        TestRunFinished.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return TestRunFinished;
      }();
      messages.CommandStart = function () {
        function CommandStart(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        CommandStart.prototype.baseDirectory = "";
        CommandStart.prototype.sourcesConfig = null;
        CommandStart.prototype.runtimeConfig = null;
        CommandStart.prototype.supportCodeConfig = null;
        CommandStart.create = function create(properties) {
          return new CommandStart(properties);
        };
        CommandStart.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.baseDirectory != null && message.hasOwnProperty("baseDirectory")) writer.uint32(18).string(message.baseDirectory);
          if (message.sourcesConfig != null && message.hasOwnProperty("sourcesConfig")) $root.io.cucumber.messages.SourcesConfig.encode(message.sourcesConfig, writer.uint32(26).fork()).ldelim();
          if (message.runtimeConfig != null && message.hasOwnProperty("runtimeConfig")) $root.io.cucumber.messages.RuntimeConfig.encode(message.runtimeConfig, writer.uint32(34).fork()).ldelim();
          if (message.supportCodeConfig != null && message.hasOwnProperty("supportCodeConfig")) $root.io.cucumber.messages.SupportCodeConfig.encode(message.supportCodeConfig, writer.uint32(42).fork()).ldelim();
          return writer;
        };
        CommandStart.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CommandStart.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.CommandStart();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 2:
                message.baseDirectory = reader.string();
                break;
              case 3:
                message.sourcesConfig = $root.io.cucumber.messages.SourcesConfig.decode(reader, reader.uint32());
                break;
              case 4:
                message.runtimeConfig = $root.io.cucumber.messages.RuntimeConfig.decode(reader, reader.uint32());
                break;
              case 5:
                message.supportCodeConfig = $root.io.cucumber.messages.SupportCodeConfig.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CommandStart.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CommandStart.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.baseDirectory != null && message.hasOwnProperty("baseDirectory")) if (!$util.isString(message.baseDirectory)) return "baseDirectory: string expected";
          if (message.sourcesConfig != null && message.hasOwnProperty("sourcesConfig")) {
            var error = $root.io.cucumber.messages.SourcesConfig.verify(message.sourcesConfig);
            if (error) return "sourcesConfig." + error;
          }
          if (message.runtimeConfig != null && message.hasOwnProperty("runtimeConfig")) {
            var error = $root.io.cucumber.messages.RuntimeConfig.verify(message.runtimeConfig);
            if (error) return "runtimeConfig." + error;
          }
          if (message.supportCodeConfig != null && message.hasOwnProperty("supportCodeConfig")) {
            var error = $root.io.cucumber.messages.SupportCodeConfig.verify(message.supportCodeConfig);
            if (error) return "supportCodeConfig." + error;
          }
          return null;
        };
        CommandStart.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.CommandStart) return object;
          var message = new $root.io.cucumber.messages.CommandStart();
          if (object.baseDirectory != null) message.baseDirectory = String(object.baseDirectory);
          if (object.sourcesConfig != null) {
            if (typeof object.sourcesConfig !== "object") throw TypeError(".io.cucumber.messages.CommandStart.sourcesConfig: object expected");
            message.sourcesConfig = $root.io.cucumber.messages.SourcesConfig.fromObject(object.sourcesConfig);
          }
          if (object.runtimeConfig != null) {
            if (typeof object.runtimeConfig !== "object") throw TypeError(".io.cucumber.messages.CommandStart.runtimeConfig: object expected");
            message.runtimeConfig = $root.io.cucumber.messages.RuntimeConfig.fromObject(object.runtimeConfig);
          }
          if (object.supportCodeConfig != null) {
            if (typeof object.supportCodeConfig !== "object") throw TypeError(".io.cucumber.messages.CommandStart.supportCodeConfig: object expected");
            message.supportCodeConfig = $root.io.cucumber.messages.SupportCodeConfig.fromObject(object.supportCodeConfig);
          }
          return message;
        };
        CommandStart.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.baseDirectory = "";
            object.sourcesConfig = null;
            object.runtimeConfig = null;
            object.supportCodeConfig = null;
          }
          if (message.baseDirectory != null && message.hasOwnProperty("baseDirectory")) object.baseDirectory = message.baseDirectory;
          if (message.sourcesConfig != null && message.hasOwnProperty("sourcesConfig")) object.sourcesConfig = $root.io.cucumber.messages.SourcesConfig.toObject(message.sourcesConfig, options);
          if (message.runtimeConfig != null && message.hasOwnProperty("runtimeConfig")) object.runtimeConfig = $root.io.cucumber.messages.RuntimeConfig.toObject(message.runtimeConfig, options);
          if (message.supportCodeConfig != null && message.hasOwnProperty("supportCodeConfig")) object.supportCodeConfig = $root.io.cucumber.messages.SupportCodeConfig.toObject(message.supportCodeConfig, options);
          return object;
        };
        CommandStart.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CommandStart;
      }();
      messages.SourcesConfig = function () {
        function SourcesConfig(properties) {
          this.absolutePaths = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        SourcesConfig.prototype.absolutePaths = $util.emptyArray;
        SourcesConfig.prototype.language = "";
        SourcesConfig.prototype.filters = null;
        SourcesConfig.prototype.order = null;
        SourcesConfig.create = function create(properties) {
          return new SourcesConfig(properties);
        };
        SourcesConfig.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.absolutePaths != null && message.absolutePaths.length) for (var i = 0; i < message.absolutePaths.length; ++i) writer.uint32(10).string(message.absolutePaths[i]);
          if (message.language != null && message.hasOwnProperty("language")) writer.uint32(18).string(message.language);
          if (message.filters != null && message.hasOwnProperty("filters")) $root.io.cucumber.messages.SourcesFilterConfig.encode(message.filters, writer.uint32(26).fork()).ldelim();
          if (message.order != null && message.hasOwnProperty("order")) $root.io.cucumber.messages.SourcesOrder.encode(message.order, writer.uint32(34).fork()).ldelim();
          return writer;
        };
        SourcesConfig.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        SourcesConfig.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.SourcesConfig();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                if (!(message.absolutePaths && message.absolutePaths.length)) message.absolutePaths = [];
                message.absolutePaths.push(reader.string());
                break;
              case 2:
                message.language = reader.string();
                break;
              case 3:
                message.filters = $root.io.cucumber.messages.SourcesFilterConfig.decode(reader, reader.uint32());
                break;
              case 4:
                message.order = $root.io.cucumber.messages.SourcesOrder.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        SourcesConfig.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        SourcesConfig.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.absolutePaths != null && message.hasOwnProperty("absolutePaths")) {
            if (!Array.isArray(message.absolutePaths)) return "absolutePaths: array expected";
            for (var i = 0; i < message.absolutePaths.length; ++i) if (!$util.isString(message.absolutePaths[i])) return "absolutePaths: string[] expected";
          }
          if (message.language != null && message.hasOwnProperty("language")) if (!$util.isString(message.language)) return "language: string expected";
          if (message.filters != null && message.hasOwnProperty("filters")) {
            var error = $root.io.cucumber.messages.SourcesFilterConfig.verify(message.filters);
            if (error) return "filters." + error;
          }
          if (message.order != null && message.hasOwnProperty("order")) {
            var error = $root.io.cucumber.messages.SourcesOrder.verify(message.order);
            if (error) return "order." + error;
          }
          return null;
        };
        SourcesConfig.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.SourcesConfig) return object;
          var message = new $root.io.cucumber.messages.SourcesConfig();
          if (object.absolutePaths) {
            if (!Array.isArray(object.absolutePaths)) throw TypeError(".io.cucumber.messages.SourcesConfig.absolutePaths: array expected");
            message.absolutePaths = [];
            for (var i = 0; i < object.absolutePaths.length; ++i) message.absolutePaths[i] = String(object.absolutePaths[i]);
          }
          if (object.language != null) message.language = String(object.language);
          if (object.filters != null) {
            if (typeof object.filters !== "object") throw TypeError(".io.cucumber.messages.SourcesConfig.filters: object expected");
            message.filters = $root.io.cucumber.messages.SourcesFilterConfig.fromObject(object.filters);
          }
          if (object.order != null) {
            if (typeof object.order !== "object") throw TypeError(".io.cucumber.messages.SourcesConfig.order: object expected");
            message.order = $root.io.cucumber.messages.SourcesOrder.fromObject(object.order);
          }
          return message;
        };
        SourcesConfig.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) object.absolutePaths = [];
          if (options.defaults) {
            object.language = "";
            object.filters = null;
            object.order = null;
          }
          if (message.absolutePaths && message.absolutePaths.length) {
            object.absolutePaths = [];
            for (var j = 0; j < message.absolutePaths.length; ++j) object.absolutePaths[j] = message.absolutePaths[j];
          }
          if (message.language != null && message.hasOwnProperty("language")) object.language = message.language;
          if (message.filters != null && message.hasOwnProperty("filters")) object.filters = $root.io.cucumber.messages.SourcesFilterConfig.toObject(message.filters, options);
          if (message.order != null && message.hasOwnProperty("order")) object.order = $root.io.cucumber.messages.SourcesOrder.toObject(message.order, options);
          return object;
        };
        SourcesConfig.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return SourcesConfig;
      }();
      messages.SourcesFilterConfig = function () {
        function SourcesFilterConfig(properties) {
          this.nameRegularExpressions = [];
          this.uriToLinesMapping = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        SourcesFilterConfig.prototype.tagExpression = "";
        SourcesFilterConfig.prototype.nameRegularExpressions = $util.emptyArray;
        SourcesFilterConfig.prototype.uriToLinesMapping = $util.emptyArray;
        SourcesFilterConfig.create = function create(properties) {
          return new SourcesFilterConfig(properties);
        };
        SourcesFilterConfig.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.tagExpression != null && message.hasOwnProperty("tagExpression")) writer.uint32(10).string(message.tagExpression);
          if (message.nameRegularExpressions != null && message.nameRegularExpressions.length) for (var i = 0; i < message.nameRegularExpressions.length; ++i) writer.uint32(18).string(message.nameRegularExpressions[i]);
          if (message.uriToLinesMapping != null && message.uriToLinesMapping.length) for (var i = 0; i < message.uriToLinesMapping.length; ++i) $root.io.cucumber.messages.UriToLinesMapping.encode(message.uriToLinesMapping[i], writer.uint32(26).fork()).ldelim();
          return writer;
        };
        SourcesFilterConfig.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        SourcesFilterConfig.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.SourcesFilterConfig();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.tagExpression = reader.string();
                break;
              case 2:
                if (!(message.nameRegularExpressions && message.nameRegularExpressions.length)) message.nameRegularExpressions = [];
                message.nameRegularExpressions.push(reader.string());
                break;
              case 3:
                if (!(message.uriToLinesMapping && message.uriToLinesMapping.length)) message.uriToLinesMapping = [];
                message.uriToLinesMapping.push($root.io.cucumber.messages.UriToLinesMapping.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        SourcesFilterConfig.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        SourcesFilterConfig.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.tagExpression != null && message.hasOwnProperty("tagExpression")) if (!$util.isString(message.tagExpression)) return "tagExpression: string expected";
          if (message.nameRegularExpressions != null && message.hasOwnProperty("nameRegularExpressions")) {
            if (!Array.isArray(message.nameRegularExpressions)) return "nameRegularExpressions: array expected";
            for (var i = 0; i < message.nameRegularExpressions.length; ++i) if (!$util.isString(message.nameRegularExpressions[i])) return "nameRegularExpressions: string[] expected";
          }
          if (message.uriToLinesMapping != null && message.hasOwnProperty("uriToLinesMapping")) {
            if (!Array.isArray(message.uriToLinesMapping)) return "uriToLinesMapping: array expected";
            for (var i = 0; i < message.uriToLinesMapping.length; ++i) {
              var error = $root.io.cucumber.messages.UriToLinesMapping.verify(message.uriToLinesMapping[i]);
              if (error) return "uriToLinesMapping." + error;
            }
          }
          return null;
        };
        SourcesFilterConfig.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.SourcesFilterConfig) return object;
          var message = new $root.io.cucumber.messages.SourcesFilterConfig();
          if (object.tagExpression != null) message.tagExpression = String(object.tagExpression);
          if (object.nameRegularExpressions) {
            if (!Array.isArray(object.nameRegularExpressions)) throw TypeError(".io.cucumber.messages.SourcesFilterConfig.nameRegularExpressions: array expected");
            message.nameRegularExpressions = [];
            for (var i = 0; i < object.nameRegularExpressions.length; ++i) message.nameRegularExpressions[i] = String(object.nameRegularExpressions[i]);
          }
          if (object.uriToLinesMapping) {
            if (!Array.isArray(object.uriToLinesMapping)) throw TypeError(".io.cucumber.messages.SourcesFilterConfig.uriToLinesMapping: array expected");
            message.uriToLinesMapping = [];
            for (var i = 0; i < object.uriToLinesMapping.length; ++i) {
              if (typeof object.uriToLinesMapping[i] !== "object") throw TypeError(".io.cucumber.messages.SourcesFilterConfig.uriToLinesMapping: object expected");
              message.uriToLinesMapping[i] = $root.io.cucumber.messages.UriToLinesMapping.fromObject(object.uriToLinesMapping[i]);
            }
          }
          return message;
        };
        SourcesFilterConfig.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) {
            object.nameRegularExpressions = [];
            object.uriToLinesMapping = [];
          }
          if (options.defaults) object.tagExpression = "";
          if (message.tagExpression != null && message.hasOwnProperty("tagExpression")) object.tagExpression = message.tagExpression;
          if (message.nameRegularExpressions && message.nameRegularExpressions.length) {
            object.nameRegularExpressions = [];
            for (var j = 0; j < message.nameRegularExpressions.length; ++j) object.nameRegularExpressions[j] = message.nameRegularExpressions[j];
          }
          if (message.uriToLinesMapping && message.uriToLinesMapping.length) {
            object.uriToLinesMapping = [];
            for (var j = 0; j < message.uriToLinesMapping.length; ++j) object.uriToLinesMapping[j] = $root.io.cucumber.messages.UriToLinesMapping.toObject(message.uriToLinesMapping[j], options);
          }
          return object;
        };
        SourcesFilterConfig.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return SourcesFilterConfig;
      }();
      messages.UriToLinesMapping = function () {
        function UriToLinesMapping(properties) {
          this.lines = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        UriToLinesMapping.prototype.absolutePath = "";
        UriToLinesMapping.prototype.lines = $util.emptyArray;
        UriToLinesMapping.create = function create(properties) {
          return new UriToLinesMapping(properties);
        };
        UriToLinesMapping.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.absolutePath != null && message.hasOwnProperty("absolutePath")) writer.uint32(10).string(message.absolutePath);
          if (message.lines != null && message.lines.length) {
            writer.uint32(18).fork();
            for (var i = 0; i < message.lines.length; ++i) writer.uint64(message.lines[i]);
            writer.ldelim();
          }
          return writer;
        };
        UriToLinesMapping.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        UriToLinesMapping.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.UriToLinesMapping();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.absolutePath = reader.string();
                break;
              case 2:
                if (!(message.lines && message.lines.length)) message.lines = [];
                if ((tag & 7) === 2) {
                  var end2 = reader.uint32() + reader.pos;
                  while (reader.pos < end2) message.lines.push(reader.uint64());
                } else message.lines.push(reader.uint64());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        UriToLinesMapping.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        UriToLinesMapping.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.absolutePath != null && message.hasOwnProperty("absolutePath")) if (!$util.isString(message.absolutePath)) return "absolutePath: string expected";
          if (message.lines != null && message.hasOwnProperty("lines")) {
            if (!Array.isArray(message.lines)) return "lines: array expected";
            for (var i = 0; i < message.lines.length; ++i) if (!$util.isInteger(message.lines[i]) && !(message.lines[i] && $util.isInteger(message.lines[i].low) && $util.isInteger(message.lines[i].high))) return "lines: integer|Long[] expected";
          }
          return null;
        };
        UriToLinesMapping.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.UriToLinesMapping) return object;
          var message = new $root.io.cucumber.messages.UriToLinesMapping();
          if (object.absolutePath != null) message.absolutePath = String(object.absolutePath);
          if (object.lines) {
            if (!Array.isArray(object.lines)) throw TypeError(".io.cucumber.messages.UriToLinesMapping.lines: array expected");
            message.lines = [];
            for (var i = 0; i < object.lines.length; ++i) if ($util.Long) (message.lines[i] = $util.Long.fromValue(object.lines[i])).unsigned = true;else if (typeof object.lines[i] === "string") message.lines[i] = parseInt(object.lines[i], 10);else if (typeof object.lines[i] === "number") message.lines[i] = object.lines[i];else if (typeof object.lines[i] === "object") message.lines[i] = new $util.LongBits(object.lines[i].low >>> 0, object.lines[i].high >>> 0).toNumber(true);
          }
          return message;
        };
        UriToLinesMapping.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) object.lines = [];
          if (options.defaults) object.absolutePath = "";
          if (message.absolutePath != null && message.hasOwnProperty("absolutePath")) object.absolutePath = message.absolutePath;
          if (message.lines && message.lines.length) {
            object.lines = [];
            for (var j = 0; j < message.lines.length; ++j) if (typeof message.lines[j] === "number") object.lines[j] = options.longs === String ? String(message.lines[j]) : message.lines[j];else object.lines[j] = options.longs === String ? $util.Long.prototype.toString.call(message.lines[j]) : options.longs === Number ? new $util.LongBits(message.lines[j].low >>> 0, message.lines[j].high >>> 0).toNumber(true) : message.lines[j];
          }
          return object;
        };
        UriToLinesMapping.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return UriToLinesMapping;
      }();
      messages.SourcesOrder = function () {
        function SourcesOrder(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        SourcesOrder.prototype.type = 0;
        SourcesOrder.prototype.seed = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
        SourcesOrder.create = function create(properties) {
          return new SourcesOrder(properties);
        };
        SourcesOrder.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.type != null && message.hasOwnProperty("type")) writer.uint32(8).int32(message.type);
          if (message.seed != null && message.hasOwnProperty("seed")) writer.uint32(16).uint64(message.seed);
          return writer;
        };
        SourcesOrder.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        SourcesOrder.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.SourcesOrder();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.type = reader.int32();
                break;
              case 2:
                message.seed = reader.uint64();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        SourcesOrder.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        SourcesOrder.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.type != null && message.hasOwnProperty("type")) switch (message.type) {
            default:
              return "type: enum value expected";
            case 0:
            case 1:
              break;
          }
          if (message.seed != null && message.hasOwnProperty("seed")) if (!$util.isInteger(message.seed) && !(message.seed && $util.isInteger(message.seed.low) && $util.isInteger(message.seed.high))) return "seed: integer|Long expected";
          return null;
        };
        SourcesOrder.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.SourcesOrder) return object;
          var message = new $root.io.cucumber.messages.SourcesOrder();
          switch (object.type) {
            case "ORDER_OF_DEFINITION":
            case 0:
              message.type = 0;
              break;
            case "RANDOM":
            case 1:
              message.type = 1;
              break;
          }
          if (object.seed != null) if ($util.Long) (message.seed = $util.Long.fromValue(object.seed)).unsigned = true;else if (typeof object.seed === "string") message.seed = parseInt(object.seed, 10);else if (typeof object.seed === "number") message.seed = object.seed;else if (typeof object.seed === "object") message.seed = new $util.LongBits(object.seed.low >>> 0, object.seed.high >>> 0).toNumber(true);
          return message;
        };
        SourcesOrder.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.type = options.enums === String ? "ORDER_OF_DEFINITION" : 0;
            if ($util.Long) {
              var long = new $util.Long(0, 0, true);
              object.seed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else object.seed = options.longs === String ? "0" : 0;
          }
          if (message.type != null && message.hasOwnProperty("type")) object.type = options.enums === String ? $root.io.cucumber.messages.SourcesOrderType[message.type] : message.type;
          if (message.seed != null && message.hasOwnProperty("seed")) if (typeof message.seed === "number") object.seed = options.longs === String ? String(message.seed) : message.seed;else object.seed = options.longs === String ? $util.Long.prototype.toString.call(message.seed) : options.longs === Number ? new $util.LongBits(message.seed.low >>> 0, message.seed.high >>> 0).toNumber(true) : message.seed;
          return object;
        };
        SourcesOrder.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return SourcesOrder;
      }();
      messages.SourcesOrderType = function () {
        var valuesById = {},
          values = Object.create(valuesById);
        values[valuesById[0] = "ORDER_OF_DEFINITION"] = 0;
        values[valuesById[1] = "RANDOM"] = 1;
        return values;
      }();
      messages.RuntimeConfig = function () {
        function RuntimeConfig(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        RuntimeConfig.prototype.isFailFast = false;
        RuntimeConfig.prototype.isDryRun = false;
        RuntimeConfig.prototype.isStrict = false;
        RuntimeConfig.prototype.maxParallel = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
        RuntimeConfig.create = function create(properties) {
          return new RuntimeConfig(properties);
        };
        RuntimeConfig.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.isFailFast != null && message.hasOwnProperty("isFailFast")) writer.uint32(8).bool(message.isFailFast);
          if (message.isDryRun != null && message.hasOwnProperty("isDryRun")) writer.uint32(16).bool(message.isDryRun);
          if (message.isStrict != null && message.hasOwnProperty("isStrict")) writer.uint32(24).bool(message.isStrict);
          if (message.maxParallel != null && message.hasOwnProperty("maxParallel")) writer.uint32(32).uint64(message.maxParallel);
          return writer;
        };
        RuntimeConfig.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        RuntimeConfig.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.RuntimeConfig();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.isFailFast = reader.bool();
                break;
              case 2:
                message.isDryRun = reader.bool();
                break;
              case 3:
                message.isStrict = reader.bool();
                break;
              case 4:
                message.maxParallel = reader.uint64();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        RuntimeConfig.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        RuntimeConfig.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.isFailFast != null && message.hasOwnProperty("isFailFast")) if (typeof message.isFailFast !== "boolean") return "isFailFast: boolean expected";
          if (message.isDryRun != null && message.hasOwnProperty("isDryRun")) if (typeof message.isDryRun !== "boolean") return "isDryRun: boolean expected";
          if (message.isStrict != null && message.hasOwnProperty("isStrict")) if (typeof message.isStrict !== "boolean") return "isStrict: boolean expected";
          if (message.maxParallel != null && message.hasOwnProperty("maxParallel")) if (!$util.isInteger(message.maxParallel) && !(message.maxParallel && $util.isInteger(message.maxParallel.low) && $util.isInteger(message.maxParallel.high))) return "maxParallel: integer|Long expected";
          return null;
        };
        RuntimeConfig.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.RuntimeConfig) return object;
          var message = new $root.io.cucumber.messages.RuntimeConfig();
          if (object.isFailFast != null) message.isFailFast = Boolean(object.isFailFast);
          if (object.isDryRun != null) message.isDryRun = Boolean(object.isDryRun);
          if (object.isStrict != null) message.isStrict = Boolean(object.isStrict);
          if (object.maxParallel != null) if ($util.Long) (message.maxParallel = $util.Long.fromValue(object.maxParallel)).unsigned = true;else if (typeof object.maxParallel === "string") message.maxParallel = parseInt(object.maxParallel, 10);else if (typeof object.maxParallel === "number") message.maxParallel = object.maxParallel;else if (typeof object.maxParallel === "object") message.maxParallel = new $util.LongBits(object.maxParallel.low >>> 0, object.maxParallel.high >>> 0).toNumber(true);
          return message;
        };
        RuntimeConfig.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.isFailFast = false;
            object.isDryRun = false;
            object.isStrict = false;
            if ($util.Long) {
              var long = new $util.Long(0, 0, true);
              object.maxParallel = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else object.maxParallel = options.longs === String ? "0" : 0;
          }
          if (message.isFailFast != null && message.hasOwnProperty("isFailFast")) object.isFailFast = message.isFailFast;
          if (message.isDryRun != null && message.hasOwnProperty("isDryRun")) object.isDryRun = message.isDryRun;
          if (message.isStrict != null && message.hasOwnProperty("isStrict")) object.isStrict = message.isStrict;
          if (message.maxParallel != null && message.hasOwnProperty("maxParallel")) if (typeof message.maxParallel === "number") object.maxParallel = options.longs === String ? String(message.maxParallel) : message.maxParallel;else object.maxParallel = options.longs === String ? $util.Long.prototype.toString.call(message.maxParallel) : options.longs === Number ? new $util.LongBits(message.maxParallel.low >>> 0, message.maxParallel.high >>> 0).toNumber(true) : message.maxParallel;
          return object;
        };
        RuntimeConfig.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return RuntimeConfig;
      }();
      messages.SupportCodeConfig = function () {
        function SupportCodeConfig(properties) {
          this.beforeTestCaseHooks = [];
          this.afterTestCaseHooks = [];
          this.stepDefinitions = [];
          this.parameterTypes = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        SupportCodeConfig.prototype.beforeTestCaseHooks = $util.emptyArray;
        SupportCodeConfig.prototype.afterTestCaseHooks = $util.emptyArray;
        SupportCodeConfig.prototype.stepDefinitions = $util.emptyArray;
        SupportCodeConfig.prototype.parameterTypes = $util.emptyArray;
        SupportCodeConfig.create = function create(properties) {
          return new SupportCodeConfig(properties);
        };
        SupportCodeConfig.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.beforeTestCaseHooks != null && message.beforeTestCaseHooks.length) for (var i = 0; i < message.beforeTestCaseHooks.length; ++i) $root.io.cucumber.messages.Hook.encode(message.beforeTestCaseHooks[i], writer.uint32(10).fork()).ldelim();
          if (message.afterTestCaseHooks != null && message.afterTestCaseHooks.length) for (var i = 0; i < message.afterTestCaseHooks.length; ++i) $root.io.cucumber.messages.Hook.encode(message.afterTestCaseHooks[i], writer.uint32(18).fork()).ldelim();
          if (message.stepDefinitions != null && message.stepDefinitions.length) for (var i = 0; i < message.stepDefinitions.length; ++i) $root.io.cucumber.messages.StepDefinition.encode(message.stepDefinitions[i], writer.uint32(26).fork()).ldelim();
          if (message.parameterTypes != null && message.parameterTypes.length) for (var i = 0; i < message.parameterTypes.length; ++i) $root.io.cucumber.messages.ParameterType.encode(message.parameterTypes[i], writer.uint32(34).fork()).ldelim();
          return writer;
        };
        SupportCodeConfig.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        SupportCodeConfig.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.SupportCodeConfig();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                if (!(message.beforeTestCaseHooks && message.beforeTestCaseHooks.length)) message.beforeTestCaseHooks = [];
                message.beforeTestCaseHooks.push($root.io.cucumber.messages.Hook.decode(reader, reader.uint32()));
                break;
              case 2:
                if (!(message.afterTestCaseHooks && message.afterTestCaseHooks.length)) message.afterTestCaseHooks = [];
                message.afterTestCaseHooks.push($root.io.cucumber.messages.Hook.decode(reader, reader.uint32()));
                break;
              case 3:
                if (!(message.stepDefinitions && message.stepDefinitions.length)) message.stepDefinitions = [];
                message.stepDefinitions.push($root.io.cucumber.messages.StepDefinition.decode(reader, reader.uint32()));
                break;
              case 4:
                if (!(message.parameterTypes && message.parameterTypes.length)) message.parameterTypes = [];
                message.parameterTypes.push($root.io.cucumber.messages.ParameterType.decode(reader, reader.uint32()));
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        SupportCodeConfig.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        SupportCodeConfig.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.beforeTestCaseHooks != null && message.hasOwnProperty("beforeTestCaseHooks")) {
            if (!Array.isArray(message.beforeTestCaseHooks)) return "beforeTestCaseHooks: array expected";
            for (var i = 0; i < message.beforeTestCaseHooks.length; ++i) {
              var error = $root.io.cucumber.messages.Hook.verify(message.beforeTestCaseHooks[i]);
              if (error) return "beforeTestCaseHooks." + error;
            }
          }
          if (message.afterTestCaseHooks != null && message.hasOwnProperty("afterTestCaseHooks")) {
            if (!Array.isArray(message.afterTestCaseHooks)) return "afterTestCaseHooks: array expected";
            for (var i = 0; i < message.afterTestCaseHooks.length; ++i) {
              var error = $root.io.cucumber.messages.Hook.verify(message.afterTestCaseHooks[i]);
              if (error) return "afterTestCaseHooks." + error;
            }
          }
          if (message.stepDefinitions != null && message.hasOwnProperty("stepDefinitions")) {
            if (!Array.isArray(message.stepDefinitions)) return "stepDefinitions: array expected";
            for (var i = 0; i < message.stepDefinitions.length; ++i) {
              var error = $root.io.cucumber.messages.StepDefinition.verify(message.stepDefinitions[i]);
              if (error) return "stepDefinitions." + error;
            }
          }
          if (message.parameterTypes != null && message.hasOwnProperty("parameterTypes")) {
            if (!Array.isArray(message.parameterTypes)) return "parameterTypes: array expected";
            for (var i = 0; i < message.parameterTypes.length; ++i) {
              var error = $root.io.cucumber.messages.ParameterType.verify(message.parameterTypes[i]);
              if (error) return "parameterTypes." + error;
            }
          }
          return null;
        };
        SupportCodeConfig.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.SupportCodeConfig) return object;
          var message = new $root.io.cucumber.messages.SupportCodeConfig();
          if (object.beforeTestCaseHooks) {
            if (!Array.isArray(object.beforeTestCaseHooks)) throw TypeError(".io.cucumber.messages.SupportCodeConfig.beforeTestCaseHooks: array expected");
            message.beforeTestCaseHooks = [];
            for (var i = 0; i < object.beforeTestCaseHooks.length; ++i) {
              if (typeof object.beforeTestCaseHooks[i] !== "object") throw TypeError(".io.cucumber.messages.SupportCodeConfig.beforeTestCaseHooks: object expected");
              message.beforeTestCaseHooks[i] = $root.io.cucumber.messages.Hook.fromObject(object.beforeTestCaseHooks[i]);
            }
          }
          if (object.afterTestCaseHooks) {
            if (!Array.isArray(object.afterTestCaseHooks)) throw TypeError(".io.cucumber.messages.SupportCodeConfig.afterTestCaseHooks: array expected");
            message.afterTestCaseHooks = [];
            for (var i = 0; i < object.afterTestCaseHooks.length; ++i) {
              if (typeof object.afterTestCaseHooks[i] !== "object") throw TypeError(".io.cucumber.messages.SupportCodeConfig.afterTestCaseHooks: object expected");
              message.afterTestCaseHooks[i] = $root.io.cucumber.messages.Hook.fromObject(object.afterTestCaseHooks[i]);
            }
          }
          if (object.stepDefinitions) {
            if (!Array.isArray(object.stepDefinitions)) throw TypeError(".io.cucumber.messages.SupportCodeConfig.stepDefinitions: array expected");
            message.stepDefinitions = [];
            for (var i = 0; i < object.stepDefinitions.length; ++i) {
              if (typeof object.stepDefinitions[i] !== "object") throw TypeError(".io.cucumber.messages.SupportCodeConfig.stepDefinitions: object expected");
              message.stepDefinitions[i] = $root.io.cucumber.messages.StepDefinition.fromObject(object.stepDefinitions[i]);
            }
          }
          if (object.parameterTypes) {
            if (!Array.isArray(object.parameterTypes)) throw TypeError(".io.cucumber.messages.SupportCodeConfig.parameterTypes: array expected");
            message.parameterTypes = [];
            for (var i = 0; i < object.parameterTypes.length; ++i) {
              if (typeof object.parameterTypes[i] !== "object") throw TypeError(".io.cucumber.messages.SupportCodeConfig.parameterTypes: object expected");
              message.parameterTypes[i] = $root.io.cucumber.messages.ParameterType.fromObject(object.parameterTypes[i]);
            }
          }
          return message;
        };
        SupportCodeConfig.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) {
            object.beforeTestCaseHooks = [];
            object.afterTestCaseHooks = [];
            object.stepDefinitions = [];
            object.parameterTypes = [];
          }
          if (message.beforeTestCaseHooks && message.beforeTestCaseHooks.length) {
            object.beforeTestCaseHooks = [];
            for (var j = 0; j < message.beforeTestCaseHooks.length; ++j) object.beforeTestCaseHooks[j] = $root.io.cucumber.messages.Hook.toObject(message.beforeTestCaseHooks[j], options);
          }
          if (message.afterTestCaseHooks && message.afterTestCaseHooks.length) {
            object.afterTestCaseHooks = [];
            for (var j = 0; j < message.afterTestCaseHooks.length; ++j) object.afterTestCaseHooks[j] = $root.io.cucumber.messages.Hook.toObject(message.afterTestCaseHooks[j], options);
          }
          if (message.stepDefinitions && message.stepDefinitions.length) {
            object.stepDefinitions = [];
            for (var j = 0; j < message.stepDefinitions.length; ++j) object.stepDefinitions[j] = $root.io.cucumber.messages.StepDefinition.toObject(message.stepDefinitions[j], options);
          }
          if (message.parameterTypes && message.parameterTypes.length) {
            object.parameterTypes = [];
            for (var j = 0; j < message.parameterTypes.length; ++j) object.parameterTypes[j] = $root.io.cucumber.messages.ParameterType.toObject(message.parameterTypes[j], options);
          }
          return object;
        };
        SupportCodeConfig.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return SupportCodeConfig;
      }();
      messages.Hook = function () {
        function Hook(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        Hook.prototype.id = "";
        Hook.prototype.tagExpression = "";
        Hook.prototype.sourceReference = null;
        Hook.create = function create(properties) {
          return new Hook(properties);
        };
        Hook.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.id != null && message.hasOwnProperty("id")) writer.uint32(10).string(message.id);
          if (message.tagExpression != null && message.hasOwnProperty("tagExpression")) writer.uint32(18).string(message.tagExpression);
          if (message.sourceReference != null && message.hasOwnProperty("sourceReference")) $root.io.cucumber.messages.SourceReference.encode(message.sourceReference, writer.uint32(26).fork()).ldelim();
          return writer;
        };
        Hook.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        Hook.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.Hook();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.id = reader.string();
                break;
              case 2:
                message.tagExpression = reader.string();
                break;
              case 3:
                message.sourceReference = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        Hook.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        Hook.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
          if (message.tagExpression != null && message.hasOwnProperty("tagExpression")) if (!$util.isString(message.tagExpression)) return "tagExpression: string expected";
          if (message.sourceReference != null && message.hasOwnProperty("sourceReference")) {
            var error = $root.io.cucumber.messages.SourceReference.verify(message.sourceReference);
            if (error) return "sourceReference." + error;
          }
          return null;
        };
        Hook.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.Hook) return object;
          var message = new $root.io.cucumber.messages.Hook();
          if (object.id != null) message.id = String(object.id);
          if (object.tagExpression != null) message.tagExpression = String(object.tagExpression);
          if (object.sourceReference != null) {
            if (typeof object.sourceReference !== "object") throw TypeError(".io.cucumber.messages.Hook.sourceReference: object expected");
            message.sourceReference = $root.io.cucumber.messages.SourceReference.fromObject(object.sourceReference);
          }
          return message;
        };
        Hook.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.id = "";
            object.tagExpression = "";
            object.sourceReference = null;
          }
          if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
          if (message.tagExpression != null && message.hasOwnProperty("tagExpression")) object.tagExpression = message.tagExpression;
          if (message.sourceReference != null && message.hasOwnProperty("sourceReference")) object.sourceReference = $root.io.cucumber.messages.SourceReference.toObject(message.sourceReference, options);
          return object;
        };
        Hook.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return Hook;
      }();
      messages.StepDefinition = function () {
        function StepDefinition(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        StepDefinition.prototype.id = "";
        StepDefinition.prototype.pattern = null;
        StepDefinition.prototype.sourceReference = null;
        StepDefinition.create = function create(properties) {
          return new StepDefinition(properties);
        };
        StepDefinition.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.id != null && message.hasOwnProperty("id")) writer.uint32(10).string(message.id);
          if (message.pattern != null && message.hasOwnProperty("pattern")) $root.io.cucumber.messages.StepDefinitionPattern.encode(message.pattern, writer.uint32(18).fork()).ldelim();
          if (message.sourceReference != null && message.hasOwnProperty("sourceReference")) $root.io.cucumber.messages.SourceReference.encode(message.sourceReference, writer.uint32(26).fork()).ldelim();
          return writer;
        };
        StepDefinition.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        StepDefinition.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.StepDefinition();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.id = reader.string();
                break;
              case 2:
                message.pattern = $root.io.cucumber.messages.StepDefinitionPattern.decode(reader, reader.uint32());
                break;
              case 3:
                message.sourceReference = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        StepDefinition.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        StepDefinition.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.id != null && message.hasOwnProperty("id")) if (!$util.isString(message.id)) return "id: string expected";
          if (message.pattern != null && message.hasOwnProperty("pattern")) {
            var error = $root.io.cucumber.messages.StepDefinitionPattern.verify(message.pattern);
            if (error) return "pattern." + error;
          }
          if (message.sourceReference != null && message.hasOwnProperty("sourceReference")) {
            var error = $root.io.cucumber.messages.SourceReference.verify(message.sourceReference);
            if (error) return "sourceReference." + error;
          }
          return null;
        };
        StepDefinition.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.StepDefinition) return object;
          var message = new $root.io.cucumber.messages.StepDefinition();
          if (object.id != null) message.id = String(object.id);
          if (object.pattern != null) {
            if (typeof object.pattern !== "object") throw TypeError(".io.cucumber.messages.StepDefinition.pattern: object expected");
            message.pattern = $root.io.cucumber.messages.StepDefinitionPattern.fromObject(object.pattern);
          }
          if (object.sourceReference != null) {
            if (typeof object.sourceReference !== "object") throw TypeError(".io.cucumber.messages.StepDefinition.sourceReference: object expected");
            message.sourceReference = $root.io.cucumber.messages.SourceReference.fromObject(object.sourceReference);
          }
          return message;
        };
        StepDefinition.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.id = "";
            object.pattern = null;
            object.sourceReference = null;
          }
          if (message.id != null && message.hasOwnProperty("id")) object.id = message.id;
          if (message.pattern != null && message.hasOwnProperty("pattern")) object.pattern = $root.io.cucumber.messages.StepDefinitionPattern.toObject(message.pattern, options);
          if (message.sourceReference != null && message.hasOwnProperty("sourceReference")) object.sourceReference = $root.io.cucumber.messages.SourceReference.toObject(message.sourceReference, options);
          return object;
        };
        StepDefinition.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return StepDefinition;
      }();
      messages.StepDefinitionPattern = function () {
        function StepDefinitionPattern(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        StepDefinitionPattern.prototype.source = "";
        StepDefinitionPattern.prototype.type = 0;
        StepDefinitionPattern.create = function create(properties) {
          return new StepDefinitionPattern(properties);
        };
        StepDefinitionPattern.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.source != null && message.hasOwnProperty("source")) writer.uint32(10).string(message.source);
          if (message.type != null && message.hasOwnProperty("type")) writer.uint32(16).int32(message.type);
          return writer;
        };
        StepDefinitionPattern.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        StepDefinitionPattern.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.StepDefinitionPattern();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.source = reader.string();
                break;
              case 2:
                message.type = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        StepDefinitionPattern.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        StepDefinitionPattern.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.source != null && message.hasOwnProperty("source")) if (!$util.isString(message.source)) return "source: string expected";
          if (message.type != null && message.hasOwnProperty("type")) switch (message.type) {
            default:
              return "type: enum value expected";
            case 0:
            case 1:
              break;
          }
          return null;
        };
        StepDefinitionPattern.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.StepDefinitionPattern) return object;
          var message = new $root.io.cucumber.messages.StepDefinitionPattern();
          if (object.source != null) message.source = String(object.source);
          switch (object.type) {
            case "CUCUMBER_EXPRESSION":
            case 0:
              message.type = 0;
              break;
            case "REGULAR_EXPRESSION":
            case 1:
              message.type = 1;
              break;
          }
          return message;
        };
        StepDefinitionPattern.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.source = "";
            object.type = options.enums === String ? "CUCUMBER_EXPRESSION" : 0;
          }
          if (message.source != null && message.hasOwnProperty("source")) object.source = message.source;
          if (message.type != null && message.hasOwnProperty("type")) object.type = options.enums === String ? $root.io.cucumber.messages.StepDefinitionPatternType[message.type] : message.type;
          return object;
        };
        StepDefinitionPattern.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return StepDefinitionPattern;
      }();
      messages.StepDefinitionPatternType = function () {
        var valuesById = {},
          values = Object.create(valuesById);
        values[valuesById[0] = "CUCUMBER_EXPRESSION"] = 0;
        values[valuesById[1] = "REGULAR_EXPRESSION"] = 1;
        return values;
      }();
      messages.ParameterType = function () {
        function ParameterType(properties) {
          this.regularExpressions = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        ParameterType.prototype.name = "";
        ParameterType.prototype.regularExpressions = $util.emptyArray;
        ParameterType.prototype.preferForRegularExpressionMatch = false;
        ParameterType.prototype.useForSnippets = false;
        ParameterType.create = function create(properties) {
          return new ParameterType(properties);
        };
        ParameterType.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.name != null && message.hasOwnProperty("name")) writer.uint32(10).string(message.name);
          if (message.regularExpressions != null && message.regularExpressions.length) for (var i = 0; i < message.regularExpressions.length; ++i) writer.uint32(18).string(message.regularExpressions[i]);
          if (message.preferForRegularExpressionMatch != null && message.hasOwnProperty("preferForRegularExpressionMatch")) writer.uint32(24).bool(message.preferForRegularExpressionMatch);
          if (message.useForSnippets != null && message.hasOwnProperty("useForSnippets")) writer.uint32(32).bool(message.useForSnippets);
          return writer;
        };
        ParameterType.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        ParameterType.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.ParameterType();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.name = reader.string();
                break;
              case 2:
                if (!(message.regularExpressions && message.regularExpressions.length)) message.regularExpressions = [];
                message.regularExpressions.push(reader.string());
                break;
              case 3:
                message.preferForRegularExpressionMatch = reader.bool();
                break;
              case 4:
                message.useForSnippets = reader.bool();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        ParameterType.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        ParameterType.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.name != null && message.hasOwnProperty("name")) if (!$util.isString(message.name)) return "name: string expected";
          if (message.regularExpressions != null && message.hasOwnProperty("regularExpressions")) {
            if (!Array.isArray(message.regularExpressions)) return "regularExpressions: array expected";
            for (var i = 0; i < message.regularExpressions.length; ++i) if (!$util.isString(message.regularExpressions[i])) return "regularExpressions: string[] expected";
          }
          if (message.preferForRegularExpressionMatch != null && message.hasOwnProperty("preferForRegularExpressionMatch")) if (typeof message.preferForRegularExpressionMatch !== "boolean") return "preferForRegularExpressionMatch: boolean expected";
          if (message.useForSnippets != null && message.hasOwnProperty("useForSnippets")) if (typeof message.useForSnippets !== "boolean") return "useForSnippets: boolean expected";
          return null;
        };
        ParameterType.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.ParameterType) return object;
          var message = new $root.io.cucumber.messages.ParameterType();
          if (object.name != null) message.name = String(object.name);
          if (object.regularExpressions) {
            if (!Array.isArray(object.regularExpressions)) throw TypeError(".io.cucumber.messages.ParameterType.regularExpressions: array expected");
            message.regularExpressions = [];
            for (var i = 0; i < object.regularExpressions.length; ++i) message.regularExpressions[i] = String(object.regularExpressions[i]);
          }
          if (object.preferForRegularExpressionMatch != null) message.preferForRegularExpressionMatch = Boolean(object.preferForRegularExpressionMatch);
          if (object.useForSnippets != null) message.useForSnippets = Boolean(object.useForSnippets);
          return message;
        };
        ParameterType.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) object.regularExpressions = [];
          if (options.defaults) {
            object.name = "";
            object.preferForRegularExpressionMatch = false;
            object.useForSnippets = false;
          }
          if (message.name != null && message.hasOwnProperty("name")) object.name = message.name;
          if (message.regularExpressions && message.regularExpressions.length) {
            object.regularExpressions = [];
            for (var j = 0; j < message.regularExpressions.length; ++j) object.regularExpressions[j] = message.regularExpressions[j];
          }
          if (message.preferForRegularExpressionMatch != null && message.hasOwnProperty("preferForRegularExpressionMatch")) object.preferForRegularExpressionMatch = message.preferForRegularExpressionMatch;
          if (message.useForSnippets != null && message.hasOwnProperty("useForSnippets")) object.useForSnippets = message.useForSnippets;
          return object;
        };
        ParameterType.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return ParameterType;
      }();
      messages.CommandActionComplete = function () {
        function CommandActionComplete(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        CommandActionComplete.prototype.completedId = "";
        CommandActionComplete.prototype.testResult = null;
        CommandActionComplete.prototype.snippet = "";
        var $oneOfFields;
        Object.defineProperty(CommandActionComplete.prototype, "result", {
          get: $util.oneOfGetter($oneOfFields = ["testResult", "snippet"]),
          set: $util.oneOfSetter($oneOfFields)
        });
        CommandActionComplete.create = function create(properties) {
          return new CommandActionComplete(properties);
        };
        CommandActionComplete.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.completedId != null && message.hasOwnProperty("completedId")) writer.uint32(10).string(message.completedId);
          if (message.testResult != null && message.hasOwnProperty("testResult")) $root.io.cucumber.messages.TestResult.encode(message.testResult, writer.uint32(18).fork()).ldelim();
          if (message.snippet != null && message.hasOwnProperty("snippet")) writer.uint32(26).string(message.snippet);
          return writer;
        };
        CommandActionComplete.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CommandActionComplete.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.CommandActionComplete();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.completedId = reader.string();
                break;
              case 2:
                message.testResult = $root.io.cucumber.messages.TestResult.decode(reader, reader.uint32());
                break;
              case 3:
                message.snippet = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CommandActionComplete.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CommandActionComplete.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          var properties = {};
          if (message.completedId != null && message.hasOwnProperty("completedId")) if (!$util.isString(message.completedId)) return "completedId: string expected";
          if (message.testResult != null && message.hasOwnProperty("testResult")) {
            properties.result = 1;
            {
              var error = $root.io.cucumber.messages.TestResult.verify(message.testResult);
              if (error) return "testResult." + error;
            }
          }
          if (message.snippet != null && message.hasOwnProperty("snippet")) {
            if (properties.result === 1) return "result: multiple values";
            properties.result = 1;
            if (!$util.isString(message.snippet)) return "snippet: string expected";
          }
          return null;
        };
        CommandActionComplete.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.CommandActionComplete) return object;
          var message = new $root.io.cucumber.messages.CommandActionComplete();
          if (object.completedId != null) message.completedId = String(object.completedId);
          if (object.testResult != null) {
            if (typeof object.testResult !== "object") throw TypeError(".io.cucumber.messages.CommandActionComplete.testResult: object expected");
            message.testResult = $root.io.cucumber.messages.TestResult.fromObject(object.testResult);
          }
          if (object.snippet != null) message.snippet = String(object.snippet);
          return message;
        };
        CommandActionComplete.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) object.completedId = "";
          if (message.completedId != null && message.hasOwnProperty("completedId")) object.completedId = message.completedId;
          if (message.testResult != null && message.hasOwnProperty("testResult")) {
            object.testResult = $root.io.cucumber.messages.TestResult.toObject(message.testResult, options);
            if (options.oneofs) object.result = "testResult";
          }
          if (message.snippet != null && message.hasOwnProperty("snippet")) {
            object.snippet = message.snippet;
            if (options.oneofs) object.result = "snippet";
          }
          return object;
        };
        CommandActionComplete.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CommandActionComplete;
      }();
      messages.CommandRunBeforeTestRunHooks = function () {
        function CommandRunBeforeTestRunHooks(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        CommandRunBeforeTestRunHooks.prototype.actionId = "";
        CommandRunBeforeTestRunHooks.create = function create(properties) {
          return new CommandRunBeforeTestRunHooks(properties);
        };
        CommandRunBeforeTestRunHooks.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.actionId != null && message.hasOwnProperty("actionId")) writer.uint32(10).string(message.actionId);
          return writer;
        };
        CommandRunBeforeTestRunHooks.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CommandRunBeforeTestRunHooks.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.CommandRunBeforeTestRunHooks();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.actionId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CommandRunBeforeTestRunHooks.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CommandRunBeforeTestRunHooks.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.actionId != null && message.hasOwnProperty("actionId")) if (!$util.isString(message.actionId)) return "actionId: string expected";
          return null;
        };
        CommandRunBeforeTestRunHooks.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.CommandRunBeforeTestRunHooks) return object;
          var message = new $root.io.cucumber.messages.CommandRunBeforeTestRunHooks();
          if (object.actionId != null) message.actionId = String(object.actionId);
          return message;
        };
        CommandRunBeforeTestRunHooks.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) object.actionId = "";
          if (message.actionId != null && message.hasOwnProperty("actionId")) object.actionId = message.actionId;
          return object;
        };
        CommandRunBeforeTestRunHooks.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CommandRunBeforeTestRunHooks;
      }();
      messages.CommandRunAfterTestRunHooks = function () {
        function CommandRunAfterTestRunHooks(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        CommandRunAfterTestRunHooks.prototype.actionId = "";
        CommandRunAfterTestRunHooks.create = function create(properties) {
          return new CommandRunAfterTestRunHooks(properties);
        };
        CommandRunAfterTestRunHooks.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.actionId != null && message.hasOwnProperty("actionId")) writer.uint32(10).string(message.actionId);
          return writer;
        };
        CommandRunAfterTestRunHooks.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CommandRunAfterTestRunHooks.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.CommandRunAfterTestRunHooks();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.actionId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CommandRunAfterTestRunHooks.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CommandRunAfterTestRunHooks.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.actionId != null && message.hasOwnProperty("actionId")) if (!$util.isString(message.actionId)) return "actionId: string expected";
          return null;
        };
        CommandRunAfterTestRunHooks.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.CommandRunAfterTestRunHooks) return object;
          var message = new $root.io.cucumber.messages.CommandRunAfterTestRunHooks();
          if (object.actionId != null) message.actionId = String(object.actionId);
          return message;
        };
        CommandRunAfterTestRunHooks.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) object.actionId = "";
          if (message.actionId != null && message.hasOwnProperty("actionId")) object.actionId = message.actionId;
          return object;
        };
        CommandRunAfterTestRunHooks.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CommandRunAfterTestRunHooks;
      }();
      messages.CommandInitializeTestCase = function () {
        function CommandInitializeTestCase(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        CommandInitializeTestCase.prototype.actionId = "";
        CommandInitializeTestCase.prototype.pickle = null;
        CommandInitializeTestCase.create = function create(properties) {
          return new CommandInitializeTestCase(properties);
        };
        CommandInitializeTestCase.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.actionId != null && message.hasOwnProperty("actionId")) writer.uint32(10).string(message.actionId);
          if (message.pickle != null && message.hasOwnProperty("pickle")) $root.io.cucumber.messages.Pickle.encode(message.pickle, writer.uint32(18).fork()).ldelim();
          return writer;
        };
        CommandInitializeTestCase.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CommandInitializeTestCase.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.CommandInitializeTestCase();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.actionId = reader.string();
                break;
              case 2:
                message.pickle = $root.io.cucumber.messages.Pickle.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CommandInitializeTestCase.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CommandInitializeTestCase.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.actionId != null && message.hasOwnProperty("actionId")) if (!$util.isString(message.actionId)) return "actionId: string expected";
          if (message.pickle != null && message.hasOwnProperty("pickle")) {
            var error = $root.io.cucumber.messages.Pickle.verify(message.pickle);
            if (error) return "pickle." + error;
          }
          return null;
        };
        CommandInitializeTestCase.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.CommandInitializeTestCase) return object;
          var message = new $root.io.cucumber.messages.CommandInitializeTestCase();
          if (object.actionId != null) message.actionId = String(object.actionId);
          if (object.pickle != null) {
            if (typeof object.pickle !== "object") throw TypeError(".io.cucumber.messages.CommandInitializeTestCase.pickle: object expected");
            message.pickle = $root.io.cucumber.messages.Pickle.fromObject(object.pickle);
          }
          return message;
        };
        CommandInitializeTestCase.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.actionId = "";
            object.pickle = null;
          }
          if (message.actionId != null && message.hasOwnProperty("actionId")) object.actionId = message.actionId;
          if (message.pickle != null && message.hasOwnProperty("pickle")) object.pickle = $root.io.cucumber.messages.Pickle.toObject(message.pickle, options);
          return object;
        };
        CommandInitializeTestCase.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CommandInitializeTestCase;
      }();
      messages.CommandRunBeforeTestCaseHook = function () {
        function CommandRunBeforeTestCaseHook(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        CommandRunBeforeTestCaseHook.prototype.actionId = "";
        CommandRunBeforeTestCaseHook.prototype.hookId = "";
        CommandRunBeforeTestCaseHook.prototype.testCaseId = "";
        CommandRunBeforeTestCaseHook.create = function create(properties) {
          return new CommandRunBeforeTestCaseHook(properties);
        };
        CommandRunBeforeTestCaseHook.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.actionId != null && message.hasOwnProperty("actionId")) writer.uint32(10).string(message.actionId);
          if (message.hookId != null && message.hasOwnProperty("hookId")) writer.uint32(18).string(message.hookId);
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) writer.uint32(26).string(message.testCaseId);
          return writer;
        };
        CommandRunBeforeTestCaseHook.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CommandRunBeforeTestCaseHook.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.CommandRunBeforeTestCaseHook();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.actionId = reader.string();
                break;
              case 2:
                message.hookId = reader.string();
                break;
              case 3:
                message.testCaseId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CommandRunBeforeTestCaseHook.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CommandRunBeforeTestCaseHook.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.actionId != null && message.hasOwnProperty("actionId")) if (!$util.isString(message.actionId)) return "actionId: string expected";
          if (message.hookId != null && message.hasOwnProperty("hookId")) if (!$util.isString(message.hookId)) return "hookId: string expected";
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) if (!$util.isString(message.testCaseId)) return "testCaseId: string expected";
          return null;
        };
        CommandRunBeforeTestCaseHook.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.CommandRunBeforeTestCaseHook) return object;
          var message = new $root.io.cucumber.messages.CommandRunBeforeTestCaseHook();
          if (object.actionId != null) message.actionId = String(object.actionId);
          if (object.hookId != null) message.hookId = String(object.hookId);
          if (object.testCaseId != null) message.testCaseId = String(object.testCaseId);
          return message;
        };
        CommandRunBeforeTestCaseHook.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.actionId = "";
            object.hookId = "";
            object.testCaseId = "";
          }
          if (message.actionId != null && message.hasOwnProperty("actionId")) object.actionId = message.actionId;
          if (message.hookId != null && message.hasOwnProperty("hookId")) object.hookId = message.hookId;
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) object.testCaseId = message.testCaseId;
          return object;
        };
        CommandRunBeforeTestCaseHook.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CommandRunBeforeTestCaseHook;
      }();
      messages.CommandRunAfterTestCaseHook = function () {
        function CommandRunAfterTestCaseHook(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        CommandRunAfterTestCaseHook.prototype.actionId = "";
        CommandRunAfterTestCaseHook.prototype.hookId = "";
        CommandRunAfterTestCaseHook.prototype.testCaseId = "";
        CommandRunAfterTestCaseHook.create = function create(properties) {
          return new CommandRunAfterTestCaseHook(properties);
        };
        CommandRunAfterTestCaseHook.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.actionId != null && message.hasOwnProperty("actionId")) writer.uint32(10).string(message.actionId);
          if (message.hookId != null && message.hasOwnProperty("hookId")) writer.uint32(18).string(message.hookId);
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) writer.uint32(26).string(message.testCaseId);
          return writer;
        };
        CommandRunAfterTestCaseHook.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CommandRunAfterTestCaseHook.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.CommandRunAfterTestCaseHook();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.actionId = reader.string();
                break;
              case 2:
                message.hookId = reader.string();
                break;
              case 3:
                message.testCaseId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CommandRunAfterTestCaseHook.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CommandRunAfterTestCaseHook.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.actionId != null && message.hasOwnProperty("actionId")) if (!$util.isString(message.actionId)) return "actionId: string expected";
          if (message.hookId != null && message.hasOwnProperty("hookId")) if (!$util.isString(message.hookId)) return "hookId: string expected";
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) if (!$util.isString(message.testCaseId)) return "testCaseId: string expected";
          return null;
        };
        CommandRunAfterTestCaseHook.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.CommandRunAfterTestCaseHook) return object;
          var message = new $root.io.cucumber.messages.CommandRunAfterTestCaseHook();
          if (object.actionId != null) message.actionId = String(object.actionId);
          if (object.hookId != null) message.hookId = String(object.hookId);
          if (object.testCaseId != null) message.testCaseId = String(object.testCaseId);
          return message;
        };
        CommandRunAfterTestCaseHook.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.actionId = "";
            object.hookId = "";
            object.testCaseId = "";
          }
          if (message.actionId != null && message.hasOwnProperty("actionId")) object.actionId = message.actionId;
          if (message.hookId != null && message.hasOwnProperty("hookId")) object.hookId = message.hookId;
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) object.testCaseId = message.testCaseId;
          return object;
        };
        CommandRunAfterTestCaseHook.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CommandRunAfterTestCaseHook;
      }();
      messages.CommandRunTestStep = function () {
        function CommandRunTestStep(properties) {
          this.stepMatchArguments = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        CommandRunTestStep.prototype.actionId = "";
        CommandRunTestStep.prototype.stepDefinitionId = "";
        CommandRunTestStep.prototype.stepMatchArguments = $util.emptyArray;
        CommandRunTestStep.prototype.pickleStepArgument = null;
        CommandRunTestStep.prototype.testCaseId = "";
        CommandRunTestStep.create = function create(properties) {
          return new CommandRunTestStep(properties);
        };
        CommandRunTestStep.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.actionId != null && message.hasOwnProperty("actionId")) writer.uint32(10).string(message.actionId);
          if (message.stepDefinitionId != null && message.hasOwnProperty("stepDefinitionId")) writer.uint32(18).string(message.stepDefinitionId);
          if (message.stepMatchArguments != null && message.stepMatchArguments.length) for (var i = 0; i < message.stepMatchArguments.length; ++i) $root.io.cucumber.messages.StepMatchArgument.encode(message.stepMatchArguments[i], writer.uint32(26).fork()).ldelim();
          if (message.pickleStepArgument != null && message.hasOwnProperty("pickleStepArgument")) $root.io.cucumber.messages.PickleStepArgument.encode(message.pickleStepArgument, writer.uint32(34).fork()).ldelim();
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) writer.uint32(42).string(message.testCaseId);
          return writer;
        };
        CommandRunTestStep.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CommandRunTestStep.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.CommandRunTestStep();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.actionId = reader.string();
                break;
              case 2:
                message.stepDefinitionId = reader.string();
                break;
              case 3:
                if (!(message.stepMatchArguments && message.stepMatchArguments.length)) message.stepMatchArguments = [];
                message.stepMatchArguments.push($root.io.cucumber.messages.StepMatchArgument.decode(reader, reader.uint32()));
                break;
              case 4:
                message.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.decode(reader, reader.uint32());
                break;
              case 5:
                message.testCaseId = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CommandRunTestStep.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CommandRunTestStep.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.actionId != null && message.hasOwnProperty("actionId")) if (!$util.isString(message.actionId)) return "actionId: string expected";
          if (message.stepDefinitionId != null && message.hasOwnProperty("stepDefinitionId")) if (!$util.isString(message.stepDefinitionId)) return "stepDefinitionId: string expected";
          if (message.stepMatchArguments != null && message.hasOwnProperty("stepMatchArguments")) {
            if (!Array.isArray(message.stepMatchArguments)) return "stepMatchArguments: array expected";
            for (var i = 0; i < message.stepMatchArguments.length; ++i) {
              var error = $root.io.cucumber.messages.StepMatchArgument.verify(message.stepMatchArguments[i]);
              if (error) return "stepMatchArguments." + error;
            }
          }
          if (message.pickleStepArgument != null && message.hasOwnProperty("pickleStepArgument")) {
            var error = $root.io.cucumber.messages.PickleStepArgument.verify(message.pickleStepArgument);
            if (error) return "pickleStepArgument." + error;
          }
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) if (!$util.isString(message.testCaseId)) return "testCaseId: string expected";
          return null;
        };
        CommandRunTestStep.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.CommandRunTestStep) return object;
          var message = new $root.io.cucumber.messages.CommandRunTestStep();
          if (object.actionId != null) message.actionId = String(object.actionId);
          if (object.stepDefinitionId != null) message.stepDefinitionId = String(object.stepDefinitionId);
          if (object.stepMatchArguments) {
            if (!Array.isArray(object.stepMatchArguments)) throw TypeError(".io.cucumber.messages.CommandRunTestStep.stepMatchArguments: array expected");
            message.stepMatchArguments = [];
            for (var i = 0; i < object.stepMatchArguments.length; ++i) {
              if (typeof object.stepMatchArguments[i] !== "object") throw TypeError(".io.cucumber.messages.CommandRunTestStep.stepMatchArguments: object expected");
              message.stepMatchArguments[i] = $root.io.cucumber.messages.StepMatchArgument.fromObject(object.stepMatchArguments[i]);
            }
          }
          if (object.pickleStepArgument != null) {
            if (typeof object.pickleStepArgument !== "object") throw TypeError(".io.cucumber.messages.CommandRunTestStep.pickleStepArgument: object expected");
            message.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.fromObject(object.pickleStepArgument);
          }
          if (object.testCaseId != null) message.testCaseId = String(object.testCaseId);
          return message;
        };
        CommandRunTestStep.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) object.stepMatchArguments = [];
          if (options.defaults) {
            object.actionId = "";
            object.stepDefinitionId = "";
            object.pickleStepArgument = null;
            object.testCaseId = "";
          }
          if (message.actionId != null && message.hasOwnProperty("actionId")) object.actionId = message.actionId;
          if (message.stepDefinitionId != null && message.hasOwnProperty("stepDefinitionId")) object.stepDefinitionId = message.stepDefinitionId;
          if (message.stepMatchArguments && message.stepMatchArguments.length) {
            object.stepMatchArguments = [];
            for (var j = 0; j < message.stepMatchArguments.length; ++j) object.stepMatchArguments[j] = $root.io.cucumber.messages.StepMatchArgument.toObject(message.stepMatchArguments[j], options);
          }
          if (message.pickleStepArgument != null && message.hasOwnProperty("pickleStepArgument")) object.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.toObject(message.pickleStepArgument, options);
          if (message.testCaseId != null && message.hasOwnProperty("testCaseId")) object.testCaseId = message.testCaseId;
          return object;
        };
        CommandRunTestStep.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CommandRunTestStep;
      }();
      messages.StepMatchArgument = function () {
        function StepMatchArgument(properties) {
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        StepMatchArgument.prototype.parameterTypeName = "";
        StepMatchArgument.prototype.group = null;
        StepMatchArgument.create = function create(properties) {
          return new StepMatchArgument(properties);
        };
        StepMatchArgument.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.parameterTypeName != null && message.hasOwnProperty("parameterTypeName")) writer.uint32(10).string(message.parameterTypeName);
          if (message.group != null && message.hasOwnProperty("group")) $root.io.cucumber.messages.StepMatchArgument.Group.encode(message.group, writer.uint32(18).fork()).ldelim();
          return writer;
        };
        StepMatchArgument.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        StepMatchArgument.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.StepMatchArgument();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.parameterTypeName = reader.string();
                break;
              case 2:
                message.group = $root.io.cucumber.messages.StepMatchArgument.Group.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        StepMatchArgument.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        StepMatchArgument.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.parameterTypeName != null && message.hasOwnProperty("parameterTypeName")) if (!$util.isString(message.parameterTypeName)) return "parameterTypeName: string expected";
          if (message.group != null && message.hasOwnProperty("group")) {
            var error = $root.io.cucumber.messages.StepMatchArgument.Group.verify(message.group);
            if (error) return "group." + error;
          }
          return null;
        };
        StepMatchArgument.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.StepMatchArgument) return object;
          var message = new $root.io.cucumber.messages.StepMatchArgument();
          if (object.parameterTypeName != null) message.parameterTypeName = String(object.parameterTypeName);
          if (object.group != null) {
            if (typeof object.group !== "object") throw TypeError(".io.cucumber.messages.StepMatchArgument.group: object expected");
            message.group = $root.io.cucumber.messages.StepMatchArgument.Group.fromObject(object.group);
          }
          return message;
        };
        StepMatchArgument.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.defaults) {
            object.parameterTypeName = "";
            object.group = null;
          }
          if (message.parameterTypeName != null && message.hasOwnProperty("parameterTypeName")) object.parameterTypeName = message.parameterTypeName;
          if (message.group != null && message.hasOwnProperty("group")) object.group = $root.io.cucumber.messages.StepMatchArgument.Group.toObject(message.group, options);
          return object;
        };
        StepMatchArgument.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        StepMatchArgument.Group = function () {
          function Group(properties) {
            this.children = [];
            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
          }
          Group.prototype.start = 0;
          Group.prototype.value = "";
          Group.prototype.children = $util.emptyArray;
          Group.create = function create(properties) {
            return new Group(properties);
          };
          Group.encode = function encode(message, writer) {
            if (!writer) writer = $Writer.create();
            if (message.start != null && message.hasOwnProperty("start")) writer.uint32(8).uint32(message.start);
            if (message.value != null && message.hasOwnProperty("value")) writer.uint32(18).string(message.value);
            if (message.children != null && message.children.length) for (var i = 0; i < message.children.length; ++i) $root.io.cucumber.messages.StepMatchArgument.Group.encode(message.children[i], writer.uint32(26).fork()).ldelim();
            return writer;
          };
          Group.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Group.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length,
              message = new $root.io.cucumber.messages.StepMatchArgument.Group();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1:
                  message.start = reader.uint32();
                  break;
                case 2:
                  message.value = reader.string();
                  break;
                case 3:
                  if (!(message.children && message.children.length)) message.children = [];
                  message.children.push($root.io.cucumber.messages.StepMatchArgument.Group.decode(reader, reader.uint32()));
                  break;
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Group.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader)) reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Group.verify = function verify(message) {
            if (typeof message !== "object" || message === null) return "object expected";
            if (message.start != null && message.hasOwnProperty("start")) if (!$util.isInteger(message.start)) return "start: integer expected";
            if (message.value != null && message.hasOwnProperty("value")) if (!$util.isString(message.value)) return "value: string expected";
            if (message.children != null && message.hasOwnProperty("children")) {
              if (!Array.isArray(message.children)) return "children: array expected";
              for (var i = 0; i < message.children.length; ++i) {
                var error = $root.io.cucumber.messages.StepMatchArgument.Group.verify(message.children[i]);
                if (error) return "children." + error;
              }
            }
            return null;
          };
          Group.fromObject = function fromObject(object) {
            if (object instanceof $root.io.cucumber.messages.StepMatchArgument.Group) return object;
            var message = new $root.io.cucumber.messages.StepMatchArgument.Group();
            if (object.start != null) message.start = object.start >>> 0;
            if (object.value != null) message.value = String(object.value);
            if (object.children) {
              if (!Array.isArray(object.children)) throw TypeError(".io.cucumber.messages.StepMatchArgument.Group.children: array expected");
              message.children = [];
              for (var i = 0; i < object.children.length; ++i) {
                if (typeof object.children[i] !== "object") throw TypeError(".io.cucumber.messages.StepMatchArgument.Group.children: object expected");
                message.children[i] = $root.io.cucumber.messages.StepMatchArgument.Group.fromObject(object.children[i]);
              }
            }
            return message;
          };
          Group.toObject = function toObject(message, options) {
            if (!options) options = {};
            var object = {};
            if (options.arrays || options.defaults) object.children = [];
            if (options.defaults) {
              object.start = 0;
              object.value = "";
            }
            if (message.start != null && message.hasOwnProperty("start")) object.start = message.start;
            if (message.value != null && message.hasOwnProperty("value")) object.value = message.value;
            if (message.children && message.children.length) {
              object.children = [];
              for (var j = 0; j < message.children.length; ++j) object.children[j] = $root.io.cucumber.messages.StepMatchArgument.Group.toObject(message.children[j], options);
            }
            return object;
          };
          Group.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          return Group;
        }();
        return StepMatchArgument;
      }();
      messages.CommandGenerateSnippet = function () {
        function CommandGenerateSnippet(properties) {
          this.generatedExpressions = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        CommandGenerateSnippet.prototype.actionId = "";
        CommandGenerateSnippet.prototype.generatedExpressions = $util.emptyArray;
        CommandGenerateSnippet.prototype.pickleStepArgument = null;
        CommandGenerateSnippet.create = function create(properties) {
          return new CommandGenerateSnippet(properties);
        };
        CommandGenerateSnippet.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.actionId != null && message.hasOwnProperty("actionId")) writer.uint32(10).string(message.actionId);
          if (message.generatedExpressions != null && message.generatedExpressions.length) for (var i = 0; i < message.generatedExpressions.length; ++i) $root.io.cucumber.messages.GeneratedExpression.encode(message.generatedExpressions[i], writer.uint32(18).fork()).ldelim();
          if (message.pickleStepArgument != null && message.hasOwnProperty("pickleStepArgument")) $root.io.cucumber.messages.PickleStepArgument.encode(message.pickleStepArgument, writer.uint32(26).fork()).ldelim();
          return writer;
        };
        CommandGenerateSnippet.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        CommandGenerateSnippet.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.CommandGenerateSnippet();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.actionId = reader.string();
                break;
              case 2:
                if (!(message.generatedExpressions && message.generatedExpressions.length)) message.generatedExpressions = [];
                message.generatedExpressions.push($root.io.cucumber.messages.GeneratedExpression.decode(reader, reader.uint32()));
                break;
              case 3:
                message.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.decode(reader, reader.uint32());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        CommandGenerateSnippet.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        CommandGenerateSnippet.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.actionId != null && message.hasOwnProperty("actionId")) if (!$util.isString(message.actionId)) return "actionId: string expected";
          if (message.generatedExpressions != null && message.hasOwnProperty("generatedExpressions")) {
            if (!Array.isArray(message.generatedExpressions)) return "generatedExpressions: array expected";
            for (var i = 0; i < message.generatedExpressions.length; ++i) {
              var error = $root.io.cucumber.messages.GeneratedExpression.verify(message.generatedExpressions[i]);
              if (error) return "generatedExpressions." + error;
            }
          }
          if (message.pickleStepArgument != null && message.hasOwnProperty("pickleStepArgument")) {
            var error = $root.io.cucumber.messages.PickleStepArgument.verify(message.pickleStepArgument);
            if (error) return "pickleStepArgument." + error;
          }
          return null;
        };
        CommandGenerateSnippet.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.CommandGenerateSnippet) return object;
          var message = new $root.io.cucumber.messages.CommandGenerateSnippet();
          if (object.actionId != null) message.actionId = String(object.actionId);
          if (object.generatedExpressions) {
            if (!Array.isArray(object.generatedExpressions)) throw TypeError(".io.cucumber.messages.CommandGenerateSnippet.generatedExpressions: array expected");
            message.generatedExpressions = [];
            for (var i = 0; i < object.generatedExpressions.length; ++i) {
              if (typeof object.generatedExpressions[i] !== "object") throw TypeError(".io.cucumber.messages.CommandGenerateSnippet.generatedExpressions: object expected");
              message.generatedExpressions[i] = $root.io.cucumber.messages.GeneratedExpression.fromObject(object.generatedExpressions[i]);
            }
          }
          if (object.pickleStepArgument != null) {
            if (typeof object.pickleStepArgument !== "object") throw TypeError(".io.cucumber.messages.CommandGenerateSnippet.pickleStepArgument: object expected");
            message.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.fromObject(object.pickleStepArgument);
          }
          return message;
        };
        CommandGenerateSnippet.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) object.generatedExpressions = [];
          if (options.defaults) {
            object.actionId = "";
            object.pickleStepArgument = null;
          }
          if (message.actionId != null && message.hasOwnProperty("actionId")) object.actionId = message.actionId;
          if (message.generatedExpressions && message.generatedExpressions.length) {
            object.generatedExpressions = [];
            for (var j = 0; j < message.generatedExpressions.length; ++j) object.generatedExpressions[j] = $root.io.cucumber.messages.GeneratedExpression.toObject(message.generatedExpressions[j], options);
          }
          if (message.pickleStepArgument != null && message.hasOwnProperty("pickleStepArgument")) object.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.toObject(message.pickleStepArgument, options);
          return object;
        };
        CommandGenerateSnippet.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return CommandGenerateSnippet;
      }();
      messages.GeneratedExpression = function () {
        function GeneratedExpression(properties) {
          this.parameterTypeNames = [];
          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];
        }
        GeneratedExpression.prototype.text = "";
        GeneratedExpression.prototype.parameterTypeNames = $util.emptyArray;
        GeneratedExpression.create = function create(properties) {
          return new GeneratedExpression(properties);
        };
        GeneratedExpression.encode = function encode(message, writer) {
          if (!writer) writer = $Writer.create();
          if (message.text != null && message.hasOwnProperty("text")) writer.uint32(10).string(message.text);
          if (message.parameterTypeNames != null && message.parameterTypeNames.length) for (var i = 0; i < message.parameterTypeNames.length; ++i) writer.uint32(18).string(message.parameterTypeNames[i]);
          return writer;
        };
        GeneratedExpression.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        GeneratedExpression.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);
          var end = length === undefined ? reader.len : reader.pos + length,
            message = new $root.io.cucumber.messages.GeneratedExpression();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.text = reader.string();
                break;
              case 2:
                if (!(message.parameterTypeNames && message.parameterTypeNames.length)) message.parameterTypeNames = [];
                message.parameterTypeNames.push(reader.string());
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        GeneratedExpression.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader)) reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        GeneratedExpression.verify = function verify(message) {
          if (typeof message !== "object" || message === null) return "object expected";
          if (message.text != null && message.hasOwnProperty("text")) if (!$util.isString(message.text)) return "text: string expected";
          if (message.parameterTypeNames != null && message.hasOwnProperty("parameterTypeNames")) {
            if (!Array.isArray(message.parameterTypeNames)) return "parameterTypeNames: array expected";
            for (var i = 0; i < message.parameterTypeNames.length; ++i) if (!$util.isString(message.parameterTypeNames[i])) return "parameterTypeNames: string[] expected";
          }
          return null;
        };
        GeneratedExpression.fromObject = function fromObject(object) {
          if (object instanceof $root.io.cucumber.messages.GeneratedExpression) return object;
          var message = new $root.io.cucumber.messages.GeneratedExpression();
          if (object.text != null) message.text = String(object.text);
          if (object.parameterTypeNames) {
            if (!Array.isArray(object.parameterTypeNames)) throw TypeError(".io.cucumber.messages.GeneratedExpression.parameterTypeNames: array expected");
            message.parameterTypeNames = [];
            for (var i = 0; i < object.parameterTypeNames.length; ++i) message.parameterTypeNames[i] = String(object.parameterTypeNames[i]);
          }
          return message;
        };
        GeneratedExpression.toObject = function toObject(message, options) {
          if (!options) options = {};
          var object = {};
          if (options.arrays || options.defaults) object.parameterTypeNames = [];
          if (options.defaults) object.text = "";
          if (message.text != null && message.hasOwnProperty("text")) object.text = message.text;
          if (message.parameterTypeNames && message.parameterTypeNames.length) {
            object.parameterTypeNames = [];
            for (var j = 0; j < message.parameterTypeNames.length; ++j) object.parameterTypeNames[j] = message.parameterTypeNames[j];
          }
          return object;
        };
        GeneratedExpression.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return GeneratedExpression;
      }();
      return messages;
    }();
    return cucumber;
  }();
  return io;
}();
module.exports = $root;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,