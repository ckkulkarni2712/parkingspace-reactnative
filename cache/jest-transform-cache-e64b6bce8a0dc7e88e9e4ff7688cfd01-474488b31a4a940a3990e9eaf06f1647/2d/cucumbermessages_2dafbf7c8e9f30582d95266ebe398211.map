{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","io","cucumber","messages","Timestamp","properties","keys","Object","i","length","prototype","seconds","Long","fromBits","nanos","create","encode","message","writer","hasOwnProperty","uint32","int64","int32","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","low","high","fromObject","object","fromValue","unsigned","parseInt","LongBits","toNumber","toObject","options","defaults","long","longs","String","toString","Number","call","toJSON","constructor","toJSONOptions","Duration","Envelope","source","gherkinDocument","pickle","attachment","testCaseStarted","testStepStarted","testStepFinished","testCaseFinished","pickleAccepted","pickleRejected","testCasePrepared","testRunStarted","testRunFinished","commandStart","commandActionComplete","commandRunBeforeTestRunHooks","commandInitializeTestCase","commandRunBeforeTestCaseHook","commandRunTestStep","commandRunAfterTestCaseHook","commandRunAfterTestRunHooks","commandGenerateSnippet","commandError","testCase","stepDefinition","hook","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","Source","fork","GherkinDocument","Pickle","Attachment","TestCaseStarted","TestStepStarted","TestStepFinished","TestCaseFinished","PickleAccepted","PickleRejected","TestCasePrepared","TestRunStarted","TestRunFinished","CommandStart","CommandActionComplete","CommandRunBeforeTestRunHooks","CommandInitializeTestCase","CommandRunBeforeTestCaseHook","CommandRunTestStep","CommandRunAfterTestCaseHook","CommandRunAfterTestRunHooks","CommandGenerateSnippet","string","TestCase","StepDefinition","Hook","error","isString","TypeError","oneofs","Location","line","column","SourceReference","uri","location","Media","encoding","contentType","enums","Encoding","valuesById","values","data","media","comments","feature","emptyArray","Feature","Comment","push","Array","isArray","arrays","j","text","tags","children","language","keyword","name","description","Tag","FeatureChild","id","rule","background","scenario","Rule","Background","Scenario","value","RuleChild","steps","Step","examples","Examples","tableBody","tableHeader","TableRow","cells","TableCell","docString","dataTable","DocString","DataTable","argument","rows","content","delimiter","testStepId","testCaseStartedId","astNodeIds","PickleStep","PickleTag","astNodeId","PickleStepArgument","PickleDocString","PickleTable","PickleTableRow","PickleTableCell","testSteps","pickleId","TestStep","stepDefinitionIds","stepMatchArguments","pickleStepId","hookId","StepMatchArgument","timestamp","TestCasePreparedStep","sourceLocation","actionLocation","platform","attempt","testCaseId","Platform","implementation","version","os","cpu","testResult","TestResult","status","duration","willBeRetried","bool","Boolean","Status","success","baseDirectory","sourcesConfig","runtimeConfig","supportCodeConfig","SourcesConfig","RuntimeConfig","SupportCodeConfig","absolutePaths","filters","order","SourcesFilterConfig","SourcesOrder","nameRegularExpressions","uriToLinesMapping","tagExpression","UriToLinesMapping","lines","absolutePath","uint64","end2","type","seed","SourcesOrderType","isFailFast","isDryRun","isStrict","maxParallel","beforeTestCaseHooks","afterTestCaseHooks","stepDefinitions","parameterTypes","ParameterType","sourceReference","pattern","StepDefinitionPattern","StepDefinitionPatternType","regularExpressions","preferForRegularExpressionMatch","useForSnippets","completedId","snippet","result","actionId","stepDefinitionId","pickleStepArgument","parameterTypeName","group","Group","start","generatedExpressions","GeneratedExpression","parameterTypeNames","module","exports"],"sources":["cucumber-messages.js"],"sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.io = (function() {\n\n    /**\n     * Namespace io.\n     * @exports io\n     * @namespace\n     */\n    var io = {};\n\n    io.cucumber = (function() {\n\n        /**\n         * Namespace cucumber.\n         * @memberof io\n         * @namespace\n         */\n        var cucumber = {};\n\n        cucumber.messages = (function() {\n\n            /**\n             * Namespace messages.\n             * @memberof io.cucumber\n             * @namespace\n             */\n            var messages = {};\n\n            messages.Timestamp = (function() {\n\n                /**\n                 * Properties of a Timestamp.\n                 * @memberof io.cucumber.messages\n                 * @interface ITimestamp\n                 * @property {number|Long|null} [seconds] Timestamp seconds\n                 * @property {number|null} [nanos] Timestamp nanos\n                 */\n\n                /**\n                 * Constructs a new Timestamp.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a Timestamp.\n                 * @implements ITimestamp\n                 * @constructor\n                 * @param {io.cucumber.messages.ITimestamp=} [properties] Properties to set\n                 */\n                function Timestamp(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Timestamp seconds.\n                 * @member {number|Long} seconds\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @instance\n                 */\n                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Timestamp nanos.\n                 * @member {number} nanos\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @instance\n                 */\n                Timestamp.prototype.nanos = 0;\n\n                /**\n                 * Creates a new Timestamp instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @static\n                 * @param {io.cucumber.messages.ITimestamp=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.Timestamp} Timestamp instance\n                 */\n                Timestamp.create = function create(properties) {\n                    return new Timestamp(properties);\n                };\n\n                /**\n                 * Encodes the specified Timestamp message. Does not implicitly {@link io.cucumber.messages.Timestamp.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @static\n                 * @param {io.cucumber.messages.ITimestamp} message Timestamp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Timestamp.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                    if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link io.cucumber.messages.Timestamp.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @static\n                 * @param {io.cucumber.messages.ITimestamp} message Timestamp message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Timestamp message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.Timestamp} Timestamp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Timestamp.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Timestamp();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.seconds = reader.int64();\n                            break;\n                        case 2:\n                            message.nanos = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.Timestamp} Timestamp\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Timestamp.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Timestamp message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Timestamp.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                            return \"seconds: integer|Long expected\";\n                    if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                        if (!$util.isInteger(message.nanos))\n                            return \"nanos: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.Timestamp} Timestamp\n                 */\n                Timestamp.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.Timestamp)\n                        return object;\n                    var message = new $root.io.cucumber.messages.Timestamp();\n                    if (object.seconds != null)\n                        if ($util.Long)\n                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;\n                        else if (typeof object.seconds === \"string\")\n                            message.seconds = parseInt(object.seconds, 10);\n                        else if (typeof object.seconds === \"number\")\n                            message.seconds = object.seconds;\n                        else if (typeof object.seconds === \"object\")\n                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n                    if (object.nanos != null)\n                        message.nanos = object.nanos | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @static\n                 * @param {io.cucumber.messages.Timestamp} message Timestamp\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Timestamp.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.seconds = options.longs === String ? \"0\" : 0;\n                        object.nanos = 0;\n                    }\n                    if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                        if (typeof message.seconds === \"number\")\n                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                        else\n                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                    if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                        object.nanos = message.nanos;\n                    return object;\n                };\n\n                /**\n                 * Converts this Timestamp to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.Timestamp\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Timestamp.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Timestamp;\n            })();\n\n            messages.Duration = (function() {\n\n                /**\n                 * Properties of a Duration.\n                 * @memberof io.cucumber.messages\n                 * @interface IDuration\n                 * @property {number|Long|null} [seconds] Duration seconds\n                 * @property {number|null} [nanos] Duration nanos\n                 */\n\n                /**\n                 * Constructs a new Duration.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a Duration.\n                 * @implements IDuration\n                 * @constructor\n                 * @param {io.cucumber.messages.IDuration=} [properties] Properties to set\n                 */\n                function Duration(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Duration seconds.\n                 * @member {number|Long} seconds\n                 * @memberof io.cucumber.messages.Duration\n                 * @instance\n                 */\n                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Duration nanos.\n                 * @member {number} nanos\n                 * @memberof io.cucumber.messages.Duration\n                 * @instance\n                 */\n                Duration.prototype.nanos = 0;\n\n                /**\n                 * Creates a new Duration instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.Duration\n                 * @static\n                 * @param {io.cucumber.messages.IDuration=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.Duration} Duration instance\n                 */\n                Duration.create = function create(properties) {\n                    return new Duration(properties);\n                };\n\n                /**\n                 * Encodes the specified Duration message. Does not implicitly {@link io.cucumber.messages.Duration.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.Duration\n                 * @static\n                 * @param {io.cucumber.messages.IDuration} message Duration message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Duration.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                    if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link io.cucumber.messages.Duration.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.Duration\n                 * @static\n                 * @param {io.cucumber.messages.IDuration} message Duration message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Duration.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Duration message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.Duration\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.Duration} Duration\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Duration.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Duration();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.seconds = reader.int64();\n                            break;\n                        case 2:\n                            message.nanos = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Duration message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.Duration\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.Duration} Duration\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Duration.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Duration message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.Duration\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Duration.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                            return \"seconds: integer|Long expected\";\n                    if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                        if (!$util.isInteger(message.nanos))\n                            return \"nanos: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.Duration\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.Duration} Duration\n                 */\n                Duration.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.Duration)\n                        return object;\n                    var message = new $root.io.cucumber.messages.Duration();\n                    if (object.seconds != null)\n                        if ($util.Long)\n                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;\n                        else if (typeof object.seconds === \"string\")\n                            message.seconds = parseInt(object.seconds, 10);\n                        else if (typeof object.seconds === \"number\")\n                            message.seconds = object.seconds;\n                        else if (typeof object.seconds === \"object\")\n                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n                    if (object.nanos != null)\n                        message.nanos = object.nanos | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Duration message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.Duration\n                 * @static\n                 * @param {io.cucumber.messages.Duration} message Duration\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Duration.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.seconds = options.longs === String ? \"0\" : 0;\n                        object.nanos = 0;\n                    }\n                    if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                        if (typeof message.seconds === \"number\")\n                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                        else\n                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                    if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                        object.nanos = message.nanos;\n                    return object;\n                };\n\n                /**\n                 * Converts this Duration to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.Duration\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Duration.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Duration;\n            })();\n\n            messages.Envelope = (function() {\n\n                /**\n                 * Properties of an Envelope.\n                 * @memberof io.cucumber.messages\n                 * @interface IEnvelope\n                 * @property {io.cucumber.messages.ISource|null} [source] Envelope source\n                 * @property {io.cucumber.messages.IGherkinDocument|null} [gherkinDocument] Envelope gherkinDocument\n                 * @property {io.cucumber.messages.IPickle|null} [pickle] Envelope pickle\n                 * @property {io.cucumber.messages.IAttachment|null} [attachment] Envelope attachment\n                 * @property {io.cucumber.messages.ITestCaseStarted|null} [testCaseStarted] Envelope testCaseStarted\n                 * @property {io.cucumber.messages.ITestStepStarted|null} [testStepStarted] Envelope testStepStarted\n                 * @property {io.cucumber.messages.ITestStepFinished|null} [testStepFinished] Envelope testStepFinished\n                 * @property {io.cucumber.messages.ITestCaseFinished|null} [testCaseFinished] Envelope testCaseFinished\n                 * @property {io.cucumber.messages.IPickleAccepted|null} [pickleAccepted] Envelope pickleAccepted\n                 * @property {io.cucumber.messages.IPickleRejected|null} [pickleRejected] Envelope pickleRejected\n                 * @property {io.cucumber.messages.ITestCasePrepared|null} [testCasePrepared] Envelope testCasePrepared\n                 * @property {io.cucumber.messages.ITestRunStarted|null} [testRunStarted] Envelope testRunStarted\n                 * @property {io.cucumber.messages.ITestRunFinished|null} [testRunFinished] Envelope testRunFinished\n                 * @property {io.cucumber.messages.ICommandStart|null} [commandStart] Envelope commandStart\n                 * @property {io.cucumber.messages.ICommandActionComplete|null} [commandActionComplete] Envelope commandActionComplete\n                 * @property {io.cucumber.messages.ICommandRunBeforeTestRunHooks|null} [commandRunBeforeTestRunHooks] Envelope commandRunBeforeTestRunHooks\n                 * @property {io.cucumber.messages.ICommandInitializeTestCase|null} [commandInitializeTestCase] Envelope commandInitializeTestCase\n                 * @property {io.cucumber.messages.ICommandRunBeforeTestCaseHook|null} [commandRunBeforeTestCaseHook] Envelope commandRunBeforeTestCaseHook\n                 * @property {io.cucumber.messages.ICommandRunTestStep|null} [commandRunTestStep] Envelope commandRunTestStep\n                 * @property {io.cucumber.messages.ICommandRunAfterTestCaseHook|null} [commandRunAfterTestCaseHook] Envelope commandRunAfterTestCaseHook\n                 * @property {io.cucumber.messages.ICommandRunAfterTestRunHooks|null} [commandRunAfterTestRunHooks] Envelope commandRunAfterTestRunHooks\n                 * @property {io.cucumber.messages.ICommandGenerateSnippet|null} [commandGenerateSnippet] Envelope commandGenerateSnippet\n                 * @property {string|null} [commandError] Envelope commandError\n                 * @property {io.cucumber.messages.ITestCase|null} [testCase] Envelope testCase\n                 * @property {io.cucumber.messages.IStepDefinition|null} [stepDefinition] Envelope stepDefinition\n                 * @property {io.cucumber.messages.IHook|null} [hook] Envelope hook\n                 */\n\n                /**\n                 * Constructs a new Envelope.\n                 * @memberof io.cucumber.messages\n                 * @classdesc All the messages that are passed between different components/processes are Envelope\n                 * messages.\n                 * @implements IEnvelope\n                 * @constructor\n                 * @param {io.cucumber.messages.IEnvelope=} [properties] Properties to set\n                 */\n                function Envelope(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Envelope source.\n                 * @member {io.cucumber.messages.ISource|null|undefined} source\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.source = null;\n\n                /**\n                 * Envelope gherkinDocument.\n                 * @member {io.cucumber.messages.IGherkinDocument|null|undefined} gherkinDocument\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.gherkinDocument = null;\n\n                /**\n                 * Envelope pickle.\n                 * @member {io.cucumber.messages.IPickle|null|undefined} pickle\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.pickle = null;\n\n                /**\n                 * Envelope attachment.\n                 * @member {io.cucumber.messages.IAttachment|null|undefined} attachment\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.attachment = null;\n\n                /**\n                 * Envelope testCaseStarted.\n                 * @member {io.cucumber.messages.ITestCaseStarted|null|undefined} testCaseStarted\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.testCaseStarted = null;\n\n                /**\n                 * Envelope testStepStarted.\n                 * @member {io.cucumber.messages.ITestStepStarted|null|undefined} testStepStarted\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.testStepStarted = null;\n\n                /**\n                 * Envelope testStepFinished.\n                 * @member {io.cucumber.messages.ITestStepFinished|null|undefined} testStepFinished\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.testStepFinished = null;\n\n                /**\n                 * Envelope testCaseFinished.\n                 * @member {io.cucumber.messages.ITestCaseFinished|null|undefined} testCaseFinished\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.testCaseFinished = null;\n\n                /**\n                 * Envelope pickleAccepted.\n                 * @member {io.cucumber.messages.IPickleAccepted|null|undefined} pickleAccepted\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.pickleAccepted = null;\n\n                /**\n                 * Envelope pickleRejected.\n                 * @member {io.cucumber.messages.IPickleRejected|null|undefined} pickleRejected\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.pickleRejected = null;\n\n                /**\n                 * Envelope testCasePrepared.\n                 * @member {io.cucumber.messages.ITestCasePrepared|null|undefined} testCasePrepared\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.testCasePrepared = null;\n\n                /**\n                 * Envelope testRunStarted.\n                 * @member {io.cucumber.messages.ITestRunStarted|null|undefined} testRunStarted\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.testRunStarted = null;\n\n                /**\n                 * Envelope testRunFinished.\n                 * @member {io.cucumber.messages.ITestRunFinished|null|undefined} testRunFinished\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.testRunFinished = null;\n\n                /**\n                 * Envelope commandStart.\n                 * @member {io.cucumber.messages.ICommandStart|null|undefined} commandStart\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandStart = null;\n\n                /**\n                 * Envelope commandActionComplete.\n                 * @member {io.cucumber.messages.ICommandActionComplete|null|undefined} commandActionComplete\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandActionComplete = null;\n\n                /**\n                 * Envelope commandRunBeforeTestRunHooks.\n                 * @member {io.cucumber.messages.ICommandRunBeforeTestRunHooks|null|undefined} commandRunBeforeTestRunHooks\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandRunBeforeTestRunHooks = null;\n\n                /**\n                 * Envelope commandInitializeTestCase.\n                 * @member {io.cucumber.messages.ICommandInitializeTestCase|null|undefined} commandInitializeTestCase\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandInitializeTestCase = null;\n\n                /**\n                 * Envelope commandRunBeforeTestCaseHook.\n                 * @member {io.cucumber.messages.ICommandRunBeforeTestCaseHook|null|undefined} commandRunBeforeTestCaseHook\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandRunBeforeTestCaseHook = null;\n\n                /**\n                 * Envelope commandRunTestStep.\n                 * @member {io.cucumber.messages.ICommandRunTestStep|null|undefined} commandRunTestStep\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandRunTestStep = null;\n\n                /**\n                 * Envelope commandRunAfterTestCaseHook.\n                 * @member {io.cucumber.messages.ICommandRunAfterTestCaseHook|null|undefined} commandRunAfterTestCaseHook\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandRunAfterTestCaseHook = null;\n\n                /**\n                 * Envelope commandRunAfterTestRunHooks.\n                 * @member {io.cucumber.messages.ICommandRunAfterTestRunHooks|null|undefined} commandRunAfterTestRunHooks\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandRunAfterTestRunHooks = null;\n\n                /**\n                 * Envelope commandGenerateSnippet.\n                 * @member {io.cucumber.messages.ICommandGenerateSnippet|null|undefined} commandGenerateSnippet\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandGenerateSnippet = null;\n\n                /**\n                 * Envelope commandError.\n                 * @member {string} commandError\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.commandError = \"\";\n\n                /**\n                 * Envelope testCase.\n                 * @member {io.cucumber.messages.ITestCase|null|undefined} testCase\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.testCase = null;\n\n                /**\n                 * Envelope stepDefinition.\n                 * @member {io.cucumber.messages.IStepDefinition|null|undefined} stepDefinition\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.stepDefinition = null;\n\n                /**\n                 * Envelope hook.\n                 * @member {io.cucumber.messages.IHook|null|undefined} hook\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Envelope.prototype.hook = null;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * Envelope message.\n                 * @member {\"source\"|\"gherkinDocument\"|\"pickle\"|\"attachment\"|\"testCaseStarted\"|\"testStepStarted\"|\"testStepFinished\"|\"testCaseFinished\"|\"pickleAccepted\"|\"pickleRejected\"|\"testCasePrepared\"|\"testRunStarted\"|\"testRunFinished\"|\"commandStart\"|\"commandActionComplete\"|\"commandRunBeforeTestRunHooks\"|\"commandInitializeTestCase\"|\"commandRunBeforeTestCaseHook\"|\"commandRunTestStep\"|\"commandRunAfterTestCaseHook\"|\"commandRunAfterTestRunHooks\"|\"commandGenerateSnippet\"|\"commandError\"|\"testCase\"|\"stepDefinition\"|\"hook\"|undefined} message\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 */\n                Object.defineProperty(Envelope.prototype, \"message\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"source\", \"gherkinDocument\", \"pickle\", \"attachment\", \"testCaseStarted\", \"testStepStarted\", \"testStepFinished\", \"testCaseFinished\", \"pickleAccepted\", \"pickleRejected\", \"testCasePrepared\", \"testRunStarted\", \"testRunFinished\", \"commandStart\", \"commandActionComplete\", \"commandRunBeforeTestRunHooks\", \"commandInitializeTestCase\", \"commandRunBeforeTestCaseHook\", \"commandRunTestStep\", \"commandRunAfterTestCaseHook\", \"commandRunAfterTestRunHooks\", \"commandGenerateSnippet\", \"commandError\", \"testCase\", \"stepDefinition\", \"hook\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new Envelope instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.Envelope\n                 * @static\n                 * @param {io.cucumber.messages.IEnvelope=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.Envelope} Envelope instance\n                 */\n                Envelope.create = function create(properties) {\n                    return new Envelope(properties);\n                };\n\n                /**\n                 * Encodes the specified Envelope message. Does not implicitly {@link io.cucumber.messages.Envelope.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.Envelope\n                 * @static\n                 * @param {io.cucumber.messages.IEnvelope} message Envelope message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Envelope.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.source != null && message.hasOwnProperty(\"source\"))\n                        $root.io.cucumber.messages.Source.encode(message.source, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.gherkinDocument != null && message.hasOwnProperty(\"gherkinDocument\"))\n                        $root.io.cucumber.messages.GherkinDocument.encode(message.gherkinDocument, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.pickle != null && message.hasOwnProperty(\"pickle\"))\n                        $root.io.cucumber.messages.Pickle.encode(message.pickle, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.attachment != null && message.hasOwnProperty(\"attachment\"))\n                        $root.io.cucumber.messages.Attachment.encode(message.attachment, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.testCaseStarted != null && message.hasOwnProperty(\"testCaseStarted\"))\n                        $root.io.cucumber.messages.TestCaseStarted.encode(message.testCaseStarted, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                    if (message.testStepStarted != null && message.hasOwnProperty(\"testStepStarted\"))\n                        $root.io.cucumber.messages.TestStepStarted.encode(message.testStepStarted, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                    if (message.testStepFinished != null && message.hasOwnProperty(\"testStepFinished\"))\n                        $root.io.cucumber.messages.TestStepFinished.encode(message.testStepFinished, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                    if (message.testCaseFinished != null && message.hasOwnProperty(\"testCaseFinished\"))\n                        $root.io.cucumber.messages.TestCaseFinished.encode(message.testCaseFinished, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                    if (message.pickleAccepted != null && message.hasOwnProperty(\"pickleAccepted\"))\n                        $root.io.cucumber.messages.PickleAccepted.encode(message.pickleAccepted, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                    if (message.pickleRejected != null && message.hasOwnProperty(\"pickleRejected\"))\n                        $root.io.cucumber.messages.PickleRejected.encode(message.pickleRejected, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                    if (message.testCasePrepared != null && message.hasOwnProperty(\"testCasePrepared\"))\n                        $root.io.cucumber.messages.TestCasePrepared.encode(message.testCasePrepared, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                    if (message.testRunStarted != null && message.hasOwnProperty(\"testRunStarted\"))\n                        $root.io.cucumber.messages.TestRunStarted.encode(message.testRunStarted, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n                    if (message.testRunFinished != null && message.hasOwnProperty(\"testRunFinished\"))\n                        $root.io.cucumber.messages.TestRunFinished.encode(message.testRunFinished, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n                    if (message.commandStart != null && message.hasOwnProperty(\"commandStart\"))\n                        $root.io.cucumber.messages.CommandStart.encode(message.commandStart, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n                    if (message.commandActionComplete != null && message.hasOwnProperty(\"commandActionComplete\"))\n                        $root.io.cucumber.messages.CommandActionComplete.encode(message.commandActionComplete, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n                    if (message.commandRunBeforeTestRunHooks != null && message.hasOwnProperty(\"commandRunBeforeTestRunHooks\"))\n                        $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.encode(message.commandRunBeforeTestRunHooks, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n                    if (message.commandInitializeTestCase != null && message.hasOwnProperty(\"commandInitializeTestCase\"))\n                        $root.io.cucumber.messages.CommandInitializeTestCase.encode(message.commandInitializeTestCase, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n                    if (message.commandRunBeforeTestCaseHook != null && message.hasOwnProperty(\"commandRunBeforeTestCaseHook\"))\n                        $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.encode(message.commandRunBeforeTestCaseHook, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n                    if (message.commandRunTestStep != null && message.hasOwnProperty(\"commandRunTestStep\"))\n                        $root.io.cucumber.messages.CommandRunTestStep.encode(message.commandRunTestStep, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n                    if (message.commandRunAfterTestCaseHook != null && message.hasOwnProperty(\"commandRunAfterTestCaseHook\"))\n                        $root.io.cucumber.messages.CommandRunAfterTestCaseHook.encode(message.commandRunAfterTestCaseHook, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n                    if (message.commandRunAfterTestRunHooks != null && message.hasOwnProperty(\"commandRunAfterTestRunHooks\"))\n                        $root.io.cucumber.messages.CommandRunAfterTestRunHooks.encode(message.commandRunAfterTestRunHooks, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n                    if (message.commandGenerateSnippet != null && message.hasOwnProperty(\"commandGenerateSnippet\"))\n                        $root.io.cucumber.messages.CommandGenerateSnippet.encode(message.commandGenerateSnippet, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n                    if (message.commandError != null && message.hasOwnProperty(\"commandError\"))\n                        writer.uint32(/* id 23, wireType 2 =*/186).string(message.commandError);\n                    if (message.testCase != null && message.hasOwnProperty(\"testCase\"))\n                        $root.io.cucumber.messages.TestCase.encode(message.testCase, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();\n                    if (message.stepDefinition != null && message.hasOwnProperty(\"stepDefinition\"))\n                        $root.io.cucumber.messages.StepDefinition.encode(message.stepDefinition, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n                    if (message.hook != null && message.hasOwnProperty(\"hook\"))\n                        $root.io.cucumber.messages.Hook.encode(message.hook, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Envelope message, length delimited. Does not implicitly {@link io.cucumber.messages.Envelope.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.Envelope\n                 * @static\n                 * @param {io.cucumber.messages.IEnvelope} message Envelope message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Envelope.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an Envelope message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.Envelope\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.Envelope} Envelope\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Envelope.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Envelope();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.source = $root.io.cucumber.messages.Source.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.gherkinDocument = $root.io.cucumber.messages.GherkinDocument.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.pickle = $root.io.cucumber.messages.Pickle.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.attachment = $root.io.cucumber.messages.Attachment.decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            message.testCaseStarted = $root.io.cucumber.messages.TestCaseStarted.decode(reader, reader.uint32());\n                            break;\n                        case 6:\n                            message.testStepStarted = $root.io.cucumber.messages.TestStepStarted.decode(reader, reader.uint32());\n                            break;\n                        case 7:\n                            message.testStepFinished = $root.io.cucumber.messages.TestStepFinished.decode(reader, reader.uint32());\n                            break;\n                        case 8:\n                            message.testCaseFinished = $root.io.cucumber.messages.TestCaseFinished.decode(reader, reader.uint32());\n                            break;\n                        case 9:\n                            message.pickleAccepted = $root.io.cucumber.messages.PickleAccepted.decode(reader, reader.uint32());\n                            break;\n                        case 10:\n                            message.pickleRejected = $root.io.cucumber.messages.PickleRejected.decode(reader, reader.uint32());\n                            break;\n                        case 11:\n                            message.testCasePrepared = $root.io.cucumber.messages.TestCasePrepared.decode(reader, reader.uint32());\n                            break;\n                        case 12:\n                            message.testRunStarted = $root.io.cucumber.messages.TestRunStarted.decode(reader, reader.uint32());\n                            break;\n                        case 13:\n                            message.testRunFinished = $root.io.cucumber.messages.TestRunFinished.decode(reader, reader.uint32());\n                            break;\n                        case 14:\n                            message.commandStart = $root.io.cucumber.messages.CommandStart.decode(reader, reader.uint32());\n                            break;\n                        case 15:\n                            message.commandActionComplete = $root.io.cucumber.messages.CommandActionComplete.decode(reader, reader.uint32());\n                            break;\n                        case 16:\n                            message.commandRunBeforeTestRunHooks = $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.decode(reader, reader.uint32());\n                            break;\n                        case 17:\n                            message.commandInitializeTestCase = $root.io.cucumber.messages.CommandInitializeTestCase.decode(reader, reader.uint32());\n                            break;\n                        case 18:\n                            message.commandRunBeforeTestCaseHook = $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.decode(reader, reader.uint32());\n                            break;\n                        case 19:\n                            message.commandRunTestStep = $root.io.cucumber.messages.CommandRunTestStep.decode(reader, reader.uint32());\n                            break;\n                        case 20:\n                            message.commandRunAfterTestCaseHook = $root.io.cucumber.messages.CommandRunAfterTestCaseHook.decode(reader, reader.uint32());\n                            break;\n                        case 21:\n                            message.commandRunAfterTestRunHooks = $root.io.cucumber.messages.CommandRunAfterTestRunHooks.decode(reader, reader.uint32());\n                            break;\n                        case 22:\n                            message.commandGenerateSnippet = $root.io.cucumber.messages.CommandGenerateSnippet.decode(reader, reader.uint32());\n                            break;\n                        case 23:\n                            message.commandError = reader.string();\n                            break;\n                        case 24:\n                            message.testCase = $root.io.cucumber.messages.TestCase.decode(reader, reader.uint32());\n                            break;\n                        case 25:\n                            message.stepDefinition = $root.io.cucumber.messages.StepDefinition.decode(reader, reader.uint32());\n                            break;\n                        case 26:\n                            message.hook = $root.io.cucumber.messages.Hook.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an Envelope message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.Envelope\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.Envelope} Envelope\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Envelope.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an Envelope message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.Envelope\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Envelope.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.source != null && message.hasOwnProperty(\"source\")) {\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.Source.verify(message.source);\n                            if (error)\n                                return \"source.\" + error;\n                        }\n                    }\n                    if (message.gherkinDocument != null && message.hasOwnProperty(\"gherkinDocument\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.GherkinDocument.verify(message.gherkinDocument);\n                            if (error)\n                                return \"gherkinDocument.\" + error;\n                        }\n                    }\n                    if (message.pickle != null && message.hasOwnProperty(\"pickle\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.Pickle.verify(message.pickle);\n                            if (error)\n                                return \"pickle.\" + error;\n                        }\n                    }\n                    if (message.attachment != null && message.hasOwnProperty(\"attachment\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.Attachment.verify(message.attachment);\n                            if (error)\n                                return \"attachment.\" + error;\n                        }\n                    }\n                    if (message.testCaseStarted != null && message.hasOwnProperty(\"testCaseStarted\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.TestCaseStarted.verify(message.testCaseStarted);\n                            if (error)\n                                return \"testCaseStarted.\" + error;\n                        }\n                    }\n                    if (message.testStepStarted != null && message.hasOwnProperty(\"testStepStarted\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.TestStepStarted.verify(message.testStepStarted);\n                            if (error)\n                                return \"testStepStarted.\" + error;\n                        }\n                    }\n                    if (message.testStepFinished != null && message.hasOwnProperty(\"testStepFinished\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.TestStepFinished.verify(message.testStepFinished);\n                            if (error)\n                                return \"testStepFinished.\" + error;\n                        }\n                    }\n                    if (message.testCaseFinished != null && message.hasOwnProperty(\"testCaseFinished\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.TestCaseFinished.verify(message.testCaseFinished);\n                            if (error)\n                                return \"testCaseFinished.\" + error;\n                        }\n                    }\n                    if (message.pickleAccepted != null && message.hasOwnProperty(\"pickleAccepted\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.PickleAccepted.verify(message.pickleAccepted);\n                            if (error)\n                                return \"pickleAccepted.\" + error;\n                        }\n                    }\n                    if (message.pickleRejected != null && message.hasOwnProperty(\"pickleRejected\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.PickleRejected.verify(message.pickleRejected);\n                            if (error)\n                                return \"pickleRejected.\" + error;\n                        }\n                    }\n                    if (message.testCasePrepared != null && message.hasOwnProperty(\"testCasePrepared\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.TestCasePrepared.verify(message.testCasePrepared);\n                            if (error)\n                                return \"testCasePrepared.\" + error;\n                        }\n                    }\n                    if (message.testRunStarted != null && message.hasOwnProperty(\"testRunStarted\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.TestRunStarted.verify(message.testRunStarted);\n                            if (error)\n                                return \"testRunStarted.\" + error;\n                        }\n                    }\n                    if (message.testRunFinished != null && message.hasOwnProperty(\"testRunFinished\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.TestRunFinished.verify(message.testRunFinished);\n                            if (error)\n                                return \"testRunFinished.\" + error;\n                        }\n                    }\n                    if (message.commandStart != null && message.hasOwnProperty(\"commandStart\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.CommandStart.verify(message.commandStart);\n                            if (error)\n                                return \"commandStart.\" + error;\n                        }\n                    }\n                    if (message.commandActionComplete != null && message.hasOwnProperty(\"commandActionComplete\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.CommandActionComplete.verify(message.commandActionComplete);\n                            if (error)\n                                return \"commandActionComplete.\" + error;\n                        }\n                    }\n                    if (message.commandRunBeforeTestRunHooks != null && message.hasOwnProperty(\"commandRunBeforeTestRunHooks\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.verify(message.commandRunBeforeTestRunHooks);\n                            if (error)\n                                return \"commandRunBeforeTestRunHooks.\" + error;\n                        }\n                    }\n                    if (message.commandInitializeTestCase != null && message.hasOwnProperty(\"commandInitializeTestCase\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.CommandInitializeTestCase.verify(message.commandInitializeTestCase);\n                            if (error)\n                                return \"commandInitializeTestCase.\" + error;\n                        }\n                    }\n                    if (message.commandRunBeforeTestCaseHook != null && message.hasOwnProperty(\"commandRunBeforeTestCaseHook\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.verify(message.commandRunBeforeTestCaseHook);\n                            if (error)\n                                return \"commandRunBeforeTestCaseHook.\" + error;\n                        }\n                    }\n                    if (message.commandRunTestStep != null && message.hasOwnProperty(\"commandRunTestStep\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.CommandRunTestStep.verify(message.commandRunTestStep);\n                            if (error)\n                                return \"commandRunTestStep.\" + error;\n                        }\n                    }\n                    if (message.commandRunAfterTestCaseHook != null && message.hasOwnProperty(\"commandRunAfterTestCaseHook\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.CommandRunAfterTestCaseHook.verify(message.commandRunAfterTestCaseHook);\n                            if (error)\n                                return \"commandRunAfterTestCaseHook.\" + error;\n                        }\n                    }\n                    if (message.commandRunAfterTestRunHooks != null && message.hasOwnProperty(\"commandRunAfterTestRunHooks\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.CommandRunAfterTestRunHooks.verify(message.commandRunAfterTestRunHooks);\n                            if (error)\n                                return \"commandRunAfterTestRunHooks.\" + error;\n                        }\n                    }\n                    if (message.commandGenerateSnippet != null && message.hasOwnProperty(\"commandGenerateSnippet\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.CommandGenerateSnippet.verify(message.commandGenerateSnippet);\n                            if (error)\n                                return \"commandGenerateSnippet.\" + error;\n                        }\n                    }\n                    if (message.commandError != null && message.hasOwnProperty(\"commandError\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        if (!$util.isString(message.commandError))\n                            return \"commandError: string expected\";\n                    }\n                    if (message.testCase != null && message.hasOwnProperty(\"testCase\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.TestCase.verify(message.testCase);\n                            if (error)\n                                return \"testCase.\" + error;\n                        }\n                    }\n                    if (message.stepDefinition != null && message.hasOwnProperty(\"stepDefinition\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.StepDefinition.verify(message.stepDefinition);\n                            if (error)\n                                return \"stepDefinition.\" + error;\n                        }\n                    }\n                    if (message.hook != null && message.hasOwnProperty(\"hook\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.Hook.verify(message.hook);\n                            if (error)\n                                return \"hook.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.Envelope\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.Envelope} Envelope\n                 */\n                Envelope.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.Envelope)\n                        return object;\n                    var message = new $root.io.cucumber.messages.Envelope();\n                    if (object.source != null) {\n                        if (typeof object.source !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.source: object expected\");\n                        message.source = $root.io.cucumber.messages.Source.fromObject(object.source);\n                    }\n                    if (object.gherkinDocument != null) {\n                        if (typeof object.gherkinDocument !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.gherkinDocument: object expected\");\n                        message.gherkinDocument = $root.io.cucumber.messages.GherkinDocument.fromObject(object.gherkinDocument);\n                    }\n                    if (object.pickle != null) {\n                        if (typeof object.pickle !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.pickle: object expected\");\n                        message.pickle = $root.io.cucumber.messages.Pickle.fromObject(object.pickle);\n                    }\n                    if (object.attachment != null) {\n                        if (typeof object.attachment !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.attachment: object expected\");\n                        message.attachment = $root.io.cucumber.messages.Attachment.fromObject(object.attachment);\n                    }\n                    if (object.testCaseStarted != null) {\n                        if (typeof object.testCaseStarted !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.testCaseStarted: object expected\");\n                        message.testCaseStarted = $root.io.cucumber.messages.TestCaseStarted.fromObject(object.testCaseStarted);\n                    }\n                    if (object.testStepStarted != null) {\n                        if (typeof object.testStepStarted !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.testStepStarted: object expected\");\n                        message.testStepStarted = $root.io.cucumber.messages.TestStepStarted.fromObject(object.testStepStarted);\n                    }\n                    if (object.testStepFinished != null) {\n                        if (typeof object.testStepFinished !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.testStepFinished: object expected\");\n                        message.testStepFinished = $root.io.cucumber.messages.TestStepFinished.fromObject(object.testStepFinished);\n                    }\n                    if (object.testCaseFinished != null) {\n                        if (typeof object.testCaseFinished !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.testCaseFinished: object expected\");\n                        message.testCaseFinished = $root.io.cucumber.messages.TestCaseFinished.fromObject(object.testCaseFinished);\n                    }\n                    if (object.pickleAccepted != null) {\n                        if (typeof object.pickleAccepted !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.pickleAccepted: object expected\");\n                        message.pickleAccepted = $root.io.cucumber.messages.PickleAccepted.fromObject(object.pickleAccepted);\n                    }\n                    if (object.pickleRejected != null) {\n                        if (typeof object.pickleRejected !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.pickleRejected: object expected\");\n                        message.pickleRejected = $root.io.cucumber.messages.PickleRejected.fromObject(object.pickleRejected);\n                    }\n                    if (object.testCasePrepared != null) {\n                        if (typeof object.testCasePrepared !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.testCasePrepared: object expected\");\n                        message.testCasePrepared = $root.io.cucumber.messages.TestCasePrepared.fromObject(object.testCasePrepared);\n                    }\n                    if (object.testRunStarted != null) {\n                        if (typeof object.testRunStarted !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.testRunStarted: object expected\");\n                        message.testRunStarted = $root.io.cucumber.messages.TestRunStarted.fromObject(object.testRunStarted);\n                    }\n                    if (object.testRunFinished != null) {\n                        if (typeof object.testRunFinished !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.testRunFinished: object expected\");\n                        message.testRunFinished = $root.io.cucumber.messages.TestRunFinished.fromObject(object.testRunFinished);\n                    }\n                    if (object.commandStart != null) {\n                        if (typeof object.commandStart !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.commandStart: object expected\");\n                        message.commandStart = $root.io.cucumber.messages.CommandStart.fromObject(object.commandStart);\n                    }\n                    if (object.commandActionComplete != null) {\n                        if (typeof object.commandActionComplete !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.commandActionComplete: object expected\");\n                        message.commandActionComplete = $root.io.cucumber.messages.CommandActionComplete.fromObject(object.commandActionComplete);\n                    }\n                    if (object.commandRunBeforeTestRunHooks != null) {\n                        if (typeof object.commandRunBeforeTestRunHooks !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.commandRunBeforeTestRunHooks: object expected\");\n                        message.commandRunBeforeTestRunHooks = $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.fromObject(object.commandRunBeforeTestRunHooks);\n                    }\n                    if (object.commandInitializeTestCase != null) {\n                        if (typeof object.commandInitializeTestCase !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.commandInitializeTestCase: object expected\");\n                        message.commandInitializeTestCase = $root.io.cucumber.messages.CommandInitializeTestCase.fromObject(object.commandInitializeTestCase);\n                    }\n                    if (object.commandRunBeforeTestCaseHook != null) {\n                        if (typeof object.commandRunBeforeTestCaseHook !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.commandRunBeforeTestCaseHook: object expected\");\n                        message.commandRunBeforeTestCaseHook = $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.fromObject(object.commandRunBeforeTestCaseHook);\n                    }\n                    if (object.commandRunTestStep != null) {\n                        if (typeof object.commandRunTestStep !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.commandRunTestStep: object expected\");\n                        message.commandRunTestStep = $root.io.cucumber.messages.CommandRunTestStep.fromObject(object.commandRunTestStep);\n                    }\n                    if (object.commandRunAfterTestCaseHook != null) {\n                        if (typeof object.commandRunAfterTestCaseHook !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.commandRunAfterTestCaseHook: object expected\");\n                        message.commandRunAfterTestCaseHook = $root.io.cucumber.messages.CommandRunAfterTestCaseHook.fromObject(object.commandRunAfterTestCaseHook);\n                    }\n                    if (object.commandRunAfterTestRunHooks != null) {\n                        if (typeof object.commandRunAfterTestRunHooks !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.commandRunAfterTestRunHooks: object expected\");\n                        message.commandRunAfterTestRunHooks = $root.io.cucumber.messages.CommandRunAfterTestRunHooks.fromObject(object.commandRunAfterTestRunHooks);\n                    }\n                    if (object.commandGenerateSnippet != null) {\n                        if (typeof object.commandGenerateSnippet !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.commandGenerateSnippet: object expected\");\n                        message.commandGenerateSnippet = $root.io.cucumber.messages.CommandGenerateSnippet.fromObject(object.commandGenerateSnippet);\n                    }\n                    if (object.commandError != null)\n                        message.commandError = String(object.commandError);\n                    if (object.testCase != null) {\n                        if (typeof object.testCase !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.testCase: object expected\");\n                        message.testCase = $root.io.cucumber.messages.TestCase.fromObject(object.testCase);\n                    }\n                    if (object.stepDefinition != null) {\n                        if (typeof object.stepDefinition !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.stepDefinition: object expected\");\n                        message.stepDefinition = $root.io.cucumber.messages.StepDefinition.fromObject(object.stepDefinition);\n                    }\n                    if (object.hook != null) {\n                        if (typeof object.hook !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Envelope.hook: object expected\");\n                        message.hook = $root.io.cucumber.messages.Hook.fromObject(object.hook);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.Envelope\n                 * @static\n                 * @param {io.cucumber.messages.Envelope} message Envelope\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Envelope.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.source != null && message.hasOwnProperty(\"source\")) {\n                        object.source = $root.io.cucumber.messages.Source.toObject(message.source, options);\n                        if (options.oneofs)\n                            object.message = \"source\";\n                    }\n                    if (message.gherkinDocument != null && message.hasOwnProperty(\"gherkinDocument\")) {\n                        object.gherkinDocument = $root.io.cucumber.messages.GherkinDocument.toObject(message.gherkinDocument, options);\n                        if (options.oneofs)\n                            object.message = \"gherkinDocument\";\n                    }\n                    if (message.pickle != null && message.hasOwnProperty(\"pickle\")) {\n                        object.pickle = $root.io.cucumber.messages.Pickle.toObject(message.pickle, options);\n                        if (options.oneofs)\n                            object.message = \"pickle\";\n                    }\n                    if (message.attachment != null && message.hasOwnProperty(\"attachment\")) {\n                        object.attachment = $root.io.cucumber.messages.Attachment.toObject(message.attachment, options);\n                        if (options.oneofs)\n                            object.message = \"attachment\";\n                    }\n                    if (message.testCaseStarted != null && message.hasOwnProperty(\"testCaseStarted\")) {\n                        object.testCaseStarted = $root.io.cucumber.messages.TestCaseStarted.toObject(message.testCaseStarted, options);\n                        if (options.oneofs)\n                            object.message = \"testCaseStarted\";\n                    }\n                    if (message.testStepStarted != null && message.hasOwnProperty(\"testStepStarted\")) {\n                        object.testStepStarted = $root.io.cucumber.messages.TestStepStarted.toObject(message.testStepStarted, options);\n                        if (options.oneofs)\n                            object.message = \"testStepStarted\";\n                    }\n                    if (message.testStepFinished != null && message.hasOwnProperty(\"testStepFinished\")) {\n                        object.testStepFinished = $root.io.cucumber.messages.TestStepFinished.toObject(message.testStepFinished, options);\n                        if (options.oneofs)\n                            object.message = \"testStepFinished\";\n                    }\n                    if (message.testCaseFinished != null && message.hasOwnProperty(\"testCaseFinished\")) {\n                        object.testCaseFinished = $root.io.cucumber.messages.TestCaseFinished.toObject(message.testCaseFinished, options);\n                        if (options.oneofs)\n                            object.message = \"testCaseFinished\";\n                    }\n                    if (message.pickleAccepted != null && message.hasOwnProperty(\"pickleAccepted\")) {\n                        object.pickleAccepted = $root.io.cucumber.messages.PickleAccepted.toObject(message.pickleAccepted, options);\n                        if (options.oneofs)\n                            object.message = \"pickleAccepted\";\n                    }\n                    if (message.pickleRejected != null && message.hasOwnProperty(\"pickleRejected\")) {\n                        object.pickleRejected = $root.io.cucumber.messages.PickleRejected.toObject(message.pickleRejected, options);\n                        if (options.oneofs)\n                            object.message = \"pickleRejected\";\n                    }\n                    if (message.testCasePrepared != null && message.hasOwnProperty(\"testCasePrepared\")) {\n                        object.testCasePrepared = $root.io.cucumber.messages.TestCasePrepared.toObject(message.testCasePrepared, options);\n                        if (options.oneofs)\n                            object.message = \"testCasePrepared\";\n                    }\n                    if (message.testRunStarted != null && message.hasOwnProperty(\"testRunStarted\")) {\n                        object.testRunStarted = $root.io.cucumber.messages.TestRunStarted.toObject(message.testRunStarted, options);\n                        if (options.oneofs)\n                            object.message = \"testRunStarted\";\n                    }\n                    if (message.testRunFinished != null && message.hasOwnProperty(\"testRunFinished\")) {\n                        object.testRunFinished = $root.io.cucumber.messages.TestRunFinished.toObject(message.testRunFinished, options);\n                        if (options.oneofs)\n                            object.message = \"testRunFinished\";\n                    }\n                    if (message.commandStart != null && message.hasOwnProperty(\"commandStart\")) {\n                        object.commandStart = $root.io.cucumber.messages.CommandStart.toObject(message.commandStart, options);\n                        if (options.oneofs)\n                            object.message = \"commandStart\";\n                    }\n                    if (message.commandActionComplete != null && message.hasOwnProperty(\"commandActionComplete\")) {\n                        object.commandActionComplete = $root.io.cucumber.messages.CommandActionComplete.toObject(message.commandActionComplete, options);\n                        if (options.oneofs)\n                            object.message = \"commandActionComplete\";\n                    }\n                    if (message.commandRunBeforeTestRunHooks != null && message.hasOwnProperty(\"commandRunBeforeTestRunHooks\")) {\n                        object.commandRunBeforeTestRunHooks = $root.io.cucumber.messages.CommandRunBeforeTestRunHooks.toObject(message.commandRunBeforeTestRunHooks, options);\n                        if (options.oneofs)\n                            object.message = \"commandRunBeforeTestRunHooks\";\n                    }\n                    if (message.commandInitializeTestCase != null && message.hasOwnProperty(\"commandInitializeTestCase\")) {\n                        object.commandInitializeTestCase = $root.io.cucumber.messages.CommandInitializeTestCase.toObject(message.commandInitializeTestCase, options);\n                        if (options.oneofs)\n                            object.message = \"commandInitializeTestCase\";\n                    }\n                    if (message.commandRunBeforeTestCaseHook != null && message.hasOwnProperty(\"commandRunBeforeTestCaseHook\")) {\n                        object.commandRunBeforeTestCaseHook = $root.io.cucumber.messages.CommandRunBeforeTestCaseHook.toObject(message.commandRunBeforeTestCaseHook, options);\n                        if (options.oneofs)\n                            object.message = \"commandRunBeforeTestCaseHook\";\n                    }\n                    if (message.commandRunTestStep != null && message.hasOwnProperty(\"commandRunTestStep\")) {\n                        object.commandRunTestStep = $root.io.cucumber.messages.CommandRunTestStep.toObject(message.commandRunTestStep, options);\n                        if (options.oneofs)\n                            object.message = \"commandRunTestStep\";\n                    }\n                    if (message.commandRunAfterTestCaseHook != null && message.hasOwnProperty(\"commandRunAfterTestCaseHook\")) {\n                        object.commandRunAfterTestCaseHook = $root.io.cucumber.messages.CommandRunAfterTestCaseHook.toObject(message.commandRunAfterTestCaseHook, options);\n                        if (options.oneofs)\n                            object.message = \"commandRunAfterTestCaseHook\";\n                    }\n                    if (message.commandRunAfterTestRunHooks != null && message.hasOwnProperty(\"commandRunAfterTestRunHooks\")) {\n                        object.commandRunAfterTestRunHooks = $root.io.cucumber.messages.CommandRunAfterTestRunHooks.toObject(message.commandRunAfterTestRunHooks, options);\n                        if (options.oneofs)\n                            object.message = \"commandRunAfterTestRunHooks\";\n                    }\n                    if (message.commandGenerateSnippet != null && message.hasOwnProperty(\"commandGenerateSnippet\")) {\n                        object.commandGenerateSnippet = $root.io.cucumber.messages.CommandGenerateSnippet.toObject(message.commandGenerateSnippet, options);\n                        if (options.oneofs)\n                            object.message = \"commandGenerateSnippet\";\n                    }\n                    if (message.commandError != null && message.hasOwnProperty(\"commandError\")) {\n                        object.commandError = message.commandError;\n                        if (options.oneofs)\n                            object.message = \"commandError\";\n                    }\n                    if (message.testCase != null && message.hasOwnProperty(\"testCase\")) {\n                        object.testCase = $root.io.cucumber.messages.TestCase.toObject(message.testCase, options);\n                        if (options.oneofs)\n                            object.message = \"testCase\";\n                    }\n                    if (message.stepDefinition != null && message.hasOwnProperty(\"stepDefinition\")) {\n                        object.stepDefinition = $root.io.cucumber.messages.StepDefinition.toObject(message.stepDefinition, options);\n                        if (options.oneofs)\n                            object.message = \"stepDefinition\";\n                    }\n                    if (message.hook != null && message.hasOwnProperty(\"hook\")) {\n                        object.hook = $root.io.cucumber.messages.Hook.toObject(message.hook, options);\n                        if (options.oneofs)\n                            object.message = \"hook\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this Envelope to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.Envelope\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Envelope.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Envelope;\n            })();\n\n            messages.Location = (function() {\n\n                /**\n                 * Properties of a Location.\n                 * @memberof io.cucumber.messages\n                 * @interface ILocation\n                 * @property {number|null} [line] Location line\n                 * @property {number|null} [column] Location column\n                 */\n\n                /**\n                 * Constructs a new Location.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Points to a line and a column in a text file\n                 * @implements ILocation\n                 * @constructor\n                 * @param {io.cucumber.messages.ILocation=} [properties] Properties to set\n                 */\n                function Location(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Location line.\n                 * @member {number} line\n                 * @memberof io.cucumber.messages.Location\n                 * @instance\n                 */\n                Location.prototype.line = 0;\n\n                /**\n                 * Location column.\n                 * @member {number} column\n                 * @memberof io.cucumber.messages.Location\n                 * @instance\n                 */\n                Location.prototype.column = 0;\n\n                /**\n                 * Creates a new Location instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.Location\n                 * @static\n                 * @param {io.cucumber.messages.ILocation=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.Location} Location instance\n                 */\n                Location.create = function create(properties) {\n                    return new Location(properties);\n                };\n\n                /**\n                 * Encodes the specified Location message. Does not implicitly {@link io.cucumber.messages.Location.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.Location\n                 * @static\n                 * @param {io.cucumber.messages.ILocation} message Location message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Location.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.line != null && message.hasOwnProperty(\"line\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.line);\n                    if (message.column != null && message.hasOwnProperty(\"column\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.column);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Location message, length delimited. Does not implicitly {@link io.cucumber.messages.Location.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.Location\n                 * @static\n                 * @param {io.cucumber.messages.ILocation} message Location message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Location.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Location message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.Location\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.Location} Location\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Location.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Location();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.line = reader.uint32();\n                            break;\n                        case 2:\n                            message.column = reader.uint32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Location message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.Location\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.Location} Location\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Location.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Location message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.Location\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Location.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.line != null && message.hasOwnProperty(\"line\"))\n                        if (!$util.isInteger(message.line))\n                            return \"line: integer expected\";\n                    if (message.column != null && message.hasOwnProperty(\"column\"))\n                        if (!$util.isInteger(message.column))\n                            return \"column: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Location message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.Location\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.Location} Location\n                 */\n                Location.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.Location)\n                        return object;\n                    var message = new $root.io.cucumber.messages.Location();\n                    if (object.line != null)\n                        message.line = object.line >>> 0;\n                    if (object.column != null)\n                        message.column = object.column >>> 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Location message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.Location\n                 * @static\n                 * @param {io.cucumber.messages.Location} message Location\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Location.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.line = 0;\n                        object.column = 0;\n                    }\n                    if (message.line != null && message.hasOwnProperty(\"line\"))\n                        object.line = message.line;\n                    if (message.column != null && message.hasOwnProperty(\"column\"))\n                        object.column = message.column;\n                    return object;\n                };\n\n                /**\n                 * Converts this Location to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.Location\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Location.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Location;\n            })();\n\n            messages.SourceReference = (function() {\n\n                /**\n                 * Properties of a SourceReference.\n                 * @memberof io.cucumber.messages\n                 * @interface ISourceReference\n                 * @property {string|null} [uri] SourceReference uri\n                 * @property {io.cucumber.messages.ILocation|null} [location] SourceReference location\n                 */\n\n                /**\n                 * Constructs a new SourceReference.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Points to a [Source](#io.cucumber.messages.Source) identified by `uri` and a\n                 * [Location](#io.cucumber.messages.Location) within that file.\n                 * @implements ISourceReference\n                 * @constructor\n                 * @param {io.cucumber.messages.ISourceReference=} [properties] Properties to set\n                 */\n                function SourceReference(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SourceReference uri.\n                 * @member {string} uri\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @instance\n                 */\n                SourceReference.prototype.uri = \"\";\n\n                /**\n                 * SourceReference location.\n                 * @member {io.cucumber.messages.ILocation|null|undefined} location\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @instance\n                 */\n                SourceReference.prototype.location = null;\n\n                /**\n                 * Creates a new SourceReference instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @static\n                 * @param {io.cucumber.messages.ISourceReference=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.SourceReference} SourceReference instance\n                 */\n                SourceReference.create = function create(properties) {\n                    return new SourceReference(properties);\n                };\n\n                /**\n                 * Encodes the specified SourceReference message. Does not implicitly {@link io.cucumber.messages.SourceReference.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @static\n                 * @param {io.cucumber.messages.ISourceReference} message SourceReference message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourceReference.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);\n                    if (message.location != null && message.hasOwnProperty(\"location\"))\n                        $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SourceReference message, length delimited. Does not implicitly {@link io.cucumber.messages.SourceReference.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @static\n                 * @param {io.cucumber.messages.ISourceReference} message SourceReference message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourceReference.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SourceReference message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.SourceReference} SourceReference\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourceReference.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.SourceReference();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.uri = reader.string();\n                            break;\n                        case 2:\n                            message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SourceReference message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.SourceReference} SourceReference\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourceReference.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SourceReference message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SourceReference.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        if (!$util.isString(message.uri))\n                            return \"uri: string expected\";\n                    if (message.location != null && message.hasOwnProperty(\"location\")) {\n                        var error = $root.io.cucumber.messages.Location.verify(message.location);\n                        if (error)\n                            return \"location.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a SourceReference message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.SourceReference} SourceReference\n                 */\n                SourceReference.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.SourceReference)\n                        return object;\n                    var message = new $root.io.cucumber.messages.SourceReference();\n                    if (object.uri != null)\n                        message.uri = String(object.uri);\n                    if (object.location != null) {\n                        if (typeof object.location !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.SourceReference.location: object expected\");\n                        message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SourceReference message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @static\n                 * @param {io.cucumber.messages.SourceReference} message SourceReference\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SourceReference.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.uri = \"\";\n                        object.location = null;\n                    }\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        object.uri = message.uri;\n                    if (message.location != null && message.hasOwnProperty(\"location\"))\n                        object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this SourceReference to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.SourceReference\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SourceReference.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SourceReference;\n            })();\n\n            messages.Media = (function() {\n\n                /**\n                 * Properties of a Media.\n                 * @memberof io.cucumber.messages\n                 * @interface IMedia\n                 * @property {io.cucumber.messages.Media.Encoding|null} [encoding] Media encoding\n                 * @property {string|null} [contentType] The content type of the data. This can be any valid\n                 * [IANA Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml)\n                 * as well as Cucumber-specific media types such as `text/x.cucumber.gherkin+plain`\n                 * and `text/x.cucumber.stacktrace+plain`\n                 */\n\n                /**\n                 * Constructs a new Media.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Meta information about encoded contents\n                 * @implements IMedia\n                 * @constructor\n                 * @param {io.cucumber.messages.IMedia=} [properties] Properties to set\n                 */\n                function Media(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Media encoding.\n                 * @member {io.cucumber.messages.Media.Encoding} encoding\n                 * @memberof io.cucumber.messages.Media\n                 * @instance\n                 */\n                Media.prototype.encoding = 0;\n\n                /**\n                 * The content type of the data. This can be any valid\n                 * [IANA Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml)\n                 * as well as Cucumber-specific media types such as `text/x.cucumber.gherkin+plain`\n                 * and `text/x.cucumber.stacktrace+plain`\n                 * @member {string} contentType\n                 * @memberof io.cucumber.messages.Media\n                 * @instance\n                 */\n                Media.prototype.contentType = \"\";\n\n                /**\n                 * Creates a new Media instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.Media\n                 * @static\n                 * @param {io.cucumber.messages.IMedia=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.Media} Media instance\n                 */\n                Media.create = function create(properties) {\n                    return new Media(properties);\n                };\n\n                /**\n                 * Encodes the specified Media message. Does not implicitly {@link io.cucumber.messages.Media.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.Media\n                 * @static\n                 * @param {io.cucumber.messages.IMedia} message Media message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Media.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.encoding != null && message.hasOwnProperty(\"encoding\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.encoding);\n                    if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.contentType);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Media message, length delimited. Does not implicitly {@link io.cucumber.messages.Media.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.Media\n                 * @static\n                 * @param {io.cucumber.messages.IMedia} message Media message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Media.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Media message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.Media\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.Media} Media\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Media.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Media();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.encoding = reader.int32();\n                            break;\n                        case 2:\n                            message.contentType = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Media message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.Media\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.Media} Media\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Media.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Media message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.Media\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Media.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.encoding != null && message.hasOwnProperty(\"encoding\"))\n                        switch (message.encoding) {\n                        default:\n                            return \"encoding: enum value expected\";\n                        case 0:\n                        case 1:\n                            break;\n                        }\n                    if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                        if (!$util.isString(message.contentType))\n                            return \"contentType: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Media message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.Media\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.Media} Media\n                 */\n                Media.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.Media)\n                        return object;\n                    var message = new $root.io.cucumber.messages.Media();\n                    switch (object.encoding) {\n                    case \"BASE64\":\n                    case 0:\n                        message.encoding = 0;\n                        break;\n                    case \"UTF8\":\n                    case 1:\n                        message.encoding = 1;\n                        break;\n                    }\n                    if (object.contentType != null)\n                        message.contentType = String(object.contentType);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Media message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.Media\n                 * @static\n                 * @param {io.cucumber.messages.Media} message Media\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Media.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.encoding = options.enums === String ? \"BASE64\" : 0;\n                        object.contentType = \"\";\n                    }\n                    if (message.encoding != null && message.hasOwnProperty(\"encoding\"))\n                        object.encoding = options.enums === String ? $root.io.cucumber.messages.Media.Encoding[message.encoding] : message.encoding;\n                    if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                        object.contentType = message.contentType;\n                    return object;\n                };\n\n                /**\n                 * Converts this Media to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.Media\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Media.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * Encoding enum.\n                 * @name io.cucumber.messages.Media.Encoding\n                 * @enum {string}\n                 * @property {number} BASE64=0 BASE64 value\n                 * @property {number} UTF8=1 UTF8 value\n                 */\n                Media.Encoding = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"BASE64\"] = 0;\n                    values[valuesById[1] = \"UTF8\"] = 1;\n                    return values;\n                })();\n\n                return Media;\n            })();\n\n            messages.Source = (function() {\n\n                /**\n                 * Properties of a Source.\n                 * @memberof io.cucumber.messages\n                 * @interface ISource\n                 * @property {string|null} [uri] The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)\n                 * of the source, typically a file path relative to the root directory\n                 * @property {string|null} [data] Source data\n                 * @property {io.cucumber.messages.IMedia|null} [media] Source media\n                 */\n\n                /**\n                 * Constructs a new Source.\n                 * @memberof io.cucumber.messages\n                 * @classdesc A source file, typically a Gherkin document\n                 * @implements ISource\n                 * @constructor\n                 * @param {io.cucumber.messages.ISource=} [properties] Properties to set\n                 */\n                function Source(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)\n                 * of the source, typically a file path relative to the root directory\n                 * @member {string} uri\n                 * @memberof io.cucumber.messages.Source\n                 * @instance\n                 */\n                Source.prototype.uri = \"\";\n\n                /**\n                 * Source data.\n                 * @member {string} data\n                 * @memberof io.cucumber.messages.Source\n                 * @instance\n                 */\n                Source.prototype.data = \"\";\n\n                /**\n                 * Source media.\n                 * @member {io.cucumber.messages.IMedia|null|undefined} media\n                 * @memberof io.cucumber.messages.Source\n                 * @instance\n                 */\n                Source.prototype.media = null;\n\n                /**\n                 * Creates a new Source instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.Source\n                 * @static\n                 * @param {io.cucumber.messages.ISource=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.Source} Source instance\n                 */\n                Source.create = function create(properties) {\n                    return new Source(properties);\n                };\n\n                /**\n                 * Encodes the specified Source message. Does not implicitly {@link io.cucumber.messages.Source.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.Source\n                 * @static\n                 * @param {io.cucumber.messages.ISource} message Source message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Source.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);\n                    if (message.data != null && message.hasOwnProperty(\"data\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n                    if (message.media != null && message.hasOwnProperty(\"media\"))\n                        $root.io.cucumber.messages.Media.encode(message.media, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Source message, length delimited. Does not implicitly {@link io.cucumber.messages.Source.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.Source\n                 * @static\n                 * @param {io.cucumber.messages.ISource} message Source message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Source.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Source message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.Source\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.Source} Source\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Source.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Source();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.uri = reader.string();\n                            break;\n                        case 2:\n                            message.data = reader.string();\n                            break;\n                        case 3:\n                            message.media = $root.io.cucumber.messages.Media.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Source message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.Source\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.Source} Source\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Source.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Source message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.Source\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Source.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        if (!$util.isString(message.uri))\n                            return \"uri: string expected\";\n                    if (message.data != null && message.hasOwnProperty(\"data\"))\n                        if (!$util.isString(message.data))\n                            return \"data: string expected\";\n                    if (message.media != null && message.hasOwnProperty(\"media\")) {\n                        var error = $root.io.cucumber.messages.Media.verify(message.media);\n                        if (error)\n                            return \"media.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a Source message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.Source\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.Source} Source\n                 */\n                Source.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.Source)\n                        return object;\n                    var message = new $root.io.cucumber.messages.Source();\n                    if (object.uri != null)\n                        message.uri = String(object.uri);\n                    if (object.data != null)\n                        message.data = String(object.data);\n                    if (object.media != null) {\n                        if (typeof object.media !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Source.media: object expected\");\n                        message.media = $root.io.cucumber.messages.Media.fromObject(object.media);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Source message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.Source\n                 * @static\n                 * @param {io.cucumber.messages.Source} message Source\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Source.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.uri = \"\";\n                        object.data = \"\";\n                        object.media = null;\n                    }\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        object.uri = message.uri;\n                    if (message.data != null && message.hasOwnProperty(\"data\"))\n                        object.data = message.data;\n                    if (message.media != null && message.hasOwnProperty(\"media\"))\n                        object.media = $root.io.cucumber.messages.Media.toObject(message.media, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this Source to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.Source\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Source.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Source;\n            })();\n\n            messages.GherkinDocument = (function() {\n\n                /**\n                 * Properties of a GherkinDocument.\n                 * @memberof io.cucumber.messages\n                 * @interface IGherkinDocument\n                 * @property {string|null} [uri] The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)\n                 * of the source, typically a file path relative to the root directory\n                 * @property {io.cucumber.messages.GherkinDocument.IFeature|null} [feature] GherkinDocument feature\n                 * @property {Array.<io.cucumber.messages.GherkinDocument.IComment>|null} [comments] GherkinDocument comments\n                 */\n\n                /**\n                 * Constructs a new GherkinDocument.\n                 * @memberof io.cucumber.messages\n                 * @classdesc The [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) of a Gherkin document.\n                 * Cucumber implementations should *not* depend on `GherkinDocument` or any of its\n                 * children for execution - use [Pickle](#io.cucumber.messages.Pickle) instead.\n                 * \n                 * The only consumers of `GherkinDocument` should only be formatters that produce\n                 * \"rich\" output, resembling the original Gherkin document.\n                 * @implements IGherkinDocument\n                 * @constructor\n                 * @param {io.cucumber.messages.IGherkinDocument=} [properties] Properties to set\n                 */\n                function GherkinDocument(properties) {\n                    this.comments = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * The [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier)\n                 * of the source, typically a file path relative to the root directory\n                 * @member {string} uri\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @instance\n                 */\n                GherkinDocument.prototype.uri = \"\";\n\n                /**\n                 * GherkinDocument feature.\n                 * @member {io.cucumber.messages.GherkinDocument.IFeature|null|undefined} feature\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @instance\n                 */\n                GherkinDocument.prototype.feature = null;\n\n                /**\n                 * GherkinDocument comments.\n                 * @member {Array.<io.cucumber.messages.GherkinDocument.IComment>} comments\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @instance\n                 */\n                GherkinDocument.prototype.comments = $util.emptyArray;\n\n                /**\n                 * Creates a new GherkinDocument instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @static\n                 * @param {io.cucumber.messages.IGherkinDocument=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.GherkinDocument} GherkinDocument instance\n                 */\n                GherkinDocument.create = function create(properties) {\n                    return new GherkinDocument(properties);\n                };\n\n                /**\n                 * Encodes the specified GherkinDocument message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @static\n                 * @param {io.cucumber.messages.IGherkinDocument} message GherkinDocument message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GherkinDocument.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.uri);\n                    if (message.feature != null && message.hasOwnProperty(\"feature\"))\n                        $root.io.cucumber.messages.GherkinDocument.Feature.encode(message.feature, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.comments != null && message.comments.length)\n                        for (var i = 0; i < message.comments.length; ++i)\n                            $root.io.cucumber.messages.GherkinDocument.Comment.encode(message.comments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified GherkinDocument message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @static\n                 * @param {io.cucumber.messages.IGherkinDocument} message GherkinDocument message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GherkinDocument.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a GherkinDocument message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.GherkinDocument} GherkinDocument\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GherkinDocument.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.uri = reader.string();\n                            break;\n                        case 2:\n                            message.feature = $root.io.cucumber.messages.GherkinDocument.Feature.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            if (!(message.comments && message.comments.length))\n                                message.comments = [];\n                            message.comments.push($root.io.cucumber.messages.GherkinDocument.Comment.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a GherkinDocument message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.GherkinDocument} GherkinDocument\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GherkinDocument.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a GherkinDocument message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                GherkinDocument.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        if (!$util.isString(message.uri))\n                            return \"uri: string expected\";\n                    if (message.feature != null && message.hasOwnProperty(\"feature\")) {\n                        var error = $root.io.cucumber.messages.GherkinDocument.Feature.verify(message.feature);\n                        if (error)\n                            return \"feature.\" + error;\n                    }\n                    if (message.comments != null && message.hasOwnProperty(\"comments\")) {\n                        if (!Array.isArray(message.comments))\n                            return \"comments: array expected\";\n                        for (var i = 0; i < message.comments.length; ++i) {\n                            var error = $root.io.cucumber.messages.GherkinDocument.Comment.verify(message.comments[i]);\n                            if (error)\n                                return \"comments.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a GherkinDocument message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.GherkinDocument} GherkinDocument\n                 */\n                GherkinDocument.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.GherkinDocument)\n                        return object;\n                    var message = new $root.io.cucumber.messages.GherkinDocument();\n                    if (object.uri != null)\n                        message.uri = String(object.uri);\n                    if (object.feature != null) {\n                        if (typeof object.feature !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.GherkinDocument.feature: object expected\");\n                        message.feature = $root.io.cucumber.messages.GherkinDocument.Feature.fromObject(object.feature);\n                    }\n                    if (object.comments) {\n                        if (!Array.isArray(object.comments))\n                            throw TypeError(\".io.cucumber.messages.GherkinDocument.comments: array expected\");\n                        message.comments = [];\n                        for (var i = 0; i < object.comments.length; ++i) {\n                            if (typeof object.comments[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.GherkinDocument.comments: object expected\");\n                            message.comments[i] = $root.io.cucumber.messages.GherkinDocument.Comment.fromObject(object.comments[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a GherkinDocument message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @static\n                 * @param {io.cucumber.messages.GherkinDocument} message GherkinDocument\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                GherkinDocument.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.comments = [];\n                    if (options.defaults) {\n                        object.uri = \"\";\n                        object.feature = null;\n                    }\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        object.uri = message.uri;\n                    if (message.feature != null && message.hasOwnProperty(\"feature\"))\n                        object.feature = $root.io.cucumber.messages.GherkinDocument.Feature.toObject(message.feature, options);\n                    if (message.comments && message.comments.length) {\n                        object.comments = [];\n                        for (var j = 0; j < message.comments.length; ++j)\n                            object.comments[j] = $root.io.cucumber.messages.GherkinDocument.Comment.toObject(message.comments[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this GherkinDocument to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.GherkinDocument\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                GherkinDocument.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                GherkinDocument.Comment = (function() {\n\n                    /**\n                     * Properties of a Comment.\n                     * @memberof io.cucumber.messages.GherkinDocument\n                     * @interface IComment\n                     * @property {io.cucumber.messages.ILocation|null} [location] Comment location\n                     * @property {string|null} [text] Comment text\n                     */\n\n                    /**\n                     * Constructs a new Comment.\n                     * @memberof io.cucumber.messages.GherkinDocument\n                     * @classdesc A comment in a Gherkin document\n                     * @implements IComment\n                     * @constructor\n                     * @param {io.cucumber.messages.GherkinDocument.IComment=} [properties] Properties to set\n                     */\n                    function Comment(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Comment location.\n                     * @member {io.cucumber.messages.ILocation|null|undefined} location\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @instance\n                     */\n                    Comment.prototype.location = null;\n\n                    /**\n                     * Comment text.\n                     * @member {string} text\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @instance\n                     */\n                    Comment.prototype.text = \"\";\n\n                    /**\n                     * Creates a new Comment instance using the specified properties.\n                     * @function create\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @static\n                     * @param {io.cucumber.messages.GherkinDocument.IComment=} [properties] Properties to set\n                     * @returns {io.cucumber.messages.GherkinDocument.Comment} Comment instance\n                     */\n                    Comment.create = function create(properties) {\n                        return new Comment(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Comment message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Comment.verify|verify} messages.\n                     * @function encode\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @static\n                     * @param {io.cucumber.messages.GherkinDocument.IComment} message Comment message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Comment.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.location != null && message.hasOwnProperty(\"location\"))\n                            $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.text != null && message.hasOwnProperty(\"text\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Comment message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Comment.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @static\n                     * @param {io.cucumber.messages.GherkinDocument.IComment} message Comment message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Comment.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Comment message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {io.cucumber.messages.GherkinDocument.Comment} Comment\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Comment.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Comment();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                message.text = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Comment message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {io.cucumber.messages.GherkinDocument.Comment} Comment\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Comment.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Comment message.\n                     * @function verify\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Comment.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.location != null && message.hasOwnProperty(\"location\")) {\n                            var error = $root.io.cucumber.messages.Location.verify(message.location);\n                            if (error)\n                                return \"location.\" + error;\n                        }\n                        if (message.text != null && message.hasOwnProperty(\"text\"))\n                            if (!$util.isString(message.text))\n                                return \"text: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Comment message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {io.cucumber.messages.GherkinDocument.Comment} Comment\n                     */\n                    Comment.fromObject = function fromObject(object) {\n                        if (object instanceof $root.io.cucumber.messages.GherkinDocument.Comment)\n                            return object;\n                        var message = new $root.io.cucumber.messages.GherkinDocument.Comment();\n                        if (object.location != null) {\n                            if (typeof object.location !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.GherkinDocument.Comment.location: object expected\");\n                            message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                        }\n                        if (object.text != null)\n                            message.text = String(object.text);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Comment message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @static\n                     * @param {io.cucumber.messages.GherkinDocument.Comment} message Comment\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Comment.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.location = null;\n                            object.text = \"\";\n                        }\n                        if (message.location != null && message.hasOwnProperty(\"location\"))\n                            object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                        if (message.text != null && message.hasOwnProperty(\"text\"))\n                            object.text = message.text;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Comment to JSON.\n                     * @function toJSON\n                     * @memberof io.cucumber.messages.GherkinDocument.Comment\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Comment.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Comment;\n                })();\n\n                GherkinDocument.Feature = (function() {\n\n                    /**\n                     * Properties of a Feature.\n                     * @memberof io.cucumber.messages.GherkinDocument\n                     * @interface IFeature\n                     * @property {io.cucumber.messages.ILocation|null} [location] Feature location\n                     * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.ITag>|null} [tags] Feature tags\n                     * @property {string|null} [language] Feature language\n                     * @property {string|null} [keyword] Feature keyword\n                     * @property {string|null} [name] Feature name\n                     * @property {string|null} [description] Feature description\n                     * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.IFeatureChild>|null} [children] Feature children\n                     */\n\n                    /**\n                     * Constructs a new Feature.\n                     * @memberof io.cucumber.messages.GherkinDocument\n                     * @classdesc The top level node in the AST\n                     * @implements IFeature\n                     * @constructor\n                     * @param {io.cucumber.messages.GherkinDocument.IFeature=} [properties] Properties to set\n                     */\n                    function Feature(properties) {\n                        this.tags = [];\n                        this.children = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Feature location.\n                     * @member {io.cucumber.messages.ILocation|null|undefined} location\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @instance\n                     */\n                    Feature.prototype.location = null;\n\n                    /**\n                     * Feature tags.\n                     * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.ITag>} tags\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @instance\n                     */\n                    Feature.prototype.tags = $util.emptyArray;\n\n                    /**\n                     * Feature language.\n                     * @member {string} language\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @instance\n                     */\n                    Feature.prototype.language = \"\";\n\n                    /**\n                     * Feature keyword.\n                     * @member {string} keyword\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @instance\n                     */\n                    Feature.prototype.keyword = \"\";\n\n                    /**\n                     * Feature name.\n                     * @member {string} name\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @instance\n                     */\n                    Feature.prototype.name = \"\";\n\n                    /**\n                     * Feature description.\n                     * @member {string} description\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @instance\n                     */\n                    Feature.prototype.description = \"\";\n\n                    /**\n                     * Feature children.\n                     * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.IFeatureChild>} children\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @instance\n                     */\n                    Feature.prototype.children = $util.emptyArray;\n\n                    /**\n                     * Creates a new Feature instance using the specified properties.\n                     * @function create\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @static\n                     * @param {io.cucumber.messages.GherkinDocument.IFeature=} [properties] Properties to set\n                     * @returns {io.cucumber.messages.GherkinDocument.Feature} Feature instance\n                     */\n                    Feature.create = function create(properties) {\n                        return new Feature(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Feature message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.verify|verify} messages.\n                     * @function encode\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @static\n                     * @param {io.cucumber.messages.GherkinDocument.IFeature} message Feature message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Feature.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.location != null && message.hasOwnProperty(\"location\"))\n                            $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.tags != null && message.tags.length)\n                            for (var i = 0; i < message.tags.length; ++i)\n                                $root.io.cucumber.messages.GherkinDocument.Feature.Tag.encode(message.tags[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.language != null && message.hasOwnProperty(\"language\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.language);\n                        if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.keyword);\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.description);\n                        if (message.children != null && message.children.length)\n                            for (var i = 0; i < message.children.length; ++i)\n                                $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.encode(message.children[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Feature message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @static\n                     * @param {io.cucumber.messages.GherkinDocument.IFeature} message Feature message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Feature.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Feature message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {io.cucumber.messages.GherkinDocument.Feature} Feature\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Feature.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                if (!(message.tags && message.tags.length))\n                                    message.tags = [];\n                                message.tags.push($root.io.cucumber.messages.GherkinDocument.Feature.Tag.decode(reader, reader.uint32()));\n                                break;\n                            case 3:\n                                message.language = reader.string();\n                                break;\n                            case 4:\n                                message.keyword = reader.string();\n                                break;\n                            case 5:\n                                message.name = reader.string();\n                                break;\n                            case 6:\n                                message.description = reader.string();\n                                break;\n                            case 7:\n                                if (!(message.children && message.children.length))\n                                    message.children = [];\n                                message.children.push($root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.decode(reader, reader.uint32()));\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Feature message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {io.cucumber.messages.GherkinDocument.Feature} Feature\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Feature.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Feature message.\n                     * @function verify\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Feature.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.location != null && message.hasOwnProperty(\"location\")) {\n                            var error = $root.io.cucumber.messages.Location.verify(message.location);\n                            if (error)\n                                return \"location.\" + error;\n                        }\n                        if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                            if (!Array.isArray(message.tags))\n                                return \"tags: array expected\";\n                            for (var i = 0; i < message.tags.length; ++i) {\n                                var error = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.verify(message.tags[i]);\n                                if (error)\n                                    return \"tags.\" + error;\n                            }\n                        }\n                        if (message.language != null && message.hasOwnProperty(\"language\"))\n                            if (!$util.isString(message.language))\n                                return \"language: string expected\";\n                        if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                            if (!$util.isString(message.keyword))\n                                return \"keyword: string expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            if (!$util.isString(message.description))\n                                return \"description: string expected\";\n                        if (message.children != null && message.hasOwnProperty(\"children\")) {\n                            if (!Array.isArray(message.children))\n                                return \"children: array expected\";\n                            for (var i = 0; i < message.children.length; ++i) {\n                                var error = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.verify(message.children[i]);\n                                if (error)\n                                    return \"children.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Feature message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {io.cucumber.messages.GherkinDocument.Feature} Feature\n                     */\n                    Feature.fromObject = function fromObject(object) {\n                        if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature)\n                            return object;\n                        var message = new $root.io.cucumber.messages.GherkinDocument.Feature();\n                        if (object.location != null) {\n                            if (typeof object.location !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.location: object expected\");\n                            message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                        }\n                        if (object.tags) {\n                            if (!Array.isArray(object.tags))\n                                throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.tags: array expected\");\n                            message.tags = [];\n                            for (var i = 0; i < object.tags.length; ++i) {\n                                if (typeof object.tags[i] !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.tags: object expected\");\n                                message.tags[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.fromObject(object.tags[i]);\n                            }\n                        }\n                        if (object.language != null)\n                            message.language = String(object.language);\n                        if (object.keyword != null)\n                            message.keyword = String(object.keyword);\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.description != null)\n                            message.description = String(object.description);\n                        if (object.children) {\n                            if (!Array.isArray(object.children))\n                                throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.children: array expected\");\n                            message.children = [];\n                            for (var i = 0; i < object.children.length; ++i) {\n                                if (typeof object.children[i] !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.children: object expected\");\n                                message.children[i] = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.fromObject(object.children[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Feature message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @static\n                     * @param {io.cucumber.messages.GherkinDocument.Feature} message Feature\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Feature.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.tags = [];\n                            object.children = [];\n                        }\n                        if (options.defaults) {\n                            object.location = null;\n                            object.language = \"\";\n                            object.keyword = \"\";\n                            object.name = \"\";\n                            object.description = \"\";\n                        }\n                        if (message.location != null && message.hasOwnProperty(\"location\"))\n                            object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                        if (message.tags && message.tags.length) {\n                            object.tags = [];\n                            for (var j = 0; j < message.tags.length; ++j)\n                                object.tags[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.toObject(message.tags[j], options);\n                        }\n                        if (message.language != null && message.hasOwnProperty(\"language\"))\n                            object.language = message.language;\n                        if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                            object.keyword = message.keyword;\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            object.description = message.description;\n                        if (message.children && message.children.length) {\n                            object.children = [];\n                            for (var j = 0; j < message.children.length; ++j)\n                                object.children[j] = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.toObject(message.children[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Feature to JSON.\n                     * @function toJSON\n                     * @memberof io.cucumber.messages.GherkinDocument.Feature\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Feature.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    Feature.Tag = (function() {\n\n                        /**\n                         * Properties of a Tag.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @interface ITag\n                         * @property {io.cucumber.messages.ILocation|null} [location] Tag location\n                         * @property {string|null} [name] Tag name\n                         * @property {string|null} [id] Tag id\n                         */\n\n                        /**\n                         * Constructs a new Tag.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @classdesc A tag\n                         * @implements ITag\n                         * @constructor\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.ITag=} [properties] Properties to set\n                         */\n                        function Tag(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Tag location.\n                         * @member {io.cucumber.messages.ILocation|null|undefined} location\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @instance\n                         */\n                        Tag.prototype.location = null;\n\n                        /**\n                         * Tag name.\n                         * @member {string} name\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @instance\n                         */\n                        Tag.prototype.name = \"\";\n\n                        /**\n                         * Tag id.\n                         * @member {string} id\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @instance\n                         */\n                        Tag.prototype.id = \"\";\n\n                        /**\n                         * Creates a new Tag instance using the specified properties.\n                         * @function create\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.ITag=} [properties] Properties to set\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Tag} Tag instance\n                         */\n                        Tag.create = function create(properties) {\n                            return new Tag(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Tag message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Tag.verify|verify} messages.\n                         * @function encode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.ITag} message Tag message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Tag.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.id);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Tag message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Tag.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.ITag} message Tag message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Tag.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Tag message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Tag} Tag\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Tag.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.Tag();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1:\n                                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                    break;\n                                case 2:\n                                    message.name = reader.string();\n                                    break;\n                                case 3:\n                                    message.id = reader.string();\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Tag message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Tag} Tag\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Tag.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Tag message.\n                         * @function verify\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Tag.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                if (error)\n                                    return \"location.\" + error;\n                            }\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                if (!$util.isString(message.name))\n                                    return \"name: string expected\";\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                if (!$util.isString(message.id))\n                                    return \"id: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Tag message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Tag} Tag\n                         */\n                        Tag.fromObject = function fromObject(object) {\n                            if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Tag)\n                                return object;\n                            var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Tag();\n                            if (object.location != null) {\n                                if (typeof object.location !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Tag.location: object expected\");\n                                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                            }\n                            if (object.name != null)\n                                message.name = String(object.name);\n                            if (object.id != null)\n                                message.id = String(object.id);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Tag message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.Tag} message Tag\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Tag.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                object.location = null;\n                                object.name = \"\";\n                                object.id = \"\";\n                            }\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                object.name = message.name;\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                object.id = message.id;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Tag to JSON.\n                         * @function toJSON\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Tag\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Tag.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        return Tag;\n                    })();\n\n                    Feature.FeatureChild = (function() {\n\n                        /**\n                         * Properties of a FeatureChild.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @interface IFeatureChild\n                         * @property {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRule|null} [rule] FeatureChild rule\n                         * @property {io.cucumber.messages.GherkinDocument.Feature.IBackground|null} [background] FeatureChild background\n                         * @property {io.cucumber.messages.GherkinDocument.Feature.IScenario|null} [scenario] FeatureChild scenario\n                         */\n\n                        /**\n                         * Constructs a new FeatureChild.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @classdesc A child node of a `Feature` node\n                         * @implements IFeatureChild\n                         * @constructor\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IFeatureChild=} [properties] Properties to set\n                         */\n                        function FeatureChild(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * FeatureChild rule.\n                         * @member {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRule|null|undefined} rule\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @instance\n                         */\n                        FeatureChild.prototype.rule = null;\n\n                        /**\n                         * FeatureChild background.\n                         * @member {io.cucumber.messages.GherkinDocument.Feature.IBackground|null|undefined} background\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @instance\n                         */\n                        FeatureChild.prototype.background = null;\n\n                        /**\n                         * FeatureChild scenario.\n                         * @member {io.cucumber.messages.GherkinDocument.Feature.IScenario|null|undefined} scenario\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @instance\n                         */\n                        FeatureChild.prototype.scenario = null;\n\n                        // OneOf field names bound to virtual getters and setters\n                        var $oneOfFields;\n\n                        /**\n                         * FeatureChild value.\n                         * @member {\"rule\"|\"background\"|\"scenario\"|undefined} value\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @instance\n                         */\n                        Object.defineProperty(FeatureChild.prototype, \"value\", {\n                            get: $util.oneOfGetter($oneOfFields = [\"rule\", \"background\", \"scenario\"]),\n                            set: $util.oneOfSetter($oneOfFields)\n                        });\n\n                        /**\n                         * Creates a new FeatureChild instance using the specified properties.\n                         * @function create\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IFeatureChild=} [properties] Properties to set\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild} FeatureChild instance\n                         */\n                        FeatureChild.create = function create(properties) {\n                            return new FeatureChild(properties);\n                        };\n\n                        /**\n                         * Encodes the specified FeatureChild message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.FeatureChild.verify|verify} messages.\n                         * @function encode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IFeatureChild} message FeatureChild message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        FeatureChild.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rule != null && message.hasOwnProperty(\"rule\"))\n                                $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.encode(message.rule, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            if (message.background != null && message.hasOwnProperty(\"background\"))\n                                $root.io.cucumber.messages.GherkinDocument.Feature.Background.encode(message.background, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                            if (message.scenario != null && message.hasOwnProperty(\"scenario\"))\n                                $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.encode(message.scenario, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified FeatureChild message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.FeatureChild.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IFeatureChild} message FeatureChild message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        FeatureChild.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a FeatureChild message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild} FeatureChild\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        FeatureChild.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1:\n                                    message.rule = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.decode(reader, reader.uint32());\n                                    break;\n                                case 2:\n                                    message.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.decode(reader, reader.uint32());\n                                    break;\n                                case 3:\n                                    message.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.decode(reader, reader.uint32());\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a FeatureChild message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild} FeatureChild\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        FeatureChild.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a FeatureChild message.\n                         * @function verify\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        FeatureChild.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            var properties = {};\n                            if (message.rule != null && message.hasOwnProperty(\"rule\")) {\n                                properties.value = 1;\n                                {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.verify(message.rule);\n                                    if (error)\n                                        return \"rule.\" + error;\n                                }\n                            }\n                            if (message.background != null && message.hasOwnProperty(\"background\")) {\n                                if (properties.value === 1)\n                                    return \"value: multiple values\";\n                                properties.value = 1;\n                                {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Background.verify(message.background);\n                                    if (error)\n                                        return \"background.\" + error;\n                                }\n                            }\n                            if (message.scenario != null && message.hasOwnProperty(\"scenario\")) {\n                                if (properties.value === 1)\n                                    return \"value: multiple values\";\n                                properties.value = 1;\n                                {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.verify(message.scenario);\n                                    if (error)\n                                        return \"scenario.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates a FeatureChild message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild} FeatureChild\n                         */\n                        FeatureChild.fromObject = function fromObject(object) {\n                            if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild)\n                                return object;\n                            var message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild();\n                            if (object.rule != null) {\n                                if (typeof object.rule !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.rule: object expected\");\n                                message.rule = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.fromObject(object.rule);\n                            }\n                            if (object.background != null) {\n                                if (typeof object.background !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.background: object expected\");\n                                message.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.fromObject(object.background);\n                            }\n                            if (object.scenario != null) {\n                                if (typeof object.scenario !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.scenario: object expected\");\n                                message.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.fromObject(object.scenario);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a FeatureChild message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild} message FeatureChild\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        FeatureChild.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (message.rule != null && message.hasOwnProperty(\"rule\")) {\n                                object.rule = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.toObject(message.rule, options);\n                                if (options.oneofs)\n                                    object.value = \"rule\";\n                            }\n                            if (message.background != null && message.hasOwnProperty(\"background\")) {\n                                object.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.toObject(message.background, options);\n                                if (options.oneofs)\n                                    object.value = \"background\";\n                            }\n                            if (message.scenario != null && message.hasOwnProperty(\"scenario\")) {\n                                object.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.toObject(message.scenario, options);\n                                if (options.oneofs)\n                                    object.value = \"scenario\";\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this FeatureChild to JSON.\n                         * @function toJSON\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        FeatureChild.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        FeatureChild.Rule = (function() {\n\n                            /**\n                             * Properties of a Rule.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                             * @interface IRule\n                             * @property {io.cucumber.messages.ILocation|null} [location] Rule location\n                             * @property {string|null} [keyword] Rule keyword\n                             * @property {string|null} [name] Rule name\n                             * @property {string|null} [description] Rule description\n                             * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRuleChild>|null} [children] Rule children\n                             */\n\n                            /**\n                             * Constructs a new Rule.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                             * @classdesc A `Rule` node\n                             * @implements IRule\n                             * @constructor\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRule=} [properties] Properties to set\n                             */\n                            function Rule(properties) {\n                                this.children = [];\n                                if (properties)\n                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                        if (properties[keys[i]] != null)\n                                            this[keys[i]] = properties[keys[i]];\n                            }\n\n                            /**\n                             * Rule location.\n                             * @member {io.cucumber.messages.ILocation|null|undefined} location\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @instance\n                             */\n                            Rule.prototype.location = null;\n\n                            /**\n                             * Rule keyword.\n                             * @member {string} keyword\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @instance\n                             */\n                            Rule.prototype.keyword = \"\";\n\n                            /**\n                             * Rule name.\n                             * @member {string} name\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @instance\n                             */\n                            Rule.prototype.name = \"\";\n\n                            /**\n                             * Rule description.\n                             * @member {string} description\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @instance\n                             */\n                            Rule.prototype.description = \"\";\n\n                            /**\n                             * Rule children.\n                             * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRuleChild>} children\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @instance\n                             */\n                            Rule.prototype.children = $util.emptyArray;\n\n                            /**\n                             * Creates a new Rule instance using the specified properties.\n                             * @function create\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRule=} [properties] Properties to set\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule} Rule instance\n                             */\n                            Rule.create = function create(properties) {\n                                return new Rule(properties);\n                            };\n\n                            /**\n                             * Encodes the specified Rule message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.verify|verify} messages.\n                             * @function encode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRule} message Rule message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            Rule.encode = function encode(message, writer) {\n                                if (!writer)\n                                    writer = $Writer.create();\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                                if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.keyword);\n                                if (message.name != null && message.hasOwnProperty(\"name\"))\n                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n                                if (message.description != null && message.hasOwnProperty(\"description\"))\n                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.description);\n                                if (message.children != null && message.children.length)\n                                    for (var i = 0; i < message.children.length; ++i)\n                                        $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.encode(message.children[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                                return writer;\n                            };\n\n                            /**\n                             * Encodes the specified Rule message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.verify|verify} messages.\n                             * @function encodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRule} message Rule message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            Rule.encodeDelimited = function encodeDelimited(message, writer) {\n                                return this.encode(message, writer).ldelim();\n                            };\n\n                            /**\n                             * Decodes a Rule message from the specified reader or buffer.\n                             * @function decode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @param {number} [length] Message length if known beforehand\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule} Rule\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            Rule.decode = function decode(reader, length) {\n                                if (!(reader instanceof $Reader))\n                                    reader = $Reader.create(reader);\n                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule();\n                                while (reader.pos < end) {\n                                    var tag = reader.uint32();\n                                    switch (tag >>> 3) {\n                                    case 1:\n                                        message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                        break;\n                                    case 2:\n                                        message.keyword = reader.string();\n                                        break;\n                                    case 3:\n                                        message.name = reader.string();\n                                        break;\n                                    case 4:\n                                        message.description = reader.string();\n                                        break;\n                                    case 5:\n                                        if (!(message.children && message.children.length))\n                                            message.children = [];\n                                        message.children.push($root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.decode(reader, reader.uint32()));\n                                        break;\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Decodes a Rule message from the specified reader or buffer, length delimited.\n                             * @function decodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule} Rule\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            Rule.decodeDelimited = function decodeDelimited(reader) {\n                                if (!(reader instanceof $Reader))\n                                    reader = new $Reader(reader);\n                                return this.decode(reader, reader.uint32());\n                            };\n\n                            /**\n                             * Verifies a Rule message.\n                             * @function verify\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @static\n                             * @param {Object.<string,*>} message Plain object to verify\n                             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                             */\n                            Rule.verify = function verify(message) {\n                                if (typeof message !== \"object\" || message === null)\n                                    return \"object expected\";\n                                if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                    var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                    if (error)\n                                        return \"location.\" + error;\n                                }\n                                if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                    if (!$util.isString(message.keyword))\n                                        return \"keyword: string expected\";\n                                if (message.name != null && message.hasOwnProperty(\"name\"))\n                                    if (!$util.isString(message.name))\n                                        return \"name: string expected\";\n                                if (message.description != null && message.hasOwnProperty(\"description\"))\n                                    if (!$util.isString(message.description))\n                                        return \"description: string expected\";\n                                if (message.children != null && message.hasOwnProperty(\"children\")) {\n                                    if (!Array.isArray(message.children))\n                                        return \"children: array expected\";\n                                    for (var i = 0; i < message.children.length; ++i) {\n                                        var error = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.verify(message.children[i]);\n                                        if (error)\n                                            return \"children.\" + error;\n                                    }\n                                }\n                                return null;\n                            };\n\n                            /**\n                             * Creates a Rule message from a plain object. Also converts values to their respective internal types.\n                             * @function fromObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @static\n                             * @param {Object.<string,*>} object Plain object\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule} Rule\n                             */\n                            Rule.fromObject = function fromObject(object) {\n                                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule)\n                                    return object;\n                                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule();\n                                if (object.location != null) {\n                                    if (typeof object.location !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.location: object expected\");\n                                    message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                                }\n                                if (object.keyword != null)\n                                    message.keyword = String(object.keyword);\n                                if (object.name != null)\n                                    message.name = String(object.name);\n                                if (object.description != null)\n                                    message.description = String(object.description);\n                                if (object.children) {\n                                    if (!Array.isArray(object.children))\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.children: array expected\");\n                                    message.children = [];\n                                    for (var i = 0; i < object.children.length; ++i) {\n                                        if (typeof object.children[i] !== \"object\")\n                                            throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule.children: object expected\");\n                                        message.children[i] = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.fromObject(object.children[i]);\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Creates a plain object from a Rule message. Also converts values to other types if specified.\n                             * @function toObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule} message Rule\n                             * @param {$protobuf.IConversionOptions} [options] Conversion options\n                             * @returns {Object.<string,*>} Plain object\n                             */\n                            Rule.toObject = function toObject(message, options) {\n                                if (!options)\n                                    options = {};\n                                var object = {};\n                                if (options.arrays || options.defaults)\n                                    object.children = [];\n                                if (options.defaults) {\n                                    object.location = null;\n                                    object.keyword = \"\";\n                                    object.name = \"\";\n                                    object.description = \"\";\n                                }\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                                if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                    object.keyword = message.keyword;\n                                if (message.name != null && message.hasOwnProperty(\"name\"))\n                                    object.name = message.name;\n                                if (message.description != null && message.hasOwnProperty(\"description\"))\n                                    object.description = message.description;\n                                if (message.children && message.children.length) {\n                                    object.children = [];\n                                    for (var j = 0; j < message.children.length; ++j)\n                                        object.children[j] = $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.toObject(message.children[j], options);\n                                }\n                                return object;\n                            };\n\n                            /**\n                             * Converts this Rule to JSON.\n                             * @function toJSON\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.Rule\n                             * @instance\n                             * @returns {Object.<string,*>} JSON object\n                             */\n                            Rule.prototype.toJSON = function toJSON() {\n                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                            };\n\n                            return Rule;\n                        })();\n\n                        FeatureChild.RuleChild = (function() {\n\n                            /**\n                             * Properties of a RuleChild.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                             * @interface IRuleChild\n                             * @property {io.cucumber.messages.GherkinDocument.Feature.IBackground|null} [background] RuleChild background\n                             * @property {io.cucumber.messages.GherkinDocument.Feature.IScenario|null} [scenario] RuleChild scenario\n                             */\n\n                            /**\n                             * Constructs a new RuleChild.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild\n                             * @classdesc Represents a RuleChild.\n                             * @implements IRuleChild\n                             * @constructor\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRuleChild=} [properties] Properties to set\n                             */\n                            function RuleChild(properties) {\n                                if (properties)\n                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                        if (properties[keys[i]] != null)\n                                            this[keys[i]] = properties[keys[i]];\n                            }\n\n                            /**\n                             * RuleChild background.\n                             * @member {io.cucumber.messages.GherkinDocument.Feature.IBackground|null|undefined} background\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @instance\n                             */\n                            RuleChild.prototype.background = null;\n\n                            /**\n                             * RuleChild scenario.\n                             * @member {io.cucumber.messages.GherkinDocument.Feature.IScenario|null|undefined} scenario\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @instance\n                             */\n                            RuleChild.prototype.scenario = null;\n\n                            // OneOf field names bound to virtual getters and setters\n                            var $oneOfFields;\n\n                            /**\n                             * RuleChild value.\n                             * @member {\"background\"|\"scenario\"|undefined} value\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @instance\n                             */\n                            Object.defineProperty(RuleChild.prototype, \"value\", {\n                                get: $util.oneOfGetter($oneOfFields = [\"background\", \"scenario\"]),\n                                set: $util.oneOfSetter($oneOfFields)\n                            });\n\n                            /**\n                             * Creates a new RuleChild instance using the specified properties.\n                             * @function create\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRuleChild=} [properties] Properties to set\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild} RuleChild instance\n                             */\n                            RuleChild.create = function create(properties) {\n                                return new RuleChild(properties);\n                            };\n\n                            /**\n                             * Encodes the specified RuleChild message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.verify|verify} messages.\n                             * @function encode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRuleChild} message RuleChild message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            RuleChild.encode = function encode(message, writer) {\n                                if (!writer)\n                                    writer = $Writer.create();\n                                if (message.background != null && message.hasOwnProperty(\"background\"))\n                                    $root.io.cucumber.messages.GherkinDocument.Feature.Background.encode(message.background, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                                if (message.scenario != null && message.hasOwnProperty(\"scenario\"))\n                                    $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.encode(message.scenario, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                                return writer;\n                            };\n\n                            /**\n                             * Encodes the specified RuleChild message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.verify|verify} messages.\n                             * @function encodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.IRuleChild} message RuleChild message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            RuleChild.encodeDelimited = function encodeDelimited(message, writer) {\n                                return this.encode(message, writer).ldelim();\n                            };\n\n                            /**\n                             * Decodes a RuleChild message from the specified reader or buffer.\n                             * @function decode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @param {number} [length] Message length if known beforehand\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild} RuleChild\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            RuleChild.decode = function decode(reader, length) {\n                                if (!(reader instanceof $Reader))\n                                    reader = $Reader.create(reader);\n                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild();\n                                while (reader.pos < end) {\n                                    var tag = reader.uint32();\n                                    switch (tag >>> 3) {\n                                    case 1:\n                                        message.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.decode(reader, reader.uint32());\n                                        break;\n                                    case 2:\n                                        message.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.decode(reader, reader.uint32());\n                                        break;\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Decodes a RuleChild message from the specified reader or buffer, length delimited.\n                             * @function decodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild} RuleChild\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            RuleChild.decodeDelimited = function decodeDelimited(reader) {\n                                if (!(reader instanceof $Reader))\n                                    reader = new $Reader(reader);\n                                return this.decode(reader, reader.uint32());\n                            };\n\n                            /**\n                             * Verifies a RuleChild message.\n                             * @function verify\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @static\n                             * @param {Object.<string,*>} message Plain object to verify\n                             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                             */\n                            RuleChild.verify = function verify(message) {\n                                if (typeof message !== \"object\" || message === null)\n                                    return \"object expected\";\n                                var properties = {};\n                                if (message.background != null && message.hasOwnProperty(\"background\")) {\n                                    properties.value = 1;\n                                    {\n                                        var error = $root.io.cucumber.messages.GherkinDocument.Feature.Background.verify(message.background);\n                                        if (error)\n                                            return \"background.\" + error;\n                                    }\n                                }\n                                if (message.scenario != null && message.hasOwnProperty(\"scenario\")) {\n                                    if (properties.value === 1)\n                                        return \"value: multiple values\";\n                                    properties.value = 1;\n                                    {\n                                        var error = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.verify(message.scenario);\n                                        if (error)\n                                            return \"scenario.\" + error;\n                                    }\n                                }\n                                return null;\n                            };\n\n                            /**\n                             * Creates a RuleChild message from a plain object. Also converts values to their respective internal types.\n                             * @function fromObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @static\n                             * @param {Object.<string,*>} object Plain object\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild} RuleChild\n                             */\n                            RuleChild.fromObject = function fromObject(object) {\n                                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild)\n                                    return object;\n                                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild();\n                                if (object.background != null) {\n                                    if (typeof object.background !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.background: object expected\");\n                                    message.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.fromObject(object.background);\n                                }\n                                if (object.scenario != null) {\n                                    if (typeof object.scenario !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild.scenario: object expected\");\n                                    message.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.fromObject(object.scenario);\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Creates a plain object from a RuleChild message. Also converts values to other types if specified.\n                             * @function toObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild} message RuleChild\n                             * @param {$protobuf.IConversionOptions} [options] Conversion options\n                             * @returns {Object.<string,*>} Plain object\n                             */\n                            RuleChild.toObject = function toObject(message, options) {\n                                if (!options)\n                                    options = {};\n                                var object = {};\n                                if (message.background != null && message.hasOwnProperty(\"background\")) {\n                                    object.background = $root.io.cucumber.messages.GherkinDocument.Feature.Background.toObject(message.background, options);\n                                    if (options.oneofs)\n                                        object.value = \"background\";\n                                }\n                                if (message.scenario != null && message.hasOwnProperty(\"scenario\")) {\n                                    object.scenario = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.toObject(message.scenario, options);\n                                    if (options.oneofs)\n                                        object.value = \"scenario\";\n                                }\n                                return object;\n                            };\n\n                            /**\n                             * Converts this RuleChild to JSON.\n                             * @function toJSON\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.FeatureChild.RuleChild\n                             * @instance\n                             * @returns {Object.<string,*>} JSON object\n                             */\n                            RuleChild.prototype.toJSON = function toJSON() {\n                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                            };\n\n                            return RuleChild;\n                        })();\n\n                        return FeatureChild;\n                    })();\n\n                    Feature.Background = (function() {\n\n                        /**\n                         * Properties of a Background.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @interface IBackground\n                         * @property {io.cucumber.messages.ILocation|null} [location] Background location\n                         * @property {string|null} [keyword] Background keyword\n                         * @property {string|null} [name] Background name\n                         * @property {string|null} [description] Background description\n                         * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.IStep>|null} [steps] Background steps\n                         */\n\n                        /**\n                         * Constructs a new Background.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @classdesc Represents a Background.\n                         * @implements IBackground\n                         * @constructor\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IBackground=} [properties] Properties to set\n                         */\n                        function Background(properties) {\n                            this.steps = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Background location.\n                         * @member {io.cucumber.messages.ILocation|null|undefined} location\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @instance\n                         */\n                        Background.prototype.location = null;\n\n                        /**\n                         * Background keyword.\n                         * @member {string} keyword\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @instance\n                         */\n                        Background.prototype.keyword = \"\";\n\n                        /**\n                         * Background name.\n                         * @member {string} name\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @instance\n                         */\n                        Background.prototype.name = \"\";\n\n                        /**\n                         * Background description.\n                         * @member {string} description\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @instance\n                         */\n                        Background.prototype.description = \"\";\n\n                        /**\n                         * Background steps.\n                         * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.IStep>} steps\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @instance\n                         */\n                        Background.prototype.steps = $util.emptyArray;\n\n                        /**\n                         * Creates a new Background instance using the specified properties.\n                         * @function create\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IBackground=} [properties] Properties to set\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Background} Background instance\n                         */\n                        Background.create = function create(properties) {\n                            return new Background(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Background message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Background.verify|verify} messages.\n                         * @function encode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IBackground} message Background message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Background.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.keyword);\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n                            if (message.description != null && message.hasOwnProperty(\"description\"))\n                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.description);\n                            if (message.steps != null && message.steps.length)\n                                for (var i = 0; i < message.steps.length; ++i)\n                                    $root.io.cucumber.messages.GherkinDocument.Feature.Step.encode(message.steps[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Background message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Background.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IBackground} message Background message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Background.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Background message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Background} Background\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Background.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.Background();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1:\n                                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                    break;\n                                case 2:\n                                    message.keyword = reader.string();\n                                    break;\n                                case 3:\n                                    message.name = reader.string();\n                                    break;\n                                case 4:\n                                    message.description = reader.string();\n                                    break;\n                                case 5:\n                                    if (!(message.steps && message.steps.length))\n                                        message.steps = [];\n                                    message.steps.push($root.io.cucumber.messages.GherkinDocument.Feature.Step.decode(reader, reader.uint32()));\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Background message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Background} Background\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Background.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Background message.\n                         * @function verify\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Background.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                if (error)\n                                    return \"location.\" + error;\n                            }\n                            if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                if (!$util.isString(message.keyword))\n                                    return \"keyword: string expected\";\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                if (!$util.isString(message.name))\n                                    return \"name: string expected\";\n                            if (message.description != null && message.hasOwnProperty(\"description\"))\n                                if (!$util.isString(message.description))\n                                    return \"description: string expected\";\n                            if (message.steps != null && message.hasOwnProperty(\"steps\")) {\n                                if (!Array.isArray(message.steps))\n                                    return \"steps: array expected\";\n                                for (var i = 0; i < message.steps.length; ++i) {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Step.verify(message.steps[i]);\n                                    if (error)\n                                        return \"steps.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Background message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Background} Background\n                         */\n                        Background.fromObject = function fromObject(object) {\n                            if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Background)\n                                return object;\n                            var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Background();\n                            if (object.location != null) {\n                                if (typeof object.location !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Background.location: object expected\");\n                                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                            }\n                            if (object.keyword != null)\n                                message.keyword = String(object.keyword);\n                            if (object.name != null)\n                                message.name = String(object.name);\n                            if (object.description != null)\n                                message.description = String(object.description);\n                            if (object.steps) {\n                                if (!Array.isArray(object.steps))\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Background.steps: array expected\");\n                                message.steps = [];\n                                for (var i = 0; i < object.steps.length; ++i) {\n                                    if (typeof object.steps[i] !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Background.steps: object expected\");\n                                    message.steps[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Step.fromObject(object.steps[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Background message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.Background} message Background\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Background.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.steps = [];\n                            if (options.defaults) {\n                                object.location = null;\n                                object.keyword = \"\";\n                                object.name = \"\";\n                                object.description = \"\";\n                            }\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                            if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                object.keyword = message.keyword;\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                object.name = message.name;\n                            if (message.description != null && message.hasOwnProperty(\"description\"))\n                                object.description = message.description;\n                            if (message.steps && message.steps.length) {\n                                object.steps = [];\n                                for (var j = 0; j < message.steps.length; ++j)\n                                    object.steps[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Step.toObject(message.steps[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Background to JSON.\n                         * @function toJSON\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Background\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Background.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        return Background;\n                    })();\n\n                    Feature.Scenario = (function() {\n\n                        /**\n                         * Properties of a Scenario.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @interface IScenario\n                         * @property {io.cucumber.messages.ILocation|null} [location] Scenario location\n                         * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.ITag>|null} [tags] Scenario tags\n                         * @property {string|null} [keyword] Scenario keyword\n                         * @property {string|null} [name] Scenario name\n                         * @property {string|null} [description] Scenario description\n                         * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.IStep>|null} [steps] Scenario steps\n                         * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.Scenario.IExamples>|null} [examples] Scenario examples\n                         * @property {string|null} [id] Scenario id\n                         */\n\n                        /**\n                         * Constructs a new Scenario.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @classdesc Represents a Scenario.\n                         * @implements IScenario\n                         * @constructor\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IScenario=} [properties] Properties to set\n                         */\n                        function Scenario(properties) {\n                            this.tags = [];\n                            this.steps = [];\n                            this.examples = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Scenario location.\n                         * @member {io.cucumber.messages.ILocation|null|undefined} location\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @instance\n                         */\n                        Scenario.prototype.location = null;\n\n                        /**\n                         * Scenario tags.\n                         * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.ITag>} tags\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @instance\n                         */\n                        Scenario.prototype.tags = $util.emptyArray;\n\n                        /**\n                         * Scenario keyword.\n                         * @member {string} keyword\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @instance\n                         */\n                        Scenario.prototype.keyword = \"\";\n\n                        /**\n                         * Scenario name.\n                         * @member {string} name\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @instance\n                         */\n                        Scenario.prototype.name = \"\";\n\n                        /**\n                         * Scenario description.\n                         * @member {string} description\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @instance\n                         */\n                        Scenario.prototype.description = \"\";\n\n                        /**\n                         * Scenario steps.\n                         * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.IStep>} steps\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @instance\n                         */\n                        Scenario.prototype.steps = $util.emptyArray;\n\n                        /**\n                         * Scenario examples.\n                         * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.Scenario.IExamples>} examples\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @instance\n                         */\n                        Scenario.prototype.examples = $util.emptyArray;\n\n                        /**\n                         * Scenario id.\n                         * @member {string} id\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @instance\n                         */\n                        Scenario.prototype.id = \"\";\n\n                        /**\n                         * Creates a new Scenario instance using the specified properties.\n                         * @function create\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IScenario=} [properties] Properties to set\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Scenario} Scenario instance\n                         */\n                        Scenario.create = function create(properties) {\n                            return new Scenario(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Scenario message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Scenario.verify|verify} messages.\n                         * @function encode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IScenario} message Scenario message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Scenario.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            if (message.tags != null && message.tags.length)\n                                for (var i = 0; i < message.tags.length; ++i)\n                                    $root.io.cucumber.messages.GherkinDocument.Feature.Tag.encode(message.tags[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                            if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.keyword);\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);\n                            if (message.description != null && message.hasOwnProperty(\"description\"))\n                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);\n                            if (message.steps != null && message.steps.length)\n                                for (var i = 0; i < message.steps.length; ++i)\n                                    $root.io.cucumber.messages.GherkinDocument.Feature.Step.encode(message.steps[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                            if (message.examples != null && message.examples.length)\n                                for (var i = 0; i < message.examples.length; ++i)\n                                    $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.encode(message.examples[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.id);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Scenario message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Scenario.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IScenario} message Scenario message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Scenario.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Scenario message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Scenario} Scenario\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Scenario.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.Scenario();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1:\n                                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                    break;\n                                case 2:\n                                    if (!(message.tags && message.tags.length))\n                                        message.tags = [];\n                                    message.tags.push($root.io.cucumber.messages.GherkinDocument.Feature.Tag.decode(reader, reader.uint32()));\n                                    break;\n                                case 3:\n                                    message.keyword = reader.string();\n                                    break;\n                                case 4:\n                                    message.name = reader.string();\n                                    break;\n                                case 5:\n                                    message.description = reader.string();\n                                    break;\n                                case 6:\n                                    if (!(message.steps && message.steps.length))\n                                        message.steps = [];\n                                    message.steps.push($root.io.cucumber.messages.GherkinDocument.Feature.Step.decode(reader, reader.uint32()));\n                                    break;\n                                case 7:\n                                    if (!(message.examples && message.examples.length))\n                                        message.examples = [];\n                                    message.examples.push($root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.decode(reader, reader.uint32()));\n                                    break;\n                                case 8:\n                                    message.id = reader.string();\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Scenario message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Scenario} Scenario\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Scenario.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Scenario message.\n                         * @function verify\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Scenario.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                if (error)\n                                    return \"location.\" + error;\n                            }\n                            if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                                if (!Array.isArray(message.tags))\n                                    return \"tags: array expected\";\n                                for (var i = 0; i < message.tags.length; ++i) {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.verify(message.tags[i]);\n                                    if (error)\n                                        return \"tags.\" + error;\n                                }\n                            }\n                            if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                if (!$util.isString(message.keyword))\n                                    return \"keyword: string expected\";\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                if (!$util.isString(message.name))\n                                    return \"name: string expected\";\n                            if (message.description != null && message.hasOwnProperty(\"description\"))\n                                if (!$util.isString(message.description))\n                                    return \"description: string expected\";\n                            if (message.steps != null && message.hasOwnProperty(\"steps\")) {\n                                if (!Array.isArray(message.steps))\n                                    return \"steps: array expected\";\n                                for (var i = 0; i < message.steps.length; ++i) {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Step.verify(message.steps[i]);\n                                    if (error)\n                                        return \"steps.\" + error;\n                                }\n                            }\n                            if (message.examples != null && message.hasOwnProperty(\"examples\")) {\n                                if (!Array.isArray(message.examples))\n                                    return \"examples: array expected\";\n                                for (var i = 0; i < message.examples.length; ++i) {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.verify(message.examples[i]);\n                                    if (error)\n                                        return \"examples.\" + error;\n                                }\n                            }\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                if (!$util.isString(message.id))\n                                    return \"id: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Scenario message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Scenario} Scenario\n                         */\n                        Scenario.fromObject = function fromObject(object) {\n                            if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Scenario)\n                                return object;\n                            var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Scenario();\n                            if (object.location != null) {\n                                if (typeof object.location !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.location: object expected\");\n                                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                            }\n                            if (object.tags) {\n                                if (!Array.isArray(object.tags))\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.tags: array expected\");\n                                message.tags = [];\n                                for (var i = 0; i < object.tags.length; ++i) {\n                                    if (typeof object.tags[i] !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.tags: object expected\");\n                                    message.tags[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.fromObject(object.tags[i]);\n                                }\n                            }\n                            if (object.keyword != null)\n                                message.keyword = String(object.keyword);\n                            if (object.name != null)\n                                message.name = String(object.name);\n                            if (object.description != null)\n                                message.description = String(object.description);\n                            if (object.steps) {\n                                if (!Array.isArray(object.steps))\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.steps: array expected\");\n                                message.steps = [];\n                                for (var i = 0; i < object.steps.length; ++i) {\n                                    if (typeof object.steps[i] !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.steps: object expected\");\n                                    message.steps[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Step.fromObject(object.steps[i]);\n                                }\n                            }\n                            if (object.examples) {\n                                if (!Array.isArray(object.examples))\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.examples: array expected\");\n                                message.examples = [];\n                                for (var i = 0; i < object.examples.length; ++i) {\n                                    if (typeof object.examples[i] !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.examples: object expected\");\n                                    message.examples[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.fromObject(object.examples[i]);\n                                }\n                            }\n                            if (object.id != null)\n                                message.id = String(object.id);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Scenario message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.Scenario} message Scenario\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Scenario.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults) {\n                                object.tags = [];\n                                object.steps = [];\n                                object.examples = [];\n                            }\n                            if (options.defaults) {\n                                object.location = null;\n                                object.keyword = \"\";\n                                object.name = \"\";\n                                object.description = \"\";\n                                object.id = \"\";\n                            }\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                            if (message.tags && message.tags.length) {\n                                object.tags = [];\n                                for (var j = 0; j < message.tags.length; ++j)\n                                    object.tags[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.toObject(message.tags[j], options);\n                            }\n                            if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                object.keyword = message.keyword;\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                object.name = message.name;\n                            if (message.description != null && message.hasOwnProperty(\"description\"))\n                                object.description = message.description;\n                            if (message.steps && message.steps.length) {\n                                object.steps = [];\n                                for (var j = 0; j < message.steps.length; ++j)\n                                    object.steps[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Step.toObject(message.steps[j], options);\n                            }\n                            if (message.examples && message.examples.length) {\n                                object.examples = [];\n                                for (var j = 0; j < message.examples.length; ++j)\n                                    object.examples[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.toObject(message.examples[j], options);\n                            }\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                object.id = message.id;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Scenario to JSON.\n                         * @function toJSON\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Scenario.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        Scenario.Examples = (function() {\n\n                            /**\n                             * Properties of an Examples.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                             * @interface IExamples\n                             * @property {io.cucumber.messages.ILocation|null} [location] Examples location\n                             * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.ITag>|null} [tags] Examples tags\n                             * @property {string|null} [keyword] Examples keyword\n                             * @property {string|null} [name] Examples name\n                             * @property {string|null} [description] Examples description\n                             * @property {io.cucumber.messages.GherkinDocument.Feature.ITableRow|null} [tableHeader] Examples tableHeader\n                             * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.ITableRow>|null} [tableBody] Examples tableBody\n                             */\n\n                            /**\n                             * Constructs a new Examples.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario\n                             * @classdesc Represents an Examples.\n                             * @implements IExamples\n                             * @constructor\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Scenario.IExamples=} [properties] Properties to set\n                             */\n                            function Examples(properties) {\n                                this.tags = [];\n                                this.tableBody = [];\n                                if (properties)\n                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                        if (properties[keys[i]] != null)\n                                            this[keys[i]] = properties[keys[i]];\n                            }\n\n                            /**\n                             * Examples location.\n                             * @member {io.cucumber.messages.ILocation|null|undefined} location\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @instance\n                             */\n                            Examples.prototype.location = null;\n\n                            /**\n                             * Examples tags.\n                             * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.ITag>} tags\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @instance\n                             */\n                            Examples.prototype.tags = $util.emptyArray;\n\n                            /**\n                             * Examples keyword.\n                             * @member {string} keyword\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @instance\n                             */\n                            Examples.prototype.keyword = \"\";\n\n                            /**\n                             * Examples name.\n                             * @member {string} name\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @instance\n                             */\n                            Examples.prototype.name = \"\";\n\n                            /**\n                             * Examples description.\n                             * @member {string} description\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @instance\n                             */\n                            Examples.prototype.description = \"\";\n\n                            /**\n                             * Examples tableHeader.\n                             * @member {io.cucumber.messages.GherkinDocument.Feature.ITableRow|null|undefined} tableHeader\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @instance\n                             */\n                            Examples.prototype.tableHeader = null;\n\n                            /**\n                             * Examples tableBody.\n                             * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.ITableRow>} tableBody\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @instance\n                             */\n                            Examples.prototype.tableBody = $util.emptyArray;\n\n                            /**\n                             * Creates a new Examples instance using the specified properties.\n                             * @function create\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Scenario.IExamples=} [properties] Properties to set\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples} Examples instance\n                             */\n                            Examples.create = function create(properties) {\n                                return new Examples(properties);\n                            };\n\n                            /**\n                             * Encodes the specified Examples message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.verify|verify} messages.\n                             * @function encode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Scenario.IExamples} message Examples message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            Examples.encode = function encode(message, writer) {\n                                if (!writer)\n                                    writer = $Writer.create();\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                                if (message.tags != null && message.tags.length)\n                                    for (var i = 0; i < message.tags.length; ++i)\n                                        $root.io.cucumber.messages.GherkinDocument.Feature.Tag.encode(message.tags[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                                if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.keyword);\n                                if (message.name != null && message.hasOwnProperty(\"name\"))\n                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);\n                                if (message.description != null && message.hasOwnProperty(\"description\"))\n                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);\n                                if (message.tableHeader != null && message.hasOwnProperty(\"tableHeader\"))\n                                    $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.encode(message.tableHeader, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                                if (message.tableBody != null && message.tableBody.length)\n                                    for (var i = 0; i < message.tableBody.length; ++i)\n                                        $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.encode(message.tableBody[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                                return writer;\n                            };\n\n                            /**\n                             * Encodes the specified Examples message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.verify|verify} messages.\n                             * @function encodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Scenario.IExamples} message Examples message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            Examples.encodeDelimited = function encodeDelimited(message, writer) {\n                                return this.encode(message, writer).ldelim();\n                            };\n\n                            /**\n                             * Decodes an Examples message from the specified reader or buffer.\n                             * @function decode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @param {number} [length] Message length if known beforehand\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples} Examples\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            Examples.decode = function decode(reader, length) {\n                                if (!(reader instanceof $Reader))\n                                    reader = $Reader.create(reader);\n                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples();\n                                while (reader.pos < end) {\n                                    var tag = reader.uint32();\n                                    switch (tag >>> 3) {\n                                    case 1:\n                                        message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                        break;\n                                    case 2:\n                                        if (!(message.tags && message.tags.length))\n                                            message.tags = [];\n                                        message.tags.push($root.io.cucumber.messages.GherkinDocument.Feature.Tag.decode(reader, reader.uint32()));\n                                        break;\n                                    case 3:\n                                        message.keyword = reader.string();\n                                        break;\n                                    case 4:\n                                        message.name = reader.string();\n                                        break;\n                                    case 5:\n                                        message.description = reader.string();\n                                        break;\n                                    case 6:\n                                        message.tableHeader = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.decode(reader, reader.uint32());\n                                        break;\n                                    case 7:\n                                        if (!(message.tableBody && message.tableBody.length))\n                                            message.tableBody = [];\n                                        message.tableBody.push($root.io.cucumber.messages.GherkinDocument.Feature.TableRow.decode(reader, reader.uint32()));\n                                        break;\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Decodes an Examples message from the specified reader or buffer, length delimited.\n                             * @function decodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples} Examples\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            Examples.decodeDelimited = function decodeDelimited(reader) {\n                                if (!(reader instanceof $Reader))\n                                    reader = new $Reader(reader);\n                                return this.decode(reader, reader.uint32());\n                            };\n\n                            /**\n                             * Verifies an Examples message.\n                             * @function verify\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @static\n                             * @param {Object.<string,*>} message Plain object to verify\n                             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                             */\n                            Examples.verify = function verify(message) {\n                                if (typeof message !== \"object\" || message === null)\n                                    return \"object expected\";\n                                if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                    var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                    if (error)\n                                        return \"location.\" + error;\n                                }\n                                if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                                    if (!Array.isArray(message.tags))\n                                        return \"tags: array expected\";\n                                    for (var i = 0; i < message.tags.length; ++i) {\n                                        var error = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.verify(message.tags[i]);\n                                        if (error)\n                                            return \"tags.\" + error;\n                                    }\n                                }\n                                if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                    if (!$util.isString(message.keyword))\n                                        return \"keyword: string expected\";\n                                if (message.name != null && message.hasOwnProperty(\"name\"))\n                                    if (!$util.isString(message.name))\n                                        return \"name: string expected\";\n                                if (message.description != null && message.hasOwnProperty(\"description\"))\n                                    if (!$util.isString(message.description))\n                                        return \"description: string expected\";\n                                if (message.tableHeader != null && message.hasOwnProperty(\"tableHeader\")) {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.verify(message.tableHeader);\n                                    if (error)\n                                        return \"tableHeader.\" + error;\n                                }\n                                if (message.tableBody != null && message.hasOwnProperty(\"tableBody\")) {\n                                    if (!Array.isArray(message.tableBody))\n                                        return \"tableBody: array expected\";\n                                    for (var i = 0; i < message.tableBody.length; ++i) {\n                                        var error = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.verify(message.tableBody[i]);\n                                        if (error)\n                                            return \"tableBody.\" + error;\n                                    }\n                                }\n                                return null;\n                            };\n\n                            /**\n                             * Creates an Examples message from a plain object. Also converts values to their respective internal types.\n                             * @function fromObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @static\n                             * @param {Object.<string,*>} object Plain object\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples} Examples\n                             */\n                            Examples.fromObject = function fromObject(object) {\n                                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples)\n                                    return object;\n                                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples();\n                                if (object.location != null) {\n                                    if (typeof object.location !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.location: object expected\");\n                                    message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                                }\n                                if (object.tags) {\n                                    if (!Array.isArray(object.tags))\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tags: array expected\");\n                                    message.tags = [];\n                                    for (var i = 0; i < object.tags.length; ++i) {\n                                        if (typeof object.tags[i] !== \"object\")\n                                            throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tags: object expected\");\n                                        message.tags[i] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.fromObject(object.tags[i]);\n                                    }\n                                }\n                                if (object.keyword != null)\n                                    message.keyword = String(object.keyword);\n                                if (object.name != null)\n                                    message.name = String(object.name);\n                                if (object.description != null)\n                                    message.description = String(object.description);\n                                if (object.tableHeader != null) {\n                                    if (typeof object.tableHeader !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tableHeader: object expected\");\n                                    message.tableHeader = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.fromObject(object.tableHeader);\n                                }\n                                if (object.tableBody) {\n                                    if (!Array.isArray(object.tableBody))\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tableBody: array expected\");\n                                    message.tableBody = [];\n                                    for (var i = 0; i < object.tableBody.length; ++i) {\n                                        if (typeof object.tableBody[i] !== \"object\")\n                                            throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples.tableBody: object expected\");\n                                        message.tableBody[i] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.fromObject(object.tableBody[i]);\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Creates a plain object from an Examples message. Also converts values to other types if specified.\n                             * @function toObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples} message Examples\n                             * @param {$protobuf.IConversionOptions} [options] Conversion options\n                             * @returns {Object.<string,*>} Plain object\n                             */\n                            Examples.toObject = function toObject(message, options) {\n                                if (!options)\n                                    options = {};\n                                var object = {};\n                                if (options.arrays || options.defaults) {\n                                    object.tags = [];\n                                    object.tableBody = [];\n                                }\n                                if (options.defaults) {\n                                    object.location = null;\n                                    object.keyword = \"\";\n                                    object.name = \"\";\n                                    object.description = \"\";\n                                    object.tableHeader = null;\n                                }\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                                if (message.tags && message.tags.length) {\n                                    object.tags = [];\n                                    for (var j = 0; j < message.tags.length; ++j)\n                                        object.tags[j] = $root.io.cucumber.messages.GherkinDocument.Feature.Tag.toObject(message.tags[j], options);\n                                }\n                                if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                    object.keyword = message.keyword;\n                                if (message.name != null && message.hasOwnProperty(\"name\"))\n                                    object.name = message.name;\n                                if (message.description != null && message.hasOwnProperty(\"description\"))\n                                    object.description = message.description;\n                                if (message.tableHeader != null && message.hasOwnProperty(\"tableHeader\"))\n                                    object.tableHeader = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.toObject(message.tableHeader, options);\n                                if (message.tableBody && message.tableBody.length) {\n                                    object.tableBody = [];\n                                    for (var j = 0; j < message.tableBody.length; ++j)\n                                        object.tableBody[j] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.toObject(message.tableBody[j], options);\n                                }\n                                return object;\n                            };\n\n                            /**\n                             * Converts this Examples to JSON.\n                             * @function toJSON\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Scenario.Examples\n                             * @instance\n                             * @returns {Object.<string,*>} JSON object\n                             */\n                            Examples.prototype.toJSON = function toJSON() {\n                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                            };\n\n                            return Examples;\n                        })();\n\n                        return Scenario;\n                    })();\n\n                    Feature.TableRow = (function() {\n\n                        /**\n                         * Properties of a TableRow.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @interface ITableRow\n                         * @property {io.cucumber.messages.ILocation|null} [location] TableRow location\n                         * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.TableRow.ITableCell>|null} [cells] TableRow cells\n                         * @property {string|null} [id] TableRow id\n                         */\n\n                        /**\n                         * Constructs a new TableRow.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @classdesc Represents a TableRow.\n                         * @implements ITableRow\n                         * @constructor\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.ITableRow=} [properties] Properties to set\n                         */\n                        function TableRow(properties) {\n                            this.cells = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * TableRow location.\n                         * @member {io.cucumber.messages.ILocation|null|undefined} location\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @instance\n                         */\n                        TableRow.prototype.location = null;\n\n                        /**\n                         * TableRow cells.\n                         * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.TableRow.ITableCell>} cells\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @instance\n                         */\n                        TableRow.prototype.cells = $util.emptyArray;\n\n                        /**\n                         * TableRow id.\n                         * @member {string} id\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @instance\n                         */\n                        TableRow.prototype.id = \"\";\n\n                        /**\n                         * Creates a new TableRow instance using the specified properties.\n                         * @function create\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.ITableRow=} [properties] Properties to set\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.TableRow} TableRow instance\n                         */\n                        TableRow.create = function create(properties) {\n                            return new TableRow(properties);\n                        };\n\n                        /**\n                         * Encodes the specified TableRow message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.TableRow.verify|verify} messages.\n                         * @function encode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.ITableRow} message TableRow message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        TableRow.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            if (message.cells != null && message.cells.length)\n                                for (var i = 0; i < message.cells.length; ++i)\n                                    $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.encode(message.cells[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.id);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified TableRow message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.TableRow.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.ITableRow} message TableRow message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        TableRow.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a TableRow message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.TableRow} TableRow\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        TableRow.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.TableRow();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1:\n                                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                    break;\n                                case 2:\n                                    if (!(message.cells && message.cells.length))\n                                        message.cells = [];\n                                    message.cells.push($root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.decode(reader, reader.uint32()));\n                                    break;\n                                case 3:\n                                    message.id = reader.string();\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a TableRow message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.TableRow} TableRow\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        TableRow.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a TableRow message.\n                         * @function verify\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        TableRow.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                if (error)\n                                    return \"location.\" + error;\n                            }\n                            if (message.cells != null && message.hasOwnProperty(\"cells\")) {\n                                if (!Array.isArray(message.cells))\n                                    return \"cells: array expected\";\n                                for (var i = 0; i < message.cells.length; ++i) {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.verify(message.cells[i]);\n                                    if (error)\n                                        return \"cells.\" + error;\n                                }\n                            }\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                if (!$util.isString(message.id))\n                                    return \"id: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a TableRow message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.TableRow} TableRow\n                         */\n                        TableRow.fromObject = function fromObject(object) {\n                            if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.TableRow)\n                                return object;\n                            var message = new $root.io.cucumber.messages.GherkinDocument.Feature.TableRow();\n                            if (object.location != null) {\n                                if (typeof object.location !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.TableRow.location: object expected\");\n                                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                            }\n                            if (object.cells) {\n                                if (!Array.isArray(object.cells))\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.TableRow.cells: array expected\");\n                                message.cells = [];\n                                for (var i = 0; i < object.cells.length; ++i) {\n                                    if (typeof object.cells[i] !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.TableRow.cells: object expected\");\n                                    message.cells[i] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.fromObject(object.cells[i]);\n                                }\n                            }\n                            if (object.id != null)\n                                message.id = String(object.id);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a TableRow message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.TableRow} message TableRow\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        TableRow.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.cells = [];\n                            if (options.defaults) {\n                                object.location = null;\n                                object.id = \"\";\n                            }\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                            if (message.cells && message.cells.length) {\n                                object.cells = [];\n                                for (var j = 0; j < message.cells.length; ++j)\n                                    object.cells[j] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.toObject(message.cells[j], options);\n                            }\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                object.id = message.id;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this TableRow to JSON.\n                         * @function toJSON\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        TableRow.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        TableRow.TableCell = (function() {\n\n                            /**\n                             * Properties of a TableCell.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                             * @interface ITableCell\n                             * @property {io.cucumber.messages.ILocation|null} [location] TableCell location\n                             * @property {string|null} [value] TableCell value\n                             */\n\n                            /**\n                             * Constructs a new TableCell.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow\n                             * @classdesc Represents a TableCell.\n                             * @implements ITableCell\n                             * @constructor\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.TableRow.ITableCell=} [properties] Properties to set\n                             */\n                            function TableCell(properties) {\n                                if (properties)\n                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                        if (properties[keys[i]] != null)\n                                            this[keys[i]] = properties[keys[i]];\n                            }\n\n                            /**\n                             * TableCell location.\n                             * @member {io.cucumber.messages.ILocation|null|undefined} location\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @instance\n                             */\n                            TableCell.prototype.location = null;\n\n                            /**\n                             * TableCell value.\n                             * @member {string} value\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @instance\n                             */\n                            TableCell.prototype.value = \"\";\n\n                            /**\n                             * Creates a new TableCell instance using the specified properties.\n                             * @function create\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.TableRow.ITableCell=} [properties] Properties to set\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell} TableCell instance\n                             */\n                            TableCell.create = function create(properties) {\n                                return new TableCell(properties);\n                            };\n\n                            /**\n                             * Encodes the specified TableCell message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.verify|verify} messages.\n                             * @function encode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.TableRow.ITableCell} message TableCell message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            TableCell.encode = function encode(message, writer) {\n                                if (!writer)\n                                    writer = $Writer.create();\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                                if (message.value != null && message.hasOwnProperty(\"value\"))\n                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n                                return writer;\n                            };\n\n                            /**\n                             * Encodes the specified TableCell message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.verify|verify} messages.\n                             * @function encodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.TableRow.ITableCell} message TableCell message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            TableCell.encodeDelimited = function encodeDelimited(message, writer) {\n                                return this.encode(message, writer).ldelim();\n                            };\n\n                            /**\n                             * Decodes a TableCell message from the specified reader or buffer.\n                             * @function decode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @param {number} [length] Message length if known beforehand\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell} TableCell\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            TableCell.decode = function decode(reader, length) {\n                                if (!(reader instanceof $Reader))\n                                    reader = $Reader.create(reader);\n                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell();\n                                while (reader.pos < end) {\n                                    var tag = reader.uint32();\n                                    switch (tag >>> 3) {\n                                    case 1:\n                                        message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                        break;\n                                    case 2:\n                                        message.value = reader.string();\n                                        break;\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Decodes a TableCell message from the specified reader or buffer, length delimited.\n                             * @function decodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell} TableCell\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            TableCell.decodeDelimited = function decodeDelimited(reader) {\n                                if (!(reader instanceof $Reader))\n                                    reader = new $Reader(reader);\n                                return this.decode(reader, reader.uint32());\n                            };\n\n                            /**\n                             * Verifies a TableCell message.\n                             * @function verify\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @static\n                             * @param {Object.<string,*>} message Plain object to verify\n                             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                             */\n                            TableCell.verify = function verify(message) {\n                                if (typeof message !== \"object\" || message === null)\n                                    return \"object expected\";\n                                if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                    var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                    if (error)\n                                        return \"location.\" + error;\n                                }\n                                if (message.value != null && message.hasOwnProperty(\"value\"))\n                                    if (!$util.isString(message.value))\n                                        return \"value: string expected\";\n                                return null;\n                            };\n\n                            /**\n                             * Creates a TableCell message from a plain object. Also converts values to their respective internal types.\n                             * @function fromObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @static\n                             * @param {Object.<string,*>} object Plain object\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell} TableCell\n                             */\n                            TableCell.fromObject = function fromObject(object) {\n                                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell)\n                                    return object;\n                                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell();\n                                if (object.location != null) {\n                                    if (typeof object.location !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell.location: object expected\");\n                                    message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                                }\n                                if (object.value != null)\n                                    message.value = String(object.value);\n                                return message;\n                            };\n\n                            /**\n                             * Creates a plain object from a TableCell message. Also converts values to other types if specified.\n                             * @function toObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell} message TableCell\n                             * @param {$protobuf.IConversionOptions} [options] Conversion options\n                             * @returns {Object.<string,*>} Plain object\n                             */\n                            TableCell.toObject = function toObject(message, options) {\n                                if (!options)\n                                    options = {};\n                                var object = {};\n                                if (options.defaults) {\n                                    object.location = null;\n                                    object.value = \"\";\n                                }\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                                if (message.value != null && message.hasOwnProperty(\"value\"))\n                                    object.value = message.value;\n                                return object;\n                            };\n\n                            /**\n                             * Converts this TableCell to JSON.\n                             * @function toJSON\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.TableRow.TableCell\n                             * @instance\n                             * @returns {Object.<string,*>} JSON object\n                             */\n                            TableCell.prototype.toJSON = function toJSON() {\n                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                            };\n\n                            return TableCell;\n                        })();\n\n                        return TableRow;\n                    })();\n\n                    Feature.Step = (function() {\n\n                        /**\n                         * Properties of a Step.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @interface IStep\n                         * @property {io.cucumber.messages.ILocation|null} [location] Step location\n                         * @property {string|null} [keyword] Step keyword\n                         * @property {string|null} [text] Step text\n                         * @property {io.cucumber.messages.GherkinDocument.Feature.Step.IDocString|null} [docString] Step docString\n                         * @property {io.cucumber.messages.GherkinDocument.Feature.Step.IDataTable|null} [dataTable] Step dataTable\n                         * @property {string|null} [id] Step id\n                         */\n\n                        /**\n                         * Constructs a new Step.\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature\n                         * @classdesc Represents a Step.\n                         * @implements IStep\n                         * @constructor\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IStep=} [properties] Properties to set\n                         */\n                        function Step(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Step location.\n                         * @member {io.cucumber.messages.ILocation|null|undefined} location\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @instance\n                         */\n                        Step.prototype.location = null;\n\n                        /**\n                         * Step keyword.\n                         * @member {string} keyword\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @instance\n                         */\n                        Step.prototype.keyword = \"\";\n\n                        /**\n                         * Step text.\n                         * @member {string} text\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @instance\n                         */\n                        Step.prototype.text = \"\";\n\n                        /**\n                         * Step docString.\n                         * @member {io.cucumber.messages.GherkinDocument.Feature.Step.IDocString|null|undefined} docString\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @instance\n                         */\n                        Step.prototype.docString = null;\n\n                        /**\n                         * Step dataTable.\n                         * @member {io.cucumber.messages.GherkinDocument.Feature.Step.IDataTable|null|undefined} dataTable\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @instance\n                         */\n                        Step.prototype.dataTable = null;\n\n                        /**\n                         * Step id.\n                         * @member {string} id\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @instance\n                         */\n                        Step.prototype.id = \"\";\n\n                        // OneOf field names bound to virtual getters and setters\n                        var $oneOfFields;\n\n                        /**\n                         * Step argument.\n                         * @member {\"docString\"|\"dataTable\"|undefined} argument\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @instance\n                         */\n                        Object.defineProperty(Step.prototype, \"argument\", {\n                            get: $util.oneOfGetter($oneOfFields = [\"docString\", \"dataTable\"]),\n                            set: $util.oneOfSetter($oneOfFields)\n                        });\n\n                        /**\n                         * Creates a new Step instance using the specified properties.\n                         * @function create\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IStep=} [properties] Properties to set\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Step} Step instance\n                         */\n                        Step.create = function create(properties) {\n                            return new Step(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Step message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Step.verify|verify} messages.\n                         * @function encode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IStep} message Step message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Step.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.keyword);\n                            if (message.text != null && message.hasOwnProperty(\"text\"))\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.text);\n                            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                                $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.encode(message.docString, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                            if (message.dataTable != null && message.hasOwnProperty(\"dataTable\"))\n                                $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.encode(message.dataTable, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.id);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Step message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Step.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.IStep} message Step message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Step.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Step message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Step} Step\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Step.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1:\n                                    message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                    break;\n                                case 2:\n                                    message.keyword = reader.string();\n                                    break;\n                                case 3:\n                                    message.text = reader.string();\n                                    break;\n                                case 5:\n                                    message.docString = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.decode(reader, reader.uint32());\n                                    break;\n                                case 6:\n                                    message.dataTable = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.decode(reader, reader.uint32());\n                                    break;\n                                case 7:\n                                    message.id = reader.string();\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Step message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Step} Step\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Step.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Step message.\n                         * @function verify\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Step.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            var properties = {};\n                            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                if (error)\n                                    return \"location.\" + error;\n                            }\n                            if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                if (!$util.isString(message.keyword))\n                                    return \"keyword: string expected\";\n                            if (message.text != null && message.hasOwnProperty(\"text\"))\n                                if (!$util.isString(message.text))\n                                    return \"text: string expected\";\n                            if (message.docString != null && message.hasOwnProperty(\"docString\")) {\n                                properties.argument = 1;\n                                {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.verify(message.docString);\n                                    if (error)\n                                        return \"docString.\" + error;\n                                }\n                            }\n                            if (message.dataTable != null && message.hasOwnProperty(\"dataTable\")) {\n                                if (properties.argument === 1)\n                                    return \"argument: multiple values\";\n                                properties.argument = 1;\n                                {\n                                    var error = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.verify(message.dataTable);\n                                    if (error)\n                                        return \"dataTable.\" + error;\n                                }\n                            }\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                if (!$util.isString(message.id))\n                                    return \"id: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Step message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {io.cucumber.messages.GherkinDocument.Feature.Step} Step\n                         */\n                        Step.fromObject = function fromObject(object) {\n                            if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Step)\n                                return object;\n                            var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step();\n                            if (object.location != null) {\n                                if (typeof object.location !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Step.location: object expected\");\n                                message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                            }\n                            if (object.keyword != null)\n                                message.keyword = String(object.keyword);\n                            if (object.text != null)\n                                message.text = String(object.text);\n                            if (object.docString != null) {\n                                if (typeof object.docString !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Step.docString: object expected\");\n                                message.docString = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.fromObject(object.docString);\n                            }\n                            if (object.dataTable != null) {\n                                if (typeof object.dataTable !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Step.dataTable: object expected\");\n                                message.dataTable = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.fromObject(object.dataTable);\n                            }\n                            if (object.id != null)\n                                message.id = String(object.id);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Step message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @static\n                         * @param {io.cucumber.messages.GherkinDocument.Feature.Step} message Step\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Step.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                object.location = null;\n                                object.keyword = \"\";\n                                object.text = \"\";\n                                object.id = \"\";\n                            }\n                            if (message.location != null && message.hasOwnProperty(\"location\"))\n                                object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                            if (message.keyword != null && message.hasOwnProperty(\"keyword\"))\n                                object.keyword = message.keyword;\n                            if (message.text != null && message.hasOwnProperty(\"text\"))\n                                object.text = message.text;\n                            if (message.docString != null && message.hasOwnProperty(\"docString\")) {\n                                object.docString = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString.toObject(message.docString, options);\n                                if (options.oneofs)\n                                    object.argument = \"docString\";\n                            }\n                            if (message.dataTable != null && message.hasOwnProperty(\"dataTable\")) {\n                                object.dataTable = $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.toObject(message.dataTable, options);\n                                if (options.oneofs)\n                                    object.argument = \"dataTable\";\n                            }\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                object.id = message.id;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Step to JSON.\n                         * @function toJSON\n                         * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Step.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        Step.DataTable = (function() {\n\n                            /**\n                             * Properties of a DataTable.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                             * @interface IDataTable\n                             * @property {io.cucumber.messages.ILocation|null} [location] DataTable location\n                             * @property {Array.<io.cucumber.messages.GherkinDocument.Feature.ITableRow>|null} [rows] DataTable rows\n                             */\n\n                            /**\n                             * Constructs a new DataTable.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                             * @classdesc Represents a DataTable.\n                             * @implements IDataTable\n                             * @constructor\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.IDataTable=} [properties] Properties to set\n                             */\n                            function DataTable(properties) {\n                                this.rows = [];\n                                if (properties)\n                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                        if (properties[keys[i]] != null)\n                                            this[keys[i]] = properties[keys[i]];\n                            }\n\n                            /**\n                             * DataTable location.\n                             * @member {io.cucumber.messages.ILocation|null|undefined} location\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @instance\n                             */\n                            DataTable.prototype.location = null;\n\n                            /**\n                             * DataTable rows.\n                             * @member {Array.<io.cucumber.messages.GherkinDocument.Feature.ITableRow>} rows\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @instance\n                             */\n                            DataTable.prototype.rows = $util.emptyArray;\n\n                            /**\n                             * Creates a new DataTable instance using the specified properties.\n                             * @function create\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.IDataTable=} [properties] Properties to set\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Step.DataTable} DataTable instance\n                             */\n                            DataTable.create = function create(properties) {\n                                return new DataTable(properties);\n                            };\n\n                            /**\n                             * Encodes the specified DataTable message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.verify|verify} messages.\n                             * @function encode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.IDataTable} message DataTable message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            DataTable.encode = function encode(message, writer) {\n                                if (!writer)\n                                    writer = $Writer.create();\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                                if (message.rows != null && message.rows.length)\n                                    for (var i = 0; i < message.rows.length; ++i)\n                                        $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.encode(message.rows[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                                return writer;\n                            };\n\n                            /**\n                             * Encodes the specified DataTable message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.verify|verify} messages.\n                             * @function encodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.IDataTable} message DataTable message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            DataTable.encodeDelimited = function encodeDelimited(message, writer) {\n                                return this.encode(message, writer).ldelim();\n                            };\n\n                            /**\n                             * Decodes a DataTable message from the specified reader or buffer.\n                             * @function decode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @param {number} [length] Message length if known beforehand\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Step.DataTable} DataTable\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            DataTable.decode = function decode(reader, length) {\n                                if (!(reader instanceof $Reader))\n                                    reader = $Reader.create(reader);\n                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable();\n                                while (reader.pos < end) {\n                                    var tag = reader.uint32();\n                                    switch (tag >>> 3) {\n                                    case 1:\n                                        message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                        break;\n                                    case 2:\n                                        if (!(message.rows && message.rows.length))\n                                            message.rows = [];\n                                        message.rows.push($root.io.cucumber.messages.GherkinDocument.Feature.TableRow.decode(reader, reader.uint32()));\n                                        break;\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Decodes a DataTable message from the specified reader or buffer, length delimited.\n                             * @function decodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Step.DataTable} DataTable\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            DataTable.decodeDelimited = function decodeDelimited(reader) {\n                                if (!(reader instanceof $Reader))\n                                    reader = new $Reader(reader);\n                                return this.decode(reader, reader.uint32());\n                            };\n\n                            /**\n                             * Verifies a DataTable message.\n                             * @function verify\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @static\n                             * @param {Object.<string,*>} message Plain object to verify\n                             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                             */\n                            DataTable.verify = function verify(message) {\n                                if (typeof message !== \"object\" || message === null)\n                                    return \"object expected\";\n                                if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                    var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                    if (error)\n                                        return \"location.\" + error;\n                                }\n                                if (message.rows != null && message.hasOwnProperty(\"rows\")) {\n                                    if (!Array.isArray(message.rows))\n                                        return \"rows: array expected\";\n                                    for (var i = 0; i < message.rows.length; ++i) {\n                                        var error = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.verify(message.rows[i]);\n                                        if (error)\n                                            return \"rows.\" + error;\n                                    }\n                                }\n                                return null;\n                            };\n\n                            /**\n                             * Creates a DataTable message from a plain object. Also converts values to their respective internal types.\n                             * @function fromObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @static\n                             * @param {Object.<string,*>} object Plain object\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Step.DataTable} DataTable\n                             */\n                            DataTable.fromObject = function fromObject(object) {\n                                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable)\n                                    return object;\n                                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step.DataTable();\n                                if (object.location != null) {\n                                    if (typeof object.location !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.location: object expected\");\n                                    message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                                }\n                                if (object.rows) {\n                                    if (!Array.isArray(object.rows))\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.rows: array expected\");\n                                    message.rows = [];\n                                    for (var i = 0; i < object.rows.length; ++i) {\n                                        if (typeof object.rows[i] !== \"object\")\n                                            throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Step.DataTable.rows: object expected\");\n                                        message.rows[i] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.fromObject(object.rows[i]);\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Creates a plain object from a DataTable message. Also converts values to other types if specified.\n                             * @function toObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.DataTable} message DataTable\n                             * @param {$protobuf.IConversionOptions} [options] Conversion options\n                             * @returns {Object.<string,*>} Plain object\n                             */\n                            DataTable.toObject = function toObject(message, options) {\n                                if (!options)\n                                    options = {};\n                                var object = {};\n                                if (options.arrays || options.defaults)\n                                    object.rows = [];\n                                if (options.defaults)\n                                    object.location = null;\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                                if (message.rows && message.rows.length) {\n                                    object.rows = [];\n                                    for (var j = 0; j < message.rows.length; ++j)\n                                        object.rows[j] = $root.io.cucumber.messages.GherkinDocument.Feature.TableRow.toObject(message.rows[j], options);\n                                }\n                                return object;\n                            };\n\n                            /**\n                             * Converts this DataTable to JSON.\n                             * @function toJSON\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DataTable\n                             * @instance\n                             * @returns {Object.<string,*>} JSON object\n                             */\n                            DataTable.prototype.toJSON = function toJSON() {\n                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                            };\n\n                            return DataTable;\n                        })();\n\n                        Step.DocString = (function() {\n\n                            /**\n                             * Properties of a DocString.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                             * @interface IDocString\n                             * @property {io.cucumber.messages.ILocation|null} [location] DocString location\n                             * @property {string|null} [contentType] DocString contentType\n                             * @property {string|null} [content] DocString content\n                             * @property {string|null} [delimiter] DocString delimiter\n                             */\n\n                            /**\n                             * Constructs a new DocString.\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step\n                             * @classdesc Represents a DocString.\n                             * @implements IDocString\n                             * @constructor\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.IDocString=} [properties] Properties to set\n                             */\n                            function DocString(properties) {\n                                if (properties)\n                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                        if (properties[keys[i]] != null)\n                                            this[keys[i]] = properties[keys[i]];\n                            }\n\n                            /**\n                             * DocString location.\n                             * @member {io.cucumber.messages.ILocation|null|undefined} location\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @instance\n                             */\n                            DocString.prototype.location = null;\n\n                            /**\n                             * DocString contentType.\n                             * @member {string} contentType\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @instance\n                             */\n                            DocString.prototype.contentType = \"\";\n\n                            /**\n                             * DocString content.\n                             * @member {string} content\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @instance\n                             */\n                            DocString.prototype.content = \"\";\n\n                            /**\n                             * DocString delimiter.\n                             * @member {string} delimiter\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @instance\n                             */\n                            DocString.prototype.delimiter = \"\";\n\n                            /**\n                             * Creates a new DocString instance using the specified properties.\n                             * @function create\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.IDocString=} [properties] Properties to set\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Step.DocString} DocString instance\n                             */\n                            DocString.create = function create(properties) {\n                                return new DocString(properties);\n                            };\n\n                            /**\n                             * Encodes the specified DocString message. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Step.DocString.verify|verify} messages.\n                             * @function encode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.IDocString} message DocString message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            DocString.encode = function encode(message, writer) {\n                                if (!writer)\n                                    writer = $Writer.create();\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    $root.io.cucumber.messages.Location.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                                if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.contentType);\n                                if (message.content != null && message.hasOwnProperty(\"content\"))\n                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);\n                                if (message.delimiter != null && message.hasOwnProperty(\"delimiter\"))\n                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.delimiter);\n                                return writer;\n                            };\n\n                            /**\n                             * Encodes the specified DocString message, length delimited. Does not implicitly {@link io.cucumber.messages.GherkinDocument.Feature.Step.DocString.verify|verify} messages.\n                             * @function encodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.IDocString} message DocString message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            DocString.encodeDelimited = function encodeDelimited(message, writer) {\n                                return this.encode(message, writer).ldelim();\n                            };\n\n                            /**\n                             * Decodes a DocString message from the specified reader or buffer.\n                             * @function decode\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @param {number} [length] Message length if known beforehand\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Step.DocString} DocString\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            DocString.decode = function decode(reader, length) {\n                                if (!(reader instanceof $Reader))\n                                    reader = $Reader.create(reader);\n                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString();\n                                while (reader.pos < end) {\n                                    var tag = reader.uint32();\n                                    switch (tag >>> 3) {\n                                    case 1:\n                                        message.location = $root.io.cucumber.messages.Location.decode(reader, reader.uint32());\n                                        break;\n                                    case 2:\n                                        message.contentType = reader.string();\n                                        break;\n                                    case 3:\n                                        message.content = reader.string();\n                                        break;\n                                    case 4:\n                                        message.delimiter = reader.string();\n                                        break;\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Decodes a DocString message from the specified reader or buffer, length delimited.\n                             * @function decodeDelimited\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Step.DocString} DocString\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            DocString.decodeDelimited = function decodeDelimited(reader) {\n                                if (!(reader instanceof $Reader))\n                                    reader = new $Reader(reader);\n                                return this.decode(reader, reader.uint32());\n                            };\n\n                            /**\n                             * Verifies a DocString message.\n                             * @function verify\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @static\n                             * @param {Object.<string,*>} message Plain object to verify\n                             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                             */\n                            DocString.verify = function verify(message) {\n                                if (typeof message !== \"object\" || message === null)\n                                    return \"object expected\";\n                                if (message.location != null && message.hasOwnProperty(\"location\")) {\n                                    var error = $root.io.cucumber.messages.Location.verify(message.location);\n                                    if (error)\n                                        return \"location.\" + error;\n                                }\n                                if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                                    if (!$util.isString(message.contentType))\n                                        return \"contentType: string expected\";\n                                if (message.content != null && message.hasOwnProperty(\"content\"))\n                                    if (!$util.isString(message.content))\n                                        return \"content: string expected\";\n                                if (message.delimiter != null && message.hasOwnProperty(\"delimiter\"))\n                                    if (!$util.isString(message.delimiter))\n                                        return \"delimiter: string expected\";\n                                return null;\n                            };\n\n                            /**\n                             * Creates a DocString message from a plain object. Also converts values to their respective internal types.\n                             * @function fromObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @static\n                             * @param {Object.<string,*>} object Plain object\n                             * @returns {io.cucumber.messages.GherkinDocument.Feature.Step.DocString} DocString\n                             */\n                            DocString.fromObject = function fromObject(object) {\n                                if (object instanceof $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString)\n                                    return object;\n                                var message = new $root.io.cucumber.messages.GherkinDocument.Feature.Step.DocString();\n                                if (object.location != null) {\n                                    if (typeof object.location !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.GherkinDocument.Feature.Step.DocString.location: object expected\");\n                                    message.location = $root.io.cucumber.messages.Location.fromObject(object.location);\n                                }\n                                if (object.contentType != null)\n                                    message.contentType = String(object.contentType);\n                                if (object.content != null)\n                                    message.content = String(object.content);\n                                if (object.delimiter != null)\n                                    message.delimiter = String(object.delimiter);\n                                return message;\n                            };\n\n                            /**\n                             * Creates a plain object from a DocString message. Also converts values to other types if specified.\n                             * @function toObject\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @static\n                             * @param {io.cucumber.messages.GherkinDocument.Feature.Step.DocString} message DocString\n                             * @param {$protobuf.IConversionOptions} [options] Conversion options\n                             * @returns {Object.<string,*>} Plain object\n                             */\n                            DocString.toObject = function toObject(message, options) {\n                                if (!options)\n                                    options = {};\n                                var object = {};\n                                if (options.defaults) {\n                                    object.location = null;\n                                    object.contentType = \"\";\n                                    object.content = \"\";\n                                    object.delimiter = \"\";\n                                }\n                                if (message.location != null && message.hasOwnProperty(\"location\"))\n                                    object.location = $root.io.cucumber.messages.Location.toObject(message.location, options);\n                                if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                                    object.contentType = message.contentType;\n                                if (message.content != null && message.hasOwnProperty(\"content\"))\n                                    object.content = message.content;\n                                if (message.delimiter != null && message.hasOwnProperty(\"delimiter\"))\n                                    object.delimiter = message.delimiter;\n                                return object;\n                            };\n\n                            /**\n                             * Converts this DocString to JSON.\n                             * @function toJSON\n                             * @memberof io.cucumber.messages.GherkinDocument.Feature.Step.DocString\n                             * @instance\n                             * @returns {Object.<string,*>} JSON object\n                             */\n                            DocString.prototype.toJSON = function toJSON() {\n                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                            };\n\n                            return DocString;\n                        })();\n\n                        return Step;\n                    })();\n\n                    return Feature;\n                })();\n\n                return GherkinDocument;\n            })();\n\n            messages.Attachment = (function() {\n\n                /**\n                 * Properties of an Attachment.\n                 * @memberof io.cucumber.messages\n                 * @interface IAttachment\n                 * @property {io.cucumber.messages.ISourceReference|null} [source] Attachment source\n                 * @property {string|null} [data] Attachment data\n                 * @property {io.cucumber.messages.IMedia|null} [media] Attachment media\n                 * @property {string|null} [testStepId] Attachment testStepId\n                 * @property {string|null} [testCaseStartedId] Attachment testCaseStartedId\n                 */\n\n                /**\n                 * Constructs a new Attachment.\n                 * @memberof io.cucumber.messages\n                 * @classdesc An attachment represents any kind of data associated with a line in a\n                 * [Source](#io.cucumber.messages.Source) file. It can be used for:\n                 * \n                 * * Syntax errors during parse time\n                 * * Screenshots captured and attached during execution\n                 * * Logs captured and attached during execution\n                 * \n                 * It is not to be used for runtime errors raised/thrown during execution. This\n                 * is captured in `TestResult`.\n                 * @implements IAttachment\n                 * @constructor\n                 * @param {io.cucumber.messages.IAttachment=} [properties] Properties to set\n                 */\n                function Attachment(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Attachment source.\n                 * @member {io.cucumber.messages.ISourceReference|null|undefined} source\n                 * @memberof io.cucumber.messages.Attachment\n                 * @instance\n                 */\n                Attachment.prototype.source = null;\n\n                /**\n                 * Attachment data.\n                 * @member {string} data\n                 * @memberof io.cucumber.messages.Attachment\n                 * @instance\n                 */\n                Attachment.prototype.data = \"\";\n\n                /**\n                 * Attachment media.\n                 * @member {io.cucumber.messages.IMedia|null|undefined} media\n                 * @memberof io.cucumber.messages.Attachment\n                 * @instance\n                 */\n                Attachment.prototype.media = null;\n\n                /**\n                 * Attachment testStepId.\n                 * @member {string} testStepId\n                 * @memberof io.cucumber.messages.Attachment\n                 * @instance\n                 */\n                Attachment.prototype.testStepId = \"\";\n\n                /**\n                 * Attachment testCaseStartedId.\n                 * @member {string} testCaseStartedId\n                 * @memberof io.cucumber.messages.Attachment\n                 * @instance\n                 */\n                Attachment.prototype.testCaseStartedId = \"\";\n\n                /**\n                 * Creates a new Attachment instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.Attachment\n                 * @static\n                 * @param {io.cucumber.messages.IAttachment=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.Attachment} Attachment instance\n                 */\n                Attachment.create = function create(properties) {\n                    return new Attachment(properties);\n                };\n\n                /**\n                 * Encodes the specified Attachment message. Does not implicitly {@link io.cucumber.messages.Attachment.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.Attachment\n                 * @static\n                 * @param {io.cucumber.messages.IAttachment} message Attachment message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Attachment.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.source != null && message.hasOwnProperty(\"source\"))\n                        $root.io.cucumber.messages.SourceReference.encode(message.source, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.data != null && message.hasOwnProperty(\"data\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n                    if (message.media != null && message.hasOwnProperty(\"media\"))\n                        $root.io.cucumber.messages.Media.encode(message.media, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.testStepId != null && message.hasOwnProperty(\"testStepId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.testStepId);\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.testCaseStartedId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Attachment message, length delimited. Does not implicitly {@link io.cucumber.messages.Attachment.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.Attachment\n                 * @static\n                 * @param {io.cucumber.messages.IAttachment} message Attachment message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Attachment.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an Attachment message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.Attachment\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.Attachment} Attachment\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Attachment.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Attachment();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.source = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.data = reader.string();\n                            break;\n                        case 3:\n                            message.media = $root.io.cucumber.messages.Media.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.testStepId = reader.string();\n                            break;\n                        case 5:\n                            message.testCaseStartedId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an Attachment message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.Attachment\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.Attachment} Attachment\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Attachment.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an Attachment message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.Attachment\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Attachment.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.source != null && message.hasOwnProperty(\"source\")) {\n                        var error = $root.io.cucumber.messages.SourceReference.verify(message.source);\n                        if (error)\n                            return \"source.\" + error;\n                    }\n                    if (message.data != null && message.hasOwnProperty(\"data\"))\n                        if (!$util.isString(message.data))\n                            return \"data: string expected\";\n                    if (message.media != null && message.hasOwnProperty(\"media\")) {\n                        var error = $root.io.cucumber.messages.Media.verify(message.media);\n                        if (error)\n                            return \"media.\" + error;\n                    }\n                    if (message.testStepId != null && message.hasOwnProperty(\"testStepId\"))\n                        if (!$util.isString(message.testStepId))\n                            return \"testStepId: string expected\";\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        if (!$util.isString(message.testCaseStartedId))\n                            return \"testCaseStartedId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates an Attachment message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.Attachment\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.Attachment} Attachment\n                 */\n                Attachment.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.Attachment)\n                        return object;\n                    var message = new $root.io.cucumber.messages.Attachment();\n                    if (object.source != null) {\n                        if (typeof object.source !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Attachment.source: object expected\");\n                        message.source = $root.io.cucumber.messages.SourceReference.fromObject(object.source);\n                    }\n                    if (object.data != null)\n                        message.data = String(object.data);\n                    if (object.media != null) {\n                        if (typeof object.media !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Attachment.media: object expected\");\n                        message.media = $root.io.cucumber.messages.Media.fromObject(object.media);\n                    }\n                    if (object.testStepId != null)\n                        message.testStepId = String(object.testStepId);\n                    if (object.testCaseStartedId != null)\n                        message.testCaseStartedId = String(object.testCaseStartedId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an Attachment message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.Attachment\n                 * @static\n                 * @param {io.cucumber.messages.Attachment} message Attachment\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Attachment.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.source = null;\n                        object.data = \"\";\n                        object.media = null;\n                        object.testStepId = \"\";\n                        object.testCaseStartedId = \"\";\n                    }\n                    if (message.source != null && message.hasOwnProperty(\"source\"))\n                        object.source = $root.io.cucumber.messages.SourceReference.toObject(message.source, options);\n                    if (message.data != null && message.hasOwnProperty(\"data\"))\n                        object.data = message.data;\n                    if (message.media != null && message.hasOwnProperty(\"media\"))\n                        object.media = $root.io.cucumber.messages.Media.toObject(message.media, options);\n                    if (message.testStepId != null && message.hasOwnProperty(\"testStepId\"))\n                        object.testStepId = message.testStepId;\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        object.testCaseStartedId = message.testCaseStartedId;\n                    return object;\n                };\n\n                /**\n                 * Converts this Attachment to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.Attachment\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Attachment.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Attachment;\n            })();\n\n            messages.Pickle = (function() {\n\n                /**\n                 * Properties of a Pickle.\n                 * @memberof io.cucumber.messages\n                 * @interface IPickle\n                 * @property {string|null} [id] A unique id for the pickle. This is a [SHA1](https://en.wikipedia.org/wiki/SHA-1) hash\n                 * from the source data and the `locations` of the pickle.\n                 * This ID will change if source the file is modified.\n                 * @property {string|null} [uri] Pickle uri\n                 * @property {string|null} [name] Pickle name\n                 * @property {string|null} [language] Pickle language\n                 * @property {Array.<io.cucumber.messages.Pickle.IPickleStep>|null} [steps] Pickle steps\n                 * @property {Array.<io.cucumber.messages.Pickle.IPickleTag>|null} [tags] One or more tags. If this pickle is constructed from a Gherkin document,\n                 * It includes inherited tags from the `Feature` as well.\n                 * @property {Array.<string>|null} [astNodeIds] Points to the AST node locations of the pickle. The last one represents the unique\n                 * id of the pickle. A pickle constructed from `Examples` will have the first\n                 * id originating from the `Scenario` AST node, and the second from the `TableRow` AST node.\n                 */\n\n                /**\n                 * Constructs a new Pickle.\n                 * @memberof io.cucumber.messages\n                 * @classdesc A `Pickle` represents a test case Cucumber can *execute*. It is typically derived\n                 * from another format, such as [GherkinDocument](#io.cucumber.messages.GherkinDocument).\n                 * In the future a `Pickle` may be derived from other formats such as Markdown or\n                 * Excel files.\n                 * \n                 * By making `Pickle` the main data structure Cucumber uses for execution, the\n                 * implementation of Cucumber itself becomes simpler, as it doesn't have to deal\n                 * with the complex structure of a [GherkinDocument](#io.cucumber.messages.GherkinDocument).\n                 * @implements IPickle\n                 * @constructor\n                 * @param {io.cucumber.messages.IPickle=} [properties] Properties to set\n                 */\n                function Pickle(properties) {\n                    this.steps = [];\n                    this.tags = [];\n                    this.astNodeIds = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * A unique id for the pickle. This is a [SHA1](https://en.wikipedia.org/wiki/SHA-1) hash\n                 * from the source data and the `locations` of the pickle.\n                 * This ID will change if source the file is modified.\n                 * @member {string} id\n                 * @memberof io.cucumber.messages.Pickle\n                 * @instance\n                 */\n                Pickle.prototype.id = \"\";\n\n                /**\n                 * Pickle uri.\n                 * @member {string} uri\n                 * @memberof io.cucumber.messages.Pickle\n                 * @instance\n                 */\n                Pickle.prototype.uri = \"\";\n\n                /**\n                 * Pickle name.\n                 * @member {string} name\n                 * @memberof io.cucumber.messages.Pickle\n                 * @instance\n                 */\n                Pickle.prototype.name = \"\";\n\n                /**\n                 * Pickle language.\n                 * @member {string} language\n                 * @memberof io.cucumber.messages.Pickle\n                 * @instance\n                 */\n                Pickle.prototype.language = \"\";\n\n                /**\n                 * Pickle steps.\n                 * @member {Array.<io.cucumber.messages.Pickle.IPickleStep>} steps\n                 * @memberof io.cucumber.messages.Pickle\n                 * @instance\n                 */\n                Pickle.prototype.steps = $util.emptyArray;\n\n                /**\n                 * One or more tags. If this pickle is constructed from a Gherkin document,\n                 * It includes inherited tags from the `Feature` as well.\n                 * @member {Array.<io.cucumber.messages.Pickle.IPickleTag>} tags\n                 * @memberof io.cucumber.messages.Pickle\n                 * @instance\n                 */\n                Pickle.prototype.tags = $util.emptyArray;\n\n                /**\n                 * Points to the AST node locations of the pickle. The last one represents the unique\n                 * id of the pickle. A pickle constructed from `Examples` will have the first\n                 * id originating from the `Scenario` AST node, and the second from the `TableRow` AST node.\n                 * @member {Array.<string>} astNodeIds\n                 * @memberof io.cucumber.messages.Pickle\n                 * @instance\n                 */\n                Pickle.prototype.astNodeIds = $util.emptyArray;\n\n                /**\n                 * Creates a new Pickle instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.Pickle\n                 * @static\n                 * @param {io.cucumber.messages.IPickle=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.Pickle} Pickle instance\n                 */\n                Pickle.create = function create(properties) {\n                    return new Pickle(properties);\n                };\n\n                /**\n                 * Encodes the specified Pickle message. Does not implicitly {@link io.cucumber.messages.Pickle.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.Pickle\n                 * @static\n                 * @param {io.cucumber.messages.IPickle} message Pickle message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Pickle.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.uri);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n                    if (message.language != null && message.hasOwnProperty(\"language\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.language);\n                    if (message.steps != null && message.steps.length)\n                        for (var i = 0; i < message.steps.length; ++i)\n                            $root.io.cucumber.messages.Pickle.PickleStep.encode(message.steps[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                    if (message.tags != null && message.tags.length)\n                        for (var i = 0; i < message.tags.length; ++i)\n                            $root.io.cucumber.messages.Pickle.PickleTag.encode(message.tags[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                    if (message.astNodeIds != null && message.astNodeIds.length)\n                        for (var i = 0; i < message.astNodeIds.length; ++i)\n                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.astNodeIds[i]);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Pickle message, length delimited. Does not implicitly {@link io.cucumber.messages.Pickle.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.Pickle\n                 * @static\n                 * @param {io.cucumber.messages.IPickle} message Pickle message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Pickle.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Pickle message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.Pickle\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.Pickle} Pickle\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Pickle.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Pickle();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = reader.string();\n                            break;\n                        case 2:\n                            message.uri = reader.string();\n                            break;\n                        case 3:\n                            message.name = reader.string();\n                            break;\n                        case 4:\n                            message.language = reader.string();\n                            break;\n                        case 5:\n                            if (!(message.steps && message.steps.length))\n                                message.steps = [];\n                            message.steps.push($root.io.cucumber.messages.Pickle.PickleStep.decode(reader, reader.uint32()));\n                            break;\n                        case 6:\n                            if (!(message.tags && message.tags.length))\n                                message.tags = [];\n                            message.tags.push($root.io.cucumber.messages.Pickle.PickleTag.decode(reader, reader.uint32()));\n                            break;\n                        case 7:\n                            if (!(message.astNodeIds && message.astNodeIds.length))\n                                message.astNodeIds = [];\n                            message.astNodeIds.push(reader.string());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Pickle message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.Pickle\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.Pickle} Pickle\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Pickle.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Pickle message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.Pickle\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Pickle.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        if (!$util.isString(message.id))\n                            return \"id: string expected\";\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        if (!$util.isString(message.uri))\n                            return \"uri: string expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.language != null && message.hasOwnProperty(\"language\"))\n                        if (!$util.isString(message.language))\n                            return \"language: string expected\";\n                    if (message.steps != null && message.hasOwnProperty(\"steps\")) {\n                        if (!Array.isArray(message.steps))\n                            return \"steps: array expected\";\n                        for (var i = 0; i < message.steps.length; ++i) {\n                            var error = $root.io.cucumber.messages.Pickle.PickleStep.verify(message.steps[i]);\n                            if (error)\n                                return \"steps.\" + error;\n                        }\n                    }\n                    if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                        if (!Array.isArray(message.tags))\n                            return \"tags: array expected\";\n                        for (var i = 0; i < message.tags.length; ++i) {\n                            var error = $root.io.cucumber.messages.Pickle.PickleTag.verify(message.tags[i]);\n                            if (error)\n                                return \"tags.\" + error;\n                        }\n                    }\n                    if (message.astNodeIds != null && message.hasOwnProperty(\"astNodeIds\")) {\n                        if (!Array.isArray(message.astNodeIds))\n                            return \"astNodeIds: array expected\";\n                        for (var i = 0; i < message.astNodeIds.length; ++i)\n                            if (!$util.isString(message.astNodeIds[i]))\n                                return \"astNodeIds: string[] expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a Pickle message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.Pickle\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.Pickle} Pickle\n                 */\n                Pickle.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.Pickle)\n                        return object;\n                    var message = new $root.io.cucumber.messages.Pickle();\n                    if (object.id != null)\n                        message.id = String(object.id);\n                    if (object.uri != null)\n                        message.uri = String(object.uri);\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.language != null)\n                        message.language = String(object.language);\n                    if (object.steps) {\n                        if (!Array.isArray(object.steps))\n                            throw TypeError(\".io.cucumber.messages.Pickle.steps: array expected\");\n                        message.steps = [];\n                        for (var i = 0; i < object.steps.length; ++i) {\n                            if (typeof object.steps[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.Pickle.steps: object expected\");\n                            message.steps[i] = $root.io.cucumber.messages.Pickle.PickleStep.fromObject(object.steps[i]);\n                        }\n                    }\n                    if (object.tags) {\n                        if (!Array.isArray(object.tags))\n                            throw TypeError(\".io.cucumber.messages.Pickle.tags: array expected\");\n                        message.tags = [];\n                        for (var i = 0; i < object.tags.length; ++i) {\n                            if (typeof object.tags[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.Pickle.tags: object expected\");\n                            message.tags[i] = $root.io.cucumber.messages.Pickle.PickleTag.fromObject(object.tags[i]);\n                        }\n                    }\n                    if (object.astNodeIds) {\n                        if (!Array.isArray(object.astNodeIds))\n                            throw TypeError(\".io.cucumber.messages.Pickle.astNodeIds: array expected\");\n                        message.astNodeIds = [];\n                        for (var i = 0; i < object.astNodeIds.length; ++i)\n                            message.astNodeIds[i] = String(object.astNodeIds[i]);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Pickle message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.Pickle\n                 * @static\n                 * @param {io.cucumber.messages.Pickle} message Pickle\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Pickle.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.steps = [];\n                        object.tags = [];\n                        object.astNodeIds = [];\n                    }\n                    if (options.defaults) {\n                        object.id = \"\";\n                        object.uri = \"\";\n                        object.name = \"\";\n                        object.language = \"\";\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = message.id;\n                    if (message.uri != null && message.hasOwnProperty(\"uri\"))\n                        object.uri = message.uri;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    if (message.language != null && message.hasOwnProperty(\"language\"))\n                        object.language = message.language;\n                    if (message.steps && message.steps.length) {\n                        object.steps = [];\n                        for (var j = 0; j < message.steps.length; ++j)\n                            object.steps[j] = $root.io.cucumber.messages.Pickle.PickleStep.toObject(message.steps[j], options);\n                    }\n                    if (message.tags && message.tags.length) {\n                        object.tags = [];\n                        for (var j = 0; j < message.tags.length; ++j)\n                            object.tags[j] = $root.io.cucumber.messages.Pickle.PickleTag.toObject(message.tags[j], options);\n                    }\n                    if (message.astNodeIds && message.astNodeIds.length) {\n                        object.astNodeIds = [];\n                        for (var j = 0; j < message.astNodeIds.length; ++j)\n                            object.astNodeIds[j] = message.astNodeIds[j];\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this Pickle to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.Pickle\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Pickle.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                Pickle.PickleTag = (function() {\n\n                    /**\n                     * Properties of a PickleTag.\n                     * @memberof io.cucumber.messages.Pickle\n                     * @interface IPickleTag\n                     * @property {string|null} [name] PickleTag name\n                     * @property {string|null} [astNodeId] PickleTag astNodeId\n                     */\n\n                    /**\n                     * Constructs a new PickleTag.\n                     * @memberof io.cucumber.messages.Pickle\n                     * @classdesc A tag\n                     * @implements IPickleTag\n                     * @constructor\n                     * @param {io.cucumber.messages.Pickle.IPickleTag=} [properties] Properties to set\n                     */\n                    function PickleTag(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * PickleTag name.\n                     * @member {string} name\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @instance\n                     */\n                    PickleTag.prototype.name = \"\";\n\n                    /**\n                     * PickleTag astNodeId.\n                     * @member {string} astNodeId\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @instance\n                     */\n                    PickleTag.prototype.astNodeId = \"\";\n\n                    /**\n                     * Creates a new PickleTag instance using the specified properties.\n                     * @function create\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @static\n                     * @param {io.cucumber.messages.Pickle.IPickleTag=} [properties] Properties to set\n                     * @returns {io.cucumber.messages.Pickle.PickleTag} PickleTag instance\n                     */\n                    PickleTag.create = function create(properties) {\n                        return new PickleTag(properties);\n                    };\n\n                    /**\n                     * Encodes the specified PickleTag message. Does not implicitly {@link io.cucumber.messages.Pickle.PickleTag.verify|verify} messages.\n                     * @function encode\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @static\n                     * @param {io.cucumber.messages.Pickle.IPickleTag} message PickleTag message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PickleTag.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                        if (message.astNodeId != null && message.hasOwnProperty(\"astNodeId\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.astNodeId);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified PickleTag message, length delimited. Does not implicitly {@link io.cucumber.messages.Pickle.PickleTag.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @static\n                     * @param {io.cucumber.messages.Pickle.IPickleTag} message PickleTag message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PickleTag.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a PickleTag message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {io.cucumber.messages.Pickle.PickleTag} PickleTag\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PickleTag.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Pickle.PickleTag();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.name = reader.string();\n                                break;\n                            case 2:\n                                message.astNodeId = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a PickleTag message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {io.cucumber.messages.Pickle.PickleTag} PickleTag\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PickleTag.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a PickleTag message.\n                     * @function verify\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    PickleTag.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.astNodeId != null && message.hasOwnProperty(\"astNodeId\"))\n                            if (!$util.isString(message.astNodeId))\n                                return \"astNodeId: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a PickleTag message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {io.cucumber.messages.Pickle.PickleTag} PickleTag\n                     */\n                    PickleTag.fromObject = function fromObject(object) {\n                        if (object instanceof $root.io.cucumber.messages.Pickle.PickleTag)\n                            return object;\n                        var message = new $root.io.cucumber.messages.Pickle.PickleTag();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.astNodeId != null)\n                            message.astNodeId = String(object.astNodeId);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a PickleTag message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @static\n                     * @param {io.cucumber.messages.Pickle.PickleTag} message PickleTag\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    PickleTag.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.astNodeId = \"\";\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.astNodeId != null && message.hasOwnProperty(\"astNodeId\"))\n                            object.astNodeId = message.astNodeId;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this PickleTag to JSON.\n                     * @function toJSON\n                     * @memberof io.cucumber.messages.Pickle.PickleTag\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    PickleTag.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return PickleTag;\n                })();\n\n                Pickle.PickleStep = (function() {\n\n                    /**\n                     * Properties of a PickleStep.\n                     * @memberof io.cucumber.messages.Pickle\n                     * @interface IPickleStep\n                     * @property {string|null} [text] PickleStep text\n                     * @property {io.cucumber.messages.IPickleStepArgument|null} [argument] PickleStep argument\n                     * @property {string|null} [id] PickleStep id\n                     * @property {Array.<string>|null} [astNodeIds] PickleStep astNodeIds\n                     */\n\n                    /**\n                     * Constructs a new PickleStep.\n                     * @memberof io.cucumber.messages.Pickle\n                     * @classdesc An executable step\n                     * @implements IPickleStep\n                     * @constructor\n                     * @param {io.cucumber.messages.Pickle.IPickleStep=} [properties] Properties to set\n                     */\n                    function PickleStep(properties) {\n                        this.astNodeIds = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * PickleStep text.\n                     * @member {string} text\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @instance\n                     */\n                    PickleStep.prototype.text = \"\";\n\n                    /**\n                     * PickleStep argument.\n                     * @member {io.cucumber.messages.IPickleStepArgument|null|undefined} argument\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @instance\n                     */\n                    PickleStep.prototype.argument = null;\n\n                    /**\n                     * PickleStep id.\n                     * @member {string} id\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @instance\n                     */\n                    PickleStep.prototype.id = \"\";\n\n                    /**\n                     * PickleStep astNodeIds.\n                     * @member {Array.<string>} astNodeIds\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @instance\n                     */\n                    PickleStep.prototype.astNodeIds = $util.emptyArray;\n\n                    /**\n                     * Creates a new PickleStep instance using the specified properties.\n                     * @function create\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @static\n                     * @param {io.cucumber.messages.Pickle.IPickleStep=} [properties] Properties to set\n                     * @returns {io.cucumber.messages.Pickle.PickleStep} PickleStep instance\n                     */\n                    PickleStep.create = function create(properties) {\n                        return new PickleStep(properties);\n                    };\n\n                    /**\n                     * Encodes the specified PickleStep message. Does not implicitly {@link io.cucumber.messages.Pickle.PickleStep.verify|verify} messages.\n                     * @function encode\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @static\n                     * @param {io.cucumber.messages.Pickle.IPickleStep} message PickleStep message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PickleStep.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.text != null && message.hasOwnProperty(\"text\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);\n                        if (message.argument != null && message.hasOwnProperty(\"argument\"))\n                            $root.io.cucumber.messages.PickleStepArgument.encode(message.argument, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.id);\n                        if (message.astNodeIds != null && message.astNodeIds.length)\n                            for (var i = 0; i < message.astNodeIds.length; ++i)\n                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.astNodeIds[i]);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified PickleStep message, length delimited. Does not implicitly {@link io.cucumber.messages.Pickle.PickleStep.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @static\n                     * @param {io.cucumber.messages.Pickle.IPickleStep} message PickleStep message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PickleStep.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a PickleStep message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {io.cucumber.messages.Pickle.PickleStep} PickleStep\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PickleStep.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Pickle.PickleStep();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.text = reader.string();\n                                break;\n                            case 2:\n                                message.argument = $root.io.cucumber.messages.PickleStepArgument.decode(reader, reader.uint32());\n                                break;\n                            case 3:\n                                message.id = reader.string();\n                                break;\n                            case 4:\n                                if (!(message.astNodeIds && message.astNodeIds.length))\n                                    message.astNodeIds = [];\n                                message.astNodeIds.push(reader.string());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a PickleStep message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {io.cucumber.messages.Pickle.PickleStep} PickleStep\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PickleStep.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a PickleStep message.\n                     * @function verify\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    PickleStep.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.text != null && message.hasOwnProperty(\"text\"))\n                            if (!$util.isString(message.text))\n                                return \"text: string expected\";\n                        if (message.argument != null && message.hasOwnProperty(\"argument\")) {\n                            var error = $root.io.cucumber.messages.PickleStepArgument.verify(message.argument);\n                            if (error)\n                                return \"argument.\" + error;\n                        }\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            if (!$util.isString(message.id))\n                                return \"id: string expected\";\n                        if (message.astNodeIds != null && message.hasOwnProperty(\"astNodeIds\")) {\n                            if (!Array.isArray(message.astNodeIds))\n                                return \"astNodeIds: array expected\";\n                            for (var i = 0; i < message.astNodeIds.length; ++i)\n                                if (!$util.isString(message.astNodeIds[i]))\n                                    return \"astNodeIds: string[] expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a PickleStep message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {io.cucumber.messages.Pickle.PickleStep} PickleStep\n                     */\n                    PickleStep.fromObject = function fromObject(object) {\n                        if (object instanceof $root.io.cucumber.messages.Pickle.PickleStep)\n                            return object;\n                        var message = new $root.io.cucumber.messages.Pickle.PickleStep();\n                        if (object.text != null)\n                            message.text = String(object.text);\n                        if (object.argument != null) {\n                            if (typeof object.argument !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.Pickle.PickleStep.argument: object expected\");\n                            message.argument = $root.io.cucumber.messages.PickleStepArgument.fromObject(object.argument);\n                        }\n                        if (object.id != null)\n                            message.id = String(object.id);\n                        if (object.astNodeIds) {\n                            if (!Array.isArray(object.astNodeIds))\n                                throw TypeError(\".io.cucumber.messages.Pickle.PickleStep.astNodeIds: array expected\");\n                            message.astNodeIds = [];\n                            for (var i = 0; i < object.astNodeIds.length; ++i)\n                                message.astNodeIds[i] = String(object.astNodeIds[i]);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a PickleStep message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @static\n                     * @param {io.cucumber.messages.Pickle.PickleStep} message PickleStep\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    PickleStep.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.astNodeIds = [];\n                        if (options.defaults) {\n                            object.text = \"\";\n                            object.argument = null;\n                            object.id = \"\";\n                        }\n                        if (message.text != null && message.hasOwnProperty(\"text\"))\n                            object.text = message.text;\n                        if (message.argument != null && message.hasOwnProperty(\"argument\"))\n                            object.argument = $root.io.cucumber.messages.PickleStepArgument.toObject(message.argument, options);\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            object.id = message.id;\n                        if (message.astNodeIds && message.astNodeIds.length) {\n                            object.astNodeIds = [];\n                            for (var j = 0; j < message.astNodeIds.length; ++j)\n                                object.astNodeIds[j] = message.astNodeIds[j];\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this PickleStep to JSON.\n                     * @function toJSON\n                     * @memberof io.cucumber.messages.Pickle.PickleStep\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    PickleStep.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return PickleStep;\n                })();\n\n                return Pickle;\n            })();\n\n            messages.PickleStepArgument = (function() {\n\n                /**\n                 * Properties of a PickleStepArgument.\n                 * @memberof io.cucumber.messages\n                 * @interface IPickleStepArgument\n                 * @property {io.cucumber.messages.PickleStepArgument.IPickleDocString|null} [docString] PickleStepArgument docString\n                 * @property {io.cucumber.messages.PickleStepArgument.IPickleTable|null} [dataTable] PickleStepArgument dataTable\n                 */\n\n                /**\n                 * Constructs a new PickleStepArgument.\n                 * @memberof io.cucumber.messages\n                 * @classdesc A wrapper for either a doc string or a table.\n                 * @implements IPickleStepArgument\n                 * @constructor\n                 * @param {io.cucumber.messages.IPickleStepArgument=} [properties] Properties to set\n                 */\n                function PickleStepArgument(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PickleStepArgument docString.\n                 * @member {io.cucumber.messages.PickleStepArgument.IPickleDocString|null|undefined} docString\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @instance\n                 */\n                PickleStepArgument.prototype.docString = null;\n\n                /**\n                 * PickleStepArgument dataTable.\n                 * @member {io.cucumber.messages.PickleStepArgument.IPickleTable|null|undefined} dataTable\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @instance\n                 */\n                PickleStepArgument.prototype.dataTable = null;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * PickleStepArgument message.\n                 * @member {\"docString\"|\"dataTable\"|undefined} message\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @instance\n                 */\n                Object.defineProperty(PickleStepArgument.prototype, \"message\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"docString\", \"dataTable\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new PickleStepArgument instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @static\n                 * @param {io.cucumber.messages.IPickleStepArgument=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.PickleStepArgument} PickleStepArgument instance\n                 */\n                PickleStepArgument.create = function create(properties) {\n                    return new PickleStepArgument(properties);\n                };\n\n                /**\n                 * Encodes the specified PickleStepArgument message. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @static\n                 * @param {io.cucumber.messages.IPickleStepArgument} message PickleStepArgument message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PickleStepArgument.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                        $root.io.cucumber.messages.PickleStepArgument.PickleDocString.encode(message.docString, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.dataTable != null && message.hasOwnProperty(\"dataTable\"))\n                        $root.io.cucumber.messages.PickleStepArgument.PickleTable.encode(message.dataTable, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PickleStepArgument message, length delimited. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @static\n                 * @param {io.cucumber.messages.IPickleStepArgument} message PickleStepArgument message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PickleStepArgument.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PickleStepArgument message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.PickleStepArgument} PickleStepArgument\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PickleStepArgument.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.PickleStepArgument();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.docString = $root.io.cucumber.messages.PickleStepArgument.PickleDocString.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.dataTable = $root.io.cucumber.messages.PickleStepArgument.PickleTable.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PickleStepArgument message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.PickleStepArgument} PickleStepArgument\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PickleStepArgument.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PickleStepArgument message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PickleStepArgument.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.docString != null && message.hasOwnProperty(\"docString\")) {\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.PickleStepArgument.PickleDocString.verify(message.docString);\n                            if (error)\n                                return \"docString.\" + error;\n                        }\n                    }\n                    if (message.dataTable != null && message.hasOwnProperty(\"dataTable\")) {\n                        if (properties.message === 1)\n                            return \"message: multiple values\";\n                        properties.message = 1;\n                        {\n                            var error = $root.io.cucumber.messages.PickleStepArgument.PickleTable.verify(message.dataTable);\n                            if (error)\n                                return \"dataTable.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a PickleStepArgument message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.PickleStepArgument} PickleStepArgument\n                 */\n                PickleStepArgument.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.PickleStepArgument)\n                        return object;\n                    var message = new $root.io.cucumber.messages.PickleStepArgument();\n                    if (object.docString != null) {\n                        if (typeof object.docString !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.PickleStepArgument.docString: object expected\");\n                        message.docString = $root.io.cucumber.messages.PickleStepArgument.PickleDocString.fromObject(object.docString);\n                    }\n                    if (object.dataTable != null) {\n                        if (typeof object.dataTable !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.PickleStepArgument.dataTable: object expected\");\n                        message.dataTable = $root.io.cucumber.messages.PickleStepArgument.PickleTable.fromObject(object.dataTable);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PickleStepArgument message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @static\n                 * @param {io.cucumber.messages.PickleStepArgument} message PickleStepArgument\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PickleStepArgument.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.docString != null && message.hasOwnProperty(\"docString\")) {\n                        object.docString = $root.io.cucumber.messages.PickleStepArgument.PickleDocString.toObject(message.docString, options);\n                        if (options.oneofs)\n                            object.message = \"docString\";\n                    }\n                    if (message.dataTable != null && message.hasOwnProperty(\"dataTable\")) {\n                        object.dataTable = $root.io.cucumber.messages.PickleStepArgument.PickleTable.toObject(message.dataTable, options);\n                        if (options.oneofs)\n                            object.message = \"dataTable\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this PickleStepArgument to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.PickleStepArgument\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PickleStepArgument.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                PickleStepArgument.PickleDocString = (function() {\n\n                    /**\n                     * Properties of a PickleDocString.\n                     * @memberof io.cucumber.messages.PickleStepArgument\n                     * @interface IPickleDocString\n                     * @property {string|null} [contentType] PickleDocString contentType\n                     * @property {string|null} [content] PickleDocString content\n                     */\n\n                    /**\n                     * Constructs a new PickleDocString.\n                     * @memberof io.cucumber.messages.PickleStepArgument\n                     * @classdesc Represents a PickleDocString.\n                     * @implements IPickleDocString\n                     * @constructor\n                     * @param {io.cucumber.messages.PickleStepArgument.IPickleDocString=} [properties] Properties to set\n                     */\n                    function PickleDocString(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * PickleDocString contentType.\n                     * @member {string} contentType\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @instance\n                     */\n                    PickleDocString.prototype.contentType = \"\";\n\n                    /**\n                     * PickleDocString content.\n                     * @member {string} content\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @instance\n                     */\n                    PickleDocString.prototype.content = \"\";\n\n                    /**\n                     * Creates a new PickleDocString instance using the specified properties.\n                     * @function create\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @static\n                     * @param {io.cucumber.messages.PickleStepArgument.IPickleDocString=} [properties] Properties to set\n                     * @returns {io.cucumber.messages.PickleStepArgument.PickleDocString} PickleDocString instance\n                     */\n                    PickleDocString.create = function create(properties) {\n                        return new PickleDocString(properties);\n                    };\n\n                    /**\n                     * Encodes the specified PickleDocString message. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.PickleDocString.verify|verify} messages.\n                     * @function encode\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @static\n                     * @param {io.cucumber.messages.PickleStepArgument.IPickleDocString} message PickleDocString message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PickleDocString.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.contentType);\n                        if (message.content != null && message.hasOwnProperty(\"content\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified PickleDocString message, length delimited. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.PickleDocString.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @static\n                     * @param {io.cucumber.messages.PickleStepArgument.IPickleDocString} message PickleDocString message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PickleDocString.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a PickleDocString message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {io.cucumber.messages.PickleStepArgument.PickleDocString} PickleDocString\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PickleDocString.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.PickleStepArgument.PickleDocString();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.contentType = reader.string();\n                                break;\n                            case 2:\n                                message.content = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a PickleDocString message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {io.cucumber.messages.PickleStepArgument.PickleDocString} PickleDocString\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PickleDocString.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a PickleDocString message.\n                     * @function verify\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    PickleDocString.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                            if (!$util.isString(message.contentType))\n                                return \"contentType: string expected\";\n                        if (message.content != null && message.hasOwnProperty(\"content\"))\n                            if (!$util.isString(message.content))\n                                return \"content: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a PickleDocString message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {io.cucumber.messages.PickleStepArgument.PickleDocString} PickleDocString\n                     */\n                    PickleDocString.fromObject = function fromObject(object) {\n                        if (object instanceof $root.io.cucumber.messages.PickleStepArgument.PickleDocString)\n                            return object;\n                        var message = new $root.io.cucumber.messages.PickleStepArgument.PickleDocString();\n                        if (object.contentType != null)\n                            message.contentType = String(object.contentType);\n                        if (object.content != null)\n                            message.content = String(object.content);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a PickleDocString message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @static\n                     * @param {io.cucumber.messages.PickleStepArgument.PickleDocString} message PickleDocString\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    PickleDocString.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.contentType = \"\";\n                            object.content = \"\";\n                        }\n                        if (message.contentType != null && message.hasOwnProperty(\"contentType\"))\n                            object.contentType = message.contentType;\n                        if (message.content != null && message.hasOwnProperty(\"content\"))\n                            object.content = message.content;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this PickleDocString to JSON.\n                     * @function toJSON\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleDocString\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    PickleDocString.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return PickleDocString;\n                })();\n\n                PickleStepArgument.PickleTable = (function() {\n\n                    /**\n                     * Properties of a PickleTable.\n                     * @memberof io.cucumber.messages.PickleStepArgument\n                     * @interface IPickleTable\n                     * @property {Array.<io.cucumber.messages.PickleStepArgument.PickleTable.IPickleTableRow>|null} [rows] PickleTable rows\n                     */\n\n                    /**\n                     * Constructs a new PickleTable.\n                     * @memberof io.cucumber.messages.PickleStepArgument\n                     * @classdesc Represents a PickleTable.\n                     * @implements IPickleTable\n                     * @constructor\n                     * @param {io.cucumber.messages.PickleStepArgument.IPickleTable=} [properties] Properties to set\n                     */\n                    function PickleTable(properties) {\n                        this.rows = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * PickleTable rows.\n                     * @member {Array.<io.cucumber.messages.PickleStepArgument.PickleTable.IPickleTableRow>} rows\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @instance\n                     */\n                    PickleTable.prototype.rows = $util.emptyArray;\n\n                    /**\n                     * Creates a new PickleTable instance using the specified properties.\n                     * @function create\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @static\n                     * @param {io.cucumber.messages.PickleStepArgument.IPickleTable=} [properties] Properties to set\n                     * @returns {io.cucumber.messages.PickleStepArgument.PickleTable} PickleTable instance\n                     */\n                    PickleTable.create = function create(properties) {\n                        return new PickleTable(properties);\n                    };\n\n                    /**\n                     * Encodes the specified PickleTable message. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.PickleTable.verify|verify} messages.\n                     * @function encode\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @static\n                     * @param {io.cucumber.messages.PickleStepArgument.IPickleTable} message PickleTable message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PickleTable.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.rows != null && message.rows.length)\n                            for (var i = 0; i < message.rows.length; ++i)\n                                $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.encode(message.rows[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified PickleTable message, length delimited. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.PickleTable.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @static\n                     * @param {io.cucumber.messages.PickleStepArgument.IPickleTable} message PickleTable message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PickleTable.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a PickleTable message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {io.cucumber.messages.PickleStepArgument.PickleTable} PickleTable\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PickleTable.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                if (!(message.rows && message.rows.length))\n                                    message.rows = [];\n                                message.rows.push($root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.decode(reader, reader.uint32()));\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a PickleTable message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {io.cucumber.messages.PickleStepArgument.PickleTable} PickleTable\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PickleTable.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a PickleTable message.\n                     * @function verify\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    PickleTable.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.rows != null && message.hasOwnProperty(\"rows\")) {\n                            if (!Array.isArray(message.rows))\n                                return \"rows: array expected\";\n                            for (var i = 0; i < message.rows.length; ++i) {\n                                var error = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.verify(message.rows[i]);\n                                if (error)\n                                    return \"rows.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a PickleTable message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {io.cucumber.messages.PickleStepArgument.PickleTable} PickleTable\n                     */\n                    PickleTable.fromObject = function fromObject(object) {\n                        if (object instanceof $root.io.cucumber.messages.PickleStepArgument.PickleTable)\n                            return object;\n                        var message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable();\n                        if (object.rows) {\n                            if (!Array.isArray(object.rows))\n                                throw TypeError(\".io.cucumber.messages.PickleStepArgument.PickleTable.rows: array expected\");\n                            message.rows = [];\n                            for (var i = 0; i < object.rows.length; ++i) {\n                                if (typeof object.rows[i] !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.PickleStepArgument.PickleTable.rows: object expected\");\n                                message.rows[i] = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.fromObject(object.rows[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a PickleTable message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @static\n                     * @param {io.cucumber.messages.PickleStepArgument.PickleTable} message PickleTable\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    PickleTable.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.rows = [];\n                        if (message.rows && message.rows.length) {\n                            object.rows = [];\n                            for (var j = 0; j < message.rows.length; ++j)\n                                object.rows[j] = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.toObject(message.rows[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this PickleTable to JSON.\n                     * @function toJSON\n                     * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    PickleTable.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    PickleTable.PickleTableRow = (function() {\n\n                        /**\n                         * Properties of a PickleTableRow.\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                         * @interface IPickleTableRow\n                         * @property {Array.<io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.IPickleTableCell>|null} [cells] PickleTableRow cells\n                         */\n\n                        /**\n                         * Constructs a new PickleTableRow.\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable\n                         * @classdesc Represents a PickleTableRow.\n                         * @implements IPickleTableRow\n                         * @constructor\n                         * @param {io.cucumber.messages.PickleStepArgument.PickleTable.IPickleTableRow=} [properties] Properties to set\n                         */\n                        function PickleTableRow(properties) {\n                            this.cells = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * PickleTableRow cells.\n                         * @member {Array.<io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.IPickleTableCell>} cells\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @instance\n                         */\n                        PickleTableRow.prototype.cells = $util.emptyArray;\n\n                        /**\n                         * Creates a new PickleTableRow instance using the specified properties.\n                         * @function create\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @static\n                         * @param {io.cucumber.messages.PickleStepArgument.PickleTable.IPickleTableRow=} [properties] Properties to set\n                         * @returns {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow} PickleTableRow instance\n                         */\n                        PickleTableRow.create = function create(properties) {\n                            return new PickleTableRow(properties);\n                        };\n\n                        /**\n                         * Encodes the specified PickleTableRow message. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.verify|verify} messages.\n                         * @function encode\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @static\n                         * @param {io.cucumber.messages.PickleStepArgument.PickleTable.IPickleTableRow} message PickleTableRow message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        PickleTableRow.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.cells != null && message.cells.length)\n                                for (var i = 0; i < message.cells.length; ++i)\n                                    $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.encode(message.cells[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified PickleTableRow message, length delimited. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @static\n                         * @param {io.cucumber.messages.PickleStepArgument.PickleTable.IPickleTableRow} message PickleTableRow message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        PickleTableRow.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a PickleTableRow message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow} PickleTableRow\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        PickleTableRow.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1:\n                                    if (!(message.cells && message.cells.length))\n                                        message.cells = [];\n                                    message.cells.push($root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.decode(reader, reader.uint32()));\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a PickleTableRow message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow} PickleTableRow\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        PickleTableRow.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a PickleTableRow message.\n                         * @function verify\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        PickleTableRow.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.cells != null && message.hasOwnProperty(\"cells\")) {\n                                if (!Array.isArray(message.cells))\n                                    return \"cells: array expected\";\n                                for (var i = 0; i < message.cells.length; ++i) {\n                                    var error = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.verify(message.cells[i]);\n                                    if (error)\n                                        return \"cells.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates a PickleTableRow message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow} PickleTableRow\n                         */\n                        PickleTableRow.fromObject = function fromObject(object) {\n                            if (object instanceof $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow)\n                                return object;\n                            var message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow();\n                            if (object.cells) {\n                                if (!Array.isArray(object.cells))\n                                    throw TypeError(\".io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.cells: array expected\");\n                                message.cells = [];\n                                for (var i = 0; i < object.cells.length; ++i) {\n                                    if (typeof object.cells[i] !== \"object\")\n                                        throw TypeError(\".io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.cells: object expected\");\n                                    message.cells[i] = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.fromObject(object.cells[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a PickleTableRow message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @static\n                         * @param {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow} message PickleTableRow\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        PickleTableRow.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.cells = [];\n                            if (message.cells && message.cells.length) {\n                                object.cells = [];\n                                for (var j = 0; j < message.cells.length; ++j)\n                                    object.cells[j] = $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.toObject(message.cells[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this PickleTableRow to JSON.\n                         * @function toJSON\n                         * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        PickleTableRow.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        PickleTableRow.PickleTableCell = (function() {\n\n                            /**\n                             * Properties of a PickleTableCell.\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                             * @interface IPickleTableCell\n                             * @property {string|null} [value] PickleTableCell value\n                             */\n\n                            /**\n                             * Constructs a new PickleTableCell.\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow\n                             * @classdesc Represents a PickleTableCell.\n                             * @implements IPickleTableCell\n                             * @constructor\n                             * @param {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.IPickleTableCell=} [properties] Properties to set\n                             */\n                            function PickleTableCell(properties) {\n                                if (properties)\n                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                        if (properties[keys[i]] != null)\n                                            this[keys[i]] = properties[keys[i]];\n                            }\n\n                            /**\n                             * PickleTableCell value.\n                             * @member {string} value\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @instance\n                             */\n                            PickleTableCell.prototype.value = \"\";\n\n                            /**\n                             * Creates a new PickleTableCell instance using the specified properties.\n                             * @function create\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @static\n                             * @param {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.IPickleTableCell=} [properties] Properties to set\n                             * @returns {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell} PickleTableCell instance\n                             */\n                            PickleTableCell.create = function create(properties) {\n                                return new PickleTableCell(properties);\n                            };\n\n                            /**\n                             * Encodes the specified PickleTableCell message. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.verify|verify} messages.\n                             * @function encode\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @static\n                             * @param {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.IPickleTableCell} message PickleTableCell message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            PickleTableCell.encode = function encode(message, writer) {\n                                if (!writer)\n                                    writer = $Writer.create();\n                                if (message.value != null && message.hasOwnProperty(\"value\"))\n                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);\n                                return writer;\n                            };\n\n                            /**\n                             * Encodes the specified PickleTableCell message, length delimited. Does not implicitly {@link io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell.verify|verify} messages.\n                             * @function encodeDelimited\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @static\n                             * @param {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.IPickleTableCell} message PickleTableCell message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            PickleTableCell.encodeDelimited = function encodeDelimited(message, writer) {\n                                return this.encode(message, writer).ldelim();\n                            };\n\n                            /**\n                             * Decodes a PickleTableCell message from the specified reader or buffer.\n                             * @function decode\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @param {number} [length] Message length if known beforehand\n                             * @returns {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell} PickleTableCell\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            PickleTableCell.decode = function decode(reader, length) {\n                                if (!(reader instanceof $Reader))\n                                    reader = $Reader.create(reader);\n                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell();\n                                while (reader.pos < end) {\n                                    var tag = reader.uint32();\n                                    switch (tag >>> 3) {\n                                    case 1:\n                                        message.value = reader.string();\n                                        break;\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Decodes a PickleTableCell message from the specified reader or buffer, length delimited.\n                             * @function decodeDelimited\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @returns {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell} PickleTableCell\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            PickleTableCell.decodeDelimited = function decodeDelimited(reader) {\n                                if (!(reader instanceof $Reader))\n                                    reader = new $Reader(reader);\n                                return this.decode(reader, reader.uint32());\n                            };\n\n                            /**\n                             * Verifies a PickleTableCell message.\n                             * @function verify\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @static\n                             * @param {Object.<string,*>} message Plain object to verify\n                             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                             */\n                            PickleTableCell.verify = function verify(message) {\n                                if (typeof message !== \"object\" || message === null)\n                                    return \"object expected\";\n                                if (message.value != null && message.hasOwnProperty(\"value\"))\n                                    if (!$util.isString(message.value))\n                                        return \"value: string expected\";\n                                return null;\n                            };\n\n                            /**\n                             * Creates a PickleTableCell message from a plain object. Also converts values to their respective internal types.\n                             * @function fromObject\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @static\n                             * @param {Object.<string,*>} object Plain object\n                             * @returns {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell} PickleTableCell\n                             */\n                            PickleTableCell.fromObject = function fromObject(object) {\n                                if (object instanceof $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell)\n                                    return object;\n                                var message = new $root.io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell();\n                                if (object.value != null)\n                                    message.value = String(object.value);\n                                return message;\n                            };\n\n                            /**\n                             * Creates a plain object from a PickleTableCell message. Also converts values to other types if specified.\n                             * @function toObject\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @static\n                             * @param {io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell} message PickleTableCell\n                             * @param {$protobuf.IConversionOptions} [options] Conversion options\n                             * @returns {Object.<string,*>} Plain object\n                             */\n                            PickleTableCell.toObject = function toObject(message, options) {\n                                if (!options)\n                                    options = {};\n                                var object = {};\n                                if (options.defaults)\n                                    object.value = \"\";\n                                if (message.value != null && message.hasOwnProperty(\"value\"))\n                                    object.value = message.value;\n                                return object;\n                            };\n\n                            /**\n                             * Converts this PickleTableCell to JSON.\n                             * @function toJSON\n                             * @memberof io.cucumber.messages.PickleStepArgument.PickleTable.PickleTableRow.PickleTableCell\n                             * @instance\n                             * @returns {Object.<string,*>} JSON object\n                             */\n                            PickleTableCell.prototype.toJSON = function toJSON() {\n                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                            };\n\n                            return PickleTableCell;\n                        })();\n\n                        return PickleTableRow;\n                    })();\n\n                    return PickleTable;\n                })();\n\n                return PickleStepArgument;\n            })();\n\n            messages.TestCase = (function() {\n\n                /**\n                 * Properties of a TestCase.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestCase\n                 * @property {string|null} [id] TestCase id\n                 * @property {string|null} [pickleId] TestCase pickleId\n                 * @property {Array.<io.cucumber.messages.TestCase.ITestStep>|null} [testSteps] TestCase testSteps\n                 */\n\n                /**\n                 * Constructs a new TestCase.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestCase.\n                 * @implements ITestCase\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestCase=} [properties] Properties to set\n                 */\n                function TestCase(properties) {\n                    this.testSteps = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestCase id.\n                 * @member {string} id\n                 * @memberof io.cucumber.messages.TestCase\n                 * @instance\n                 */\n                TestCase.prototype.id = \"\";\n\n                /**\n                 * TestCase pickleId.\n                 * @member {string} pickleId\n                 * @memberof io.cucumber.messages.TestCase\n                 * @instance\n                 */\n                TestCase.prototype.pickleId = \"\";\n\n                /**\n                 * TestCase testSteps.\n                 * @member {Array.<io.cucumber.messages.TestCase.ITestStep>} testSteps\n                 * @memberof io.cucumber.messages.TestCase\n                 * @instance\n                 */\n                TestCase.prototype.testSteps = $util.emptyArray;\n\n                /**\n                 * Creates a new TestCase instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestCase\n                 * @static\n                 * @param {io.cucumber.messages.ITestCase=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestCase} TestCase instance\n                 */\n                TestCase.create = function create(properties) {\n                    return new TestCase(properties);\n                };\n\n                /**\n                 * Encodes the specified TestCase message. Does not implicitly {@link io.cucumber.messages.TestCase.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestCase\n                 * @static\n                 * @param {io.cucumber.messages.ITestCase} message TestCase message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCase.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.pickleId);\n                    if (message.testSteps != null && message.testSteps.length)\n                        for (var i = 0; i < message.testSteps.length; ++i)\n                            $root.io.cucumber.messages.TestCase.TestStep.encode(message.testSteps[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestCase message, length delimited. Does not implicitly {@link io.cucumber.messages.TestCase.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestCase\n                 * @static\n                 * @param {io.cucumber.messages.ITestCase} message TestCase message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCase.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestCase message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestCase\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestCase} TestCase\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCase.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestCase();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = reader.string();\n                            break;\n                        case 2:\n                            message.pickleId = reader.string();\n                            break;\n                        case 3:\n                            if (!(message.testSteps && message.testSteps.length))\n                                message.testSteps = [];\n                            message.testSteps.push($root.io.cucumber.messages.TestCase.TestStep.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestCase message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestCase\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestCase} TestCase\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCase.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestCase message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestCase\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestCase.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        if (!$util.isString(message.id))\n                            return \"id: string expected\";\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        if (!$util.isString(message.pickleId))\n                            return \"pickleId: string expected\";\n                    if (message.testSteps != null && message.hasOwnProperty(\"testSteps\")) {\n                        if (!Array.isArray(message.testSteps))\n                            return \"testSteps: array expected\";\n                        for (var i = 0; i < message.testSteps.length; ++i) {\n                            var error = $root.io.cucumber.messages.TestCase.TestStep.verify(message.testSteps[i]);\n                            if (error)\n                                return \"testSteps.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a TestCase message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestCase\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestCase} TestCase\n                 */\n                TestCase.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestCase)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestCase();\n                    if (object.id != null)\n                        message.id = String(object.id);\n                    if (object.pickleId != null)\n                        message.pickleId = String(object.pickleId);\n                    if (object.testSteps) {\n                        if (!Array.isArray(object.testSteps))\n                            throw TypeError(\".io.cucumber.messages.TestCase.testSteps: array expected\");\n                        message.testSteps = [];\n                        for (var i = 0; i < object.testSteps.length; ++i) {\n                            if (typeof object.testSteps[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.TestCase.testSteps: object expected\");\n                            message.testSteps[i] = $root.io.cucumber.messages.TestCase.TestStep.fromObject(object.testSteps[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestCase message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestCase\n                 * @static\n                 * @param {io.cucumber.messages.TestCase} message TestCase\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestCase.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.testSteps = [];\n                    if (options.defaults) {\n                        object.id = \"\";\n                        object.pickleId = \"\";\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = message.id;\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        object.pickleId = message.pickleId;\n                    if (message.testSteps && message.testSteps.length) {\n                        object.testSteps = [];\n                        for (var j = 0; j < message.testSteps.length; ++j)\n                            object.testSteps[j] = $root.io.cucumber.messages.TestCase.TestStep.toObject(message.testSteps[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this TestCase to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestCase\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestCase.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                TestCase.TestStep = (function() {\n\n                    /**\n                     * Properties of a TestStep.\n                     * @memberof io.cucumber.messages.TestCase\n                     * @interface ITestStep\n                     * @property {string|null} [id] TestStep id\n                     * @property {string|null} [pickleStepId] TestStep pickleStepId\n                     * @property {Array.<string>|null} [stepDefinitionIds] TestStep stepDefinitionIds\n                     * @property {Array.<io.cucumber.messages.IStepMatchArgument>|null} [stepMatchArguments] TestStep stepMatchArguments\n                     * @property {string|null} [hookId] TestStep hookId\n                     */\n\n                    /**\n                     * Constructs a new TestStep.\n                     * @memberof io.cucumber.messages.TestCase\n                     * @classdesc Represents a TestStep.\n                     * @implements ITestStep\n                     * @constructor\n                     * @param {io.cucumber.messages.TestCase.ITestStep=} [properties] Properties to set\n                     */\n                    function TestStep(properties) {\n                        this.stepDefinitionIds = [];\n                        this.stepMatchArguments = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TestStep id.\n                     * @member {string} id\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @instance\n                     */\n                    TestStep.prototype.id = \"\";\n\n                    /**\n                     * TestStep pickleStepId.\n                     * @member {string} pickleStepId\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @instance\n                     */\n                    TestStep.prototype.pickleStepId = \"\";\n\n                    /**\n                     * TestStep stepDefinitionIds.\n                     * @member {Array.<string>} stepDefinitionIds\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @instance\n                     */\n                    TestStep.prototype.stepDefinitionIds = $util.emptyArray;\n\n                    /**\n                     * TestStep stepMatchArguments.\n                     * @member {Array.<io.cucumber.messages.IStepMatchArgument>} stepMatchArguments\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @instance\n                     */\n                    TestStep.prototype.stepMatchArguments = $util.emptyArray;\n\n                    /**\n                     * TestStep hookId.\n                     * @member {string} hookId\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @instance\n                     */\n                    TestStep.prototype.hookId = \"\";\n\n                    /**\n                     * Creates a new TestStep instance using the specified properties.\n                     * @function create\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @static\n                     * @param {io.cucumber.messages.TestCase.ITestStep=} [properties] Properties to set\n                     * @returns {io.cucumber.messages.TestCase.TestStep} TestStep instance\n                     */\n                    TestStep.create = function create(properties) {\n                        return new TestStep(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TestStep message. Does not implicitly {@link io.cucumber.messages.TestCase.TestStep.verify|verify} messages.\n                     * @function encode\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @static\n                     * @param {io.cucumber.messages.TestCase.ITestStep} message TestStep message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TestStep.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                        if (message.pickleStepId != null && message.hasOwnProperty(\"pickleStepId\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pickleStepId);\n                        if (message.stepDefinitionIds != null && message.stepDefinitionIds.length)\n                            for (var i = 0; i < message.stepDefinitionIds.length; ++i)\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.stepDefinitionIds[i]);\n                        if (message.stepMatchArguments != null && message.stepMatchArguments.length)\n                            for (var i = 0; i < message.stepMatchArguments.length; ++i)\n                                $root.io.cucumber.messages.StepMatchArgument.encode(message.stepMatchArguments[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                        if (message.hookId != null && message.hasOwnProperty(\"hookId\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.hookId);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TestStep message, length delimited. Does not implicitly {@link io.cucumber.messages.TestCase.TestStep.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @static\n                     * @param {io.cucumber.messages.TestCase.ITestStep} message TestStep message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TestStep.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TestStep message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {io.cucumber.messages.TestCase.TestStep} TestStep\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TestStep.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestCase.TestStep();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.id = reader.string();\n                                break;\n                            case 2:\n                                message.pickleStepId = reader.string();\n                                break;\n                            case 3:\n                                if (!(message.stepDefinitionIds && message.stepDefinitionIds.length))\n                                    message.stepDefinitionIds = [];\n                                message.stepDefinitionIds.push(reader.string());\n                                break;\n                            case 4:\n                                if (!(message.stepMatchArguments && message.stepMatchArguments.length))\n                                    message.stepMatchArguments = [];\n                                message.stepMatchArguments.push($root.io.cucumber.messages.StepMatchArgument.decode(reader, reader.uint32()));\n                                break;\n                            case 5:\n                                message.hookId = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TestStep message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {io.cucumber.messages.TestCase.TestStep} TestStep\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TestStep.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TestStep message.\n                     * @function verify\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TestStep.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            if (!$util.isString(message.id))\n                                return \"id: string expected\";\n                        if (message.pickleStepId != null && message.hasOwnProperty(\"pickleStepId\"))\n                            if (!$util.isString(message.pickleStepId))\n                                return \"pickleStepId: string expected\";\n                        if (message.stepDefinitionIds != null && message.hasOwnProperty(\"stepDefinitionIds\")) {\n                            if (!Array.isArray(message.stepDefinitionIds))\n                                return \"stepDefinitionIds: array expected\";\n                            for (var i = 0; i < message.stepDefinitionIds.length; ++i)\n                                if (!$util.isString(message.stepDefinitionIds[i]))\n                                    return \"stepDefinitionIds: string[] expected\";\n                        }\n                        if (message.stepMatchArguments != null && message.hasOwnProperty(\"stepMatchArguments\")) {\n                            if (!Array.isArray(message.stepMatchArguments))\n                                return \"stepMatchArguments: array expected\";\n                            for (var i = 0; i < message.stepMatchArguments.length; ++i) {\n                                var error = $root.io.cucumber.messages.StepMatchArgument.verify(message.stepMatchArguments[i]);\n                                if (error)\n                                    return \"stepMatchArguments.\" + error;\n                            }\n                        }\n                        if (message.hookId != null && message.hasOwnProperty(\"hookId\"))\n                            if (!$util.isString(message.hookId))\n                                return \"hookId: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TestStep message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {io.cucumber.messages.TestCase.TestStep} TestStep\n                     */\n                    TestStep.fromObject = function fromObject(object) {\n                        if (object instanceof $root.io.cucumber.messages.TestCase.TestStep)\n                            return object;\n                        var message = new $root.io.cucumber.messages.TestCase.TestStep();\n                        if (object.id != null)\n                            message.id = String(object.id);\n                        if (object.pickleStepId != null)\n                            message.pickleStepId = String(object.pickleStepId);\n                        if (object.stepDefinitionIds) {\n                            if (!Array.isArray(object.stepDefinitionIds))\n                                throw TypeError(\".io.cucumber.messages.TestCase.TestStep.stepDefinitionIds: array expected\");\n                            message.stepDefinitionIds = [];\n                            for (var i = 0; i < object.stepDefinitionIds.length; ++i)\n                                message.stepDefinitionIds[i] = String(object.stepDefinitionIds[i]);\n                        }\n                        if (object.stepMatchArguments) {\n                            if (!Array.isArray(object.stepMatchArguments))\n                                throw TypeError(\".io.cucumber.messages.TestCase.TestStep.stepMatchArguments: array expected\");\n                            message.stepMatchArguments = [];\n                            for (var i = 0; i < object.stepMatchArguments.length; ++i) {\n                                if (typeof object.stepMatchArguments[i] !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.TestCase.TestStep.stepMatchArguments: object expected\");\n                                message.stepMatchArguments[i] = $root.io.cucumber.messages.StepMatchArgument.fromObject(object.stepMatchArguments[i]);\n                            }\n                        }\n                        if (object.hookId != null)\n                            message.hookId = String(object.hookId);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TestStep message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @static\n                     * @param {io.cucumber.messages.TestCase.TestStep} message TestStep\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TestStep.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.stepDefinitionIds = [];\n                            object.stepMatchArguments = [];\n                        }\n                        if (options.defaults) {\n                            object.id = \"\";\n                            object.pickleStepId = \"\";\n                            object.hookId = \"\";\n                        }\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            object.id = message.id;\n                        if (message.pickleStepId != null && message.hasOwnProperty(\"pickleStepId\"))\n                            object.pickleStepId = message.pickleStepId;\n                        if (message.stepDefinitionIds && message.stepDefinitionIds.length) {\n                            object.stepDefinitionIds = [];\n                            for (var j = 0; j < message.stepDefinitionIds.length; ++j)\n                                object.stepDefinitionIds[j] = message.stepDefinitionIds[j];\n                        }\n                        if (message.stepMatchArguments && message.stepMatchArguments.length) {\n                            object.stepMatchArguments = [];\n                            for (var j = 0; j < message.stepMatchArguments.length; ++j)\n                                object.stepMatchArguments[j] = $root.io.cucumber.messages.StepMatchArgument.toObject(message.stepMatchArguments[j], options);\n                        }\n                        if (message.hookId != null && message.hasOwnProperty(\"hookId\"))\n                            object.hookId = message.hookId;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TestStep to JSON.\n                     * @function toJSON\n                     * @memberof io.cucumber.messages.TestCase.TestStep\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TestStep.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return TestStep;\n                })();\n\n                return TestCase;\n            })();\n\n            messages.PickleAccepted = (function() {\n\n                /**\n                 * Properties of a PickleAccepted.\n                 * @memberof io.cucumber.messages\n                 * @interface IPickleAccepted\n                 * @property {string|null} [pickleId] PickleAccepted pickleId\n                 */\n\n                /**\n                 * Constructs a new PickleAccepted.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a PickleAccepted.\n                 * @implements IPickleAccepted\n                 * @constructor\n                 * @param {io.cucumber.messages.IPickleAccepted=} [properties] Properties to set\n                 */\n                function PickleAccepted(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PickleAccepted pickleId.\n                 * @member {string} pickleId\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @instance\n                 */\n                PickleAccepted.prototype.pickleId = \"\";\n\n                /**\n                 * Creates a new PickleAccepted instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @static\n                 * @param {io.cucumber.messages.IPickleAccepted=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.PickleAccepted} PickleAccepted instance\n                 */\n                PickleAccepted.create = function create(properties) {\n                    return new PickleAccepted(properties);\n                };\n\n                /**\n                 * Encodes the specified PickleAccepted message. Does not implicitly {@link io.cucumber.messages.PickleAccepted.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @static\n                 * @param {io.cucumber.messages.IPickleAccepted} message PickleAccepted message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PickleAccepted.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.pickleId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PickleAccepted message, length delimited. Does not implicitly {@link io.cucumber.messages.PickleAccepted.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @static\n                 * @param {io.cucumber.messages.IPickleAccepted} message PickleAccepted message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PickleAccepted.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PickleAccepted message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.PickleAccepted} PickleAccepted\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PickleAccepted.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.PickleAccepted();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.pickleId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PickleAccepted message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.PickleAccepted} PickleAccepted\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PickleAccepted.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PickleAccepted message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PickleAccepted.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        if (!$util.isString(message.pickleId))\n                            return \"pickleId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PickleAccepted message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.PickleAccepted} PickleAccepted\n                 */\n                PickleAccepted.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.PickleAccepted)\n                        return object;\n                    var message = new $root.io.cucumber.messages.PickleAccepted();\n                    if (object.pickleId != null)\n                        message.pickleId = String(object.pickleId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PickleAccepted message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @static\n                 * @param {io.cucumber.messages.PickleAccepted} message PickleAccepted\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PickleAccepted.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.pickleId = \"\";\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        object.pickleId = message.pickleId;\n                    return object;\n                };\n\n                /**\n                 * Converts this PickleAccepted to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.PickleAccepted\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PickleAccepted.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PickleAccepted;\n            })();\n\n            messages.PickleRejected = (function() {\n\n                /**\n                 * Properties of a PickleRejected.\n                 * @memberof io.cucumber.messages\n                 * @interface IPickleRejected\n                 * @property {string|null} [pickleId] PickleRejected pickleId\n                 */\n\n                /**\n                 * Constructs a new PickleRejected.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a PickleRejected.\n                 * @implements IPickleRejected\n                 * @constructor\n                 * @param {io.cucumber.messages.IPickleRejected=} [properties] Properties to set\n                 */\n                function PickleRejected(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PickleRejected pickleId.\n                 * @member {string} pickleId\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @instance\n                 */\n                PickleRejected.prototype.pickleId = \"\";\n\n                /**\n                 * Creates a new PickleRejected instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @static\n                 * @param {io.cucumber.messages.IPickleRejected=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.PickleRejected} PickleRejected instance\n                 */\n                PickleRejected.create = function create(properties) {\n                    return new PickleRejected(properties);\n                };\n\n                /**\n                 * Encodes the specified PickleRejected message. Does not implicitly {@link io.cucumber.messages.PickleRejected.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @static\n                 * @param {io.cucumber.messages.IPickleRejected} message PickleRejected message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PickleRejected.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.pickleId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PickleRejected message, length delimited. Does not implicitly {@link io.cucumber.messages.PickleRejected.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @static\n                 * @param {io.cucumber.messages.IPickleRejected} message PickleRejected message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PickleRejected.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PickleRejected message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.PickleRejected} PickleRejected\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PickleRejected.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.PickleRejected();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 2:\n                            message.pickleId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PickleRejected message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.PickleRejected} PickleRejected\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PickleRejected.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PickleRejected message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PickleRejected.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        if (!$util.isString(message.pickleId))\n                            return \"pickleId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PickleRejected message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.PickleRejected} PickleRejected\n                 */\n                PickleRejected.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.PickleRejected)\n                        return object;\n                    var message = new $root.io.cucumber.messages.PickleRejected();\n                    if (object.pickleId != null)\n                        message.pickleId = String(object.pickleId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PickleRejected message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @static\n                 * @param {io.cucumber.messages.PickleRejected} message PickleRejected\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PickleRejected.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.pickleId = \"\";\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        object.pickleId = message.pickleId;\n                    return object;\n                };\n\n                /**\n                 * Converts this PickleRejected to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.PickleRejected\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PickleRejected.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PickleRejected;\n            })();\n\n            messages.TestRunStarted = (function() {\n\n                /**\n                 * Properties of a TestRunStarted.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestRunStarted\n                 * @property {io.cucumber.messages.ITimestamp|null} [timestamp] TestRunStarted timestamp\n                 */\n\n                /**\n                 * Constructs a new TestRunStarted.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestRunStarted.\n                 * @implements ITestRunStarted\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestRunStarted=} [properties] Properties to set\n                 */\n                function TestRunStarted(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestRunStarted timestamp.\n                 * @member {io.cucumber.messages.ITimestamp|null|undefined} timestamp\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @instance\n                 */\n                TestRunStarted.prototype.timestamp = null;\n\n                /**\n                 * Creates a new TestRunStarted instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @static\n                 * @param {io.cucumber.messages.ITestRunStarted=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestRunStarted} TestRunStarted instance\n                 */\n                TestRunStarted.create = function create(properties) {\n                    return new TestRunStarted(properties);\n                };\n\n                /**\n                 * Encodes the specified TestRunStarted message. Does not implicitly {@link io.cucumber.messages.TestRunStarted.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @static\n                 * @param {io.cucumber.messages.ITestRunStarted} message TestRunStarted message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestRunStarted.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestRunStarted message, length delimited. Does not implicitly {@link io.cucumber.messages.TestRunStarted.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @static\n                 * @param {io.cucumber.messages.ITestRunStarted} message TestRunStarted message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestRunStarted.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestRunStarted message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestRunStarted} TestRunStarted\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestRunStarted.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestRunStarted();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestRunStarted message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestRunStarted} TestRunStarted\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestRunStarted.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestRunStarted message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestRunStarted.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                        var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);\n                        if (error)\n                            return \"timestamp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a TestRunStarted message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestRunStarted} TestRunStarted\n                 */\n                TestRunStarted.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestRunStarted)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestRunStarted();\n                    if (object.timestamp != null) {\n                        if (typeof object.timestamp !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestRunStarted.timestamp: object expected\");\n                        message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestRunStarted message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @static\n                 * @param {io.cucumber.messages.TestRunStarted} message TestRunStarted\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestRunStarted.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.timestamp = null;\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this TestRunStarted to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestRunStarted\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestRunStarted.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TestRunStarted;\n            })();\n\n            messages.TestCasePreparedStep = (function() {\n\n                /**\n                 * Properties of a TestCasePreparedStep.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestCasePreparedStep\n                 * @property {io.cucumber.messages.ISourceReference|null} [sourceLocation] TestCasePreparedStep sourceLocation\n                 * @property {io.cucumber.messages.ISourceReference|null} [actionLocation] TestCasePreparedStep actionLocation\n                 */\n\n                /**\n                 * Constructs a new TestCasePreparedStep.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestCasePreparedStep.\n                 * @implements ITestCasePreparedStep\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestCasePreparedStep=} [properties] Properties to set\n                 */\n                function TestCasePreparedStep(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestCasePreparedStep sourceLocation.\n                 * @member {io.cucumber.messages.ISourceReference|null|undefined} sourceLocation\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @instance\n                 */\n                TestCasePreparedStep.prototype.sourceLocation = null;\n\n                /**\n                 * TestCasePreparedStep actionLocation.\n                 * @member {io.cucumber.messages.ISourceReference|null|undefined} actionLocation\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @instance\n                 */\n                TestCasePreparedStep.prototype.actionLocation = null;\n\n                /**\n                 * Creates a new TestCasePreparedStep instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @static\n                 * @param {io.cucumber.messages.ITestCasePreparedStep=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestCasePreparedStep} TestCasePreparedStep instance\n                 */\n                TestCasePreparedStep.create = function create(properties) {\n                    return new TestCasePreparedStep(properties);\n                };\n\n                /**\n                 * Encodes the specified TestCasePreparedStep message. Does not implicitly {@link io.cucumber.messages.TestCasePreparedStep.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @static\n                 * @param {io.cucumber.messages.ITestCasePreparedStep} message TestCasePreparedStep message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCasePreparedStep.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sourceLocation != null && message.hasOwnProperty(\"sourceLocation\"))\n                        $root.io.cucumber.messages.SourceReference.encode(message.sourceLocation, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.actionLocation != null && message.hasOwnProperty(\"actionLocation\"))\n                        $root.io.cucumber.messages.SourceReference.encode(message.actionLocation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestCasePreparedStep message, length delimited. Does not implicitly {@link io.cucumber.messages.TestCasePreparedStep.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @static\n                 * @param {io.cucumber.messages.ITestCasePreparedStep} message TestCasePreparedStep message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCasePreparedStep.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestCasePreparedStep message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestCasePreparedStep} TestCasePreparedStep\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCasePreparedStep.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestCasePreparedStep();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.sourceLocation = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.actionLocation = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestCasePreparedStep message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestCasePreparedStep} TestCasePreparedStep\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCasePreparedStep.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestCasePreparedStep message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestCasePreparedStep.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.sourceLocation != null && message.hasOwnProperty(\"sourceLocation\")) {\n                        var error = $root.io.cucumber.messages.SourceReference.verify(message.sourceLocation);\n                        if (error)\n                            return \"sourceLocation.\" + error;\n                    }\n                    if (message.actionLocation != null && message.hasOwnProperty(\"actionLocation\")) {\n                        var error = $root.io.cucumber.messages.SourceReference.verify(message.actionLocation);\n                        if (error)\n                            return \"actionLocation.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a TestCasePreparedStep message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestCasePreparedStep} TestCasePreparedStep\n                 */\n                TestCasePreparedStep.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestCasePreparedStep)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestCasePreparedStep();\n                    if (object.sourceLocation != null) {\n                        if (typeof object.sourceLocation !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestCasePreparedStep.sourceLocation: object expected\");\n                        message.sourceLocation = $root.io.cucumber.messages.SourceReference.fromObject(object.sourceLocation);\n                    }\n                    if (object.actionLocation != null) {\n                        if (typeof object.actionLocation !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestCasePreparedStep.actionLocation: object expected\");\n                        message.actionLocation = $root.io.cucumber.messages.SourceReference.fromObject(object.actionLocation);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestCasePreparedStep message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @static\n                 * @param {io.cucumber.messages.TestCasePreparedStep} message TestCasePreparedStep\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestCasePreparedStep.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.sourceLocation = null;\n                        object.actionLocation = null;\n                    }\n                    if (message.sourceLocation != null && message.hasOwnProperty(\"sourceLocation\"))\n                        object.sourceLocation = $root.io.cucumber.messages.SourceReference.toObject(message.sourceLocation, options);\n                    if (message.actionLocation != null && message.hasOwnProperty(\"actionLocation\"))\n                        object.actionLocation = $root.io.cucumber.messages.SourceReference.toObject(message.actionLocation, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this TestCasePreparedStep to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestCasePreparedStep\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestCasePreparedStep.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TestCasePreparedStep;\n            })();\n\n            messages.TestCasePrepared = (function() {\n\n                /**\n                 * Properties of a TestCasePrepared.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestCasePrepared\n                 * @property {string|null} [pickleId] TestCasePrepared pickleId\n                 * @property {Array.<io.cucumber.messages.ITestCasePreparedStep>|null} [steps] TestCasePrepared steps\n                 */\n\n                /**\n                 * Constructs a new TestCasePrepared.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestCasePrepared.\n                 * @implements ITestCasePrepared\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestCasePrepared=} [properties] Properties to set\n                 */\n                function TestCasePrepared(properties) {\n                    this.steps = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestCasePrepared pickleId.\n                 * @member {string} pickleId\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @instance\n                 */\n                TestCasePrepared.prototype.pickleId = \"\";\n\n                /**\n                 * TestCasePrepared steps.\n                 * @member {Array.<io.cucumber.messages.ITestCasePreparedStep>} steps\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @instance\n                 */\n                TestCasePrepared.prototype.steps = $util.emptyArray;\n\n                /**\n                 * Creates a new TestCasePrepared instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @static\n                 * @param {io.cucumber.messages.ITestCasePrepared=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestCasePrepared} TestCasePrepared instance\n                 */\n                TestCasePrepared.create = function create(properties) {\n                    return new TestCasePrepared(properties);\n                };\n\n                /**\n                 * Encodes the specified TestCasePrepared message. Does not implicitly {@link io.cucumber.messages.TestCasePrepared.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @static\n                 * @param {io.cucumber.messages.ITestCasePrepared} message TestCasePrepared message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCasePrepared.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.pickleId);\n                    if (message.steps != null && message.steps.length)\n                        for (var i = 0; i < message.steps.length; ++i)\n                            $root.io.cucumber.messages.TestCasePreparedStep.encode(message.steps[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestCasePrepared message, length delimited. Does not implicitly {@link io.cucumber.messages.TestCasePrepared.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @static\n                 * @param {io.cucumber.messages.ITestCasePrepared} message TestCasePrepared message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCasePrepared.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestCasePrepared message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestCasePrepared} TestCasePrepared\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCasePrepared.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestCasePrepared();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.pickleId = reader.string();\n                            break;\n                        case 2:\n                            if (!(message.steps && message.steps.length))\n                                message.steps = [];\n                            message.steps.push($root.io.cucumber.messages.TestCasePreparedStep.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestCasePrepared message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestCasePrepared} TestCasePrepared\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCasePrepared.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestCasePrepared message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestCasePrepared.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        if (!$util.isString(message.pickleId))\n                            return \"pickleId: string expected\";\n                    if (message.steps != null && message.hasOwnProperty(\"steps\")) {\n                        if (!Array.isArray(message.steps))\n                            return \"steps: array expected\";\n                        for (var i = 0; i < message.steps.length; ++i) {\n                            var error = $root.io.cucumber.messages.TestCasePreparedStep.verify(message.steps[i]);\n                            if (error)\n                                return \"steps.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a TestCasePrepared message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestCasePrepared} TestCasePrepared\n                 */\n                TestCasePrepared.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestCasePrepared)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestCasePrepared();\n                    if (object.pickleId != null)\n                        message.pickleId = String(object.pickleId);\n                    if (object.steps) {\n                        if (!Array.isArray(object.steps))\n                            throw TypeError(\".io.cucumber.messages.TestCasePrepared.steps: array expected\");\n                        message.steps = [];\n                        for (var i = 0; i < object.steps.length; ++i) {\n                            if (typeof object.steps[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.TestCasePrepared.steps: object expected\");\n                            message.steps[i] = $root.io.cucumber.messages.TestCasePreparedStep.fromObject(object.steps[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestCasePrepared message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @static\n                 * @param {io.cucumber.messages.TestCasePrepared} message TestCasePrepared\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestCasePrepared.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.steps = [];\n                    if (options.defaults)\n                        object.pickleId = \"\";\n                    if (message.pickleId != null && message.hasOwnProperty(\"pickleId\"))\n                        object.pickleId = message.pickleId;\n                    if (message.steps && message.steps.length) {\n                        object.steps = [];\n                        for (var j = 0; j < message.steps.length; ++j)\n                            object.steps[j] = $root.io.cucumber.messages.TestCasePreparedStep.toObject(message.steps[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this TestCasePrepared to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestCasePrepared\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestCasePrepared.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TestCasePrepared;\n            })();\n\n            messages.TestCaseStarted = (function() {\n\n                /**\n                 * Properties of a TestCaseStarted.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestCaseStarted\n                 * @property {io.cucumber.messages.ITimestamp|null} [timestamp] TestCaseStarted timestamp\n                 * @property {io.cucumber.messages.TestCaseStarted.IPlatform|null} [platform] TestCaseStarted platform\n                 * @property {number|null} [attempt] The first attempt should have value 0, and for each retry the value\n                 * should increase by 1.\n                 * @property {string|null} [testCaseId] TestCaseStarted testCaseId\n                 * @property {string|null} [id] Because a `TestCase` can be run multiple times (in case of a retry),\n                 * we use this field to group messages relating to the same attempt.\n                 */\n\n                /**\n                 * Constructs a new TestCaseStarted.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestCaseStarted.\n                 * @implements ITestCaseStarted\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestCaseStarted=} [properties] Properties to set\n                 */\n                function TestCaseStarted(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestCaseStarted timestamp.\n                 * @member {io.cucumber.messages.ITimestamp|null|undefined} timestamp\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @instance\n                 */\n                TestCaseStarted.prototype.timestamp = null;\n\n                /**\n                 * TestCaseStarted platform.\n                 * @member {io.cucumber.messages.TestCaseStarted.IPlatform|null|undefined} platform\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @instance\n                 */\n                TestCaseStarted.prototype.platform = null;\n\n                /**\n                 * The first attempt should have value 0, and for each retry the value\n                 * should increase by 1.\n                 * @member {number} attempt\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @instance\n                 */\n                TestCaseStarted.prototype.attempt = 0;\n\n                /**\n                 * TestCaseStarted testCaseId.\n                 * @member {string} testCaseId\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @instance\n                 */\n                TestCaseStarted.prototype.testCaseId = \"\";\n\n                /**\n                 * Because a `TestCase` can be run multiple times (in case of a retry),\n                 * we use this field to group messages relating to the same attempt.\n                 * @member {string} id\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @instance\n                 */\n                TestCaseStarted.prototype.id = \"\";\n\n                /**\n                 * Creates a new TestCaseStarted instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @static\n                 * @param {io.cucumber.messages.ITestCaseStarted=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestCaseStarted} TestCaseStarted instance\n                 */\n                TestCaseStarted.create = function create(properties) {\n                    return new TestCaseStarted(properties);\n                };\n\n                /**\n                 * Encodes the specified TestCaseStarted message. Does not implicitly {@link io.cucumber.messages.TestCaseStarted.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @static\n                 * @param {io.cucumber.messages.ITestCaseStarted} message TestCaseStarted message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCaseStarted.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.platform != null && message.hasOwnProperty(\"platform\"))\n                        $root.io.cucumber.messages.TestCaseStarted.Platform.encode(message.platform, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.attempt != null && message.hasOwnProperty(\"attempt\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.attempt);\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.testCaseId);\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.id);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestCaseStarted message, length delimited. Does not implicitly {@link io.cucumber.messages.TestCaseStarted.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @static\n                 * @param {io.cucumber.messages.ITestCaseStarted} message TestCaseStarted message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCaseStarted.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestCaseStarted message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestCaseStarted} TestCaseStarted\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCaseStarted.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestCaseStarted();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.platform = $root.io.cucumber.messages.TestCaseStarted.Platform.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.attempt = reader.uint32();\n                            break;\n                        case 4:\n                            message.testCaseId = reader.string();\n                            break;\n                        case 5:\n                            message.id = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestCaseStarted message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestCaseStarted} TestCaseStarted\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCaseStarted.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestCaseStarted message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestCaseStarted.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                        var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);\n                        if (error)\n                            return \"timestamp.\" + error;\n                    }\n                    if (message.platform != null && message.hasOwnProperty(\"platform\")) {\n                        var error = $root.io.cucumber.messages.TestCaseStarted.Platform.verify(message.platform);\n                        if (error)\n                            return \"platform.\" + error;\n                    }\n                    if (message.attempt != null && message.hasOwnProperty(\"attempt\"))\n                        if (!$util.isInteger(message.attempt))\n                            return \"attempt: integer expected\";\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        if (!$util.isString(message.testCaseId))\n                            return \"testCaseId: string expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        if (!$util.isString(message.id))\n                            return \"id: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TestCaseStarted message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestCaseStarted} TestCaseStarted\n                 */\n                TestCaseStarted.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestCaseStarted)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestCaseStarted();\n                    if (object.timestamp != null) {\n                        if (typeof object.timestamp !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestCaseStarted.timestamp: object expected\");\n                        message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);\n                    }\n                    if (object.platform != null) {\n                        if (typeof object.platform !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestCaseStarted.platform: object expected\");\n                        message.platform = $root.io.cucumber.messages.TestCaseStarted.Platform.fromObject(object.platform);\n                    }\n                    if (object.attempt != null)\n                        message.attempt = object.attempt >>> 0;\n                    if (object.testCaseId != null)\n                        message.testCaseId = String(object.testCaseId);\n                    if (object.id != null)\n                        message.id = String(object.id);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestCaseStarted message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @static\n                 * @param {io.cucumber.messages.TestCaseStarted} message TestCaseStarted\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestCaseStarted.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.timestamp = null;\n                        object.platform = null;\n                        object.attempt = 0;\n                        object.testCaseId = \"\";\n                        object.id = \"\";\n                    }\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);\n                    if (message.platform != null && message.hasOwnProperty(\"platform\"))\n                        object.platform = $root.io.cucumber.messages.TestCaseStarted.Platform.toObject(message.platform, options);\n                    if (message.attempt != null && message.hasOwnProperty(\"attempt\"))\n                        object.attempt = message.attempt;\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        object.testCaseId = message.testCaseId;\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = message.id;\n                    return object;\n                };\n\n                /**\n                 * Converts this TestCaseStarted to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestCaseStarted\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestCaseStarted.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                TestCaseStarted.Platform = (function() {\n\n                    /**\n                     * Properties of a Platform.\n                     * @memberof io.cucumber.messages.TestCaseStarted\n                     * @interface IPlatform\n                     * @property {string|null} [implementation] Platform implementation\n                     * @property {string|null} [version] Platform version\n                     * @property {string|null} [os] Platform os\n                     * @property {string|null} [cpu] Platform cpu\n                     */\n\n                    /**\n                     * Constructs a new Platform.\n                     * @memberof io.cucumber.messages.TestCaseStarted\n                     * @classdesc Represents a Platform.\n                     * @implements IPlatform\n                     * @constructor\n                     * @param {io.cucumber.messages.TestCaseStarted.IPlatform=} [properties] Properties to set\n                     */\n                    function Platform(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Platform implementation.\n                     * @member {string} implementation\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @instance\n                     */\n                    Platform.prototype.implementation = \"\";\n\n                    /**\n                     * Platform version.\n                     * @member {string} version\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @instance\n                     */\n                    Platform.prototype.version = \"\";\n\n                    /**\n                     * Platform os.\n                     * @member {string} os\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @instance\n                     */\n                    Platform.prototype.os = \"\";\n\n                    /**\n                     * Platform cpu.\n                     * @member {string} cpu\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @instance\n                     */\n                    Platform.prototype.cpu = \"\";\n\n                    /**\n                     * Creates a new Platform instance using the specified properties.\n                     * @function create\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @static\n                     * @param {io.cucumber.messages.TestCaseStarted.IPlatform=} [properties] Properties to set\n                     * @returns {io.cucumber.messages.TestCaseStarted.Platform} Platform instance\n                     */\n                    Platform.create = function create(properties) {\n                        return new Platform(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Platform message. Does not implicitly {@link io.cucumber.messages.TestCaseStarted.Platform.verify|verify} messages.\n                     * @function encode\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @static\n                     * @param {io.cucumber.messages.TestCaseStarted.IPlatform} message Platform message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Platform.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.implementation != null && message.hasOwnProperty(\"implementation\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.implementation);\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);\n                        if (message.os != null && message.hasOwnProperty(\"os\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.os);\n                        if (message.cpu != null && message.hasOwnProperty(\"cpu\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.cpu);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Platform message, length delimited. Does not implicitly {@link io.cucumber.messages.TestCaseStarted.Platform.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @static\n                     * @param {io.cucumber.messages.TestCaseStarted.IPlatform} message Platform message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Platform.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Platform message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {io.cucumber.messages.TestCaseStarted.Platform} Platform\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Platform.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestCaseStarted.Platform();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.implementation = reader.string();\n                                break;\n                            case 2:\n                                message.version = reader.string();\n                                break;\n                            case 3:\n                                message.os = reader.string();\n                                break;\n                            case 4:\n                                message.cpu = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Platform message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {io.cucumber.messages.TestCaseStarted.Platform} Platform\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Platform.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Platform message.\n                     * @function verify\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Platform.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.implementation != null && message.hasOwnProperty(\"implementation\"))\n                            if (!$util.isString(message.implementation))\n                                return \"implementation: string expected\";\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            if (!$util.isString(message.version))\n                                return \"version: string expected\";\n                        if (message.os != null && message.hasOwnProperty(\"os\"))\n                            if (!$util.isString(message.os))\n                                return \"os: string expected\";\n                        if (message.cpu != null && message.hasOwnProperty(\"cpu\"))\n                            if (!$util.isString(message.cpu))\n                                return \"cpu: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Platform message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {io.cucumber.messages.TestCaseStarted.Platform} Platform\n                     */\n                    Platform.fromObject = function fromObject(object) {\n                        if (object instanceof $root.io.cucumber.messages.TestCaseStarted.Platform)\n                            return object;\n                        var message = new $root.io.cucumber.messages.TestCaseStarted.Platform();\n                        if (object.implementation != null)\n                            message.implementation = String(object.implementation);\n                        if (object.version != null)\n                            message.version = String(object.version);\n                        if (object.os != null)\n                            message.os = String(object.os);\n                        if (object.cpu != null)\n                            message.cpu = String(object.cpu);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Platform message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @static\n                     * @param {io.cucumber.messages.TestCaseStarted.Platform} message Platform\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Platform.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.implementation = \"\";\n                            object.version = \"\";\n                            object.os = \"\";\n                            object.cpu = \"\";\n                        }\n                        if (message.implementation != null && message.hasOwnProperty(\"implementation\"))\n                            object.implementation = message.implementation;\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            object.version = message.version;\n                        if (message.os != null && message.hasOwnProperty(\"os\"))\n                            object.os = message.os;\n                        if (message.cpu != null && message.hasOwnProperty(\"cpu\"))\n                            object.cpu = message.cpu;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Platform to JSON.\n                     * @function toJSON\n                     * @memberof io.cucumber.messages.TestCaseStarted.Platform\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Platform.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Platform;\n                })();\n\n                return TestCaseStarted;\n            })();\n\n            messages.TestCaseFinished = (function() {\n\n                /**\n                 * Properties of a TestCaseFinished.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestCaseFinished\n                 * @property {io.cucumber.messages.ITimestamp|null} [timestamp] TestCaseFinished timestamp\n                 * @property {io.cucumber.messages.ITestResult|null} [testResult] TestCaseFinished testResult\n                 * @property {string|null} [testCaseStartedId] TestCaseFinished testCaseStartedId\n                 */\n\n                /**\n                 * Constructs a new TestCaseFinished.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestCaseFinished.\n                 * @implements ITestCaseFinished\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestCaseFinished=} [properties] Properties to set\n                 */\n                function TestCaseFinished(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestCaseFinished timestamp.\n                 * @member {io.cucumber.messages.ITimestamp|null|undefined} timestamp\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @instance\n                 */\n                TestCaseFinished.prototype.timestamp = null;\n\n                /**\n                 * TestCaseFinished testResult.\n                 * @member {io.cucumber.messages.ITestResult|null|undefined} testResult\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @instance\n                 */\n                TestCaseFinished.prototype.testResult = null;\n\n                /**\n                 * TestCaseFinished testCaseStartedId.\n                 * @member {string} testCaseStartedId\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @instance\n                 */\n                TestCaseFinished.prototype.testCaseStartedId = \"\";\n\n                /**\n                 * Creates a new TestCaseFinished instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @static\n                 * @param {io.cucumber.messages.ITestCaseFinished=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestCaseFinished} TestCaseFinished instance\n                 */\n                TestCaseFinished.create = function create(properties) {\n                    return new TestCaseFinished(properties);\n                };\n\n                /**\n                 * Encodes the specified TestCaseFinished message. Does not implicitly {@link io.cucumber.messages.TestCaseFinished.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @static\n                 * @param {io.cucumber.messages.ITestCaseFinished} message TestCaseFinished message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCaseFinished.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.testResult != null && message.hasOwnProperty(\"testResult\"))\n                        $root.io.cucumber.messages.TestResult.encode(message.testResult, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.testCaseStartedId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestCaseFinished message, length delimited. Does not implicitly {@link io.cucumber.messages.TestCaseFinished.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @static\n                 * @param {io.cucumber.messages.ITestCaseFinished} message TestCaseFinished message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestCaseFinished.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestCaseFinished message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestCaseFinished} TestCaseFinished\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCaseFinished.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestCaseFinished();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.testResult = $root.io.cucumber.messages.TestResult.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.testCaseStartedId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestCaseFinished message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestCaseFinished} TestCaseFinished\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestCaseFinished.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestCaseFinished message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestCaseFinished.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                        var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);\n                        if (error)\n                            return \"timestamp.\" + error;\n                    }\n                    if (message.testResult != null && message.hasOwnProperty(\"testResult\")) {\n                        var error = $root.io.cucumber.messages.TestResult.verify(message.testResult);\n                        if (error)\n                            return \"testResult.\" + error;\n                    }\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        if (!$util.isString(message.testCaseStartedId))\n                            return \"testCaseStartedId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TestCaseFinished message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestCaseFinished} TestCaseFinished\n                 */\n                TestCaseFinished.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestCaseFinished)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestCaseFinished();\n                    if (object.timestamp != null) {\n                        if (typeof object.timestamp !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestCaseFinished.timestamp: object expected\");\n                        message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);\n                    }\n                    if (object.testResult != null) {\n                        if (typeof object.testResult !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestCaseFinished.testResult: object expected\");\n                        message.testResult = $root.io.cucumber.messages.TestResult.fromObject(object.testResult);\n                    }\n                    if (object.testCaseStartedId != null)\n                        message.testCaseStartedId = String(object.testCaseStartedId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestCaseFinished message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @static\n                 * @param {io.cucumber.messages.TestCaseFinished} message TestCaseFinished\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestCaseFinished.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.timestamp = null;\n                        object.testResult = null;\n                        object.testCaseStartedId = \"\";\n                    }\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);\n                    if (message.testResult != null && message.hasOwnProperty(\"testResult\"))\n                        object.testResult = $root.io.cucumber.messages.TestResult.toObject(message.testResult, options);\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        object.testCaseStartedId = message.testCaseStartedId;\n                    return object;\n                };\n\n                /**\n                 * Converts this TestCaseFinished to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestCaseFinished\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestCaseFinished.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TestCaseFinished;\n            })();\n\n            messages.TestStepStarted = (function() {\n\n                /**\n                 * Properties of a TestStepStarted.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestStepStarted\n                 * @property {io.cucumber.messages.ITimestamp|null} [timestamp] TestStepStarted timestamp\n                 * @property {string|null} [testStepId] TestStepStarted testStepId\n                 * @property {string|null} [testCaseStartedId] TestStepStarted testCaseStartedId\n                 */\n\n                /**\n                 * Constructs a new TestStepStarted.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestStepStarted.\n                 * @implements ITestStepStarted\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestStepStarted=} [properties] Properties to set\n                 */\n                function TestStepStarted(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestStepStarted timestamp.\n                 * @member {io.cucumber.messages.ITimestamp|null|undefined} timestamp\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @instance\n                 */\n                TestStepStarted.prototype.timestamp = null;\n\n                /**\n                 * TestStepStarted testStepId.\n                 * @member {string} testStepId\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @instance\n                 */\n                TestStepStarted.prototype.testStepId = \"\";\n\n                /**\n                 * TestStepStarted testCaseStartedId.\n                 * @member {string} testCaseStartedId\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @instance\n                 */\n                TestStepStarted.prototype.testCaseStartedId = \"\";\n\n                /**\n                 * Creates a new TestStepStarted instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @static\n                 * @param {io.cucumber.messages.ITestStepStarted=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestStepStarted} TestStepStarted instance\n                 */\n                TestStepStarted.create = function create(properties) {\n                    return new TestStepStarted(properties);\n                };\n\n                /**\n                 * Encodes the specified TestStepStarted message. Does not implicitly {@link io.cucumber.messages.TestStepStarted.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @static\n                 * @param {io.cucumber.messages.ITestStepStarted} message TestStepStarted message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestStepStarted.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.testStepId != null && message.hasOwnProperty(\"testStepId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.testStepId);\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.testCaseStartedId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestStepStarted message, length delimited. Does not implicitly {@link io.cucumber.messages.TestStepStarted.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @static\n                 * @param {io.cucumber.messages.ITestStepStarted} message TestStepStarted message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestStepStarted.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestStepStarted message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestStepStarted} TestStepStarted\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestStepStarted.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestStepStarted();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.testStepId = reader.string();\n                            break;\n                        case 3:\n                            message.testCaseStartedId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestStepStarted message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestStepStarted} TestStepStarted\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestStepStarted.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestStepStarted message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestStepStarted.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                        var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);\n                        if (error)\n                            return \"timestamp.\" + error;\n                    }\n                    if (message.testStepId != null && message.hasOwnProperty(\"testStepId\"))\n                        if (!$util.isString(message.testStepId))\n                            return \"testStepId: string expected\";\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        if (!$util.isString(message.testCaseStartedId))\n                            return \"testCaseStartedId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TestStepStarted message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestStepStarted} TestStepStarted\n                 */\n                TestStepStarted.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestStepStarted)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestStepStarted();\n                    if (object.timestamp != null) {\n                        if (typeof object.timestamp !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestStepStarted.timestamp: object expected\");\n                        message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);\n                    }\n                    if (object.testStepId != null)\n                        message.testStepId = String(object.testStepId);\n                    if (object.testCaseStartedId != null)\n                        message.testCaseStartedId = String(object.testCaseStartedId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestStepStarted message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @static\n                 * @param {io.cucumber.messages.TestStepStarted} message TestStepStarted\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestStepStarted.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.timestamp = null;\n                        object.testStepId = \"\";\n                        object.testCaseStartedId = \"\";\n                    }\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);\n                    if (message.testStepId != null && message.hasOwnProperty(\"testStepId\"))\n                        object.testStepId = message.testStepId;\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        object.testCaseStartedId = message.testCaseStartedId;\n                    return object;\n                };\n\n                /**\n                 * Converts this TestStepStarted to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestStepStarted\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestStepStarted.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TestStepStarted;\n            })();\n\n            messages.TestStepFinished = (function() {\n\n                /**\n                 * Properties of a TestStepFinished.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestStepFinished\n                 * @property {io.cucumber.messages.ITestResult|null} [testResult] TestStepFinished testResult\n                 * @property {io.cucumber.messages.ITimestamp|null} [timestamp] TestStepFinished timestamp\n                 * @property {string|null} [testStepId] TestStepFinished testStepId\n                 * @property {string|null} [testCaseStartedId] TestStepFinished testCaseStartedId\n                 */\n\n                /**\n                 * Constructs a new TestStepFinished.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestStepFinished.\n                 * @implements ITestStepFinished\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestStepFinished=} [properties] Properties to set\n                 */\n                function TestStepFinished(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestStepFinished testResult.\n                 * @member {io.cucumber.messages.ITestResult|null|undefined} testResult\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @instance\n                 */\n                TestStepFinished.prototype.testResult = null;\n\n                /**\n                 * TestStepFinished timestamp.\n                 * @member {io.cucumber.messages.ITimestamp|null|undefined} timestamp\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @instance\n                 */\n                TestStepFinished.prototype.timestamp = null;\n\n                /**\n                 * TestStepFinished testStepId.\n                 * @member {string} testStepId\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @instance\n                 */\n                TestStepFinished.prototype.testStepId = \"\";\n\n                /**\n                 * TestStepFinished testCaseStartedId.\n                 * @member {string} testCaseStartedId\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @instance\n                 */\n                TestStepFinished.prototype.testCaseStartedId = \"\";\n\n                /**\n                 * Creates a new TestStepFinished instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @static\n                 * @param {io.cucumber.messages.ITestStepFinished=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestStepFinished} TestStepFinished instance\n                 */\n                TestStepFinished.create = function create(properties) {\n                    return new TestStepFinished(properties);\n                };\n\n                /**\n                 * Encodes the specified TestStepFinished message. Does not implicitly {@link io.cucumber.messages.TestStepFinished.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @static\n                 * @param {io.cucumber.messages.ITestStepFinished} message TestStepFinished message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestStepFinished.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.testResult != null && message.hasOwnProperty(\"testResult\"))\n                        $root.io.cucumber.messages.TestResult.encode(message.testResult, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.testStepId != null && message.hasOwnProperty(\"testStepId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.testStepId);\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.testCaseStartedId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestStepFinished message, length delimited. Does not implicitly {@link io.cucumber.messages.TestStepFinished.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @static\n                 * @param {io.cucumber.messages.ITestStepFinished} message TestStepFinished message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestStepFinished.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestStepFinished message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestStepFinished} TestStepFinished\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestStepFinished.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestStepFinished();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.testResult = $root.io.cucumber.messages.TestResult.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.testStepId = reader.string();\n                            break;\n                        case 4:\n                            message.testCaseStartedId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestStepFinished message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestStepFinished} TestStepFinished\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestStepFinished.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestStepFinished message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestStepFinished.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.testResult != null && message.hasOwnProperty(\"testResult\")) {\n                        var error = $root.io.cucumber.messages.TestResult.verify(message.testResult);\n                        if (error)\n                            return \"testResult.\" + error;\n                    }\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                        var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);\n                        if (error)\n                            return \"timestamp.\" + error;\n                    }\n                    if (message.testStepId != null && message.hasOwnProperty(\"testStepId\"))\n                        if (!$util.isString(message.testStepId))\n                            return \"testStepId: string expected\";\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        if (!$util.isString(message.testCaseStartedId))\n                            return \"testCaseStartedId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TestStepFinished message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestStepFinished} TestStepFinished\n                 */\n                TestStepFinished.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestStepFinished)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestStepFinished();\n                    if (object.testResult != null) {\n                        if (typeof object.testResult !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestStepFinished.testResult: object expected\");\n                        message.testResult = $root.io.cucumber.messages.TestResult.fromObject(object.testResult);\n                    }\n                    if (object.timestamp != null) {\n                        if (typeof object.timestamp !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestStepFinished.timestamp: object expected\");\n                        message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);\n                    }\n                    if (object.testStepId != null)\n                        message.testStepId = String(object.testStepId);\n                    if (object.testCaseStartedId != null)\n                        message.testCaseStartedId = String(object.testCaseStartedId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestStepFinished message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @static\n                 * @param {io.cucumber.messages.TestStepFinished} message TestStepFinished\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestStepFinished.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.testResult = null;\n                        object.timestamp = null;\n                        object.testStepId = \"\";\n                        object.testCaseStartedId = \"\";\n                    }\n                    if (message.testResult != null && message.hasOwnProperty(\"testResult\"))\n                        object.testResult = $root.io.cucumber.messages.TestResult.toObject(message.testResult, options);\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);\n                    if (message.testStepId != null && message.hasOwnProperty(\"testStepId\"))\n                        object.testStepId = message.testStepId;\n                    if (message.testCaseStartedId != null && message.hasOwnProperty(\"testCaseStartedId\"))\n                        object.testCaseStartedId = message.testCaseStartedId;\n                    return object;\n                };\n\n                /**\n                 * Converts this TestStepFinished to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestStepFinished\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestStepFinished.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TestStepFinished;\n            })();\n\n            messages.TestResult = (function() {\n\n                /**\n                 * Properties of a TestResult.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestResult\n                 * @property {io.cucumber.messages.TestResult.Status|null} [status] TestResult status\n                 * @property {string|null} [message] TestResult message\n                 * @property {io.cucumber.messages.IDuration|null} [duration] TestResult duration\n                 * @property {boolean|null} [willBeRetried] TestResult willBeRetried\n                 */\n\n                /**\n                 * Constructs a new TestResult.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestResult.\n                 * @implements ITestResult\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestResult=} [properties] Properties to set\n                 */\n                function TestResult(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestResult status.\n                 * @member {io.cucumber.messages.TestResult.Status} status\n                 * @memberof io.cucumber.messages.TestResult\n                 * @instance\n                 */\n                TestResult.prototype.status = 0;\n\n                /**\n                 * TestResult message.\n                 * @member {string} message\n                 * @memberof io.cucumber.messages.TestResult\n                 * @instance\n                 */\n                TestResult.prototype.message = \"\";\n\n                /**\n                 * TestResult duration.\n                 * @member {io.cucumber.messages.IDuration|null|undefined} duration\n                 * @memberof io.cucumber.messages.TestResult\n                 * @instance\n                 */\n                TestResult.prototype.duration = null;\n\n                /**\n                 * TestResult willBeRetried.\n                 * @member {boolean} willBeRetried\n                 * @memberof io.cucumber.messages.TestResult\n                 * @instance\n                 */\n                TestResult.prototype.willBeRetried = false;\n\n                /**\n                 * Creates a new TestResult instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestResult\n                 * @static\n                 * @param {io.cucumber.messages.ITestResult=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestResult} TestResult instance\n                 */\n                TestResult.create = function create(properties) {\n                    return new TestResult(properties);\n                };\n\n                /**\n                 * Encodes the specified TestResult message. Does not implicitly {@link io.cucumber.messages.TestResult.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestResult\n                 * @static\n                 * @param {io.cucumber.messages.ITestResult} message TestResult message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestResult.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);\n                    if (message.message != null && message.hasOwnProperty(\"message\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);\n                    if (message.duration != null && message.hasOwnProperty(\"duration\"))\n                        $root.io.cucumber.messages.Duration.encode(message.duration, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.willBeRetried != null && message.hasOwnProperty(\"willBeRetried\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.willBeRetried);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestResult message, length delimited. Does not implicitly {@link io.cucumber.messages.TestResult.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestResult\n                 * @static\n                 * @param {io.cucumber.messages.ITestResult} message TestResult message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestResult.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestResult message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestResult\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestResult} TestResult\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestResult.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestResult();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.status = reader.int32();\n                            break;\n                        case 2:\n                            message.message = reader.string();\n                            break;\n                        case 3:\n                            message.duration = $root.io.cucumber.messages.Duration.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.willBeRetried = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestResult message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestResult\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestResult} TestResult\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestResult.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestResult message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestResult\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestResult.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        switch (message.status) {\n                        default:\n                            return \"status: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    if (message.message != null && message.hasOwnProperty(\"message\"))\n                        if (!$util.isString(message.message))\n                            return \"message: string expected\";\n                    if (message.duration != null && message.hasOwnProperty(\"duration\")) {\n                        var error = $root.io.cucumber.messages.Duration.verify(message.duration);\n                        if (error)\n                            return \"duration.\" + error;\n                    }\n                    if (message.willBeRetried != null && message.hasOwnProperty(\"willBeRetried\"))\n                        if (typeof message.willBeRetried !== \"boolean\")\n                            return \"willBeRetried: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TestResult message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestResult\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestResult} TestResult\n                 */\n                TestResult.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestResult)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestResult();\n                    switch (object.status) {\n                    case \"UNKNOWN\":\n                    case 0:\n                        message.status = 0;\n                        break;\n                    case \"PASSED\":\n                    case 1:\n                        message.status = 1;\n                        break;\n                    case \"SKIPPED\":\n                    case 2:\n                        message.status = 2;\n                        break;\n                    case \"PENDING\":\n                    case 3:\n                        message.status = 3;\n                        break;\n                    case \"UNDEFINED\":\n                    case 4:\n                        message.status = 4;\n                        break;\n                    case \"AMBIGUOUS\":\n                    case 5:\n                        message.status = 5;\n                        break;\n                    case \"FAILED\":\n                    case 6:\n                        message.status = 6;\n                        break;\n                    }\n                    if (object.message != null)\n                        message.message = String(object.message);\n                    if (object.duration != null) {\n                        if (typeof object.duration !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestResult.duration: object expected\");\n                        message.duration = $root.io.cucumber.messages.Duration.fromObject(object.duration);\n                    }\n                    if (object.willBeRetried != null)\n                        message.willBeRetried = Boolean(object.willBeRetried);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestResult message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestResult\n                 * @static\n                 * @param {io.cucumber.messages.TestResult} message TestResult\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestResult.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.status = options.enums === String ? \"UNKNOWN\" : 0;\n                        object.message = \"\";\n                        object.duration = null;\n                        object.willBeRetried = false;\n                    }\n                    if (message.status != null && message.hasOwnProperty(\"status\"))\n                        object.status = options.enums === String ? $root.io.cucumber.messages.TestResult.Status[message.status] : message.status;\n                    if (message.message != null && message.hasOwnProperty(\"message\"))\n                        object.message = message.message;\n                    if (message.duration != null && message.hasOwnProperty(\"duration\"))\n                        object.duration = $root.io.cucumber.messages.Duration.toObject(message.duration, options);\n                    if (message.willBeRetried != null && message.hasOwnProperty(\"willBeRetried\"))\n                        object.willBeRetried = message.willBeRetried;\n                    return object;\n                };\n\n                /**\n                 * Converts this TestResult to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestResult\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestResult.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * Status of a step. Can also represent status of a Pickle (aggregated\n                 * from the status of its steps).\n                 * \n                 * The ordinal values of statuses are significant. The status of a Pickle\n                 * is determined by the union of statuses of its steps. The\n                 * status of the Pickle is the status with the highest ordinal\n                 * in the enum.\n                 * \n                 * For example, if a pickle has steps with statuses passed, undefined and skipped,\n                 * then the pickle's status is undefined.\n                 * @name io.cucumber.messages.TestResult.Status\n                 * @enum {string}\n                 * @property {number} UNKNOWN=0 UNKNOWN value\n                 * @property {number} PASSED=1 PASSED value\n                 * @property {number} SKIPPED=2 SKIPPED value\n                 * @property {number} PENDING=3 PENDING value\n                 * @property {number} UNDEFINED=4 UNDEFINED value\n                 * @property {number} AMBIGUOUS=5 AMBIGUOUS value\n                 * @property {number} FAILED=6 FAILED value\n                 */\n                TestResult.Status = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN\"] = 0;\n                    values[valuesById[1] = \"PASSED\"] = 1;\n                    values[valuesById[2] = \"SKIPPED\"] = 2;\n                    values[valuesById[3] = \"PENDING\"] = 3;\n                    values[valuesById[4] = \"UNDEFINED\"] = 4;\n                    values[valuesById[5] = \"AMBIGUOUS\"] = 5;\n                    values[valuesById[6] = \"FAILED\"] = 6;\n                    return values;\n                })();\n\n                return TestResult;\n            })();\n\n            messages.TestRunFinished = (function() {\n\n                /**\n                 * Properties of a TestRunFinished.\n                 * @memberof io.cucumber.messages\n                 * @interface ITestRunFinished\n                 * @property {boolean|null} [success] TestRunFinished success\n                 * @property {io.cucumber.messages.ITimestamp|null} [timestamp] TestRunFinished timestamp\n                 */\n\n                /**\n                 * Constructs a new TestRunFinished.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a TestRunFinished.\n                 * @implements ITestRunFinished\n                 * @constructor\n                 * @param {io.cucumber.messages.ITestRunFinished=} [properties] Properties to set\n                 */\n                function TestRunFinished(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TestRunFinished success.\n                 * @member {boolean} success\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @instance\n                 */\n                TestRunFinished.prototype.success = false;\n\n                /**\n                 * TestRunFinished timestamp.\n                 * @member {io.cucumber.messages.ITimestamp|null|undefined} timestamp\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @instance\n                 */\n                TestRunFinished.prototype.timestamp = null;\n\n                /**\n                 * Creates a new TestRunFinished instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @static\n                 * @param {io.cucumber.messages.ITestRunFinished=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.TestRunFinished} TestRunFinished instance\n                 */\n                TestRunFinished.create = function create(properties) {\n                    return new TestRunFinished(properties);\n                };\n\n                /**\n                 * Encodes the specified TestRunFinished message. Does not implicitly {@link io.cucumber.messages.TestRunFinished.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @static\n                 * @param {io.cucumber.messages.ITestRunFinished} message TestRunFinished message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestRunFinished.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.success != null && message.hasOwnProperty(\"success\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        $root.io.cucumber.messages.Timestamp.encode(message.timestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TestRunFinished message, length delimited. Does not implicitly {@link io.cucumber.messages.TestRunFinished.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @static\n                 * @param {io.cucumber.messages.ITestRunFinished} message TestRunFinished message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TestRunFinished.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TestRunFinished message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.TestRunFinished} TestRunFinished\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestRunFinished.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.TestRunFinished();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.success = reader.bool();\n                            break;\n                        case 2:\n                            message.timestamp = $root.io.cucumber.messages.Timestamp.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TestRunFinished message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.TestRunFinished} TestRunFinished\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TestRunFinished.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TestRunFinished message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TestRunFinished.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.success != null && message.hasOwnProperty(\"success\"))\n                        if (typeof message.success !== \"boolean\")\n                            return \"success: boolean expected\";\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\")) {\n                        var error = $root.io.cucumber.messages.Timestamp.verify(message.timestamp);\n                        if (error)\n                            return \"timestamp.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a TestRunFinished message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.TestRunFinished} TestRunFinished\n                 */\n                TestRunFinished.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.TestRunFinished)\n                        return object;\n                    var message = new $root.io.cucumber.messages.TestRunFinished();\n                    if (object.success != null)\n                        message.success = Boolean(object.success);\n                    if (object.timestamp != null) {\n                        if (typeof object.timestamp !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.TestRunFinished.timestamp: object expected\");\n                        message.timestamp = $root.io.cucumber.messages.Timestamp.fromObject(object.timestamp);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TestRunFinished message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @static\n                 * @param {io.cucumber.messages.TestRunFinished} message TestRunFinished\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TestRunFinished.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.success = false;\n                        object.timestamp = null;\n                    }\n                    if (message.success != null && message.hasOwnProperty(\"success\"))\n                        object.success = message.success;\n                    if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                        object.timestamp = $root.io.cucumber.messages.Timestamp.toObject(message.timestamp, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this TestRunFinished to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.TestRunFinished\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TestRunFinished.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TestRunFinished;\n            })();\n\n            messages.CommandStart = (function() {\n\n                /**\n                 * Properties of a CommandStart.\n                 * @memberof io.cucumber.messages\n                 * @interface ICommandStart\n                 * @property {string|null} [baseDirectory] CommandStart baseDirectory\n                 * @property {io.cucumber.messages.ISourcesConfig|null} [sourcesConfig] CommandStart sourcesConfig\n                 * @property {io.cucumber.messages.IRuntimeConfig|null} [runtimeConfig] CommandStart runtimeConfig\n                 * @property {io.cucumber.messages.ISupportCodeConfig|null} [supportCodeConfig] CommandStart supportCodeConfig\n                 */\n\n                /**\n                 * Constructs a new CommandStart.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a CommandStart.\n                 * @implements ICommandStart\n                 * @constructor\n                 * @param {io.cucumber.messages.ICommandStart=} [properties] Properties to set\n                 */\n                function CommandStart(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommandStart baseDirectory.\n                 * @member {string} baseDirectory\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @instance\n                 */\n                CommandStart.prototype.baseDirectory = \"\";\n\n                /**\n                 * CommandStart sourcesConfig.\n                 * @member {io.cucumber.messages.ISourcesConfig|null|undefined} sourcesConfig\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @instance\n                 */\n                CommandStart.prototype.sourcesConfig = null;\n\n                /**\n                 * CommandStart runtimeConfig.\n                 * @member {io.cucumber.messages.IRuntimeConfig|null|undefined} runtimeConfig\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @instance\n                 */\n                CommandStart.prototype.runtimeConfig = null;\n\n                /**\n                 * CommandStart supportCodeConfig.\n                 * @member {io.cucumber.messages.ISupportCodeConfig|null|undefined} supportCodeConfig\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @instance\n                 */\n                CommandStart.prototype.supportCodeConfig = null;\n\n                /**\n                 * Creates a new CommandStart instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @static\n                 * @param {io.cucumber.messages.ICommandStart=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.CommandStart} CommandStart instance\n                 */\n                CommandStart.create = function create(properties) {\n                    return new CommandStart(properties);\n                };\n\n                /**\n                 * Encodes the specified CommandStart message. Does not implicitly {@link io.cucumber.messages.CommandStart.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @static\n                 * @param {io.cucumber.messages.ICommandStart} message CommandStart message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandStart.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.baseDirectory != null && message.hasOwnProperty(\"baseDirectory\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.baseDirectory);\n                    if (message.sourcesConfig != null && message.hasOwnProperty(\"sourcesConfig\"))\n                        $root.io.cucumber.messages.SourcesConfig.encode(message.sourcesConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.runtimeConfig != null && message.hasOwnProperty(\"runtimeConfig\"))\n                        $root.io.cucumber.messages.RuntimeConfig.encode(message.runtimeConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.supportCodeConfig != null && message.hasOwnProperty(\"supportCodeConfig\"))\n                        $root.io.cucumber.messages.SupportCodeConfig.encode(message.supportCodeConfig, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommandStart message, length delimited. Does not implicitly {@link io.cucumber.messages.CommandStart.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @static\n                 * @param {io.cucumber.messages.ICommandStart} message CommandStart message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandStart.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommandStart message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.CommandStart} CommandStart\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandStart.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.CommandStart();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 2:\n                            message.baseDirectory = reader.string();\n                            break;\n                        case 3:\n                            message.sourcesConfig = $root.io.cucumber.messages.SourcesConfig.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.runtimeConfig = $root.io.cucumber.messages.RuntimeConfig.decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            message.supportCodeConfig = $root.io.cucumber.messages.SupportCodeConfig.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommandStart message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.CommandStart} CommandStart\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandStart.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommandStart message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommandStart.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.baseDirectory != null && message.hasOwnProperty(\"baseDirectory\"))\n                        if (!$util.isString(message.baseDirectory))\n                            return \"baseDirectory: string expected\";\n                    if (message.sourcesConfig != null && message.hasOwnProperty(\"sourcesConfig\")) {\n                        var error = $root.io.cucumber.messages.SourcesConfig.verify(message.sourcesConfig);\n                        if (error)\n                            return \"sourcesConfig.\" + error;\n                    }\n                    if (message.runtimeConfig != null && message.hasOwnProperty(\"runtimeConfig\")) {\n                        var error = $root.io.cucumber.messages.RuntimeConfig.verify(message.runtimeConfig);\n                        if (error)\n                            return \"runtimeConfig.\" + error;\n                    }\n                    if (message.supportCodeConfig != null && message.hasOwnProperty(\"supportCodeConfig\")) {\n                        var error = $root.io.cucumber.messages.SupportCodeConfig.verify(message.supportCodeConfig);\n                        if (error)\n                            return \"supportCodeConfig.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a CommandStart message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.CommandStart} CommandStart\n                 */\n                CommandStart.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.CommandStart)\n                        return object;\n                    var message = new $root.io.cucumber.messages.CommandStart();\n                    if (object.baseDirectory != null)\n                        message.baseDirectory = String(object.baseDirectory);\n                    if (object.sourcesConfig != null) {\n                        if (typeof object.sourcesConfig !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.CommandStart.sourcesConfig: object expected\");\n                        message.sourcesConfig = $root.io.cucumber.messages.SourcesConfig.fromObject(object.sourcesConfig);\n                    }\n                    if (object.runtimeConfig != null) {\n                        if (typeof object.runtimeConfig !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.CommandStart.runtimeConfig: object expected\");\n                        message.runtimeConfig = $root.io.cucumber.messages.RuntimeConfig.fromObject(object.runtimeConfig);\n                    }\n                    if (object.supportCodeConfig != null) {\n                        if (typeof object.supportCodeConfig !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.CommandStart.supportCodeConfig: object expected\");\n                        message.supportCodeConfig = $root.io.cucumber.messages.SupportCodeConfig.fromObject(object.supportCodeConfig);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommandStart message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @static\n                 * @param {io.cucumber.messages.CommandStart} message CommandStart\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommandStart.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.baseDirectory = \"\";\n                        object.sourcesConfig = null;\n                        object.runtimeConfig = null;\n                        object.supportCodeConfig = null;\n                    }\n                    if (message.baseDirectory != null && message.hasOwnProperty(\"baseDirectory\"))\n                        object.baseDirectory = message.baseDirectory;\n                    if (message.sourcesConfig != null && message.hasOwnProperty(\"sourcesConfig\"))\n                        object.sourcesConfig = $root.io.cucumber.messages.SourcesConfig.toObject(message.sourcesConfig, options);\n                    if (message.runtimeConfig != null && message.hasOwnProperty(\"runtimeConfig\"))\n                        object.runtimeConfig = $root.io.cucumber.messages.RuntimeConfig.toObject(message.runtimeConfig, options);\n                    if (message.supportCodeConfig != null && message.hasOwnProperty(\"supportCodeConfig\"))\n                        object.supportCodeConfig = $root.io.cucumber.messages.SupportCodeConfig.toObject(message.supportCodeConfig, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this CommandStart to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.CommandStart\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommandStart.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommandStart;\n            })();\n\n            messages.SourcesConfig = (function() {\n\n                /**\n                 * Properties of a SourcesConfig.\n                 * @memberof io.cucumber.messages\n                 * @interface ISourcesConfig\n                 * @property {Array.<string>|null} [absolutePaths] SourcesConfig absolutePaths\n                 * @property {string|null} [language] SourcesConfig language\n                 * @property {io.cucumber.messages.ISourcesFilterConfig|null} [filters] SourcesConfig filters\n                 * @property {io.cucumber.messages.ISourcesOrder|null} [order] SourcesConfig order\n                 */\n\n                /**\n                 * Constructs a new SourcesConfig.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a SourcesConfig.\n                 * @implements ISourcesConfig\n                 * @constructor\n                 * @param {io.cucumber.messages.ISourcesConfig=} [properties] Properties to set\n                 */\n                function SourcesConfig(properties) {\n                    this.absolutePaths = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SourcesConfig absolutePaths.\n                 * @member {Array.<string>} absolutePaths\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @instance\n                 */\n                SourcesConfig.prototype.absolutePaths = $util.emptyArray;\n\n                /**\n                 * SourcesConfig language.\n                 * @member {string} language\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @instance\n                 */\n                SourcesConfig.prototype.language = \"\";\n\n                /**\n                 * SourcesConfig filters.\n                 * @member {io.cucumber.messages.ISourcesFilterConfig|null|undefined} filters\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @instance\n                 */\n                SourcesConfig.prototype.filters = null;\n\n                /**\n                 * SourcesConfig order.\n                 * @member {io.cucumber.messages.ISourcesOrder|null|undefined} order\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @instance\n                 */\n                SourcesConfig.prototype.order = null;\n\n                /**\n                 * Creates a new SourcesConfig instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @static\n                 * @param {io.cucumber.messages.ISourcesConfig=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.SourcesConfig} SourcesConfig instance\n                 */\n                SourcesConfig.create = function create(properties) {\n                    return new SourcesConfig(properties);\n                };\n\n                /**\n                 * Encodes the specified SourcesConfig message. Does not implicitly {@link io.cucumber.messages.SourcesConfig.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @static\n                 * @param {io.cucumber.messages.ISourcesConfig} message SourcesConfig message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourcesConfig.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.absolutePaths != null && message.absolutePaths.length)\n                        for (var i = 0; i < message.absolutePaths.length; ++i)\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.absolutePaths[i]);\n                    if (message.language != null && message.hasOwnProperty(\"language\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);\n                    if (message.filters != null && message.hasOwnProperty(\"filters\"))\n                        $root.io.cucumber.messages.SourcesFilterConfig.encode(message.filters, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        $root.io.cucumber.messages.SourcesOrder.encode(message.order, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SourcesConfig message, length delimited. Does not implicitly {@link io.cucumber.messages.SourcesConfig.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @static\n                 * @param {io.cucumber.messages.ISourcesConfig} message SourcesConfig message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourcesConfig.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SourcesConfig message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.SourcesConfig} SourcesConfig\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourcesConfig.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.SourcesConfig();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.absolutePaths && message.absolutePaths.length))\n                                message.absolutePaths = [];\n                            message.absolutePaths.push(reader.string());\n                            break;\n                        case 2:\n                            message.language = reader.string();\n                            break;\n                        case 3:\n                            message.filters = $root.io.cucumber.messages.SourcesFilterConfig.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.order = $root.io.cucumber.messages.SourcesOrder.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SourcesConfig message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.SourcesConfig} SourcesConfig\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourcesConfig.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SourcesConfig message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SourcesConfig.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.absolutePaths != null && message.hasOwnProperty(\"absolutePaths\")) {\n                        if (!Array.isArray(message.absolutePaths))\n                            return \"absolutePaths: array expected\";\n                        for (var i = 0; i < message.absolutePaths.length; ++i)\n                            if (!$util.isString(message.absolutePaths[i]))\n                                return \"absolutePaths: string[] expected\";\n                    }\n                    if (message.language != null && message.hasOwnProperty(\"language\"))\n                        if (!$util.isString(message.language))\n                            return \"language: string expected\";\n                    if (message.filters != null && message.hasOwnProperty(\"filters\")) {\n                        var error = $root.io.cucumber.messages.SourcesFilterConfig.verify(message.filters);\n                        if (error)\n                            return \"filters.\" + error;\n                    }\n                    if (message.order != null && message.hasOwnProperty(\"order\")) {\n                        var error = $root.io.cucumber.messages.SourcesOrder.verify(message.order);\n                        if (error)\n                            return \"order.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a SourcesConfig message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.SourcesConfig} SourcesConfig\n                 */\n                SourcesConfig.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.SourcesConfig)\n                        return object;\n                    var message = new $root.io.cucumber.messages.SourcesConfig();\n                    if (object.absolutePaths) {\n                        if (!Array.isArray(object.absolutePaths))\n                            throw TypeError(\".io.cucumber.messages.SourcesConfig.absolutePaths: array expected\");\n                        message.absolutePaths = [];\n                        for (var i = 0; i < object.absolutePaths.length; ++i)\n                            message.absolutePaths[i] = String(object.absolutePaths[i]);\n                    }\n                    if (object.language != null)\n                        message.language = String(object.language);\n                    if (object.filters != null) {\n                        if (typeof object.filters !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.SourcesConfig.filters: object expected\");\n                        message.filters = $root.io.cucumber.messages.SourcesFilterConfig.fromObject(object.filters);\n                    }\n                    if (object.order != null) {\n                        if (typeof object.order !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.SourcesConfig.order: object expected\");\n                        message.order = $root.io.cucumber.messages.SourcesOrder.fromObject(object.order);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SourcesConfig message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @static\n                 * @param {io.cucumber.messages.SourcesConfig} message SourcesConfig\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SourcesConfig.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.absolutePaths = [];\n                    if (options.defaults) {\n                        object.language = \"\";\n                        object.filters = null;\n                        object.order = null;\n                    }\n                    if (message.absolutePaths && message.absolutePaths.length) {\n                        object.absolutePaths = [];\n                        for (var j = 0; j < message.absolutePaths.length; ++j)\n                            object.absolutePaths[j] = message.absolutePaths[j];\n                    }\n                    if (message.language != null && message.hasOwnProperty(\"language\"))\n                        object.language = message.language;\n                    if (message.filters != null && message.hasOwnProperty(\"filters\"))\n                        object.filters = $root.io.cucumber.messages.SourcesFilterConfig.toObject(message.filters, options);\n                    if (message.order != null && message.hasOwnProperty(\"order\"))\n                        object.order = $root.io.cucumber.messages.SourcesOrder.toObject(message.order, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this SourcesConfig to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.SourcesConfig\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SourcesConfig.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SourcesConfig;\n            })();\n\n            messages.SourcesFilterConfig = (function() {\n\n                /**\n                 * Properties of a SourcesFilterConfig.\n                 * @memberof io.cucumber.messages\n                 * @interface ISourcesFilterConfig\n                 * @property {string|null} [tagExpression] SourcesFilterConfig tagExpression\n                 * @property {Array.<string>|null} [nameRegularExpressions] SourcesFilterConfig nameRegularExpressions\n                 * @property {Array.<io.cucumber.messages.IUriToLinesMapping>|null} [uriToLinesMapping] SourcesFilterConfig uriToLinesMapping\n                 */\n\n                /**\n                 * Constructs a new SourcesFilterConfig.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a SourcesFilterConfig.\n                 * @implements ISourcesFilterConfig\n                 * @constructor\n                 * @param {io.cucumber.messages.ISourcesFilterConfig=} [properties] Properties to set\n                 */\n                function SourcesFilterConfig(properties) {\n                    this.nameRegularExpressions = [];\n                    this.uriToLinesMapping = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SourcesFilterConfig tagExpression.\n                 * @member {string} tagExpression\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @instance\n                 */\n                SourcesFilterConfig.prototype.tagExpression = \"\";\n\n                /**\n                 * SourcesFilterConfig nameRegularExpressions.\n                 * @member {Array.<string>} nameRegularExpressions\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @instance\n                 */\n                SourcesFilterConfig.prototype.nameRegularExpressions = $util.emptyArray;\n\n                /**\n                 * SourcesFilterConfig uriToLinesMapping.\n                 * @member {Array.<io.cucumber.messages.IUriToLinesMapping>} uriToLinesMapping\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @instance\n                 */\n                SourcesFilterConfig.prototype.uriToLinesMapping = $util.emptyArray;\n\n                /**\n                 * Creates a new SourcesFilterConfig instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @static\n                 * @param {io.cucumber.messages.ISourcesFilterConfig=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.SourcesFilterConfig} SourcesFilterConfig instance\n                 */\n                SourcesFilterConfig.create = function create(properties) {\n                    return new SourcesFilterConfig(properties);\n                };\n\n                /**\n                 * Encodes the specified SourcesFilterConfig message. Does not implicitly {@link io.cucumber.messages.SourcesFilterConfig.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @static\n                 * @param {io.cucumber.messages.ISourcesFilterConfig} message SourcesFilterConfig message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourcesFilterConfig.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.tagExpression != null && message.hasOwnProperty(\"tagExpression\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.tagExpression);\n                    if (message.nameRegularExpressions != null && message.nameRegularExpressions.length)\n                        for (var i = 0; i < message.nameRegularExpressions.length; ++i)\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nameRegularExpressions[i]);\n                    if (message.uriToLinesMapping != null && message.uriToLinesMapping.length)\n                        for (var i = 0; i < message.uriToLinesMapping.length; ++i)\n                            $root.io.cucumber.messages.UriToLinesMapping.encode(message.uriToLinesMapping[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SourcesFilterConfig message, length delimited. Does not implicitly {@link io.cucumber.messages.SourcesFilterConfig.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @static\n                 * @param {io.cucumber.messages.ISourcesFilterConfig} message SourcesFilterConfig message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourcesFilterConfig.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SourcesFilterConfig message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.SourcesFilterConfig} SourcesFilterConfig\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourcesFilterConfig.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.SourcesFilterConfig();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.tagExpression = reader.string();\n                            break;\n                        case 2:\n                            if (!(message.nameRegularExpressions && message.nameRegularExpressions.length))\n                                message.nameRegularExpressions = [];\n                            message.nameRegularExpressions.push(reader.string());\n                            break;\n                        case 3:\n                            if (!(message.uriToLinesMapping && message.uriToLinesMapping.length))\n                                message.uriToLinesMapping = [];\n                            message.uriToLinesMapping.push($root.io.cucumber.messages.UriToLinesMapping.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SourcesFilterConfig message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.SourcesFilterConfig} SourcesFilterConfig\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourcesFilterConfig.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SourcesFilterConfig message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SourcesFilterConfig.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.tagExpression != null && message.hasOwnProperty(\"tagExpression\"))\n                        if (!$util.isString(message.tagExpression))\n                            return \"tagExpression: string expected\";\n                    if (message.nameRegularExpressions != null && message.hasOwnProperty(\"nameRegularExpressions\")) {\n                        if (!Array.isArray(message.nameRegularExpressions))\n                            return \"nameRegularExpressions: array expected\";\n                        for (var i = 0; i < message.nameRegularExpressions.length; ++i)\n                            if (!$util.isString(message.nameRegularExpressions[i]))\n                                return \"nameRegularExpressions: string[] expected\";\n                    }\n                    if (message.uriToLinesMapping != null && message.hasOwnProperty(\"uriToLinesMapping\")) {\n                        if (!Array.isArray(message.uriToLinesMapping))\n                            return \"uriToLinesMapping: array expected\";\n                        for (var i = 0; i < message.uriToLinesMapping.length; ++i) {\n                            var error = $root.io.cucumber.messages.UriToLinesMapping.verify(message.uriToLinesMapping[i]);\n                            if (error)\n                                return \"uriToLinesMapping.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a SourcesFilterConfig message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.SourcesFilterConfig} SourcesFilterConfig\n                 */\n                SourcesFilterConfig.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.SourcesFilterConfig)\n                        return object;\n                    var message = new $root.io.cucumber.messages.SourcesFilterConfig();\n                    if (object.tagExpression != null)\n                        message.tagExpression = String(object.tagExpression);\n                    if (object.nameRegularExpressions) {\n                        if (!Array.isArray(object.nameRegularExpressions))\n                            throw TypeError(\".io.cucumber.messages.SourcesFilterConfig.nameRegularExpressions: array expected\");\n                        message.nameRegularExpressions = [];\n                        for (var i = 0; i < object.nameRegularExpressions.length; ++i)\n                            message.nameRegularExpressions[i] = String(object.nameRegularExpressions[i]);\n                    }\n                    if (object.uriToLinesMapping) {\n                        if (!Array.isArray(object.uriToLinesMapping))\n                            throw TypeError(\".io.cucumber.messages.SourcesFilterConfig.uriToLinesMapping: array expected\");\n                        message.uriToLinesMapping = [];\n                        for (var i = 0; i < object.uriToLinesMapping.length; ++i) {\n                            if (typeof object.uriToLinesMapping[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.SourcesFilterConfig.uriToLinesMapping: object expected\");\n                            message.uriToLinesMapping[i] = $root.io.cucumber.messages.UriToLinesMapping.fromObject(object.uriToLinesMapping[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SourcesFilterConfig message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @static\n                 * @param {io.cucumber.messages.SourcesFilterConfig} message SourcesFilterConfig\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SourcesFilterConfig.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.nameRegularExpressions = [];\n                        object.uriToLinesMapping = [];\n                    }\n                    if (options.defaults)\n                        object.tagExpression = \"\";\n                    if (message.tagExpression != null && message.hasOwnProperty(\"tagExpression\"))\n                        object.tagExpression = message.tagExpression;\n                    if (message.nameRegularExpressions && message.nameRegularExpressions.length) {\n                        object.nameRegularExpressions = [];\n                        for (var j = 0; j < message.nameRegularExpressions.length; ++j)\n                            object.nameRegularExpressions[j] = message.nameRegularExpressions[j];\n                    }\n                    if (message.uriToLinesMapping && message.uriToLinesMapping.length) {\n                        object.uriToLinesMapping = [];\n                        for (var j = 0; j < message.uriToLinesMapping.length; ++j)\n                            object.uriToLinesMapping[j] = $root.io.cucumber.messages.UriToLinesMapping.toObject(message.uriToLinesMapping[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this SourcesFilterConfig to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.SourcesFilterConfig\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SourcesFilterConfig.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SourcesFilterConfig;\n            })();\n\n            messages.UriToLinesMapping = (function() {\n\n                /**\n                 * Properties of an UriToLinesMapping.\n                 * @memberof io.cucumber.messages\n                 * @interface IUriToLinesMapping\n                 * @property {string|null} [absolutePath] UriToLinesMapping absolutePath\n                 * @property {Array.<number|Long>|null} [lines] UriToLinesMapping lines\n                 */\n\n                /**\n                 * Constructs a new UriToLinesMapping.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents an UriToLinesMapping.\n                 * @implements IUriToLinesMapping\n                 * @constructor\n                 * @param {io.cucumber.messages.IUriToLinesMapping=} [properties] Properties to set\n                 */\n                function UriToLinesMapping(properties) {\n                    this.lines = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * UriToLinesMapping absolutePath.\n                 * @member {string} absolutePath\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @instance\n                 */\n                UriToLinesMapping.prototype.absolutePath = \"\";\n\n                /**\n                 * UriToLinesMapping lines.\n                 * @member {Array.<number|Long>} lines\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @instance\n                 */\n                UriToLinesMapping.prototype.lines = $util.emptyArray;\n\n                /**\n                 * Creates a new UriToLinesMapping instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @static\n                 * @param {io.cucumber.messages.IUriToLinesMapping=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.UriToLinesMapping} UriToLinesMapping instance\n                 */\n                UriToLinesMapping.create = function create(properties) {\n                    return new UriToLinesMapping(properties);\n                };\n\n                /**\n                 * Encodes the specified UriToLinesMapping message. Does not implicitly {@link io.cucumber.messages.UriToLinesMapping.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @static\n                 * @param {io.cucumber.messages.IUriToLinesMapping} message UriToLinesMapping message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                UriToLinesMapping.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.absolutePath != null && message.hasOwnProperty(\"absolutePath\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.absolutePath);\n                    if (message.lines != null && message.lines.length) {\n                        writer.uint32(/* id 2, wireType 2 =*/18).fork();\n                        for (var i = 0; i < message.lines.length; ++i)\n                            writer.uint64(message.lines[i]);\n                        writer.ldelim();\n                    }\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified UriToLinesMapping message, length delimited. Does not implicitly {@link io.cucumber.messages.UriToLinesMapping.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @static\n                 * @param {io.cucumber.messages.IUriToLinesMapping} message UriToLinesMapping message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                UriToLinesMapping.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an UriToLinesMapping message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.UriToLinesMapping} UriToLinesMapping\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                UriToLinesMapping.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.UriToLinesMapping();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.absolutePath = reader.string();\n                            break;\n                        case 2:\n                            if (!(message.lines && message.lines.length))\n                                message.lines = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.lines.push(reader.uint64());\n                            } else\n                                message.lines.push(reader.uint64());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an UriToLinesMapping message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.UriToLinesMapping} UriToLinesMapping\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                UriToLinesMapping.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an UriToLinesMapping message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                UriToLinesMapping.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.absolutePath != null && message.hasOwnProperty(\"absolutePath\"))\n                        if (!$util.isString(message.absolutePath))\n                            return \"absolutePath: string expected\";\n                    if (message.lines != null && message.hasOwnProperty(\"lines\")) {\n                        if (!Array.isArray(message.lines))\n                            return \"lines: array expected\";\n                        for (var i = 0; i < message.lines.length; ++i)\n                            if (!$util.isInteger(message.lines[i]) && !(message.lines[i] && $util.isInteger(message.lines[i].low) && $util.isInteger(message.lines[i].high)))\n                                return \"lines: integer|Long[] expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates an UriToLinesMapping message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.UriToLinesMapping} UriToLinesMapping\n                 */\n                UriToLinesMapping.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.UriToLinesMapping)\n                        return object;\n                    var message = new $root.io.cucumber.messages.UriToLinesMapping();\n                    if (object.absolutePath != null)\n                        message.absolutePath = String(object.absolutePath);\n                    if (object.lines) {\n                        if (!Array.isArray(object.lines))\n                            throw TypeError(\".io.cucumber.messages.UriToLinesMapping.lines: array expected\");\n                        message.lines = [];\n                        for (var i = 0; i < object.lines.length; ++i)\n                            if ($util.Long)\n                                (message.lines[i] = $util.Long.fromValue(object.lines[i])).unsigned = true;\n                            else if (typeof object.lines[i] === \"string\")\n                                message.lines[i] = parseInt(object.lines[i], 10);\n                            else if (typeof object.lines[i] === \"number\")\n                                message.lines[i] = object.lines[i];\n                            else if (typeof object.lines[i] === \"object\")\n                                message.lines[i] = new $util.LongBits(object.lines[i].low >>> 0, object.lines[i].high >>> 0).toNumber(true);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an UriToLinesMapping message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @static\n                 * @param {io.cucumber.messages.UriToLinesMapping} message UriToLinesMapping\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                UriToLinesMapping.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.lines = [];\n                    if (options.defaults)\n                        object.absolutePath = \"\";\n                    if (message.absolutePath != null && message.hasOwnProperty(\"absolutePath\"))\n                        object.absolutePath = message.absolutePath;\n                    if (message.lines && message.lines.length) {\n                        object.lines = [];\n                        for (var j = 0; j < message.lines.length; ++j)\n                            if (typeof message.lines[j] === \"number\")\n                                object.lines[j] = options.longs === String ? String(message.lines[j]) : message.lines[j];\n                            else\n                                object.lines[j] = options.longs === String ? $util.Long.prototype.toString.call(message.lines[j]) : options.longs === Number ? new $util.LongBits(message.lines[j].low >>> 0, message.lines[j].high >>> 0).toNumber(true) : message.lines[j];\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this UriToLinesMapping to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.UriToLinesMapping\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                UriToLinesMapping.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return UriToLinesMapping;\n            })();\n\n            messages.SourcesOrder = (function() {\n\n                /**\n                 * Properties of a SourcesOrder.\n                 * @memberof io.cucumber.messages\n                 * @interface ISourcesOrder\n                 * @property {io.cucumber.messages.SourcesOrderType|null} [type] SourcesOrder type\n                 * @property {number|Long|null} [seed] SourcesOrder seed\n                 */\n\n                /**\n                 * Constructs a new SourcesOrder.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a SourcesOrder.\n                 * @implements ISourcesOrder\n                 * @constructor\n                 * @param {io.cucumber.messages.ISourcesOrder=} [properties] Properties to set\n                 */\n                function SourcesOrder(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SourcesOrder type.\n                 * @member {io.cucumber.messages.SourcesOrderType} type\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @instance\n                 */\n                SourcesOrder.prototype.type = 0;\n\n                /**\n                 * SourcesOrder seed.\n                 * @member {number|Long} seed\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @instance\n                 */\n                SourcesOrder.prototype.seed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n                /**\n                 * Creates a new SourcesOrder instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @static\n                 * @param {io.cucumber.messages.ISourcesOrder=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.SourcesOrder} SourcesOrder instance\n                 */\n                SourcesOrder.create = function create(properties) {\n                    return new SourcesOrder(properties);\n                };\n\n                /**\n                 * Encodes the specified SourcesOrder message. Does not implicitly {@link io.cucumber.messages.SourcesOrder.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @static\n                 * @param {io.cucumber.messages.ISourcesOrder} message SourcesOrder message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourcesOrder.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.type != null && message.hasOwnProperty(\"type\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);\n                    if (message.seed != null && message.hasOwnProperty(\"seed\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.seed);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SourcesOrder message, length delimited. Does not implicitly {@link io.cucumber.messages.SourcesOrder.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @static\n                 * @param {io.cucumber.messages.ISourcesOrder} message SourcesOrder message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourcesOrder.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SourcesOrder message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.SourcesOrder} SourcesOrder\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourcesOrder.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.SourcesOrder();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.type = reader.int32();\n                            break;\n                        case 2:\n                            message.seed = reader.uint64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SourcesOrder message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.SourcesOrder} SourcesOrder\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourcesOrder.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SourcesOrder message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SourcesOrder.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.type != null && message.hasOwnProperty(\"type\"))\n                        switch (message.type) {\n                        default:\n                            return \"type: enum value expected\";\n                        case 0:\n                        case 1:\n                            break;\n                        }\n                    if (message.seed != null && message.hasOwnProperty(\"seed\"))\n                        if (!$util.isInteger(message.seed) && !(message.seed && $util.isInteger(message.seed.low) && $util.isInteger(message.seed.high)))\n                            return \"seed: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SourcesOrder message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.SourcesOrder} SourcesOrder\n                 */\n                SourcesOrder.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.SourcesOrder)\n                        return object;\n                    var message = new $root.io.cucumber.messages.SourcesOrder();\n                    switch (object.type) {\n                    case \"ORDER_OF_DEFINITION\":\n                    case 0:\n                        message.type = 0;\n                        break;\n                    case \"RANDOM\":\n                    case 1:\n                        message.type = 1;\n                        break;\n                    }\n                    if (object.seed != null)\n                        if ($util.Long)\n                            (message.seed = $util.Long.fromValue(object.seed)).unsigned = true;\n                        else if (typeof object.seed === \"string\")\n                            message.seed = parseInt(object.seed, 10);\n                        else if (typeof object.seed === \"number\")\n                            message.seed = object.seed;\n                        else if (typeof object.seed === \"object\")\n                            message.seed = new $util.LongBits(object.seed.low >>> 0, object.seed.high >>> 0).toNumber(true);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SourcesOrder message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @static\n                 * @param {io.cucumber.messages.SourcesOrder} message SourcesOrder\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SourcesOrder.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.type = options.enums === String ? \"ORDER_OF_DEFINITION\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, true);\n                            object.seed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.seed = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.type != null && message.hasOwnProperty(\"type\"))\n                        object.type = options.enums === String ? $root.io.cucumber.messages.SourcesOrderType[message.type] : message.type;\n                    if (message.seed != null && message.hasOwnProperty(\"seed\"))\n                        if (typeof message.seed === \"number\")\n                            object.seed = options.longs === String ? String(message.seed) : message.seed;\n                        else\n                            object.seed = options.longs === String ? $util.Long.prototype.toString.call(message.seed) : options.longs === Number ? new $util.LongBits(message.seed.low >>> 0, message.seed.high >>> 0).toNumber(true) : message.seed;\n                    return object;\n                };\n\n                /**\n                 * Converts this SourcesOrder to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.SourcesOrder\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SourcesOrder.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SourcesOrder;\n            })();\n\n            /**\n             * SourcesOrderType enum.\n             * @name io.cucumber.messages.SourcesOrderType\n             * @enum {string}\n             * @property {number} ORDER_OF_DEFINITION=0 ORDER_OF_DEFINITION value\n             * @property {number} RANDOM=1 RANDOM value\n             */\n            messages.SourcesOrderType = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"ORDER_OF_DEFINITION\"] = 0;\n                values[valuesById[1] = \"RANDOM\"] = 1;\n                return values;\n            })();\n\n            messages.RuntimeConfig = (function() {\n\n                /**\n                 * Properties of a RuntimeConfig.\n                 * @memberof io.cucumber.messages\n                 * @interface IRuntimeConfig\n                 * @property {boolean|null} [isFailFast] RuntimeConfig isFailFast\n                 * @property {boolean|null} [isDryRun] RuntimeConfig isDryRun\n                 * @property {boolean|null} [isStrict] RuntimeConfig isStrict\n                 * @property {number|Long|null} [maxParallel] RuntimeConfig maxParallel\n                 */\n\n                /**\n                 * Constructs a new RuntimeConfig.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a RuntimeConfig.\n                 * @implements IRuntimeConfig\n                 * @constructor\n                 * @param {io.cucumber.messages.IRuntimeConfig=} [properties] Properties to set\n                 */\n                function RuntimeConfig(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * RuntimeConfig isFailFast.\n                 * @member {boolean} isFailFast\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @instance\n                 */\n                RuntimeConfig.prototype.isFailFast = false;\n\n                /**\n                 * RuntimeConfig isDryRun.\n                 * @member {boolean} isDryRun\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @instance\n                 */\n                RuntimeConfig.prototype.isDryRun = false;\n\n                /**\n                 * RuntimeConfig isStrict.\n                 * @member {boolean} isStrict\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @instance\n                 */\n                RuntimeConfig.prototype.isStrict = false;\n\n                /**\n                 * RuntimeConfig maxParallel.\n                 * @member {number|Long} maxParallel\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @instance\n                 */\n                RuntimeConfig.prototype.maxParallel = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n                /**\n                 * Creates a new RuntimeConfig instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @static\n                 * @param {io.cucumber.messages.IRuntimeConfig=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.RuntimeConfig} RuntimeConfig instance\n                 */\n                RuntimeConfig.create = function create(properties) {\n                    return new RuntimeConfig(properties);\n                };\n\n                /**\n                 * Encodes the specified RuntimeConfig message. Does not implicitly {@link io.cucumber.messages.RuntimeConfig.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @static\n                 * @param {io.cucumber.messages.IRuntimeConfig} message RuntimeConfig message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RuntimeConfig.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.isFailFast != null && message.hasOwnProperty(\"isFailFast\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isFailFast);\n                    if (message.isDryRun != null && message.hasOwnProperty(\"isDryRun\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isDryRun);\n                    if (message.isStrict != null && message.hasOwnProperty(\"isStrict\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isStrict);\n                    if (message.maxParallel != null && message.hasOwnProperty(\"maxParallel\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.maxParallel);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified RuntimeConfig message, length delimited. Does not implicitly {@link io.cucumber.messages.RuntimeConfig.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @static\n                 * @param {io.cucumber.messages.IRuntimeConfig} message RuntimeConfig message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                RuntimeConfig.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a RuntimeConfig message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.RuntimeConfig} RuntimeConfig\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RuntimeConfig.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.RuntimeConfig();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.isFailFast = reader.bool();\n                            break;\n                        case 2:\n                            message.isDryRun = reader.bool();\n                            break;\n                        case 3:\n                            message.isStrict = reader.bool();\n                            break;\n                        case 4:\n                            message.maxParallel = reader.uint64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a RuntimeConfig message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.RuntimeConfig} RuntimeConfig\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                RuntimeConfig.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a RuntimeConfig message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                RuntimeConfig.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.isFailFast != null && message.hasOwnProperty(\"isFailFast\"))\n                        if (typeof message.isFailFast !== \"boolean\")\n                            return \"isFailFast: boolean expected\";\n                    if (message.isDryRun != null && message.hasOwnProperty(\"isDryRun\"))\n                        if (typeof message.isDryRun !== \"boolean\")\n                            return \"isDryRun: boolean expected\";\n                    if (message.isStrict != null && message.hasOwnProperty(\"isStrict\"))\n                        if (typeof message.isStrict !== \"boolean\")\n                            return \"isStrict: boolean expected\";\n                    if (message.maxParallel != null && message.hasOwnProperty(\"maxParallel\"))\n                        if (!$util.isInteger(message.maxParallel) && !(message.maxParallel && $util.isInteger(message.maxParallel.low) && $util.isInteger(message.maxParallel.high)))\n                            return \"maxParallel: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a RuntimeConfig message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.RuntimeConfig} RuntimeConfig\n                 */\n                RuntimeConfig.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.RuntimeConfig)\n                        return object;\n                    var message = new $root.io.cucumber.messages.RuntimeConfig();\n                    if (object.isFailFast != null)\n                        message.isFailFast = Boolean(object.isFailFast);\n                    if (object.isDryRun != null)\n                        message.isDryRun = Boolean(object.isDryRun);\n                    if (object.isStrict != null)\n                        message.isStrict = Boolean(object.isStrict);\n                    if (object.maxParallel != null)\n                        if ($util.Long)\n                            (message.maxParallel = $util.Long.fromValue(object.maxParallel)).unsigned = true;\n                        else if (typeof object.maxParallel === \"string\")\n                            message.maxParallel = parseInt(object.maxParallel, 10);\n                        else if (typeof object.maxParallel === \"number\")\n                            message.maxParallel = object.maxParallel;\n                        else if (typeof object.maxParallel === \"object\")\n                            message.maxParallel = new $util.LongBits(object.maxParallel.low >>> 0, object.maxParallel.high >>> 0).toNumber(true);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a RuntimeConfig message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @static\n                 * @param {io.cucumber.messages.RuntimeConfig} message RuntimeConfig\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                RuntimeConfig.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.isFailFast = false;\n                        object.isDryRun = false;\n                        object.isStrict = false;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, true);\n                            object.maxParallel = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.maxParallel = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.isFailFast != null && message.hasOwnProperty(\"isFailFast\"))\n                        object.isFailFast = message.isFailFast;\n                    if (message.isDryRun != null && message.hasOwnProperty(\"isDryRun\"))\n                        object.isDryRun = message.isDryRun;\n                    if (message.isStrict != null && message.hasOwnProperty(\"isStrict\"))\n                        object.isStrict = message.isStrict;\n                    if (message.maxParallel != null && message.hasOwnProperty(\"maxParallel\"))\n                        if (typeof message.maxParallel === \"number\")\n                            object.maxParallel = options.longs === String ? String(message.maxParallel) : message.maxParallel;\n                        else\n                            object.maxParallel = options.longs === String ? $util.Long.prototype.toString.call(message.maxParallel) : options.longs === Number ? new $util.LongBits(message.maxParallel.low >>> 0, message.maxParallel.high >>> 0).toNumber(true) : message.maxParallel;\n                    return object;\n                };\n\n                /**\n                 * Converts this RuntimeConfig to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.RuntimeConfig\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                RuntimeConfig.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return RuntimeConfig;\n            })();\n\n            messages.SupportCodeConfig = (function() {\n\n                /**\n                 * Properties of a SupportCodeConfig.\n                 * @memberof io.cucumber.messages\n                 * @interface ISupportCodeConfig\n                 * @property {Array.<io.cucumber.messages.IHook>|null} [beforeTestCaseHooks] SupportCodeConfig beforeTestCaseHooks\n                 * @property {Array.<io.cucumber.messages.IHook>|null} [afterTestCaseHooks] SupportCodeConfig afterTestCaseHooks\n                 * @property {Array.<io.cucumber.messages.IStepDefinition>|null} [stepDefinitions] SupportCodeConfig stepDefinitions\n                 * @property {Array.<io.cucumber.messages.IParameterType>|null} [parameterTypes] SupportCodeConfig parameterTypes\n                 */\n\n                /**\n                 * Constructs a new SupportCodeConfig.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a SupportCodeConfig.\n                 * @implements ISupportCodeConfig\n                 * @constructor\n                 * @param {io.cucumber.messages.ISupportCodeConfig=} [properties] Properties to set\n                 */\n                function SupportCodeConfig(properties) {\n                    this.beforeTestCaseHooks = [];\n                    this.afterTestCaseHooks = [];\n                    this.stepDefinitions = [];\n                    this.parameterTypes = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SupportCodeConfig beforeTestCaseHooks.\n                 * @member {Array.<io.cucumber.messages.IHook>} beforeTestCaseHooks\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @instance\n                 */\n                SupportCodeConfig.prototype.beforeTestCaseHooks = $util.emptyArray;\n\n                /**\n                 * SupportCodeConfig afterTestCaseHooks.\n                 * @member {Array.<io.cucumber.messages.IHook>} afterTestCaseHooks\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @instance\n                 */\n                SupportCodeConfig.prototype.afterTestCaseHooks = $util.emptyArray;\n\n                /**\n                 * SupportCodeConfig stepDefinitions.\n                 * @member {Array.<io.cucumber.messages.IStepDefinition>} stepDefinitions\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @instance\n                 */\n                SupportCodeConfig.prototype.stepDefinitions = $util.emptyArray;\n\n                /**\n                 * SupportCodeConfig parameterTypes.\n                 * @member {Array.<io.cucumber.messages.IParameterType>} parameterTypes\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @instance\n                 */\n                SupportCodeConfig.prototype.parameterTypes = $util.emptyArray;\n\n                /**\n                 * Creates a new SupportCodeConfig instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @static\n                 * @param {io.cucumber.messages.ISupportCodeConfig=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.SupportCodeConfig} SupportCodeConfig instance\n                 */\n                SupportCodeConfig.create = function create(properties) {\n                    return new SupportCodeConfig(properties);\n                };\n\n                /**\n                 * Encodes the specified SupportCodeConfig message. Does not implicitly {@link io.cucumber.messages.SupportCodeConfig.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @static\n                 * @param {io.cucumber.messages.ISupportCodeConfig} message SupportCodeConfig message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SupportCodeConfig.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.beforeTestCaseHooks != null && message.beforeTestCaseHooks.length)\n                        for (var i = 0; i < message.beforeTestCaseHooks.length; ++i)\n                            $root.io.cucumber.messages.Hook.encode(message.beforeTestCaseHooks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.afterTestCaseHooks != null && message.afterTestCaseHooks.length)\n                        for (var i = 0; i < message.afterTestCaseHooks.length; ++i)\n                            $root.io.cucumber.messages.Hook.encode(message.afterTestCaseHooks[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.stepDefinitions != null && message.stepDefinitions.length)\n                        for (var i = 0; i < message.stepDefinitions.length; ++i)\n                            $root.io.cucumber.messages.StepDefinition.encode(message.stepDefinitions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.parameterTypes != null && message.parameterTypes.length)\n                        for (var i = 0; i < message.parameterTypes.length; ++i)\n                            $root.io.cucumber.messages.ParameterType.encode(message.parameterTypes[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SupportCodeConfig message, length delimited. Does not implicitly {@link io.cucumber.messages.SupportCodeConfig.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @static\n                 * @param {io.cucumber.messages.ISupportCodeConfig} message SupportCodeConfig message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SupportCodeConfig.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SupportCodeConfig message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.SupportCodeConfig} SupportCodeConfig\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SupportCodeConfig.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.SupportCodeConfig();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.beforeTestCaseHooks && message.beforeTestCaseHooks.length))\n                                message.beforeTestCaseHooks = [];\n                            message.beforeTestCaseHooks.push($root.io.cucumber.messages.Hook.decode(reader, reader.uint32()));\n                            break;\n                        case 2:\n                            if (!(message.afterTestCaseHooks && message.afterTestCaseHooks.length))\n                                message.afterTestCaseHooks = [];\n                            message.afterTestCaseHooks.push($root.io.cucumber.messages.Hook.decode(reader, reader.uint32()));\n                            break;\n                        case 3:\n                            if (!(message.stepDefinitions && message.stepDefinitions.length))\n                                message.stepDefinitions = [];\n                            message.stepDefinitions.push($root.io.cucumber.messages.StepDefinition.decode(reader, reader.uint32()));\n                            break;\n                        case 4:\n                            if (!(message.parameterTypes && message.parameterTypes.length))\n                                message.parameterTypes = [];\n                            message.parameterTypes.push($root.io.cucumber.messages.ParameterType.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SupportCodeConfig message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.SupportCodeConfig} SupportCodeConfig\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SupportCodeConfig.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SupportCodeConfig message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SupportCodeConfig.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.beforeTestCaseHooks != null && message.hasOwnProperty(\"beforeTestCaseHooks\")) {\n                        if (!Array.isArray(message.beforeTestCaseHooks))\n                            return \"beforeTestCaseHooks: array expected\";\n                        for (var i = 0; i < message.beforeTestCaseHooks.length; ++i) {\n                            var error = $root.io.cucumber.messages.Hook.verify(message.beforeTestCaseHooks[i]);\n                            if (error)\n                                return \"beforeTestCaseHooks.\" + error;\n                        }\n                    }\n                    if (message.afterTestCaseHooks != null && message.hasOwnProperty(\"afterTestCaseHooks\")) {\n                        if (!Array.isArray(message.afterTestCaseHooks))\n                            return \"afterTestCaseHooks: array expected\";\n                        for (var i = 0; i < message.afterTestCaseHooks.length; ++i) {\n                            var error = $root.io.cucumber.messages.Hook.verify(message.afterTestCaseHooks[i]);\n                            if (error)\n                                return \"afterTestCaseHooks.\" + error;\n                        }\n                    }\n                    if (message.stepDefinitions != null && message.hasOwnProperty(\"stepDefinitions\")) {\n                        if (!Array.isArray(message.stepDefinitions))\n                            return \"stepDefinitions: array expected\";\n                        for (var i = 0; i < message.stepDefinitions.length; ++i) {\n                            var error = $root.io.cucumber.messages.StepDefinition.verify(message.stepDefinitions[i]);\n                            if (error)\n                                return \"stepDefinitions.\" + error;\n                        }\n                    }\n                    if (message.parameterTypes != null && message.hasOwnProperty(\"parameterTypes\")) {\n                        if (!Array.isArray(message.parameterTypes))\n                            return \"parameterTypes: array expected\";\n                        for (var i = 0; i < message.parameterTypes.length; ++i) {\n                            var error = $root.io.cucumber.messages.ParameterType.verify(message.parameterTypes[i]);\n                            if (error)\n                                return \"parameterTypes.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a SupportCodeConfig message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.SupportCodeConfig} SupportCodeConfig\n                 */\n                SupportCodeConfig.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.SupportCodeConfig)\n                        return object;\n                    var message = new $root.io.cucumber.messages.SupportCodeConfig();\n                    if (object.beforeTestCaseHooks) {\n                        if (!Array.isArray(object.beforeTestCaseHooks))\n                            throw TypeError(\".io.cucumber.messages.SupportCodeConfig.beforeTestCaseHooks: array expected\");\n                        message.beforeTestCaseHooks = [];\n                        for (var i = 0; i < object.beforeTestCaseHooks.length; ++i) {\n                            if (typeof object.beforeTestCaseHooks[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.SupportCodeConfig.beforeTestCaseHooks: object expected\");\n                            message.beforeTestCaseHooks[i] = $root.io.cucumber.messages.Hook.fromObject(object.beforeTestCaseHooks[i]);\n                        }\n                    }\n                    if (object.afterTestCaseHooks) {\n                        if (!Array.isArray(object.afterTestCaseHooks))\n                            throw TypeError(\".io.cucumber.messages.SupportCodeConfig.afterTestCaseHooks: array expected\");\n                        message.afterTestCaseHooks = [];\n                        for (var i = 0; i < object.afterTestCaseHooks.length; ++i) {\n                            if (typeof object.afterTestCaseHooks[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.SupportCodeConfig.afterTestCaseHooks: object expected\");\n                            message.afterTestCaseHooks[i] = $root.io.cucumber.messages.Hook.fromObject(object.afterTestCaseHooks[i]);\n                        }\n                    }\n                    if (object.stepDefinitions) {\n                        if (!Array.isArray(object.stepDefinitions))\n                            throw TypeError(\".io.cucumber.messages.SupportCodeConfig.stepDefinitions: array expected\");\n                        message.stepDefinitions = [];\n                        for (var i = 0; i < object.stepDefinitions.length; ++i) {\n                            if (typeof object.stepDefinitions[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.SupportCodeConfig.stepDefinitions: object expected\");\n                            message.stepDefinitions[i] = $root.io.cucumber.messages.StepDefinition.fromObject(object.stepDefinitions[i]);\n                        }\n                    }\n                    if (object.parameterTypes) {\n                        if (!Array.isArray(object.parameterTypes))\n                            throw TypeError(\".io.cucumber.messages.SupportCodeConfig.parameterTypes: array expected\");\n                        message.parameterTypes = [];\n                        for (var i = 0; i < object.parameterTypes.length; ++i) {\n                            if (typeof object.parameterTypes[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.SupportCodeConfig.parameterTypes: object expected\");\n                            message.parameterTypes[i] = $root.io.cucumber.messages.ParameterType.fromObject(object.parameterTypes[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SupportCodeConfig message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @static\n                 * @param {io.cucumber.messages.SupportCodeConfig} message SupportCodeConfig\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SupportCodeConfig.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.beforeTestCaseHooks = [];\n                        object.afterTestCaseHooks = [];\n                        object.stepDefinitions = [];\n                        object.parameterTypes = [];\n                    }\n                    if (message.beforeTestCaseHooks && message.beforeTestCaseHooks.length) {\n                        object.beforeTestCaseHooks = [];\n                        for (var j = 0; j < message.beforeTestCaseHooks.length; ++j)\n                            object.beforeTestCaseHooks[j] = $root.io.cucumber.messages.Hook.toObject(message.beforeTestCaseHooks[j], options);\n                    }\n                    if (message.afterTestCaseHooks && message.afterTestCaseHooks.length) {\n                        object.afterTestCaseHooks = [];\n                        for (var j = 0; j < message.afterTestCaseHooks.length; ++j)\n                            object.afterTestCaseHooks[j] = $root.io.cucumber.messages.Hook.toObject(message.afterTestCaseHooks[j], options);\n                    }\n                    if (message.stepDefinitions && message.stepDefinitions.length) {\n                        object.stepDefinitions = [];\n                        for (var j = 0; j < message.stepDefinitions.length; ++j)\n                            object.stepDefinitions[j] = $root.io.cucumber.messages.StepDefinition.toObject(message.stepDefinitions[j], options);\n                    }\n                    if (message.parameterTypes && message.parameterTypes.length) {\n                        object.parameterTypes = [];\n                        for (var j = 0; j < message.parameterTypes.length; ++j)\n                            object.parameterTypes[j] = $root.io.cucumber.messages.ParameterType.toObject(message.parameterTypes[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this SupportCodeConfig to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.SupportCodeConfig\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SupportCodeConfig.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SupportCodeConfig;\n            })();\n\n            messages.Hook = (function() {\n\n                /**\n                 * Properties of a Hook.\n                 * @memberof io.cucumber.messages\n                 * @interface IHook\n                 * @property {string|null} [id] Hook id\n                 * @property {string|null} [tagExpression] Hook tagExpression\n                 * @property {io.cucumber.messages.ISourceReference|null} [sourceReference] Hook sourceReference\n                 */\n\n                /**\n                 * Constructs a new Hook.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a Hook.\n                 * @implements IHook\n                 * @constructor\n                 * @param {io.cucumber.messages.IHook=} [properties] Properties to set\n                 */\n                function Hook(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Hook id.\n                 * @member {string} id\n                 * @memberof io.cucumber.messages.Hook\n                 * @instance\n                 */\n                Hook.prototype.id = \"\";\n\n                /**\n                 * Hook tagExpression.\n                 * @member {string} tagExpression\n                 * @memberof io.cucumber.messages.Hook\n                 * @instance\n                 */\n                Hook.prototype.tagExpression = \"\";\n\n                /**\n                 * Hook sourceReference.\n                 * @member {io.cucumber.messages.ISourceReference|null|undefined} sourceReference\n                 * @memberof io.cucumber.messages.Hook\n                 * @instance\n                 */\n                Hook.prototype.sourceReference = null;\n\n                /**\n                 * Creates a new Hook instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.Hook\n                 * @static\n                 * @param {io.cucumber.messages.IHook=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.Hook} Hook instance\n                 */\n                Hook.create = function create(properties) {\n                    return new Hook(properties);\n                };\n\n                /**\n                 * Encodes the specified Hook message. Does not implicitly {@link io.cucumber.messages.Hook.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.Hook\n                 * @static\n                 * @param {io.cucumber.messages.IHook} message Hook message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Hook.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                    if (message.tagExpression != null && message.hasOwnProperty(\"tagExpression\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.tagExpression);\n                    if (message.sourceReference != null && message.hasOwnProperty(\"sourceReference\"))\n                        $root.io.cucumber.messages.SourceReference.encode(message.sourceReference, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Hook message, length delimited. Does not implicitly {@link io.cucumber.messages.Hook.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.Hook\n                 * @static\n                 * @param {io.cucumber.messages.IHook} message Hook message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Hook.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Hook message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.Hook\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.Hook} Hook\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Hook.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.Hook();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = reader.string();\n                            break;\n                        case 2:\n                            message.tagExpression = reader.string();\n                            break;\n                        case 3:\n                            message.sourceReference = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Hook message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.Hook\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.Hook} Hook\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Hook.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Hook message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.Hook\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Hook.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        if (!$util.isString(message.id))\n                            return \"id: string expected\";\n                    if (message.tagExpression != null && message.hasOwnProperty(\"tagExpression\"))\n                        if (!$util.isString(message.tagExpression))\n                            return \"tagExpression: string expected\";\n                    if (message.sourceReference != null && message.hasOwnProperty(\"sourceReference\")) {\n                        var error = $root.io.cucumber.messages.SourceReference.verify(message.sourceReference);\n                        if (error)\n                            return \"sourceReference.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a Hook message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.Hook\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.Hook} Hook\n                 */\n                Hook.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.Hook)\n                        return object;\n                    var message = new $root.io.cucumber.messages.Hook();\n                    if (object.id != null)\n                        message.id = String(object.id);\n                    if (object.tagExpression != null)\n                        message.tagExpression = String(object.tagExpression);\n                    if (object.sourceReference != null) {\n                        if (typeof object.sourceReference !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.Hook.sourceReference: object expected\");\n                        message.sourceReference = $root.io.cucumber.messages.SourceReference.fromObject(object.sourceReference);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Hook message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.Hook\n                 * @static\n                 * @param {io.cucumber.messages.Hook} message Hook\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Hook.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.id = \"\";\n                        object.tagExpression = \"\";\n                        object.sourceReference = null;\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = message.id;\n                    if (message.tagExpression != null && message.hasOwnProperty(\"tagExpression\"))\n                        object.tagExpression = message.tagExpression;\n                    if (message.sourceReference != null && message.hasOwnProperty(\"sourceReference\"))\n                        object.sourceReference = $root.io.cucumber.messages.SourceReference.toObject(message.sourceReference, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this Hook to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.Hook\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Hook.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Hook;\n            })();\n\n            messages.StepDefinition = (function() {\n\n                /**\n                 * Properties of a StepDefinition.\n                 * @memberof io.cucumber.messages\n                 * @interface IStepDefinition\n                 * @property {string|null} [id] StepDefinition id\n                 * @property {io.cucumber.messages.IStepDefinitionPattern|null} [pattern] StepDefinition pattern\n                 * @property {io.cucumber.messages.ISourceReference|null} [sourceReference] StepDefinition sourceReference\n                 */\n\n                /**\n                 * Constructs a new StepDefinition.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a StepDefinition.\n                 * @implements IStepDefinition\n                 * @constructor\n                 * @param {io.cucumber.messages.IStepDefinition=} [properties] Properties to set\n                 */\n                function StepDefinition(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * StepDefinition id.\n                 * @member {string} id\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @instance\n                 */\n                StepDefinition.prototype.id = \"\";\n\n                /**\n                 * StepDefinition pattern.\n                 * @member {io.cucumber.messages.IStepDefinitionPattern|null|undefined} pattern\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @instance\n                 */\n                StepDefinition.prototype.pattern = null;\n\n                /**\n                 * StepDefinition sourceReference.\n                 * @member {io.cucumber.messages.ISourceReference|null|undefined} sourceReference\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @instance\n                 */\n                StepDefinition.prototype.sourceReference = null;\n\n                /**\n                 * Creates a new StepDefinition instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @static\n                 * @param {io.cucumber.messages.IStepDefinition=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.StepDefinition} StepDefinition instance\n                 */\n                StepDefinition.create = function create(properties) {\n                    return new StepDefinition(properties);\n                };\n\n                /**\n                 * Encodes the specified StepDefinition message. Does not implicitly {@link io.cucumber.messages.StepDefinition.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @static\n                 * @param {io.cucumber.messages.IStepDefinition} message StepDefinition message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StepDefinition.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                    if (message.pattern != null && message.hasOwnProperty(\"pattern\"))\n                        $root.io.cucumber.messages.StepDefinitionPattern.encode(message.pattern, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.sourceReference != null && message.hasOwnProperty(\"sourceReference\"))\n                        $root.io.cucumber.messages.SourceReference.encode(message.sourceReference, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified StepDefinition message, length delimited. Does not implicitly {@link io.cucumber.messages.StepDefinition.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @static\n                 * @param {io.cucumber.messages.IStepDefinition} message StepDefinition message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StepDefinition.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a StepDefinition message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.StepDefinition} StepDefinition\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StepDefinition.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.StepDefinition();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = reader.string();\n                            break;\n                        case 2:\n                            message.pattern = $root.io.cucumber.messages.StepDefinitionPattern.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.sourceReference = $root.io.cucumber.messages.SourceReference.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a StepDefinition message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.StepDefinition} StepDefinition\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StepDefinition.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a StepDefinition message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                StepDefinition.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        if (!$util.isString(message.id))\n                            return \"id: string expected\";\n                    if (message.pattern != null && message.hasOwnProperty(\"pattern\")) {\n                        var error = $root.io.cucumber.messages.StepDefinitionPattern.verify(message.pattern);\n                        if (error)\n                            return \"pattern.\" + error;\n                    }\n                    if (message.sourceReference != null && message.hasOwnProperty(\"sourceReference\")) {\n                        var error = $root.io.cucumber.messages.SourceReference.verify(message.sourceReference);\n                        if (error)\n                            return \"sourceReference.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a StepDefinition message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.StepDefinition} StepDefinition\n                 */\n                StepDefinition.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.StepDefinition)\n                        return object;\n                    var message = new $root.io.cucumber.messages.StepDefinition();\n                    if (object.id != null)\n                        message.id = String(object.id);\n                    if (object.pattern != null) {\n                        if (typeof object.pattern !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.StepDefinition.pattern: object expected\");\n                        message.pattern = $root.io.cucumber.messages.StepDefinitionPattern.fromObject(object.pattern);\n                    }\n                    if (object.sourceReference != null) {\n                        if (typeof object.sourceReference !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.StepDefinition.sourceReference: object expected\");\n                        message.sourceReference = $root.io.cucumber.messages.SourceReference.fromObject(object.sourceReference);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a StepDefinition message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @static\n                 * @param {io.cucumber.messages.StepDefinition} message StepDefinition\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                StepDefinition.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.id = \"\";\n                        object.pattern = null;\n                        object.sourceReference = null;\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = message.id;\n                    if (message.pattern != null && message.hasOwnProperty(\"pattern\"))\n                        object.pattern = $root.io.cucumber.messages.StepDefinitionPattern.toObject(message.pattern, options);\n                    if (message.sourceReference != null && message.hasOwnProperty(\"sourceReference\"))\n                        object.sourceReference = $root.io.cucumber.messages.SourceReference.toObject(message.sourceReference, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this StepDefinition to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.StepDefinition\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                StepDefinition.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return StepDefinition;\n            })();\n\n            messages.StepDefinitionPattern = (function() {\n\n                /**\n                 * Properties of a StepDefinitionPattern.\n                 * @memberof io.cucumber.messages\n                 * @interface IStepDefinitionPattern\n                 * @property {string|null} [source] StepDefinitionPattern source\n                 * @property {io.cucumber.messages.StepDefinitionPatternType|null} [type] StepDefinitionPattern type\n                 */\n\n                /**\n                 * Constructs a new StepDefinitionPattern.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a StepDefinitionPattern.\n                 * @implements IStepDefinitionPattern\n                 * @constructor\n                 * @param {io.cucumber.messages.IStepDefinitionPattern=} [properties] Properties to set\n                 */\n                function StepDefinitionPattern(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * StepDefinitionPattern source.\n                 * @member {string} source\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @instance\n                 */\n                StepDefinitionPattern.prototype.source = \"\";\n\n                /**\n                 * StepDefinitionPattern type.\n                 * @member {io.cucumber.messages.StepDefinitionPatternType} type\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @instance\n                 */\n                StepDefinitionPattern.prototype.type = 0;\n\n                /**\n                 * Creates a new StepDefinitionPattern instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @static\n                 * @param {io.cucumber.messages.IStepDefinitionPattern=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.StepDefinitionPattern} StepDefinitionPattern instance\n                 */\n                StepDefinitionPattern.create = function create(properties) {\n                    return new StepDefinitionPattern(properties);\n                };\n\n                /**\n                 * Encodes the specified StepDefinitionPattern message. Does not implicitly {@link io.cucumber.messages.StepDefinitionPattern.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @static\n                 * @param {io.cucumber.messages.IStepDefinitionPattern} message StepDefinitionPattern message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StepDefinitionPattern.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.source != null && message.hasOwnProperty(\"source\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.source);\n                    if (message.type != null && message.hasOwnProperty(\"type\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified StepDefinitionPattern message, length delimited. Does not implicitly {@link io.cucumber.messages.StepDefinitionPattern.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @static\n                 * @param {io.cucumber.messages.IStepDefinitionPattern} message StepDefinitionPattern message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StepDefinitionPattern.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a StepDefinitionPattern message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.StepDefinitionPattern} StepDefinitionPattern\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StepDefinitionPattern.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.StepDefinitionPattern();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.source = reader.string();\n                            break;\n                        case 2:\n                            message.type = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a StepDefinitionPattern message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.StepDefinitionPattern} StepDefinitionPattern\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StepDefinitionPattern.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a StepDefinitionPattern message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                StepDefinitionPattern.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.source != null && message.hasOwnProperty(\"source\"))\n                        if (!$util.isString(message.source))\n                            return \"source: string expected\";\n                    if (message.type != null && message.hasOwnProperty(\"type\"))\n                        switch (message.type) {\n                        default:\n                            return \"type: enum value expected\";\n                        case 0:\n                        case 1:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a StepDefinitionPattern message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.StepDefinitionPattern} StepDefinitionPattern\n                 */\n                StepDefinitionPattern.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.StepDefinitionPattern)\n                        return object;\n                    var message = new $root.io.cucumber.messages.StepDefinitionPattern();\n                    if (object.source != null)\n                        message.source = String(object.source);\n                    switch (object.type) {\n                    case \"CUCUMBER_EXPRESSION\":\n                    case 0:\n                        message.type = 0;\n                        break;\n                    case \"REGULAR_EXPRESSION\":\n                    case 1:\n                        message.type = 1;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a StepDefinitionPattern message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @static\n                 * @param {io.cucumber.messages.StepDefinitionPattern} message StepDefinitionPattern\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                StepDefinitionPattern.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.source = \"\";\n                        object.type = options.enums === String ? \"CUCUMBER_EXPRESSION\" : 0;\n                    }\n                    if (message.source != null && message.hasOwnProperty(\"source\"))\n                        object.source = message.source;\n                    if (message.type != null && message.hasOwnProperty(\"type\"))\n                        object.type = options.enums === String ? $root.io.cucumber.messages.StepDefinitionPatternType[message.type] : message.type;\n                    return object;\n                };\n\n                /**\n                 * Converts this StepDefinitionPattern to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.StepDefinitionPattern\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                StepDefinitionPattern.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return StepDefinitionPattern;\n            })();\n\n            /**\n             * StepDefinitionPatternType enum.\n             * @name io.cucumber.messages.StepDefinitionPatternType\n             * @enum {string}\n             * @property {number} CUCUMBER_EXPRESSION=0 CUCUMBER_EXPRESSION value\n             * @property {number} REGULAR_EXPRESSION=1 REGULAR_EXPRESSION value\n             */\n            messages.StepDefinitionPatternType = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"CUCUMBER_EXPRESSION\"] = 0;\n                values[valuesById[1] = \"REGULAR_EXPRESSION\"] = 1;\n                return values;\n            })();\n\n            messages.ParameterType = (function() {\n\n                /**\n                 * Properties of a ParameterType.\n                 * @memberof io.cucumber.messages\n                 * @interface IParameterType\n                 * @property {string|null} [name] ParameterType name\n                 * @property {Array.<string>|null} [regularExpressions] ParameterType regularExpressions\n                 * @property {boolean|null} [preferForRegularExpressionMatch] ParameterType preferForRegularExpressionMatch\n                 * @property {boolean|null} [useForSnippets] ParameterType useForSnippets\n                 */\n\n                /**\n                 * Constructs a new ParameterType.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a ParameterType.\n                 * @implements IParameterType\n                 * @constructor\n                 * @param {io.cucumber.messages.IParameterType=} [properties] Properties to set\n                 */\n                function ParameterType(properties) {\n                    this.regularExpressions = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ParameterType name.\n                 * @member {string} name\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @instance\n                 */\n                ParameterType.prototype.name = \"\";\n\n                /**\n                 * ParameterType regularExpressions.\n                 * @member {Array.<string>} regularExpressions\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @instance\n                 */\n                ParameterType.prototype.regularExpressions = $util.emptyArray;\n\n                /**\n                 * ParameterType preferForRegularExpressionMatch.\n                 * @member {boolean} preferForRegularExpressionMatch\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @instance\n                 */\n                ParameterType.prototype.preferForRegularExpressionMatch = false;\n\n                /**\n                 * ParameterType useForSnippets.\n                 * @member {boolean} useForSnippets\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @instance\n                 */\n                ParameterType.prototype.useForSnippets = false;\n\n                /**\n                 * Creates a new ParameterType instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @static\n                 * @param {io.cucumber.messages.IParameterType=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.ParameterType} ParameterType instance\n                 */\n                ParameterType.create = function create(properties) {\n                    return new ParameterType(properties);\n                };\n\n                /**\n                 * Encodes the specified ParameterType message. Does not implicitly {@link io.cucumber.messages.ParameterType.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @static\n                 * @param {io.cucumber.messages.IParameterType} message ParameterType message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ParameterType.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                    if (message.regularExpressions != null && message.regularExpressions.length)\n                        for (var i = 0; i < message.regularExpressions.length; ++i)\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.regularExpressions[i]);\n                    if (message.preferForRegularExpressionMatch != null && message.hasOwnProperty(\"preferForRegularExpressionMatch\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.preferForRegularExpressionMatch);\n                    if (message.useForSnippets != null && message.hasOwnProperty(\"useForSnippets\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.useForSnippets);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ParameterType message, length delimited. Does not implicitly {@link io.cucumber.messages.ParameterType.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @static\n                 * @param {io.cucumber.messages.IParameterType} message ParameterType message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ParameterType.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a ParameterType message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.ParameterType} ParameterType\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ParameterType.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.ParameterType();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.name = reader.string();\n                            break;\n                        case 2:\n                            if (!(message.regularExpressions && message.regularExpressions.length))\n                                message.regularExpressions = [];\n                            message.regularExpressions.push(reader.string());\n                            break;\n                        case 3:\n                            message.preferForRegularExpressionMatch = reader.bool();\n                            break;\n                        case 4:\n                            message.useForSnippets = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a ParameterType message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.ParameterType} ParameterType\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ParameterType.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a ParameterType message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ParameterType.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.regularExpressions != null && message.hasOwnProperty(\"regularExpressions\")) {\n                        if (!Array.isArray(message.regularExpressions))\n                            return \"regularExpressions: array expected\";\n                        for (var i = 0; i < message.regularExpressions.length; ++i)\n                            if (!$util.isString(message.regularExpressions[i]))\n                                return \"regularExpressions: string[] expected\";\n                    }\n                    if (message.preferForRegularExpressionMatch != null && message.hasOwnProperty(\"preferForRegularExpressionMatch\"))\n                        if (typeof message.preferForRegularExpressionMatch !== \"boolean\")\n                            return \"preferForRegularExpressionMatch: boolean expected\";\n                    if (message.useForSnippets != null && message.hasOwnProperty(\"useForSnippets\"))\n                        if (typeof message.useForSnippets !== \"boolean\")\n                            return \"useForSnippets: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a ParameterType message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.ParameterType} ParameterType\n                 */\n                ParameterType.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.ParameterType)\n                        return object;\n                    var message = new $root.io.cucumber.messages.ParameterType();\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.regularExpressions) {\n                        if (!Array.isArray(object.regularExpressions))\n                            throw TypeError(\".io.cucumber.messages.ParameterType.regularExpressions: array expected\");\n                        message.regularExpressions = [];\n                        for (var i = 0; i < object.regularExpressions.length; ++i)\n                            message.regularExpressions[i] = String(object.regularExpressions[i]);\n                    }\n                    if (object.preferForRegularExpressionMatch != null)\n                        message.preferForRegularExpressionMatch = Boolean(object.preferForRegularExpressionMatch);\n                    if (object.useForSnippets != null)\n                        message.useForSnippets = Boolean(object.useForSnippets);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a ParameterType message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @static\n                 * @param {io.cucumber.messages.ParameterType} message ParameterType\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ParameterType.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.regularExpressions = [];\n                    if (options.defaults) {\n                        object.name = \"\";\n                        object.preferForRegularExpressionMatch = false;\n                        object.useForSnippets = false;\n                    }\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    if (message.regularExpressions && message.regularExpressions.length) {\n                        object.regularExpressions = [];\n                        for (var j = 0; j < message.regularExpressions.length; ++j)\n                            object.regularExpressions[j] = message.regularExpressions[j];\n                    }\n                    if (message.preferForRegularExpressionMatch != null && message.hasOwnProperty(\"preferForRegularExpressionMatch\"))\n                        object.preferForRegularExpressionMatch = message.preferForRegularExpressionMatch;\n                    if (message.useForSnippets != null && message.hasOwnProperty(\"useForSnippets\"))\n                        object.useForSnippets = message.useForSnippets;\n                    return object;\n                };\n\n                /**\n                 * Converts this ParameterType to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.ParameterType\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ParameterType.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ParameterType;\n            })();\n\n            messages.CommandActionComplete = (function() {\n\n                /**\n                 * Properties of a CommandActionComplete.\n                 * @memberof io.cucumber.messages\n                 * @interface ICommandActionComplete\n                 * @property {string|null} [completedId] CommandActionComplete completedId\n                 * @property {io.cucumber.messages.ITestResult|null} [testResult] CommandActionComplete testResult\n                 * @property {string|null} [snippet] CommandActionComplete snippet\n                 */\n\n                /**\n                 * Constructs a new CommandActionComplete.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a CommandActionComplete.\n                 * @implements ICommandActionComplete\n                 * @constructor\n                 * @param {io.cucumber.messages.ICommandActionComplete=} [properties] Properties to set\n                 */\n                function CommandActionComplete(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommandActionComplete completedId.\n                 * @member {string} completedId\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @instance\n                 */\n                CommandActionComplete.prototype.completedId = \"\";\n\n                /**\n                 * CommandActionComplete testResult.\n                 * @member {io.cucumber.messages.ITestResult|null|undefined} testResult\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @instance\n                 */\n                CommandActionComplete.prototype.testResult = null;\n\n                /**\n                 * CommandActionComplete snippet.\n                 * @member {string} snippet\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @instance\n                 */\n                CommandActionComplete.prototype.snippet = \"\";\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * CommandActionComplete result.\n                 * @member {\"testResult\"|\"snippet\"|undefined} result\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @instance\n                 */\n                Object.defineProperty(CommandActionComplete.prototype, \"result\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"testResult\", \"snippet\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new CommandActionComplete instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @static\n                 * @param {io.cucumber.messages.ICommandActionComplete=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.CommandActionComplete} CommandActionComplete instance\n                 */\n                CommandActionComplete.create = function create(properties) {\n                    return new CommandActionComplete(properties);\n                };\n\n                /**\n                 * Encodes the specified CommandActionComplete message. Does not implicitly {@link io.cucumber.messages.CommandActionComplete.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @static\n                 * @param {io.cucumber.messages.ICommandActionComplete} message CommandActionComplete message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandActionComplete.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.completedId != null && message.hasOwnProperty(\"completedId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.completedId);\n                    if (message.testResult != null && message.hasOwnProperty(\"testResult\"))\n                        $root.io.cucumber.messages.TestResult.encode(message.testResult, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.snippet != null && message.hasOwnProperty(\"snippet\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.snippet);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommandActionComplete message, length delimited. Does not implicitly {@link io.cucumber.messages.CommandActionComplete.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @static\n                 * @param {io.cucumber.messages.ICommandActionComplete} message CommandActionComplete message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandActionComplete.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommandActionComplete message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.CommandActionComplete} CommandActionComplete\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandActionComplete.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.CommandActionComplete();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.completedId = reader.string();\n                            break;\n                        case 2:\n                            message.testResult = $root.io.cucumber.messages.TestResult.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.snippet = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommandActionComplete message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.CommandActionComplete} CommandActionComplete\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandActionComplete.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommandActionComplete message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommandActionComplete.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.completedId != null && message.hasOwnProperty(\"completedId\"))\n                        if (!$util.isString(message.completedId))\n                            return \"completedId: string expected\";\n                    if (message.testResult != null && message.hasOwnProperty(\"testResult\")) {\n                        properties.result = 1;\n                        {\n                            var error = $root.io.cucumber.messages.TestResult.verify(message.testResult);\n                            if (error)\n                                return \"testResult.\" + error;\n                        }\n                    }\n                    if (message.snippet != null && message.hasOwnProperty(\"snippet\")) {\n                        if (properties.result === 1)\n                            return \"result: multiple values\";\n                        properties.result = 1;\n                        if (!$util.isString(message.snippet))\n                            return \"snippet: string expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a CommandActionComplete message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.CommandActionComplete} CommandActionComplete\n                 */\n                CommandActionComplete.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.CommandActionComplete)\n                        return object;\n                    var message = new $root.io.cucumber.messages.CommandActionComplete();\n                    if (object.completedId != null)\n                        message.completedId = String(object.completedId);\n                    if (object.testResult != null) {\n                        if (typeof object.testResult !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.CommandActionComplete.testResult: object expected\");\n                        message.testResult = $root.io.cucumber.messages.TestResult.fromObject(object.testResult);\n                    }\n                    if (object.snippet != null)\n                        message.snippet = String(object.snippet);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommandActionComplete message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @static\n                 * @param {io.cucumber.messages.CommandActionComplete} message CommandActionComplete\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommandActionComplete.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.completedId = \"\";\n                    if (message.completedId != null && message.hasOwnProperty(\"completedId\"))\n                        object.completedId = message.completedId;\n                    if (message.testResult != null && message.hasOwnProperty(\"testResult\")) {\n                        object.testResult = $root.io.cucumber.messages.TestResult.toObject(message.testResult, options);\n                        if (options.oneofs)\n                            object.result = \"testResult\";\n                    }\n                    if (message.snippet != null && message.hasOwnProperty(\"snippet\")) {\n                        object.snippet = message.snippet;\n                        if (options.oneofs)\n                            object.result = \"snippet\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this CommandActionComplete to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.CommandActionComplete\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommandActionComplete.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommandActionComplete;\n            })();\n\n            messages.CommandRunBeforeTestRunHooks = (function() {\n\n                /**\n                 * Properties of a CommandRunBeforeTestRunHooks.\n                 * @memberof io.cucumber.messages\n                 * @interface ICommandRunBeforeTestRunHooks\n                 * @property {string|null} [actionId] CommandRunBeforeTestRunHooks actionId\n                 */\n\n                /**\n                 * Constructs a new CommandRunBeforeTestRunHooks.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a CommandRunBeforeTestRunHooks.\n                 * @implements ICommandRunBeforeTestRunHooks\n                 * @constructor\n                 * @param {io.cucumber.messages.ICommandRunBeforeTestRunHooks=} [properties] Properties to set\n                 */\n                function CommandRunBeforeTestRunHooks(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommandRunBeforeTestRunHooks actionId.\n                 * @member {string} actionId\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @instance\n                 */\n                CommandRunBeforeTestRunHooks.prototype.actionId = \"\";\n\n                /**\n                 * Creates a new CommandRunBeforeTestRunHooks instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunBeforeTestRunHooks=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.CommandRunBeforeTestRunHooks} CommandRunBeforeTestRunHooks instance\n                 */\n                CommandRunBeforeTestRunHooks.create = function create(properties) {\n                    return new CommandRunBeforeTestRunHooks(properties);\n                };\n\n                /**\n                 * Encodes the specified CommandRunBeforeTestRunHooks message. Does not implicitly {@link io.cucumber.messages.CommandRunBeforeTestRunHooks.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunBeforeTestRunHooks} message CommandRunBeforeTestRunHooks message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunBeforeTestRunHooks.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommandRunBeforeTestRunHooks message, length delimited. Does not implicitly {@link io.cucumber.messages.CommandRunBeforeTestRunHooks.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunBeforeTestRunHooks} message CommandRunBeforeTestRunHooks message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunBeforeTestRunHooks.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommandRunBeforeTestRunHooks message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.CommandRunBeforeTestRunHooks} CommandRunBeforeTestRunHooks\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunBeforeTestRunHooks.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.CommandRunBeforeTestRunHooks();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.actionId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommandRunBeforeTestRunHooks message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.CommandRunBeforeTestRunHooks} CommandRunBeforeTestRunHooks\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunBeforeTestRunHooks.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommandRunBeforeTestRunHooks message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommandRunBeforeTestRunHooks.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        if (!$util.isString(message.actionId))\n                            return \"actionId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CommandRunBeforeTestRunHooks message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.CommandRunBeforeTestRunHooks} CommandRunBeforeTestRunHooks\n                 */\n                CommandRunBeforeTestRunHooks.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.CommandRunBeforeTestRunHooks)\n                        return object;\n                    var message = new $root.io.cucumber.messages.CommandRunBeforeTestRunHooks();\n                    if (object.actionId != null)\n                        message.actionId = String(object.actionId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommandRunBeforeTestRunHooks message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @static\n                 * @param {io.cucumber.messages.CommandRunBeforeTestRunHooks} message CommandRunBeforeTestRunHooks\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommandRunBeforeTestRunHooks.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.actionId = \"\";\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        object.actionId = message.actionId;\n                    return object;\n                };\n\n                /**\n                 * Converts this CommandRunBeforeTestRunHooks to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestRunHooks\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommandRunBeforeTestRunHooks.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommandRunBeforeTestRunHooks;\n            })();\n\n            messages.CommandRunAfterTestRunHooks = (function() {\n\n                /**\n                 * Properties of a CommandRunAfterTestRunHooks.\n                 * @memberof io.cucumber.messages\n                 * @interface ICommandRunAfterTestRunHooks\n                 * @property {string|null} [actionId] CommandRunAfterTestRunHooks actionId\n                 */\n\n                /**\n                 * Constructs a new CommandRunAfterTestRunHooks.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a CommandRunAfterTestRunHooks.\n                 * @implements ICommandRunAfterTestRunHooks\n                 * @constructor\n                 * @param {io.cucumber.messages.ICommandRunAfterTestRunHooks=} [properties] Properties to set\n                 */\n                function CommandRunAfterTestRunHooks(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommandRunAfterTestRunHooks actionId.\n                 * @member {string} actionId\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @instance\n                 */\n                CommandRunAfterTestRunHooks.prototype.actionId = \"\";\n\n                /**\n                 * Creates a new CommandRunAfterTestRunHooks instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunAfterTestRunHooks=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.CommandRunAfterTestRunHooks} CommandRunAfterTestRunHooks instance\n                 */\n                CommandRunAfterTestRunHooks.create = function create(properties) {\n                    return new CommandRunAfterTestRunHooks(properties);\n                };\n\n                /**\n                 * Encodes the specified CommandRunAfterTestRunHooks message. Does not implicitly {@link io.cucumber.messages.CommandRunAfterTestRunHooks.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunAfterTestRunHooks} message CommandRunAfterTestRunHooks message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunAfterTestRunHooks.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommandRunAfterTestRunHooks message, length delimited. Does not implicitly {@link io.cucumber.messages.CommandRunAfterTestRunHooks.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunAfterTestRunHooks} message CommandRunAfterTestRunHooks message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunAfterTestRunHooks.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommandRunAfterTestRunHooks message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.CommandRunAfterTestRunHooks} CommandRunAfterTestRunHooks\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunAfterTestRunHooks.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.CommandRunAfterTestRunHooks();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.actionId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommandRunAfterTestRunHooks message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.CommandRunAfterTestRunHooks} CommandRunAfterTestRunHooks\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunAfterTestRunHooks.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommandRunAfterTestRunHooks message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommandRunAfterTestRunHooks.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        if (!$util.isString(message.actionId))\n                            return \"actionId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CommandRunAfterTestRunHooks message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.CommandRunAfterTestRunHooks} CommandRunAfterTestRunHooks\n                 */\n                CommandRunAfterTestRunHooks.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.CommandRunAfterTestRunHooks)\n                        return object;\n                    var message = new $root.io.cucumber.messages.CommandRunAfterTestRunHooks();\n                    if (object.actionId != null)\n                        message.actionId = String(object.actionId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommandRunAfterTestRunHooks message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @static\n                 * @param {io.cucumber.messages.CommandRunAfterTestRunHooks} message CommandRunAfterTestRunHooks\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommandRunAfterTestRunHooks.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.actionId = \"\";\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        object.actionId = message.actionId;\n                    return object;\n                };\n\n                /**\n                 * Converts this CommandRunAfterTestRunHooks to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.CommandRunAfterTestRunHooks\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommandRunAfterTestRunHooks.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommandRunAfterTestRunHooks;\n            })();\n\n            messages.CommandInitializeTestCase = (function() {\n\n                /**\n                 * Properties of a CommandInitializeTestCase.\n                 * @memberof io.cucumber.messages\n                 * @interface ICommandInitializeTestCase\n                 * @property {string|null} [actionId] CommandInitializeTestCase actionId\n                 * @property {io.cucumber.messages.IPickle|null} [pickle] CommandInitializeTestCase pickle\n                 */\n\n                /**\n                 * Constructs a new CommandInitializeTestCase.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a CommandInitializeTestCase.\n                 * @implements ICommandInitializeTestCase\n                 * @constructor\n                 * @param {io.cucumber.messages.ICommandInitializeTestCase=} [properties] Properties to set\n                 */\n                function CommandInitializeTestCase(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommandInitializeTestCase actionId.\n                 * @member {string} actionId\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @instance\n                 */\n                CommandInitializeTestCase.prototype.actionId = \"\";\n\n                /**\n                 * CommandInitializeTestCase pickle.\n                 * @member {io.cucumber.messages.IPickle|null|undefined} pickle\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @instance\n                 */\n                CommandInitializeTestCase.prototype.pickle = null;\n\n                /**\n                 * Creates a new CommandInitializeTestCase instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @static\n                 * @param {io.cucumber.messages.ICommandInitializeTestCase=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.CommandInitializeTestCase} CommandInitializeTestCase instance\n                 */\n                CommandInitializeTestCase.create = function create(properties) {\n                    return new CommandInitializeTestCase(properties);\n                };\n\n                /**\n                 * Encodes the specified CommandInitializeTestCase message. Does not implicitly {@link io.cucumber.messages.CommandInitializeTestCase.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @static\n                 * @param {io.cucumber.messages.ICommandInitializeTestCase} message CommandInitializeTestCase message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandInitializeTestCase.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionId);\n                    if (message.pickle != null && message.hasOwnProperty(\"pickle\"))\n                        $root.io.cucumber.messages.Pickle.encode(message.pickle, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommandInitializeTestCase message, length delimited. Does not implicitly {@link io.cucumber.messages.CommandInitializeTestCase.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @static\n                 * @param {io.cucumber.messages.ICommandInitializeTestCase} message CommandInitializeTestCase message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandInitializeTestCase.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommandInitializeTestCase message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.CommandInitializeTestCase} CommandInitializeTestCase\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandInitializeTestCase.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.CommandInitializeTestCase();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.actionId = reader.string();\n                            break;\n                        case 2:\n                            message.pickle = $root.io.cucumber.messages.Pickle.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommandInitializeTestCase message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.CommandInitializeTestCase} CommandInitializeTestCase\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandInitializeTestCase.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommandInitializeTestCase message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommandInitializeTestCase.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        if (!$util.isString(message.actionId))\n                            return \"actionId: string expected\";\n                    if (message.pickle != null && message.hasOwnProperty(\"pickle\")) {\n                        var error = $root.io.cucumber.messages.Pickle.verify(message.pickle);\n                        if (error)\n                            return \"pickle.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a CommandInitializeTestCase message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.CommandInitializeTestCase} CommandInitializeTestCase\n                 */\n                CommandInitializeTestCase.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.CommandInitializeTestCase)\n                        return object;\n                    var message = new $root.io.cucumber.messages.CommandInitializeTestCase();\n                    if (object.actionId != null)\n                        message.actionId = String(object.actionId);\n                    if (object.pickle != null) {\n                        if (typeof object.pickle !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.CommandInitializeTestCase.pickle: object expected\");\n                        message.pickle = $root.io.cucumber.messages.Pickle.fromObject(object.pickle);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommandInitializeTestCase message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @static\n                 * @param {io.cucumber.messages.CommandInitializeTestCase} message CommandInitializeTestCase\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommandInitializeTestCase.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.actionId = \"\";\n                        object.pickle = null;\n                    }\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        object.actionId = message.actionId;\n                    if (message.pickle != null && message.hasOwnProperty(\"pickle\"))\n                        object.pickle = $root.io.cucumber.messages.Pickle.toObject(message.pickle, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this CommandInitializeTestCase to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.CommandInitializeTestCase\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommandInitializeTestCase.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommandInitializeTestCase;\n            })();\n\n            messages.CommandRunBeforeTestCaseHook = (function() {\n\n                /**\n                 * Properties of a CommandRunBeforeTestCaseHook.\n                 * @memberof io.cucumber.messages\n                 * @interface ICommandRunBeforeTestCaseHook\n                 * @property {string|null} [actionId] CommandRunBeforeTestCaseHook actionId\n                 * @property {string|null} [hookId] CommandRunBeforeTestCaseHook hookId\n                 * @property {string|null} [testCaseId] CommandRunBeforeTestCaseHook testCaseId\n                 */\n\n                /**\n                 * Constructs a new CommandRunBeforeTestCaseHook.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a CommandRunBeforeTestCaseHook.\n                 * @implements ICommandRunBeforeTestCaseHook\n                 * @constructor\n                 * @param {io.cucumber.messages.ICommandRunBeforeTestCaseHook=} [properties] Properties to set\n                 */\n                function CommandRunBeforeTestCaseHook(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommandRunBeforeTestCaseHook actionId.\n                 * @member {string} actionId\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @instance\n                 */\n                CommandRunBeforeTestCaseHook.prototype.actionId = \"\";\n\n                /**\n                 * CommandRunBeforeTestCaseHook hookId.\n                 * @member {string} hookId\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @instance\n                 */\n                CommandRunBeforeTestCaseHook.prototype.hookId = \"\";\n\n                /**\n                 * CommandRunBeforeTestCaseHook testCaseId.\n                 * @member {string} testCaseId\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @instance\n                 */\n                CommandRunBeforeTestCaseHook.prototype.testCaseId = \"\";\n\n                /**\n                 * Creates a new CommandRunBeforeTestCaseHook instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunBeforeTestCaseHook=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.CommandRunBeforeTestCaseHook} CommandRunBeforeTestCaseHook instance\n                 */\n                CommandRunBeforeTestCaseHook.create = function create(properties) {\n                    return new CommandRunBeforeTestCaseHook(properties);\n                };\n\n                /**\n                 * Encodes the specified CommandRunBeforeTestCaseHook message. Does not implicitly {@link io.cucumber.messages.CommandRunBeforeTestCaseHook.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunBeforeTestCaseHook} message CommandRunBeforeTestCaseHook message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunBeforeTestCaseHook.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionId);\n                    if (message.hookId != null && message.hasOwnProperty(\"hookId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.hookId);\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.testCaseId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommandRunBeforeTestCaseHook message, length delimited. Does not implicitly {@link io.cucumber.messages.CommandRunBeforeTestCaseHook.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunBeforeTestCaseHook} message CommandRunBeforeTestCaseHook message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunBeforeTestCaseHook.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommandRunBeforeTestCaseHook message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.CommandRunBeforeTestCaseHook} CommandRunBeforeTestCaseHook\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunBeforeTestCaseHook.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.CommandRunBeforeTestCaseHook();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.actionId = reader.string();\n                            break;\n                        case 2:\n                            message.hookId = reader.string();\n                            break;\n                        case 3:\n                            message.testCaseId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommandRunBeforeTestCaseHook message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.CommandRunBeforeTestCaseHook} CommandRunBeforeTestCaseHook\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunBeforeTestCaseHook.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommandRunBeforeTestCaseHook message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommandRunBeforeTestCaseHook.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        if (!$util.isString(message.actionId))\n                            return \"actionId: string expected\";\n                    if (message.hookId != null && message.hasOwnProperty(\"hookId\"))\n                        if (!$util.isString(message.hookId))\n                            return \"hookId: string expected\";\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        if (!$util.isString(message.testCaseId))\n                            return \"testCaseId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CommandRunBeforeTestCaseHook message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.CommandRunBeforeTestCaseHook} CommandRunBeforeTestCaseHook\n                 */\n                CommandRunBeforeTestCaseHook.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.CommandRunBeforeTestCaseHook)\n                        return object;\n                    var message = new $root.io.cucumber.messages.CommandRunBeforeTestCaseHook();\n                    if (object.actionId != null)\n                        message.actionId = String(object.actionId);\n                    if (object.hookId != null)\n                        message.hookId = String(object.hookId);\n                    if (object.testCaseId != null)\n                        message.testCaseId = String(object.testCaseId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommandRunBeforeTestCaseHook message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @static\n                 * @param {io.cucumber.messages.CommandRunBeforeTestCaseHook} message CommandRunBeforeTestCaseHook\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommandRunBeforeTestCaseHook.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.actionId = \"\";\n                        object.hookId = \"\";\n                        object.testCaseId = \"\";\n                    }\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        object.actionId = message.actionId;\n                    if (message.hookId != null && message.hasOwnProperty(\"hookId\"))\n                        object.hookId = message.hookId;\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        object.testCaseId = message.testCaseId;\n                    return object;\n                };\n\n                /**\n                 * Converts this CommandRunBeforeTestCaseHook to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.CommandRunBeforeTestCaseHook\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommandRunBeforeTestCaseHook.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommandRunBeforeTestCaseHook;\n            })();\n\n            messages.CommandRunAfterTestCaseHook = (function() {\n\n                /**\n                 * Properties of a CommandRunAfterTestCaseHook.\n                 * @memberof io.cucumber.messages\n                 * @interface ICommandRunAfterTestCaseHook\n                 * @property {string|null} [actionId] CommandRunAfterTestCaseHook actionId\n                 * @property {string|null} [hookId] CommandRunAfterTestCaseHook hookId\n                 * @property {string|null} [testCaseId] CommandRunAfterTestCaseHook testCaseId\n                 */\n\n                /**\n                 * Constructs a new CommandRunAfterTestCaseHook.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a CommandRunAfterTestCaseHook.\n                 * @implements ICommandRunAfterTestCaseHook\n                 * @constructor\n                 * @param {io.cucumber.messages.ICommandRunAfterTestCaseHook=} [properties] Properties to set\n                 */\n                function CommandRunAfterTestCaseHook(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommandRunAfterTestCaseHook actionId.\n                 * @member {string} actionId\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @instance\n                 */\n                CommandRunAfterTestCaseHook.prototype.actionId = \"\";\n\n                /**\n                 * CommandRunAfterTestCaseHook hookId.\n                 * @member {string} hookId\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @instance\n                 */\n                CommandRunAfterTestCaseHook.prototype.hookId = \"\";\n\n                /**\n                 * CommandRunAfterTestCaseHook testCaseId.\n                 * @member {string} testCaseId\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @instance\n                 */\n                CommandRunAfterTestCaseHook.prototype.testCaseId = \"\";\n\n                /**\n                 * Creates a new CommandRunAfterTestCaseHook instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunAfterTestCaseHook=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.CommandRunAfterTestCaseHook} CommandRunAfterTestCaseHook instance\n                 */\n                CommandRunAfterTestCaseHook.create = function create(properties) {\n                    return new CommandRunAfterTestCaseHook(properties);\n                };\n\n                /**\n                 * Encodes the specified CommandRunAfterTestCaseHook message. Does not implicitly {@link io.cucumber.messages.CommandRunAfterTestCaseHook.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunAfterTestCaseHook} message CommandRunAfterTestCaseHook message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunAfterTestCaseHook.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionId);\n                    if (message.hookId != null && message.hasOwnProperty(\"hookId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.hookId);\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.testCaseId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommandRunAfterTestCaseHook message, length delimited. Does not implicitly {@link io.cucumber.messages.CommandRunAfterTestCaseHook.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunAfterTestCaseHook} message CommandRunAfterTestCaseHook message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunAfterTestCaseHook.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommandRunAfterTestCaseHook message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.CommandRunAfterTestCaseHook} CommandRunAfterTestCaseHook\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunAfterTestCaseHook.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.CommandRunAfterTestCaseHook();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.actionId = reader.string();\n                            break;\n                        case 2:\n                            message.hookId = reader.string();\n                            break;\n                        case 3:\n                            message.testCaseId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommandRunAfterTestCaseHook message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.CommandRunAfterTestCaseHook} CommandRunAfterTestCaseHook\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunAfterTestCaseHook.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommandRunAfterTestCaseHook message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommandRunAfterTestCaseHook.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        if (!$util.isString(message.actionId))\n                            return \"actionId: string expected\";\n                    if (message.hookId != null && message.hasOwnProperty(\"hookId\"))\n                        if (!$util.isString(message.hookId))\n                            return \"hookId: string expected\";\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        if (!$util.isString(message.testCaseId))\n                            return \"testCaseId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CommandRunAfterTestCaseHook message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.CommandRunAfterTestCaseHook} CommandRunAfterTestCaseHook\n                 */\n                CommandRunAfterTestCaseHook.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.CommandRunAfterTestCaseHook)\n                        return object;\n                    var message = new $root.io.cucumber.messages.CommandRunAfterTestCaseHook();\n                    if (object.actionId != null)\n                        message.actionId = String(object.actionId);\n                    if (object.hookId != null)\n                        message.hookId = String(object.hookId);\n                    if (object.testCaseId != null)\n                        message.testCaseId = String(object.testCaseId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommandRunAfterTestCaseHook message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @static\n                 * @param {io.cucumber.messages.CommandRunAfterTestCaseHook} message CommandRunAfterTestCaseHook\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommandRunAfterTestCaseHook.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.actionId = \"\";\n                        object.hookId = \"\";\n                        object.testCaseId = \"\";\n                    }\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        object.actionId = message.actionId;\n                    if (message.hookId != null && message.hasOwnProperty(\"hookId\"))\n                        object.hookId = message.hookId;\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        object.testCaseId = message.testCaseId;\n                    return object;\n                };\n\n                /**\n                 * Converts this CommandRunAfterTestCaseHook to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.CommandRunAfterTestCaseHook\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommandRunAfterTestCaseHook.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommandRunAfterTestCaseHook;\n            })();\n\n            messages.CommandRunTestStep = (function() {\n\n                /**\n                 * Properties of a CommandRunTestStep.\n                 * @memberof io.cucumber.messages\n                 * @interface ICommandRunTestStep\n                 * @property {string|null} [actionId] CommandRunTestStep actionId\n                 * @property {string|null} [stepDefinitionId] CommandRunTestStep stepDefinitionId\n                 * @property {Array.<io.cucumber.messages.IStepMatchArgument>|null} [stepMatchArguments] CommandRunTestStep stepMatchArguments\n                 * @property {io.cucumber.messages.IPickleStepArgument|null} [pickleStepArgument] CommandRunTestStep pickleStepArgument\n                 * @property {string|null} [testCaseId] CommandRunTestStep testCaseId\n                 */\n\n                /**\n                 * Constructs a new CommandRunTestStep.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a CommandRunTestStep.\n                 * @implements ICommandRunTestStep\n                 * @constructor\n                 * @param {io.cucumber.messages.ICommandRunTestStep=} [properties] Properties to set\n                 */\n                function CommandRunTestStep(properties) {\n                    this.stepMatchArguments = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommandRunTestStep actionId.\n                 * @member {string} actionId\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @instance\n                 */\n                CommandRunTestStep.prototype.actionId = \"\";\n\n                /**\n                 * CommandRunTestStep stepDefinitionId.\n                 * @member {string} stepDefinitionId\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @instance\n                 */\n                CommandRunTestStep.prototype.stepDefinitionId = \"\";\n\n                /**\n                 * CommandRunTestStep stepMatchArguments.\n                 * @member {Array.<io.cucumber.messages.IStepMatchArgument>} stepMatchArguments\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @instance\n                 */\n                CommandRunTestStep.prototype.stepMatchArguments = $util.emptyArray;\n\n                /**\n                 * CommandRunTestStep pickleStepArgument.\n                 * @member {io.cucumber.messages.IPickleStepArgument|null|undefined} pickleStepArgument\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @instance\n                 */\n                CommandRunTestStep.prototype.pickleStepArgument = null;\n\n                /**\n                 * CommandRunTestStep testCaseId.\n                 * @member {string} testCaseId\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @instance\n                 */\n                CommandRunTestStep.prototype.testCaseId = \"\";\n\n                /**\n                 * Creates a new CommandRunTestStep instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunTestStep=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.CommandRunTestStep} CommandRunTestStep instance\n                 */\n                CommandRunTestStep.create = function create(properties) {\n                    return new CommandRunTestStep(properties);\n                };\n\n                /**\n                 * Encodes the specified CommandRunTestStep message. Does not implicitly {@link io.cucumber.messages.CommandRunTestStep.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunTestStep} message CommandRunTestStep message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunTestStep.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionId);\n                    if (message.stepDefinitionId != null && message.hasOwnProperty(\"stepDefinitionId\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.stepDefinitionId);\n                    if (message.stepMatchArguments != null && message.stepMatchArguments.length)\n                        for (var i = 0; i < message.stepMatchArguments.length; ++i)\n                            $root.io.cucumber.messages.StepMatchArgument.encode(message.stepMatchArguments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.pickleStepArgument != null && message.hasOwnProperty(\"pickleStepArgument\"))\n                        $root.io.cucumber.messages.PickleStepArgument.encode(message.pickleStepArgument, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.testCaseId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommandRunTestStep message, length delimited. Does not implicitly {@link io.cucumber.messages.CommandRunTestStep.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @static\n                 * @param {io.cucumber.messages.ICommandRunTestStep} message CommandRunTestStep message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandRunTestStep.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommandRunTestStep message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.CommandRunTestStep} CommandRunTestStep\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunTestStep.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.CommandRunTestStep();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.actionId = reader.string();\n                            break;\n                        case 2:\n                            message.stepDefinitionId = reader.string();\n                            break;\n                        case 3:\n                            if (!(message.stepMatchArguments && message.stepMatchArguments.length))\n                                message.stepMatchArguments = [];\n                            message.stepMatchArguments.push($root.io.cucumber.messages.StepMatchArgument.decode(reader, reader.uint32()));\n                            break;\n                        case 4:\n                            message.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            message.testCaseId = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommandRunTestStep message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.CommandRunTestStep} CommandRunTestStep\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandRunTestStep.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommandRunTestStep message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommandRunTestStep.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        if (!$util.isString(message.actionId))\n                            return \"actionId: string expected\";\n                    if (message.stepDefinitionId != null && message.hasOwnProperty(\"stepDefinitionId\"))\n                        if (!$util.isString(message.stepDefinitionId))\n                            return \"stepDefinitionId: string expected\";\n                    if (message.stepMatchArguments != null && message.hasOwnProperty(\"stepMatchArguments\")) {\n                        if (!Array.isArray(message.stepMatchArguments))\n                            return \"stepMatchArguments: array expected\";\n                        for (var i = 0; i < message.stepMatchArguments.length; ++i) {\n                            var error = $root.io.cucumber.messages.StepMatchArgument.verify(message.stepMatchArguments[i]);\n                            if (error)\n                                return \"stepMatchArguments.\" + error;\n                        }\n                    }\n                    if (message.pickleStepArgument != null && message.hasOwnProperty(\"pickleStepArgument\")) {\n                        var error = $root.io.cucumber.messages.PickleStepArgument.verify(message.pickleStepArgument);\n                        if (error)\n                            return \"pickleStepArgument.\" + error;\n                    }\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        if (!$util.isString(message.testCaseId))\n                            return \"testCaseId: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a CommandRunTestStep message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.CommandRunTestStep} CommandRunTestStep\n                 */\n                CommandRunTestStep.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.CommandRunTestStep)\n                        return object;\n                    var message = new $root.io.cucumber.messages.CommandRunTestStep();\n                    if (object.actionId != null)\n                        message.actionId = String(object.actionId);\n                    if (object.stepDefinitionId != null)\n                        message.stepDefinitionId = String(object.stepDefinitionId);\n                    if (object.stepMatchArguments) {\n                        if (!Array.isArray(object.stepMatchArguments))\n                            throw TypeError(\".io.cucumber.messages.CommandRunTestStep.stepMatchArguments: array expected\");\n                        message.stepMatchArguments = [];\n                        for (var i = 0; i < object.stepMatchArguments.length; ++i) {\n                            if (typeof object.stepMatchArguments[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.CommandRunTestStep.stepMatchArguments: object expected\");\n                            message.stepMatchArguments[i] = $root.io.cucumber.messages.StepMatchArgument.fromObject(object.stepMatchArguments[i]);\n                        }\n                    }\n                    if (object.pickleStepArgument != null) {\n                        if (typeof object.pickleStepArgument !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.CommandRunTestStep.pickleStepArgument: object expected\");\n                        message.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.fromObject(object.pickleStepArgument);\n                    }\n                    if (object.testCaseId != null)\n                        message.testCaseId = String(object.testCaseId);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommandRunTestStep message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @static\n                 * @param {io.cucumber.messages.CommandRunTestStep} message CommandRunTestStep\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommandRunTestStep.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.stepMatchArguments = [];\n                    if (options.defaults) {\n                        object.actionId = \"\";\n                        object.stepDefinitionId = \"\";\n                        object.pickleStepArgument = null;\n                        object.testCaseId = \"\";\n                    }\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        object.actionId = message.actionId;\n                    if (message.stepDefinitionId != null && message.hasOwnProperty(\"stepDefinitionId\"))\n                        object.stepDefinitionId = message.stepDefinitionId;\n                    if (message.stepMatchArguments && message.stepMatchArguments.length) {\n                        object.stepMatchArguments = [];\n                        for (var j = 0; j < message.stepMatchArguments.length; ++j)\n                            object.stepMatchArguments[j] = $root.io.cucumber.messages.StepMatchArgument.toObject(message.stepMatchArguments[j], options);\n                    }\n                    if (message.pickleStepArgument != null && message.hasOwnProperty(\"pickleStepArgument\"))\n                        object.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.toObject(message.pickleStepArgument, options);\n                    if (message.testCaseId != null && message.hasOwnProperty(\"testCaseId\"))\n                        object.testCaseId = message.testCaseId;\n                    return object;\n                };\n\n                /**\n                 * Converts this CommandRunTestStep to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.CommandRunTestStep\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommandRunTestStep.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommandRunTestStep;\n            })();\n\n            messages.StepMatchArgument = (function() {\n\n                /**\n                 * Properties of a StepMatchArgument.\n                 * @memberof io.cucumber.messages\n                 * @interface IStepMatchArgument\n                 * @property {string|null} [parameterTypeName] StepMatchArgument parameterTypeName\n                 * @property {io.cucumber.messages.StepMatchArgument.IGroup|null} [group] Represents the outermost capture group of an argument. This message closely matches the\n                 * `Group` class in the `cucumber-expressions` library.\n                 */\n\n                /**\n                 * Constructs a new StepMatchArgument.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a single argument extracted from a step match and passed to a step definition.\n                 * This is used for the following purposes:\n                 * - Construct an argument to pass to a step definition (possibly through a parameter type transform)\n                 * - Highlight the matched parameter in rich formatters such as the HTML formatter\n                 * \n                 * This message closely matches the `Argument` class in the `cucumber-expressions` library.\n                 * @implements IStepMatchArgument\n                 * @constructor\n                 * @param {io.cucumber.messages.IStepMatchArgument=} [properties] Properties to set\n                 */\n                function StepMatchArgument(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * StepMatchArgument parameterTypeName.\n                 * @member {string} parameterTypeName\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @instance\n                 */\n                StepMatchArgument.prototype.parameterTypeName = \"\";\n\n                /**\n                 * Represents the outermost capture group of an argument. This message closely matches the\n                 * `Group` class in the `cucumber-expressions` library.\n                 * @member {io.cucumber.messages.StepMatchArgument.IGroup|null|undefined} group\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @instance\n                 */\n                StepMatchArgument.prototype.group = null;\n\n                /**\n                 * Creates a new StepMatchArgument instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @static\n                 * @param {io.cucumber.messages.IStepMatchArgument=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.StepMatchArgument} StepMatchArgument instance\n                 */\n                StepMatchArgument.create = function create(properties) {\n                    return new StepMatchArgument(properties);\n                };\n\n                /**\n                 * Encodes the specified StepMatchArgument message. Does not implicitly {@link io.cucumber.messages.StepMatchArgument.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @static\n                 * @param {io.cucumber.messages.IStepMatchArgument} message StepMatchArgument message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StepMatchArgument.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.parameterTypeName != null && message.hasOwnProperty(\"parameterTypeName\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.parameterTypeName);\n                    if (message.group != null && message.hasOwnProperty(\"group\"))\n                        $root.io.cucumber.messages.StepMatchArgument.Group.encode(message.group, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified StepMatchArgument message, length delimited. Does not implicitly {@link io.cucumber.messages.StepMatchArgument.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @static\n                 * @param {io.cucumber.messages.IStepMatchArgument} message StepMatchArgument message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StepMatchArgument.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a StepMatchArgument message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.StepMatchArgument} StepMatchArgument\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StepMatchArgument.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.StepMatchArgument();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.parameterTypeName = reader.string();\n                            break;\n                        case 2:\n                            message.group = $root.io.cucumber.messages.StepMatchArgument.Group.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a StepMatchArgument message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.StepMatchArgument} StepMatchArgument\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StepMatchArgument.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a StepMatchArgument message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                StepMatchArgument.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.parameterTypeName != null && message.hasOwnProperty(\"parameterTypeName\"))\n                        if (!$util.isString(message.parameterTypeName))\n                            return \"parameterTypeName: string expected\";\n                    if (message.group != null && message.hasOwnProperty(\"group\")) {\n                        var error = $root.io.cucumber.messages.StepMatchArgument.Group.verify(message.group);\n                        if (error)\n                            return \"group.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a StepMatchArgument message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.StepMatchArgument} StepMatchArgument\n                 */\n                StepMatchArgument.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.StepMatchArgument)\n                        return object;\n                    var message = new $root.io.cucumber.messages.StepMatchArgument();\n                    if (object.parameterTypeName != null)\n                        message.parameterTypeName = String(object.parameterTypeName);\n                    if (object.group != null) {\n                        if (typeof object.group !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.StepMatchArgument.group: object expected\");\n                        message.group = $root.io.cucumber.messages.StepMatchArgument.Group.fromObject(object.group);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a StepMatchArgument message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @static\n                 * @param {io.cucumber.messages.StepMatchArgument} message StepMatchArgument\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                StepMatchArgument.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.parameterTypeName = \"\";\n                        object.group = null;\n                    }\n                    if (message.parameterTypeName != null && message.hasOwnProperty(\"parameterTypeName\"))\n                        object.parameterTypeName = message.parameterTypeName;\n                    if (message.group != null && message.hasOwnProperty(\"group\"))\n                        object.group = $root.io.cucumber.messages.StepMatchArgument.Group.toObject(message.group, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this StepMatchArgument to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.StepMatchArgument\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                StepMatchArgument.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                StepMatchArgument.Group = (function() {\n\n                    /**\n                     * Properties of a Group.\n                     * @memberof io.cucumber.messages.StepMatchArgument\n                     * @interface IGroup\n                     * @property {number|null} [start] Group start\n                     * @property {string|null} [value] Group value\n                     * @property {Array.<io.cucumber.messages.StepMatchArgument.IGroup>|null} [children] Group children\n                     */\n\n                    /**\n                     * Constructs a new Group.\n                     * @memberof io.cucumber.messages.StepMatchArgument\n                     * @classdesc Represents a Group.\n                     * @implements IGroup\n                     * @constructor\n                     * @param {io.cucumber.messages.StepMatchArgument.IGroup=} [properties] Properties to set\n                     */\n                    function Group(properties) {\n                        this.children = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Group start.\n                     * @member {number} start\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @instance\n                     */\n                    Group.prototype.start = 0;\n\n                    /**\n                     * Group value.\n                     * @member {string} value\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @instance\n                     */\n                    Group.prototype.value = \"\";\n\n                    /**\n                     * Group children.\n                     * @member {Array.<io.cucumber.messages.StepMatchArgument.IGroup>} children\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @instance\n                     */\n                    Group.prototype.children = $util.emptyArray;\n\n                    /**\n                     * Creates a new Group instance using the specified properties.\n                     * @function create\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @static\n                     * @param {io.cucumber.messages.StepMatchArgument.IGroup=} [properties] Properties to set\n                     * @returns {io.cucumber.messages.StepMatchArgument.Group} Group instance\n                     */\n                    Group.create = function create(properties) {\n                        return new Group(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Group message. Does not implicitly {@link io.cucumber.messages.StepMatchArgument.Group.verify|verify} messages.\n                     * @function encode\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @static\n                     * @param {io.cucumber.messages.StepMatchArgument.IGroup} message Group message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Group.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.start != null && message.hasOwnProperty(\"start\"))\n                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.start);\n                        if (message.value != null && message.hasOwnProperty(\"value\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n                        if (message.children != null && message.children.length)\n                            for (var i = 0; i < message.children.length; ++i)\n                                $root.io.cucumber.messages.StepMatchArgument.Group.encode(message.children[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Group message, length delimited. Does not implicitly {@link io.cucumber.messages.StepMatchArgument.Group.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @static\n                     * @param {io.cucumber.messages.StepMatchArgument.IGroup} message Group message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Group.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Group message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {io.cucumber.messages.StepMatchArgument.Group} Group\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Group.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.StepMatchArgument.Group();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.start = reader.uint32();\n                                break;\n                            case 2:\n                                message.value = reader.string();\n                                break;\n                            case 3:\n                                if (!(message.children && message.children.length))\n                                    message.children = [];\n                                message.children.push($root.io.cucumber.messages.StepMatchArgument.Group.decode(reader, reader.uint32()));\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Group message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {io.cucumber.messages.StepMatchArgument.Group} Group\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Group.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Group message.\n                     * @function verify\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Group.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.start != null && message.hasOwnProperty(\"start\"))\n                            if (!$util.isInteger(message.start))\n                                return \"start: integer expected\";\n                        if (message.value != null && message.hasOwnProperty(\"value\"))\n                            if (!$util.isString(message.value))\n                                return \"value: string expected\";\n                        if (message.children != null && message.hasOwnProperty(\"children\")) {\n                            if (!Array.isArray(message.children))\n                                return \"children: array expected\";\n                            for (var i = 0; i < message.children.length; ++i) {\n                                var error = $root.io.cucumber.messages.StepMatchArgument.Group.verify(message.children[i]);\n                                if (error)\n                                    return \"children.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Group message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {io.cucumber.messages.StepMatchArgument.Group} Group\n                     */\n                    Group.fromObject = function fromObject(object) {\n                        if (object instanceof $root.io.cucumber.messages.StepMatchArgument.Group)\n                            return object;\n                        var message = new $root.io.cucumber.messages.StepMatchArgument.Group();\n                        if (object.start != null)\n                            message.start = object.start >>> 0;\n                        if (object.value != null)\n                            message.value = String(object.value);\n                        if (object.children) {\n                            if (!Array.isArray(object.children))\n                                throw TypeError(\".io.cucumber.messages.StepMatchArgument.Group.children: array expected\");\n                            message.children = [];\n                            for (var i = 0; i < object.children.length; ++i) {\n                                if (typeof object.children[i] !== \"object\")\n                                    throw TypeError(\".io.cucumber.messages.StepMatchArgument.Group.children: object expected\");\n                                message.children[i] = $root.io.cucumber.messages.StepMatchArgument.Group.fromObject(object.children[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Group message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @static\n                     * @param {io.cucumber.messages.StepMatchArgument.Group} message Group\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Group.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.children = [];\n                        if (options.defaults) {\n                            object.start = 0;\n                            object.value = \"\";\n                        }\n                        if (message.start != null && message.hasOwnProperty(\"start\"))\n                            object.start = message.start;\n                        if (message.value != null && message.hasOwnProperty(\"value\"))\n                            object.value = message.value;\n                        if (message.children && message.children.length) {\n                            object.children = [];\n                            for (var j = 0; j < message.children.length; ++j)\n                                object.children[j] = $root.io.cucumber.messages.StepMatchArgument.Group.toObject(message.children[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Group to JSON.\n                     * @function toJSON\n                     * @memberof io.cucumber.messages.StepMatchArgument.Group\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Group.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Group;\n                })();\n\n                return StepMatchArgument;\n            })();\n\n            messages.CommandGenerateSnippet = (function() {\n\n                /**\n                 * Properties of a CommandGenerateSnippet.\n                 * @memberof io.cucumber.messages\n                 * @interface ICommandGenerateSnippet\n                 * @property {string|null} [actionId] CommandGenerateSnippet actionId\n                 * @property {Array.<io.cucumber.messages.IGeneratedExpression>|null} [generatedExpressions] CommandGenerateSnippet generatedExpressions\n                 * @property {io.cucumber.messages.IPickleStepArgument|null} [pickleStepArgument] CommandGenerateSnippet pickleStepArgument\n                 */\n\n                /**\n                 * Constructs a new CommandGenerateSnippet.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a CommandGenerateSnippet.\n                 * @implements ICommandGenerateSnippet\n                 * @constructor\n                 * @param {io.cucumber.messages.ICommandGenerateSnippet=} [properties] Properties to set\n                 */\n                function CommandGenerateSnippet(properties) {\n                    this.generatedExpressions = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommandGenerateSnippet actionId.\n                 * @member {string} actionId\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @instance\n                 */\n                CommandGenerateSnippet.prototype.actionId = \"\";\n\n                /**\n                 * CommandGenerateSnippet generatedExpressions.\n                 * @member {Array.<io.cucumber.messages.IGeneratedExpression>} generatedExpressions\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @instance\n                 */\n                CommandGenerateSnippet.prototype.generatedExpressions = $util.emptyArray;\n\n                /**\n                 * CommandGenerateSnippet pickleStepArgument.\n                 * @member {io.cucumber.messages.IPickleStepArgument|null|undefined} pickleStepArgument\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @instance\n                 */\n                CommandGenerateSnippet.prototype.pickleStepArgument = null;\n\n                /**\n                 * Creates a new CommandGenerateSnippet instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @static\n                 * @param {io.cucumber.messages.ICommandGenerateSnippet=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.CommandGenerateSnippet} CommandGenerateSnippet instance\n                 */\n                CommandGenerateSnippet.create = function create(properties) {\n                    return new CommandGenerateSnippet(properties);\n                };\n\n                /**\n                 * Encodes the specified CommandGenerateSnippet message. Does not implicitly {@link io.cucumber.messages.CommandGenerateSnippet.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @static\n                 * @param {io.cucumber.messages.ICommandGenerateSnippet} message CommandGenerateSnippet message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandGenerateSnippet.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.actionId);\n                    if (message.generatedExpressions != null && message.generatedExpressions.length)\n                        for (var i = 0; i < message.generatedExpressions.length; ++i)\n                            $root.io.cucumber.messages.GeneratedExpression.encode(message.generatedExpressions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.pickleStepArgument != null && message.hasOwnProperty(\"pickleStepArgument\"))\n                        $root.io.cucumber.messages.PickleStepArgument.encode(message.pickleStepArgument, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommandGenerateSnippet message, length delimited. Does not implicitly {@link io.cucumber.messages.CommandGenerateSnippet.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @static\n                 * @param {io.cucumber.messages.ICommandGenerateSnippet} message CommandGenerateSnippet message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommandGenerateSnippet.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommandGenerateSnippet message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.CommandGenerateSnippet} CommandGenerateSnippet\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandGenerateSnippet.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.CommandGenerateSnippet();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.actionId = reader.string();\n                            break;\n                        case 2:\n                            if (!(message.generatedExpressions && message.generatedExpressions.length))\n                                message.generatedExpressions = [];\n                            message.generatedExpressions.push($root.io.cucumber.messages.GeneratedExpression.decode(reader, reader.uint32()));\n                            break;\n                        case 3:\n                            message.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommandGenerateSnippet message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.CommandGenerateSnippet} CommandGenerateSnippet\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommandGenerateSnippet.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommandGenerateSnippet message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommandGenerateSnippet.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        if (!$util.isString(message.actionId))\n                            return \"actionId: string expected\";\n                    if (message.generatedExpressions != null && message.hasOwnProperty(\"generatedExpressions\")) {\n                        if (!Array.isArray(message.generatedExpressions))\n                            return \"generatedExpressions: array expected\";\n                        for (var i = 0; i < message.generatedExpressions.length; ++i) {\n                            var error = $root.io.cucumber.messages.GeneratedExpression.verify(message.generatedExpressions[i]);\n                            if (error)\n                                return \"generatedExpressions.\" + error;\n                        }\n                    }\n                    if (message.pickleStepArgument != null && message.hasOwnProperty(\"pickleStepArgument\")) {\n                        var error = $root.io.cucumber.messages.PickleStepArgument.verify(message.pickleStepArgument);\n                        if (error)\n                            return \"pickleStepArgument.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a CommandGenerateSnippet message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.CommandGenerateSnippet} CommandGenerateSnippet\n                 */\n                CommandGenerateSnippet.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.CommandGenerateSnippet)\n                        return object;\n                    var message = new $root.io.cucumber.messages.CommandGenerateSnippet();\n                    if (object.actionId != null)\n                        message.actionId = String(object.actionId);\n                    if (object.generatedExpressions) {\n                        if (!Array.isArray(object.generatedExpressions))\n                            throw TypeError(\".io.cucumber.messages.CommandGenerateSnippet.generatedExpressions: array expected\");\n                        message.generatedExpressions = [];\n                        for (var i = 0; i < object.generatedExpressions.length; ++i) {\n                            if (typeof object.generatedExpressions[i] !== \"object\")\n                                throw TypeError(\".io.cucumber.messages.CommandGenerateSnippet.generatedExpressions: object expected\");\n                            message.generatedExpressions[i] = $root.io.cucumber.messages.GeneratedExpression.fromObject(object.generatedExpressions[i]);\n                        }\n                    }\n                    if (object.pickleStepArgument != null) {\n                        if (typeof object.pickleStepArgument !== \"object\")\n                            throw TypeError(\".io.cucumber.messages.CommandGenerateSnippet.pickleStepArgument: object expected\");\n                        message.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.fromObject(object.pickleStepArgument);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommandGenerateSnippet message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @static\n                 * @param {io.cucumber.messages.CommandGenerateSnippet} message CommandGenerateSnippet\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommandGenerateSnippet.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.generatedExpressions = [];\n                    if (options.defaults) {\n                        object.actionId = \"\";\n                        object.pickleStepArgument = null;\n                    }\n                    if (message.actionId != null && message.hasOwnProperty(\"actionId\"))\n                        object.actionId = message.actionId;\n                    if (message.generatedExpressions && message.generatedExpressions.length) {\n                        object.generatedExpressions = [];\n                        for (var j = 0; j < message.generatedExpressions.length; ++j)\n                            object.generatedExpressions[j] = $root.io.cucumber.messages.GeneratedExpression.toObject(message.generatedExpressions[j], options);\n                    }\n                    if (message.pickleStepArgument != null && message.hasOwnProperty(\"pickleStepArgument\"))\n                        object.pickleStepArgument = $root.io.cucumber.messages.PickleStepArgument.toObject(message.pickleStepArgument, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this CommandGenerateSnippet to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.CommandGenerateSnippet\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommandGenerateSnippet.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommandGenerateSnippet;\n            })();\n\n            messages.GeneratedExpression = (function() {\n\n                /**\n                 * Properties of a GeneratedExpression.\n                 * @memberof io.cucumber.messages\n                 * @interface IGeneratedExpression\n                 * @property {string|null} [text] GeneratedExpression text\n                 * @property {Array.<string>|null} [parameterTypeNames] GeneratedExpression parameterTypeNames\n                 */\n\n                /**\n                 * Constructs a new GeneratedExpression.\n                 * @memberof io.cucumber.messages\n                 * @classdesc Represents a GeneratedExpression.\n                 * @implements IGeneratedExpression\n                 * @constructor\n                 * @param {io.cucumber.messages.IGeneratedExpression=} [properties] Properties to set\n                 */\n                function GeneratedExpression(properties) {\n                    this.parameterTypeNames = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * GeneratedExpression text.\n                 * @member {string} text\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @instance\n                 */\n                GeneratedExpression.prototype.text = \"\";\n\n                /**\n                 * GeneratedExpression parameterTypeNames.\n                 * @member {Array.<string>} parameterTypeNames\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @instance\n                 */\n                GeneratedExpression.prototype.parameterTypeNames = $util.emptyArray;\n\n                /**\n                 * Creates a new GeneratedExpression instance using the specified properties.\n                 * @function create\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @static\n                 * @param {io.cucumber.messages.IGeneratedExpression=} [properties] Properties to set\n                 * @returns {io.cucumber.messages.GeneratedExpression} GeneratedExpression instance\n                 */\n                GeneratedExpression.create = function create(properties) {\n                    return new GeneratedExpression(properties);\n                };\n\n                /**\n                 * Encodes the specified GeneratedExpression message. Does not implicitly {@link io.cucumber.messages.GeneratedExpression.verify|verify} messages.\n                 * @function encode\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @static\n                 * @param {io.cucumber.messages.IGeneratedExpression} message GeneratedExpression message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GeneratedExpression.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);\n                    if (message.parameterTypeNames != null && message.parameterTypeNames.length)\n                        for (var i = 0; i < message.parameterTypeNames.length; ++i)\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.parameterTypeNames[i]);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified GeneratedExpression message, length delimited. Does not implicitly {@link io.cucumber.messages.GeneratedExpression.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @static\n                 * @param {io.cucumber.messages.IGeneratedExpression} message GeneratedExpression message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GeneratedExpression.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a GeneratedExpression message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {io.cucumber.messages.GeneratedExpression} GeneratedExpression\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GeneratedExpression.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.io.cucumber.messages.GeneratedExpression();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.text = reader.string();\n                            break;\n                        case 2:\n                            if (!(message.parameterTypeNames && message.parameterTypeNames.length))\n                                message.parameterTypeNames = [];\n                            message.parameterTypeNames.push(reader.string());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a GeneratedExpression message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {io.cucumber.messages.GeneratedExpression} GeneratedExpression\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GeneratedExpression.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a GeneratedExpression message.\n                 * @function verify\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                GeneratedExpression.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        if (!$util.isString(message.text))\n                            return \"text: string expected\";\n                    if (message.parameterTypeNames != null && message.hasOwnProperty(\"parameterTypeNames\")) {\n                        if (!Array.isArray(message.parameterTypeNames))\n                            return \"parameterTypeNames: array expected\";\n                        for (var i = 0; i < message.parameterTypeNames.length; ++i)\n                            if (!$util.isString(message.parameterTypeNames[i]))\n                                return \"parameterTypeNames: string[] expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a GeneratedExpression message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {io.cucumber.messages.GeneratedExpression} GeneratedExpression\n                 */\n                GeneratedExpression.fromObject = function fromObject(object) {\n                    if (object instanceof $root.io.cucumber.messages.GeneratedExpression)\n                        return object;\n                    var message = new $root.io.cucumber.messages.GeneratedExpression();\n                    if (object.text != null)\n                        message.text = String(object.text);\n                    if (object.parameterTypeNames) {\n                        if (!Array.isArray(object.parameterTypeNames))\n                            throw TypeError(\".io.cucumber.messages.GeneratedExpression.parameterTypeNames: array expected\");\n                        message.parameterTypeNames = [];\n                        for (var i = 0; i < object.parameterTypeNames.length; ++i)\n                            message.parameterTypeNames[i] = String(object.parameterTypeNames[i]);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a GeneratedExpression message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @static\n                 * @param {io.cucumber.messages.GeneratedExpression} message GeneratedExpression\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                GeneratedExpression.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.parameterTypeNames = [];\n                    if (options.defaults)\n                        object.text = \"\";\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        object.text = message.text;\n                    if (message.parameterTypeNames && message.parameterTypeNames.length) {\n                        object.parameterTypeNames = [];\n                        for (var j = 0; j < message.parameterTypeNames.length; ++j)\n                            object.parameterTypeNames[j] = message.parameterTypeNames[j];\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this GeneratedExpression to JSON.\n                 * @function toJSON\n                 * @memberof io.cucumber.messages.GeneratedExpression\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                GeneratedExpression.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return GeneratedExpression;\n            })();\n\n            return messages;\n        })();\n\n        return cucumber;\n    })();\n\n    return io;\n})();\n\nmodule.exports = $root;\n"],"mappings":"AACA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAG7C,IAAIC,OAAO,GAAGF,SAAS,CAACG,MAAM;EAAEC,OAAO,GAAGJ,SAAS,CAACK,MAAM;EAAEC,KAAK,GAAGN,SAAS,CAACO,IAAI;AAGlF,IAAIC,KAAK,GAAGR,SAAS,CAACS,KAAK,CAAC,SAAS,CAAC,KAAKT,SAAS,CAACS,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAE3ED,KAAK,CAACE,EAAE,GAAI,YAAW;EAOnB,IAAIA,EAAE,GAAG,CAAC,CAAC;EAEXA,EAAE,CAACC,QAAQ,GAAI,YAAW;IAOtB,IAAIA,QAAQ,GAAG,CAAC,CAAC;IAEjBA,QAAQ,CAACC,QAAQ,GAAI,YAAW;MAO5B,IAAIA,QAAQ,GAAG,CAAC,CAAC;MAEjBA,QAAQ,CAACC,SAAS,GAAI,YAAW;QAkB7B,SAASA,SAAS,CAACC,UAAU,EAAE;UAC3B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAJ,SAAS,CAACM,SAAS,CAACC,OAAO,GAAGd,KAAK,CAACe,IAAI,GAAGf,KAAK,CAACe,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,KAAK,CAAC,GAAG,CAAC;QAQ7ET,SAAS,CAACM,SAAS,CAACI,KAAK,GAAG,CAAC;QAU7BV,SAAS,CAACW,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC3C,OAAO,IAAID,SAAS,CAACC,UAAU,CAAC;QACpC,CAAC;QAWDD,SAAS,CAACY,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACN,OAAO,IAAI,IAAI,IAAIM,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,CAAC,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACN,OAAO,CAAC;UAClE,IAAIM,OAAO,CAACH,KAAK,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACE,KAAK,CAACL,OAAO,CAACH,KAAK,CAAC;UACjE,OAAOI,MAAM;QACjB,CAAC;QAWDd,SAAS,CAACmB,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDpB,SAAS,CAACqB,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC/C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,EAAE;UACvH,OAAOsB,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACN,OAAO,GAAGe,MAAM,CAACL,KAAK,EAAE;gBAChC;cACJ,KAAK,CAAC;gBACFJ,OAAO,CAACH,KAAK,GAAGY,MAAM,CAACJ,KAAK,EAAE;gBAC9B;cACJ;gBACII,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDb,SAAS,CAAC6B,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACzD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDhB,SAAS,CAAC8B,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACN,OAAO,IAAI,IAAI,IAAIM,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACN,OAAO,CAAC,IAAI,EAAEM,OAAO,CAACN,OAAO,IAAId,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACN,OAAO,CAACyB,GAAG,CAAC,IAAIvC,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACN,OAAO,CAAC0B,IAAI,CAAC,CAAC,EACxI,OAAO,gCAAgC;UAC/C,IAAIpB,OAAO,CAACH,KAAK,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxD,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACH,KAAK,CAAC,EAC/B,OAAO,yBAAyB;UACxC,OAAO,IAAI;QACf,CAAC;QAUDV,SAAS,CAACkC,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC/C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,EACtD,OAAOmC,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,EAAE;UACxD,IAAImC,MAAM,CAAC5B,OAAO,IAAI,IAAI,EACtB,IAAId,KAAK,CAACe,IAAI,EACV,CAACK,OAAO,CAACN,OAAO,GAAGd,KAAK,CAACe,IAAI,CAAC4B,SAAS,CAACD,MAAM,CAAC5B,OAAO,CAAC,EAAE8B,QAAQ,GAAG,KAAK,CAAC,KACzE,IAAI,OAAOF,MAAM,CAAC5B,OAAO,KAAK,QAAQ,EACvCM,OAAO,CAACN,OAAO,GAAG+B,QAAQ,CAACH,MAAM,CAAC5B,OAAO,EAAE,EAAE,CAAC,CAAC,KAC9C,IAAI,OAAO4B,MAAM,CAAC5B,OAAO,KAAK,QAAQ,EACvCM,OAAO,CAACN,OAAO,GAAG4B,MAAM,CAAC5B,OAAO,CAAC,KAChC,IAAI,OAAO4B,MAAM,CAAC5B,OAAO,KAAK,QAAQ,EACvCM,OAAO,CAACN,OAAO,GAAG,IAAId,KAAK,CAAC8C,QAAQ,CAACJ,MAAM,CAAC5B,OAAO,CAACyB,GAAG,KAAK,CAAC,EAAEG,MAAM,CAAC5B,OAAO,CAAC0B,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,EAAE;UAC5G,IAAIL,MAAM,CAACzB,KAAK,IAAI,IAAI,EACpBG,OAAO,CAACH,KAAK,GAAGyB,MAAM,CAACzB,KAAK,GAAG,CAAC;UACpC,OAAOG,OAAO;QAClB,CAAC;QAWDb,SAAS,CAACyC,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClB,IAAIlD,KAAK,CAACe,IAAI,EAAE;cACZ,IAAIoC,IAAI,GAAG,IAAInD,KAAK,CAACe,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;cACtC2B,MAAM,CAAC5B,OAAO,GAAGmC,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGL,OAAO,CAACG,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACJ,QAAQ,EAAE,GAAGI,IAAI;YACnH,CAAC,MACGT,MAAM,CAAC5B,OAAO,GAAGmC,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;YACvDX,MAAM,CAACzB,KAAK,GAAG,CAAC;UACpB;UACA,IAAIG,OAAO,CAACN,OAAO,IAAI,IAAI,IAAIM,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,OAAOF,OAAO,CAACN,OAAO,KAAK,QAAQ,EACnC4B,MAAM,CAAC5B,OAAO,GAAGmC,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACjC,OAAO,CAACN,OAAO,CAAC,GAAGM,OAAO,CAACN,OAAO,CAAC,KAEtF4B,MAAM,CAAC5B,OAAO,GAAGmC,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGrD,KAAK,CAACe,IAAI,CAACF,SAAS,CAACyC,QAAQ,CAACE,IAAI,CAACpC,OAAO,CAACN,OAAO,CAAC,GAAGmC,OAAO,CAACG,KAAK,KAAKG,MAAM,GAAG,IAAIvD,KAAK,CAAC8C,QAAQ,CAAC1B,OAAO,CAACN,OAAO,CAACyB,GAAG,KAAK,CAAC,EAAEnB,OAAO,CAACN,OAAO,CAAC0B,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,EAAE,GAAG3B,OAAO,CAACN,OAAO;UAC3O,IAAIM,OAAO,CAACH,KAAK,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAACzB,KAAK,GAAGG,OAAO,CAACH,KAAK;UAChC,OAAOyB,MAAM;QACjB,CAAC;QASDnC,SAAS,CAACM,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC3C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOpD,SAAS;MACpB,CAAC,EAAG;MAEJD,QAAQ,CAACsD,QAAQ,GAAI,YAAW;QAkB5B,SAASA,QAAQ,CAACpD,UAAU,EAAE;UAC1B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAiD,QAAQ,CAAC/C,SAAS,CAACC,OAAO,GAAGd,KAAK,CAACe,IAAI,GAAGf,KAAK,CAACe,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,KAAK,CAAC,GAAG,CAAC;QAQ5E4C,QAAQ,CAAC/C,SAAS,CAACI,KAAK,GAAG,CAAC;QAU5B2C,QAAQ,CAAC1C,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC1C,OAAO,IAAIoD,QAAQ,CAACpD,UAAU,CAAC;QACnC,CAAC;QAWDoD,QAAQ,CAACzC,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACN,OAAO,IAAI,IAAI,IAAIM,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,CAAC,CAAC,CAACC,KAAK,CAACJ,OAAO,CAACN,OAAO,CAAC;UAClE,IAAIM,OAAO,CAACH,KAAK,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACE,KAAK,CAACL,OAAO,CAACH,KAAK,CAAC;UACjE,OAAOI,MAAM;QACjB,CAAC;QAWDuC,QAAQ,CAAClC,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDiC,QAAQ,CAAChC,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC9C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsD,QAAQ,EAAE;UACtH,OAAO/B,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACN,OAAO,GAAGe,MAAM,CAACL,KAAK,EAAE;gBAChC;cACJ,KAAK,CAAC;gBACFJ,OAAO,CAACH,KAAK,GAAGY,MAAM,CAACJ,KAAK,EAAE;gBAC9B;cACJ;gBACII,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDwC,QAAQ,CAACxB,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACxD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDqC,QAAQ,CAACvB,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACN,OAAO,IAAI,IAAI,IAAIM,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACN,OAAO,CAAC,IAAI,EAAEM,OAAO,CAACN,OAAO,IAAId,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACN,OAAO,CAACyB,GAAG,CAAC,IAAIvC,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACN,OAAO,CAAC0B,IAAI,CAAC,CAAC,EACxI,OAAO,gCAAgC;UAC/C,IAAIpB,OAAO,CAACH,KAAK,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxD,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACH,KAAK,CAAC,EAC/B,OAAO,yBAAyB;UACxC,OAAO,IAAI;QACf,CAAC;QAUD2C,QAAQ,CAACnB,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC9C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsD,QAAQ,EACrD,OAAOlB,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsD,QAAQ,EAAE;UACvD,IAAIlB,MAAM,CAAC5B,OAAO,IAAI,IAAI,EACtB,IAAId,KAAK,CAACe,IAAI,EACV,CAACK,OAAO,CAACN,OAAO,GAAGd,KAAK,CAACe,IAAI,CAAC4B,SAAS,CAACD,MAAM,CAAC5B,OAAO,CAAC,EAAE8B,QAAQ,GAAG,KAAK,CAAC,KACzE,IAAI,OAAOF,MAAM,CAAC5B,OAAO,KAAK,QAAQ,EACvCM,OAAO,CAACN,OAAO,GAAG+B,QAAQ,CAACH,MAAM,CAAC5B,OAAO,EAAE,EAAE,CAAC,CAAC,KAC9C,IAAI,OAAO4B,MAAM,CAAC5B,OAAO,KAAK,QAAQ,EACvCM,OAAO,CAACN,OAAO,GAAG4B,MAAM,CAAC5B,OAAO,CAAC,KAChC,IAAI,OAAO4B,MAAM,CAAC5B,OAAO,KAAK,QAAQ,EACvCM,OAAO,CAACN,OAAO,GAAG,IAAId,KAAK,CAAC8C,QAAQ,CAACJ,MAAM,CAAC5B,OAAO,CAACyB,GAAG,KAAK,CAAC,EAAEG,MAAM,CAAC5B,OAAO,CAAC0B,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,EAAE;UAC5G,IAAIL,MAAM,CAACzB,KAAK,IAAI,IAAI,EACpBG,OAAO,CAACH,KAAK,GAAGyB,MAAM,CAACzB,KAAK,GAAG,CAAC;UACpC,OAAOG,OAAO;QAClB,CAAC;QAWDwC,QAAQ,CAACZ,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClB,IAAIlD,KAAK,CAACe,IAAI,EAAE;cACZ,IAAIoC,IAAI,GAAG,IAAInD,KAAK,CAACe,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;cACtC2B,MAAM,CAAC5B,OAAO,GAAGmC,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGL,OAAO,CAACG,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACJ,QAAQ,EAAE,GAAGI,IAAI;YACnH,CAAC,MACGT,MAAM,CAAC5B,OAAO,GAAGmC,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;YACvDX,MAAM,CAACzB,KAAK,GAAG,CAAC;UACpB;UACA,IAAIG,OAAO,CAACN,OAAO,IAAI,IAAI,IAAIM,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,OAAOF,OAAO,CAACN,OAAO,KAAK,QAAQ,EACnC4B,MAAM,CAAC5B,OAAO,GAAGmC,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACjC,OAAO,CAACN,OAAO,CAAC,GAAGM,OAAO,CAACN,OAAO,CAAC,KAEtF4B,MAAM,CAAC5B,OAAO,GAAGmC,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGrD,KAAK,CAACe,IAAI,CAACF,SAAS,CAACyC,QAAQ,CAACE,IAAI,CAACpC,OAAO,CAACN,OAAO,CAAC,GAAGmC,OAAO,CAACG,KAAK,KAAKG,MAAM,GAAG,IAAIvD,KAAK,CAAC8C,QAAQ,CAAC1B,OAAO,CAACN,OAAO,CAACyB,GAAG,KAAK,CAAC,EAAEnB,OAAO,CAACN,OAAO,CAAC0B,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,EAAE,GAAG3B,OAAO,CAACN,OAAO;UAC3O,IAAIM,OAAO,CAACH,KAAK,IAAI,IAAI,IAAIG,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAACzB,KAAK,GAAGG,OAAO,CAACH,KAAK;UAChC,OAAOyB,MAAM;QACjB,CAAC;QASDkB,QAAQ,CAAC/C,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC1C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOC,QAAQ;MACnB,CAAC,EAAG;MAEJtD,QAAQ,CAACuD,QAAQ,GAAI,YAAW;QA2C5B,SAASA,QAAQ,CAACrD,UAAU,EAAE;UAC1B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAkD,QAAQ,CAAChD,SAAS,CAACiD,MAAM,GAAG,IAAI;QAQhCD,QAAQ,CAAChD,SAAS,CAACkD,eAAe,GAAG,IAAI;QAQzCF,QAAQ,CAAChD,SAAS,CAACmD,MAAM,GAAG,IAAI;QAQhCH,QAAQ,CAAChD,SAAS,CAACoD,UAAU,GAAG,IAAI;QAQpCJ,QAAQ,CAAChD,SAAS,CAACqD,eAAe,GAAG,IAAI;QAQzCL,QAAQ,CAAChD,SAAS,CAACsD,eAAe,GAAG,IAAI;QAQzCN,QAAQ,CAAChD,SAAS,CAACuD,gBAAgB,GAAG,IAAI;QAQ1CP,QAAQ,CAAChD,SAAS,CAACwD,gBAAgB,GAAG,IAAI;QAQ1CR,QAAQ,CAAChD,SAAS,CAACyD,cAAc,GAAG,IAAI;QAQxCT,QAAQ,CAAChD,SAAS,CAAC0D,cAAc,GAAG,IAAI;QAQxCV,QAAQ,CAAChD,SAAS,CAAC2D,gBAAgB,GAAG,IAAI;QAQ1CX,QAAQ,CAAChD,SAAS,CAAC4D,cAAc,GAAG,IAAI;QAQxCZ,QAAQ,CAAChD,SAAS,CAAC6D,eAAe,GAAG,IAAI;QAQzCb,QAAQ,CAAChD,SAAS,CAAC8D,YAAY,GAAG,IAAI;QAQtCd,QAAQ,CAAChD,SAAS,CAAC+D,qBAAqB,GAAG,IAAI;QAQ/Cf,QAAQ,CAAChD,SAAS,CAACgE,4BAA4B,GAAG,IAAI;QAQtDhB,QAAQ,CAAChD,SAAS,CAACiE,yBAAyB,GAAG,IAAI;QAQnDjB,QAAQ,CAAChD,SAAS,CAACkE,4BAA4B,GAAG,IAAI;QAQtDlB,QAAQ,CAAChD,SAAS,CAACmE,kBAAkB,GAAG,IAAI;QAQ5CnB,QAAQ,CAAChD,SAAS,CAACoE,2BAA2B,GAAG,IAAI;QAQrDpB,QAAQ,CAAChD,SAAS,CAACqE,2BAA2B,GAAG,IAAI;QAQrDrB,QAAQ,CAAChD,SAAS,CAACsE,sBAAsB,GAAG,IAAI;QAQhDtB,QAAQ,CAAChD,SAAS,CAACuE,YAAY,GAAG,EAAE;QAQpCvB,QAAQ,CAAChD,SAAS,CAACwE,QAAQ,GAAG,IAAI;QAQlCxB,QAAQ,CAAChD,SAAS,CAACyE,cAAc,GAAG,IAAI;QAQxCzB,QAAQ,CAAChD,SAAS,CAAC0E,IAAI,GAAG,IAAI;QAG9B,IAAIC,YAAY;QAQhB9E,MAAM,CAAC+E,cAAc,CAAC5B,QAAQ,CAAChD,SAAS,EAAE,SAAS,EAAE;UACjD6E,GAAG,EAAE1F,KAAK,CAAC2F,WAAW,CAACH,YAAY,GAAG,CAAC,QAAQ,EAAE,iBAAiB,EAAE,QAAQ,EAAE,YAAY,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,cAAc,EAAE,uBAAuB,EAAE,8BAA8B,EAAE,2BAA2B,EAAE,8BAA8B,EAAE,oBAAoB,EAAE,6BAA6B,EAAE,6BAA6B,EAAE,wBAAwB,EAAE,cAAc,EAAE,UAAU,EAAE,gBAAgB,EAAE,MAAM,CAAC,CAAC;UACjjBI,GAAG,EAAE5F,KAAK,CAAC6F,WAAW,CAACL,YAAY;QACvC,CAAC,CAAC;QAUF3B,QAAQ,CAAC3C,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC1C,OAAO,IAAIqD,QAAQ,CAACrD,UAAU,CAAC;QACnC,CAAC;QAWDqD,QAAQ,CAAC1C,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC0C,MAAM,IAAI,IAAI,IAAI1C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwF,MAAM,CAAC3E,MAAM,CAACC,OAAO,CAAC0C,MAAM,EAAEzC,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACtH,IAAIP,OAAO,CAAC2C,eAAe,IAAI,IAAI,IAAI3C,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC7E,MAAM,CAACC,OAAO,CAAC2C,eAAe,EAAE1C,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxI,IAAIP,OAAO,CAAC4C,MAAM,IAAI,IAAI,IAAI5C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC9E,MAAM,CAACC,OAAO,CAAC4C,MAAM,EAAE3C,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACtH,IAAIP,OAAO,CAAC6C,UAAU,IAAI,IAAI,IAAI7C,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4F,UAAU,CAAC/E,MAAM,CAACC,OAAO,CAAC6C,UAAU,EAAE5C,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC9H,IAAIP,OAAO,CAAC8C,eAAe,IAAI,IAAI,IAAI9C,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAAChF,MAAM,CAACC,OAAO,CAAC8C,eAAe,EAAE7C,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxI,IAAIP,OAAO,CAAC+C,eAAe,IAAI,IAAI,IAAI/C,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8F,eAAe,CAACjF,MAAM,CAACC,OAAO,CAAC+C,eAAe,EAAE9C,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxI,IAAIP,OAAO,CAACgD,gBAAgB,IAAI,IAAI,IAAIhD,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAC9EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+F,gBAAgB,CAAClF,MAAM,CAACC,OAAO,CAACgD,gBAAgB,EAAE/C,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC1I,IAAIP,OAAO,CAACiD,gBAAgB,IAAI,IAAI,IAAIjD,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAC9EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgG,gBAAgB,CAACnF,MAAM,CAACC,OAAO,CAACiD,gBAAgB,EAAEhD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC1I,IAAIP,OAAO,CAACkD,cAAc,IAAI,IAAI,IAAIlD,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiG,cAAc,CAACpF,MAAM,CAACC,OAAO,CAACkD,cAAc,EAAEjD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACtI,IAAIP,OAAO,CAACmD,cAAc,IAAI,IAAI,IAAInD,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkG,cAAc,CAACrF,MAAM,CAACC,OAAO,CAACmD,cAAc,EAAElD,MAAM,CAACE,MAAM,CAAyB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACvI,IAAIP,OAAO,CAACoD,gBAAgB,IAAI,IAAI,IAAIpD,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAC9EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmG,gBAAgB,CAACtF,MAAM,CAACC,OAAO,CAACoD,gBAAgB,EAAEnD,MAAM,CAACE,MAAM,CAAyB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC3I,IAAIP,OAAO,CAACqD,cAAc,IAAI,IAAI,IAAIrD,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACoG,cAAc,CAACvF,MAAM,CAACC,OAAO,CAACqD,cAAc,EAAEpD,MAAM,CAACE,MAAM,CAAyB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACvI,IAAIP,OAAO,CAACsD,eAAe,IAAI,IAAI,IAAItD,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqG,eAAe,CAACxF,MAAM,CAACC,OAAO,CAACsD,eAAe,EAAErD,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC1I,IAAIP,OAAO,CAACuD,YAAY,IAAI,IAAI,IAAIvD,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsG,YAAY,CAACzF,MAAM,CAACC,OAAO,CAACuD,YAAY,EAAEtD,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpI,IAAIP,OAAO,CAACwD,qBAAqB,IAAI,IAAI,IAAIxD,OAAO,CAACE,cAAc,CAAC,uBAAuB,CAAC,EACxFpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuG,qBAAqB,CAAC1F,MAAM,CAACC,OAAO,CAACwD,qBAAqB,EAAEvD,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACtJ,IAAIP,OAAO,CAACyD,4BAA4B,IAAI,IAAI,IAAIzD,OAAO,CAACE,cAAc,CAAC,8BAA8B,CAAC,EACtGpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwG,4BAA4B,CAAC3F,MAAM,CAACC,OAAO,CAACyD,4BAA4B,EAAExD,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpK,IAAIP,OAAO,CAAC0D,yBAAyB,IAAI,IAAI,IAAI1D,OAAO,CAACE,cAAc,CAAC,2BAA2B,CAAC,EAChGpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyG,yBAAyB,CAAC5F,MAAM,CAACC,OAAO,CAAC0D,yBAAyB,EAAEzD,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC9J,IAAIP,OAAO,CAAC2D,4BAA4B,IAAI,IAAI,IAAI3D,OAAO,CAACE,cAAc,CAAC,8BAA8B,CAAC,EACtGpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0G,4BAA4B,CAAC7F,MAAM,CAACC,OAAO,CAAC2D,4BAA4B,EAAE1D,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpK,IAAIP,OAAO,CAAC4D,kBAAkB,IAAI,IAAI,IAAI5D,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClFpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2G,kBAAkB,CAAC9F,MAAM,CAACC,OAAO,CAAC4D,kBAAkB,EAAE3D,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAChJ,IAAIP,OAAO,CAAC6D,2BAA2B,IAAI,IAAI,IAAI7D,OAAO,CAACE,cAAc,CAAC,6BAA6B,CAAC,EACpGpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4G,2BAA2B,CAAC/F,MAAM,CAACC,OAAO,CAAC6D,2BAA2B,EAAE5D,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAClK,IAAIP,OAAO,CAAC8D,2BAA2B,IAAI,IAAI,IAAI9D,OAAO,CAACE,cAAc,CAAC,6BAA6B,CAAC,EACpGpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6G,2BAA2B,CAAChG,MAAM,CAACC,OAAO,CAAC8D,2BAA2B,EAAE7D,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAClK,IAAIP,OAAO,CAAC+D,sBAAsB,IAAI,IAAI,IAAI/D,OAAO,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAC1FpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8G,sBAAsB,CAACjG,MAAM,CAACC,OAAO,CAAC+D,sBAAsB,EAAE9D,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxJ,IAAIP,OAAO,CAACgE,YAAY,IAAI,IAAI,IAAIhE,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtED,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACgE,YAAY,CAAC;UAC3E,IAAIhE,OAAO,CAACiE,QAAQ,IAAI,IAAI,IAAIjE,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACnG,MAAM,CAACC,OAAO,CAACiE,QAAQ,EAAEhE,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC5H,IAAIP,OAAO,CAACkE,cAAc,IAAI,IAAI,IAAIlE,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAACpG,MAAM,CAACC,OAAO,CAACkE,cAAc,EAAEjE,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxI,IAAIP,OAAO,CAACmE,IAAI,IAAI,IAAI,IAAInE,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAACrG,MAAM,CAACC,OAAO,CAACmE,IAAI,EAAElE,MAAM,CAACE,MAAM,CAAyB,GAAG,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpH,OAAON,MAAM;QACjB,CAAC;QAWDwC,QAAQ,CAACnC,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDkC,QAAQ,CAACjC,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC9C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuD,QAAQ,EAAE;UACtH,OAAOhC,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC0C,MAAM,GAAG5D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwF,MAAM,CAAClE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClF;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC2C,eAAe,GAAG7D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACpE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACpG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC4C,MAAM,GAAG9D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAACrE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClF;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC6C,UAAU,GAAG/D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4F,UAAU,CAACtE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC1F;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC8C,eAAe,GAAGhE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACvE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACpG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC+C,eAAe,GAAGjE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8F,eAAe,CAACxE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACpG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACgD,gBAAgB,GAAGlE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+F,gBAAgB,CAACzE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACtG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACiD,gBAAgB,GAAGnE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgG,gBAAgB,CAAC1E,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACtG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACkD,cAAc,GAAGpE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiG,cAAc,CAAC3E,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClG;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACmD,cAAc,GAAGrE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkG,cAAc,CAAC5E,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClG;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACoD,gBAAgB,GAAGtE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmG,gBAAgB,CAAC7E,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACtG;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACqD,cAAc,GAAGvE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACoG,cAAc,CAAC9E,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClG;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACsD,eAAe,GAAGxE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqG,eAAe,CAAC/E,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACpG;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACuD,YAAY,GAAGzE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsG,YAAY,CAAChF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC9F;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACwD,qBAAqB,GAAG1E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuG,qBAAqB,CAACjF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAChH;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACyD,4BAA4B,GAAG3E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwG,4BAA4B,CAAClF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC9H;cACJ,KAAK,EAAE;gBACHH,OAAO,CAAC0D,yBAAyB,GAAG5E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyG,yBAAyB,CAACnF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACxH;cACJ,KAAK,EAAE;gBACHH,OAAO,CAAC2D,4BAA4B,GAAG7E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0G,4BAA4B,CAACpF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC9H;cACJ,KAAK,EAAE;gBACHH,OAAO,CAAC4D,kBAAkB,GAAG9E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2G,kBAAkB,CAACrF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC1G;cACJ,KAAK,EAAE;gBACHH,OAAO,CAAC6D,2BAA2B,GAAG/E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4G,2BAA2B,CAACtF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC5H;cACJ,KAAK,EAAE;gBACHH,OAAO,CAAC8D,2BAA2B,GAAGhF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6G,2BAA2B,CAACvF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC5H;cACJ,KAAK,EAAE;gBACHH,OAAO,CAAC+D,sBAAsB,GAAGjF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8G,sBAAsB,CAACxF,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClH;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACgE,YAAY,GAAGvD,MAAM,CAACwF,MAAM,EAAE;gBACtC;cACJ,KAAK,EAAE;gBACHjG,OAAO,CAACiE,QAAQ,GAAGnF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAAC1F,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACtF;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACkE,cAAc,GAAGpF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAAC3F,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClG;cACJ,KAAK,EAAE;gBACHH,OAAO,CAACmE,IAAI,GAAGrF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAAC5F,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC9E;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDyC,QAAQ,CAACzB,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACxD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDsC,QAAQ,CAACxB,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIZ,UAAU,GAAG,CAAC,CAAC;UACnB,IAAIY,OAAO,CAAC0C,MAAM,IAAI,IAAI,IAAI1C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC5Dd,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwF,MAAM,CAACzD,MAAM,CAACjB,OAAO,CAAC0C,MAAM,CAAC;cACpE,IAAI2D,KAAK,EACL,OAAO,SAAS,GAAGA,KAAK;YAChC;UACJ;UACA,IAAIrG,OAAO,CAAC2C,eAAe,IAAI,IAAI,IAAI3C,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9E,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC3D,MAAM,CAACjB,OAAO,CAAC2C,eAAe,CAAC;cACtF,IAAI0D,KAAK,EACL,OAAO,kBAAkB,GAAGA,KAAK;YACzC;UACJ;UACA,IAAIrG,OAAO,CAAC4C,MAAM,IAAI,IAAI,IAAI5C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC5D,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC5D,MAAM,CAACjB,OAAO,CAAC4C,MAAM,CAAC;cACpE,IAAIyD,KAAK,EACL,OAAO,SAAS,GAAGA,KAAK;YAChC;UACJ;UACA,IAAIrG,OAAO,CAAC6C,UAAU,IAAI,IAAI,IAAI7C,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;YACpE,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4F,UAAU,CAAC7D,MAAM,CAACjB,OAAO,CAAC6C,UAAU,CAAC;cAC5E,IAAIwD,KAAK,EACL,OAAO,aAAa,GAAGA,KAAK;YACpC;UACJ;UACA,IAAIrG,OAAO,CAAC8C,eAAe,IAAI,IAAI,IAAI9C,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9E,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAAC9D,MAAM,CAACjB,OAAO,CAAC8C,eAAe,CAAC;cACtF,IAAIuD,KAAK,EACL,OAAO,kBAAkB,GAAGA,KAAK;YACzC;UACJ;UACA,IAAIrG,OAAO,CAAC+C,eAAe,IAAI,IAAI,IAAI/C,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9E,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8F,eAAe,CAAC/D,MAAM,CAACjB,OAAO,CAAC+C,eAAe,CAAC;cACtF,IAAIsD,KAAK,EACL,OAAO,kBAAkB,GAAGA,KAAK;YACzC;UACJ;UACA,IAAIrG,OAAO,CAACgD,gBAAgB,IAAI,IAAI,IAAIhD,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAAE;YAChF,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+F,gBAAgB,CAAChE,MAAM,CAACjB,OAAO,CAACgD,gBAAgB,CAAC;cACxF,IAAIqD,KAAK,EACL,OAAO,mBAAmB,GAAGA,KAAK;YAC1C;UACJ;UACA,IAAIrG,OAAO,CAACiD,gBAAgB,IAAI,IAAI,IAAIjD,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAAE;YAChF,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgG,gBAAgB,CAACjE,MAAM,CAACjB,OAAO,CAACiD,gBAAgB,CAAC;cACxF,IAAIoD,KAAK,EACL,OAAO,mBAAmB,GAAGA,KAAK;YAC1C;UACJ;UACA,IAAIrG,OAAO,CAACkD,cAAc,IAAI,IAAI,IAAIlD,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5E,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiG,cAAc,CAAClE,MAAM,CAACjB,OAAO,CAACkD,cAAc,CAAC;cACpF,IAAImD,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;YACxC;UACJ;UACA,IAAIrG,OAAO,CAACmD,cAAc,IAAI,IAAI,IAAInD,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5E,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkG,cAAc,CAACnE,MAAM,CAACjB,OAAO,CAACmD,cAAc,CAAC;cACpF,IAAIkD,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;YACxC;UACJ;UACA,IAAIrG,OAAO,CAACoD,gBAAgB,IAAI,IAAI,IAAIpD,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAAE;YAChF,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmG,gBAAgB,CAACpE,MAAM,CAACjB,OAAO,CAACoD,gBAAgB,CAAC;cACxF,IAAIiD,KAAK,EACL,OAAO,mBAAmB,GAAGA,KAAK;YAC1C;UACJ;UACA,IAAIrG,OAAO,CAACqD,cAAc,IAAI,IAAI,IAAIrD,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5E,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACoG,cAAc,CAACrE,MAAM,CAACjB,OAAO,CAACqD,cAAc,CAAC;cACpF,IAAIgD,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;YACxC;UACJ;UACA,IAAIrG,OAAO,CAACsD,eAAe,IAAI,IAAI,IAAItD,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9E,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqG,eAAe,CAACtE,MAAM,CAACjB,OAAO,CAACsD,eAAe,CAAC;cACtF,IAAI+C,KAAK,EACL,OAAO,kBAAkB,GAAGA,KAAK;YACzC;UACJ;UACA,IAAIrG,OAAO,CAACuD,YAAY,IAAI,IAAI,IAAIvD,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;YACxE,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsG,YAAY,CAACvE,MAAM,CAACjB,OAAO,CAACuD,YAAY,CAAC;cAChF,IAAI8C,KAAK,EACL,OAAO,eAAe,GAAGA,KAAK;YACtC;UACJ;UACA,IAAIrG,OAAO,CAACwD,qBAAqB,IAAI,IAAI,IAAIxD,OAAO,CAACE,cAAc,CAAC,uBAAuB,CAAC,EAAE;YAC1F,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuG,qBAAqB,CAACxE,MAAM,CAACjB,OAAO,CAACwD,qBAAqB,CAAC;cAClG,IAAI6C,KAAK,EACL,OAAO,wBAAwB,GAAGA,KAAK;YAC/C;UACJ;UACA,IAAIrG,OAAO,CAACyD,4BAA4B,IAAI,IAAI,IAAIzD,OAAO,CAACE,cAAc,CAAC,8BAA8B,CAAC,EAAE;YACxG,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwG,4BAA4B,CAACzE,MAAM,CAACjB,OAAO,CAACyD,4BAA4B,CAAC;cAChH,IAAI4C,KAAK,EACL,OAAO,+BAA+B,GAAGA,KAAK;YACtD;UACJ;UACA,IAAIrG,OAAO,CAAC0D,yBAAyB,IAAI,IAAI,IAAI1D,OAAO,CAACE,cAAc,CAAC,2BAA2B,CAAC,EAAE;YAClG,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyG,yBAAyB,CAAC1E,MAAM,CAACjB,OAAO,CAAC0D,yBAAyB,CAAC;cAC1G,IAAI2C,KAAK,EACL,OAAO,4BAA4B,GAAGA,KAAK;YACnD;UACJ;UACA,IAAIrG,OAAO,CAAC2D,4BAA4B,IAAI,IAAI,IAAI3D,OAAO,CAACE,cAAc,CAAC,8BAA8B,CAAC,EAAE;YACxG,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0G,4BAA4B,CAAC3E,MAAM,CAACjB,OAAO,CAAC2D,4BAA4B,CAAC;cAChH,IAAI0C,KAAK,EACL,OAAO,+BAA+B,GAAGA,KAAK;YACtD;UACJ;UACA,IAAIrG,OAAO,CAAC4D,kBAAkB,IAAI,IAAI,IAAI5D,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAAE;YACpF,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2G,kBAAkB,CAAC5E,MAAM,CAACjB,OAAO,CAAC4D,kBAAkB,CAAC;cAC5F,IAAIyC,KAAK,EACL,OAAO,qBAAqB,GAAGA,KAAK;YAC5C;UACJ;UACA,IAAIrG,OAAO,CAAC6D,2BAA2B,IAAI,IAAI,IAAI7D,OAAO,CAACE,cAAc,CAAC,6BAA6B,CAAC,EAAE;YACtG,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4G,2BAA2B,CAAC7E,MAAM,CAACjB,OAAO,CAAC6D,2BAA2B,CAAC;cAC9G,IAAIwC,KAAK,EACL,OAAO,8BAA8B,GAAGA,KAAK;YACrD;UACJ;UACA,IAAIrG,OAAO,CAAC8D,2BAA2B,IAAI,IAAI,IAAI9D,OAAO,CAACE,cAAc,CAAC,6BAA6B,CAAC,EAAE;YACtG,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6G,2BAA2B,CAAC9E,MAAM,CAACjB,OAAO,CAAC8D,2BAA2B,CAAC;cAC9G,IAAIuC,KAAK,EACL,OAAO,8BAA8B,GAAGA,KAAK;YACrD;UACJ;UACA,IAAIrG,OAAO,CAAC+D,sBAAsB,IAAI,IAAI,IAAI/D,OAAO,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAAE;YAC5F,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8G,sBAAsB,CAAC/E,MAAM,CAACjB,OAAO,CAAC+D,sBAAsB,CAAC;cACpG,IAAIsC,KAAK,EACL,OAAO,yBAAyB,GAAGA,KAAK;YAChD;UACJ;UACA,IAAIrG,OAAO,CAACgE,YAAY,IAAI,IAAI,IAAIhE,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;YACxE,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB,IAAI,CAACpB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACgE,YAAY,CAAC,EACrC,OAAO,+BAA+B;UAC9C;UACA,IAAIhE,OAAO,CAACiE,QAAQ,IAAI,IAAI,IAAIjE,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;YAChE,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACjF,MAAM,CAACjB,OAAO,CAACiE,QAAQ,CAAC;cACxE,IAAIoC,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;YAClC;UACJ;UACA,IAAIrG,OAAO,CAACkE,cAAc,IAAI,IAAI,IAAIlE,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5E,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAAClF,MAAM,CAACjB,OAAO,CAACkE,cAAc,CAAC;cACpF,IAAImC,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;YACxC;UACJ;UACA,IAAIrG,OAAO,CAACmE,IAAI,IAAI,IAAI,IAAInE,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;YACxD,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAACnF,MAAM,CAACjB,OAAO,CAACmE,IAAI,CAAC;cAChE,IAAIkC,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;YAC9B;UACJ;UACA,OAAO,IAAI;QACf,CAAC;QAUD5D,QAAQ,CAACpB,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC9C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuD,QAAQ,EACrD,OAAOnB,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuD,QAAQ,EAAE;UACvD,IAAInB,MAAM,CAACoB,MAAM,IAAI,IAAI,EAAE;YACvB,IAAI,OAAOpB,MAAM,CAACoB,MAAM,KAAK,QAAQ,EACjC,MAAM6D,SAAS,CAAC,wDAAwD,CAAC;YAC7EvG,OAAO,CAAC0C,MAAM,GAAG5D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwF,MAAM,CAACrD,UAAU,CAACC,MAAM,CAACoB,MAAM,CAAC;UAChF;UACA,IAAIpB,MAAM,CAACqB,eAAe,IAAI,IAAI,EAAE;YAChC,IAAI,OAAOrB,MAAM,CAACqB,eAAe,KAAK,QAAQ,EAC1C,MAAM4D,SAAS,CAAC,iEAAiE,CAAC;YACtFvG,OAAO,CAAC2C,eAAe,GAAG7D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACvD,UAAU,CAACC,MAAM,CAACqB,eAAe,CAAC;UAC3G;UACA,IAAIrB,MAAM,CAACsB,MAAM,IAAI,IAAI,EAAE;YACvB,IAAI,OAAOtB,MAAM,CAACsB,MAAM,KAAK,QAAQ,EACjC,MAAM2D,SAAS,CAAC,wDAAwD,CAAC;YAC7EvG,OAAO,CAAC4C,MAAM,GAAG9D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAACxD,UAAU,CAACC,MAAM,CAACsB,MAAM,CAAC;UAChF;UACA,IAAItB,MAAM,CAACuB,UAAU,IAAI,IAAI,EAAE;YAC3B,IAAI,OAAOvB,MAAM,CAACuB,UAAU,KAAK,QAAQ,EACrC,MAAM0D,SAAS,CAAC,4DAA4D,CAAC;YACjFvG,OAAO,CAAC6C,UAAU,GAAG/D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4F,UAAU,CAACzD,UAAU,CAACC,MAAM,CAACuB,UAAU,CAAC;UAC5F;UACA,IAAIvB,MAAM,CAACwB,eAAe,IAAI,IAAI,EAAE;YAChC,IAAI,OAAOxB,MAAM,CAACwB,eAAe,KAAK,QAAQ,EAC1C,MAAMyD,SAAS,CAAC,iEAAiE,CAAC;YACtFvG,OAAO,CAAC8C,eAAe,GAAGhE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAAC1D,UAAU,CAACC,MAAM,CAACwB,eAAe,CAAC;UAC3G;UACA,IAAIxB,MAAM,CAACyB,eAAe,IAAI,IAAI,EAAE;YAChC,IAAI,OAAOzB,MAAM,CAACyB,eAAe,KAAK,QAAQ,EAC1C,MAAMwD,SAAS,CAAC,iEAAiE,CAAC;YACtFvG,OAAO,CAAC+C,eAAe,GAAGjE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8F,eAAe,CAAC3D,UAAU,CAACC,MAAM,CAACyB,eAAe,CAAC;UAC3G;UACA,IAAIzB,MAAM,CAAC0B,gBAAgB,IAAI,IAAI,EAAE;YACjC,IAAI,OAAO1B,MAAM,CAAC0B,gBAAgB,KAAK,QAAQ,EAC3C,MAAMuD,SAAS,CAAC,kEAAkE,CAAC;YACvFvG,OAAO,CAACgD,gBAAgB,GAAGlE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+F,gBAAgB,CAAC5D,UAAU,CAACC,MAAM,CAAC0B,gBAAgB,CAAC;UAC9G;UACA,IAAI1B,MAAM,CAAC2B,gBAAgB,IAAI,IAAI,EAAE;YACjC,IAAI,OAAO3B,MAAM,CAAC2B,gBAAgB,KAAK,QAAQ,EAC3C,MAAMsD,SAAS,CAAC,kEAAkE,CAAC;YACvFvG,OAAO,CAACiD,gBAAgB,GAAGnE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgG,gBAAgB,CAAC7D,UAAU,CAACC,MAAM,CAAC2B,gBAAgB,CAAC;UAC9G;UACA,IAAI3B,MAAM,CAAC4B,cAAc,IAAI,IAAI,EAAE;YAC/B,IAAI,OAAO5B,MAAM,CAAC4B,cAAc,KAAK,QAAQ,EACzC,MAAMqD,SAAS,CAAC,gEAAgE,CAAC;YACrFvG,OAAO,CAACkD,cAAc,GAAGpE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiG,cAAc,CAAC9D,UAAU,CAACC,MAAM,CAAC4B,cAAc,CAAC;UACxG;UACA,IAAI5B,MAAM,CAAC6B,cAAc,IAAI,IAAI,EAAE;YAC/B,IAAI,OAAO7B,MAAM,CAAC6B,cAAc,KAAK,QAAQ,EACzC,MAAMoD,SAAS,CAAC,gEAAgE,CAAC;YACrFvG,OAAO,CAACmD,cAAc,GAAGrE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkG,cAAc,CAAC/D,UAAU,CAACC,MAAM,CAAC6B,cAAc,CAAC;UACxG;UACA,IAAI7B,MAAM,CAAC8B,gBAAgB,IAAI,IAAI,EAAE;YACjC,IAAI,OAAO9B,MAAM,CAAC8B,gBAAgB,KAAK,QAAQ,EAC3C,MAAMmD,SAAS,CAAC,kEAAkE,CAAC;YACvFvG,OAAO,CAACoD,gBAAgB,GAAGtE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmG,gBAAgB,CAAChE,UAAU,CAACC,MAAM,CAAC8B,gBAAgB,CAAC;UAC9G;UACA,IAAI9B,MAAM,CAAC+B,cAAc,IAAI,IAAI,EAAE;YAC/B,IAAI,OAAO/B,MAAM,CAAC+B,cAAc,KAAK,QAAQ,EACzC,MAAMkD,SAAS,CAAC,gEAAgE,CAAC;YACrFvG,OAAO,CAACqD,cAAc,GAAGvE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACoG,cAAc,CAACjE,UAAU,CAACC,MAAM,CAAC+B,cAAc,CAAC;UACxG;UACA,IAAI/B,MAAM,CAACgC,eAAe,IAAI,IAAI,EAAE;YAChC,IAAI,OAAOhC,MAAM,CAACgC,eAAe,KAAK,QAAQ,EAC1C,MAAMiD,SAAS,CAAC,iEAAiE,CAAC;YACtFvG,OAAO,CAACsD,eAAe,GAAGxE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqG,eAAe,CAAClE,UAAU,CAACC,MAAM,CAACgC,eAAe,CAAC;UAC3G;UACA,IAAIhC,MAAM,CAACiC,YAAY,IAAI,IAAI,EAAE;YAC7B,IAAI,OAAOjC,MAAM,CAACiC,YAAY,KAAK,QAAQ,EACvC,MAAMgD,SAAS,CAAC,8DAA8D,CAAC;YACnFvG,OAAO,CAACuD,YAAY,GAAGzE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsG,YAAY,CAACnE,UAAU,CAACC,MAAM,CAACiC,YAAY,CAAC;UAClG;UACA,IAAIjC,MAAM,CAACkC,qBAAqB,IAAI,IAAI,EAAE;YACtC,IAAI,OAAOlC,MAAM,CAACkC,qBAAqB,KAAK,QAAQ,EAChD,MAAM+C,SAAS,CAAC,uEAAuE,CAAC;YAC5FvG,OAAO,CAACwD,qBAAqB,GAAG1E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuG,qBAAqB,CAACpE,UAAU,CAACC,MAAM,CAACkC,qBAAqB,CAAC;UAC7H;UACA,IAAIlC,MAAM,CAACmC,4BAA4B,IAAI,IAAI,EAAE;YAC7C,IAAI,OAAOnC,MAAM,CAACmC,4BAA4B,KAAK,QAAQ,EACvD,MAAM8C,SAAS,CAAC,8EAA8E,CAAC;YACnGvG,OAAO,CAACyD,4BAA4B,GAAG3E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwG,4BAA4B,CAACrE,UAAU,CAACC,MAAM,CAACmC,4BAA4B,CAAC;UAClJ;UACA,IAAInC,MAAM,CAACoC,yBAAyB,IAAI,IAAI,EAAE;YAC1C,IAAI,OAAOpC,MAAM,CAACoC,yBAAyB,KAAK,QAAQ,EACpD,MAAM6C,SAAS,CAAC,2EAA2E,CAAC;YAChGvG,OAAO,CAAC0D,yBAAyB,GAAG5E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyG,yBAAyB,CAACtE,UAAU,CAACC,MAAM,CAACoC,yBAAyB,CAAC;UACzI;UACA,IAAIpC,MAAM,CAACqC,4BAA4B,IAAI,IAAI,EAAE;YAC7C,IAAI,OAAOrC,MAAM,CAACqC,4BAA4B,KAAK,QAAQ,EACvD,MAAM4C,SAAS,CAAC,8EAA8E,CAAC;YACnGvG,OAAO,CAAC2D,4BAA4B,GAAG7E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0G,4BAA4B,CAACvE,UAAU,CAACC,MAAM,CAACqC,4BAA4B,CAAC;UAClJ;UACA,IAAIrC,MAAM,CAACsC,kBAAkB,IAAI,IAAI,EAAE;YACnC,IAAI,OAAOtC,MAAM,CAACsC,kBAAkB,KAAK,QAAQ,EAC7C,MAAM2C,SAAS,CAAC,oEAAoE,CAAC;YACzFvG,OAAO,CAAC4D,kBAAkB,GAAG9E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2G,kBAAkB,CAACxE,UAAU,CAACC,MAAM,CAACsC,kBAAkB,CAAC;UACpH;UACA,IAAItC,MAAM,CAACuC,2BAA2B,IAAI,IAAI,EAAE;YAC5C,IAAI,OAAOvC,MAAM,CAACuC,2BAA2B,KAAK,QAAQ,EACtD,MAAM0C,SAAS,CAAC,6EAA6E,CAAC;YAClGvG,OAAO,CAAC6D,2BAA2B,GAAG/E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4G,2BAA2B,CAACzE,UAAU,CAACC,MAAM,CAACuC,2BAA2B,CAAC;UAC/I;UACA,IAAIvC,MAAM,CAACwC,2BAA2B,IAAI,IAAI,EAAE;YAC5C,IAAI,OAAOxC,MAAM,CAACwC,2BAA2B,KAAK,QAAQ,EACtD,MAAMyC,SAAS,CAAC,6EAA6E,CAAC;YAClGvG,OAAO,CAAC8D,2BAA2B,GAAGhF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6G,2BAA2B,CAAC1E,UAAU,CAACC,MAAM,CAACwC,2BAA2B,CAAC;UAC/I;UACA,IAAIxC,MAAM,CAACyC,sBAAsB,IAAI,IAAI,EAAE;YACvC,IAAI,OAAOzC,MAAM,CAACyC,sBAAsB,KAAK,QAAQ,EACjD,MAAMwC,SAAS,CAAC,wEAAwE,CAAC;YAC7FvG,OAAO,CAAC+D,sBAAsB,GAAGjF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8G,sBAAsB,CAAC3E,UAAU,CAACC,MAAM,CAACyC,sBAAsB,CAAC;UAChI;UACA,IAAIzC,MAAM,CAAC0C,YAAY,IAAI,IAAI,EAC3BhE,OAAO,CAACgE,YAAY,GAAG/B,MAAM,CAACX,MAAM,CAAC0C,YAAY,CAAC;UACtD,IAAI1C,MAAM,CAAC2C,QAAQ,IAAI,IAAI,EAAE;YACzB,IAAI,OAAO3C,MAAM,CAAC2C,QAAQ,KAAK,QAAQ,EACnC,MAAMsC,SAAS,CAAC,0DAA0D,CAAC;YAC/EvG,OAAO,CAACiE,QAAQ,GAAGnF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAAC7E,UAAU,CAACC,MAAM,CAAC2C,QAAQ,CAAC;UACtF;UACA,IAAI3C,MAAM,CAAC4C,cAAc,IAAI,IAAI,EAAE;YAC/B,IAAI,OAAO5C,MAAM,CAAC4C,cAAc,KAAK,QAAQ,EACzC,MAAMqC,SAAS,CAAC,gEAAgE,CAAC;YACrFvG,OAAO,CAACkE,cAAc,GAAGpF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAAC9E,UAAU,CAACC,MAAM,CAAC4C,cAAc,CAAC;UACxG;UACA,IAAI5C,MAAM,CAAC6C,IAAI,IAAI,IAAI,EAAE;YACrB,IAAI,OAAO7C,MAAM,CAAC6C,IAAI,KAAK,QAAQ,EAC/B,MAAMoC,SAAS,CAAC,sDAAsD,CAAC;YAC3EvG,OAAO,CAACmE,IAAI,GAAGrF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAAC/E,UAAU,CAACC,MAAM,CAAC6C,IAAI,CAAC;UAC1E;UACA,OAAOnE,OAAO;QAClB,CAAC;QAWDyC,QAAQ,CAACb,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAItB,OAAO,CAAC0C,MAAM,IAAI,IAAI,IAAI1C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC5DoB,MAAM,CAACoB,MAAM,GAAG5D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwF,MAAM,CAAC9C,QAAQ,CAAC5B,OAAO,CAAC0C,MAAM,EAAEb,OAAO,CAAC;YACnF,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,QAAQ;UACjC;UACA,IAAIA,OAAO,CAAC2C,eAAe,IAAI,IAAI,IAAI3C,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9EoB,MAAM,CAACqB,eAAe,GAAG7D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAChD,QAAQ,CAAC5B,OAAO,CAAC2C,eAAe,EAAEd,OAAO,CAAC;YAC9G,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,iBAAiB;UAC1C;UACA,IAAIA,OAAO,CAAC4C,MAAM,IAAI,IAAI,IAAI5C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC5DoB,MAAM,CAACsB,MAAM,GAAG9D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAACjD,QAAQ,CAAC5B,OAAO,CAAC4C,MAAM,EAAEf,OAAO,CAAC;YACnF,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,QAAQ;UACjC;UACA,IAAIA,OAAO,CAAC6C,UAAU,IAAI,IAAI,IAAI7C,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;YACpEoB,MAAM,CAACuB,UAAU,GAAG/D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4F,UAAU,CAAClD,QAAQ,CAAC5B,OAAO,CAAC6C,UAAU,EAAEhB,OAAO,CAAC;YAC/F,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,YAAY;UACrC;UACA,IAAIA,OAAO,CAAC8C,eAAe,IAAI,IAAI,IAAI9C,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9EoB,MAAM,CAACwB,eAAe,GAAGhE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACnD,QAAQ,CAAC5B,OAAO,CAAC8C,eAAe,EAAEjB,OAAO,CAAC;YAC9G,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,iBAAiB;UAC1C;UACA,IAAIA,OAAO,CAAC+C,eAAe,IAAI,IAAI,IAAI/C,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9EoB,MAAM,CAACyB,eAAe,GAAGjE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8F,eAAe,CAACpD,QAAQ,CAAC5B,OAAO,CAAC+C,eAAe,EAAElB,OAAO,CAAC;YAC9G,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,iBAAiB;UAC1C;UACA,IAAIA,OAAO,CAACgD,gBAAgB,IAAI,IAAI,IAAIhD,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAAE;YAChFoB,MAAM,CAAC0B,gBAAgB,GAAGlE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+F,gBAAgB,CAACrD,QAAQ,CAAC5B,OAAO,CAACgD,gBAAgB,EAAEnB,OAAO,CAAC;YACjH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,kBAAkB;UAC3C;UACA,IAAIA,OAAO,CAACiD,gBAAgB,IAAI,IAAI,IAAIjD,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAAE;YAChFoB,MAAM,CAAC2B,gBAAgB,GAAGnE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgG,gBAAgB,CAACtD,QAAQ,CAAC5B,OAAO,CAACiD,gBAAgB,EAAEpB,OAAO,CAAC;YACjH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,kBAAkB;UAC3C;UACA,IAAIA,OAAO,CAACkD,cAAc,IAAI,IAAI,IAAIlD,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5EoB,MAAM,CAAC4B,cAAc,GAAGpE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiG,cAAc,CAACvD,QAAQ,CAAC5B,OAAO,CAACkD,cAAc,EAAErB,OAAO,CAAC;YAC3G,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,gBAAgB;UACzC;UACA,IAAIA,OAAO,CAACmD,cAAc,IAAI,IAAI,IAAInD,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5EoB,MAAM,CAAC6B,cAAc,GAAGrE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkG,cAAc,CAACxD,QAAQ,CAAC5B,OAAO,CAACmD,cAAc,EAAEtB,OAAO,CAAC;YAC3G,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,gBAAgB;UACzC;UACA,IAAIA,OAAO,CAACoD,gBAAgB,IAAI,IAAI,IAAIpD,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAAE;YAChFoB,MAAM,CAAC8B,gBAAgB,GAAGtE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmG,gBAAgB,CAACzD,QAAQ,CAAC5B,OAAO,CAACoD,gBAAgB,EAAEvB,OAAO,CAAC;YACjH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,kBAAkB;UAC3C;UACA,IAAIA,OAAO,CAACqD,cAAc,IAAI,IAAI,IAAIrD,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5EoB,MAAM,CAAC+B,cAAc,GAAGvE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACoG,cAAc,CAAC1D,QAAQ,CAAC5B,OAAO,CAACqD,cAAc,EAAExB,OAAO,CAAC;YAC3G,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,gBAAgB;UACzC;UACA,IAAIA,OAAO,CAACsD,eAAe,IAAI,IAAI,IAAItD,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9EoB,MAAM,CAACgC,eAAe,GAAGxE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqG,eAAe,CAAC3D,QAAQ,CAAC5B,OAAO,CAACsD,eAAe,EAAEzB,OAAO,CAAC;YAC9G,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,iBAAiB;UAC1C;UACA,IAAIA,OAAO,CAACuD,YAAY,IAAI,IAAI,IAAIvD,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;YACxEoB,MAAM,CAACiC,YAAY,GAAGzE,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsG,YAAY,CAAC5D,QAAQ,CAAC5B,OAAO,CAACuD,YAAY,EAAE1B,OAAO,CAAC;YACrG,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,cAAc;UACvC;UACA,IAAIA,OAAO,CAACwD,qBAAqB,IAAI,IAAI,IAAIxD,OAAO,CAACE,cAAc,CAAC,uBAAuB,CAAC,EAAE;YAC1FoB,MAAM,CAACkC,qBAAqB,GAAG1E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuG,qBAAqB,CAAC7D,QAAQ,CAAC5B,OAAO,CAACwD,qBAAqB,EAAE3B,OAAO,CAAC;YAChI,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,uBAAuB;UAChD;UACA,IAAIA,OAAO,CAACyD,4BAA4B,IAAI,IAAI,IAAIzD,OAAO,CAACE,cAAc,CAAC,8BAA8B,CAAC,EAAE;YACxGoB,MAAM,CAACmC,4BAA4B,GAAG3E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwG,4BAA4B,CAAC9D,QAAQ,CAAC5B,OAAO,CAACyD,4BAA4B,EAAE5B,OAAO,CAAC;YACrJ,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,8BAA8B;UACvD;UACA,IAAIA,OAAO,CAAC0D,yBAAyB,IAAI,IAAI,IAAI1D,OAAO,CAACE,cAAc,CAAC,2BAA2B,CAAC,EAAE;YAClGoB,MAAM,CAACoC,yBAAyB,GAAG5E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyG,yBAAyB,CAAC/D,QAAQ,CAAC5B,OAAO,CAAC0D,yBAAyB,EAAE7B,OAAO,CAAC;YAC5I,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,2BAA2B;UACpD;UACA,IAAIA,OAAO,CAAC2D,4BAA4B,IAAI,IAAI,IAAI3D,OAAO,CAACE,cAAc,CAAC,8BAA8B,CAAC,EAAE;YACxGoB,MAAM,CAACqC,4BAA4B,GAAG7E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0G,4BAA4B,CAAChE,QAAQ,CAAC5B,OAAO,CAAC2D,4BAA4B,EAAE9B,OAAO,CAAC;YACrJ,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,8BAA8B;UACvD;UACA,IAAIA,OAAO,CAAC4D,kBAAkB,IAAI,IAAI,IAAI5D,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAAE;YACpFoB,MAAM,CAACsC,kBAAkB,GAAG9E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2G,kBAAkB,CAACjE,QAAQ,CAAC5B,OAAO,CAAC4D,kBAAkB,EAAE/B,OAAO,CAAC;YACvH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,oBAAoB;UAC7C;UACA,IAAIA,OAAO,CAAC6D,2BAA2B,IAAI,IAAI,IAAI7D,OAAO,CAACE,cAAc,CAAC,6BAA6B,CAAC,EAAE;YACtGoB,MAAM,CAACuC,2BAA2B,GAAG/E,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4G,2BAA2B,CAAClE,QAAQ,CAAC5B,OAAO,CAAC6D,2BAA2B,EAAEhC,OAAO,CAAC;YAClJ,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,6BAA6B;UACtD;UACA,IAAIA,OAAO,CAAC8D,2BAA2B,IAAI,IAAI,IAAI9D,OAAO,CAACE,cAAc,CAAC,6BAA6B,CAAC,EAAE;YACtGoB,MAAM,CAACwC,2BAA2B,GAAGhF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6G,2BAA2B,CAACnE,QAAQ,CAAC5B,OAAO,CAAC8D,2BAA2B,EAAEjC,OAAO,CAAC;YAClJ,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,6BAA6B;UACtD;UACA,IAAIA,OAAO,CAAC+D,sBAAsB,IAAI,IAAI,IAAI/D,OAAO,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAAE;YAC5FoB,MAAM,CAACyC,sBAAsB,GAAGjF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8G,sBAAsB,CAACpE,QAAQ,CAAC5B,OAAO,CAAC+D,sBAAsB,EAAElC,OAAO,CAAC;YACnI,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,wBAAwB;UACjD;UACA,IAAIA,OAAO,CAACgE,YAAY,IAAI,IAAI,IAAIhE,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;YACxEoB,MAAM,CAAC0C,YAAY,GAAGhE,OAAO,CAACgE,YAAY;YAC1C,IAAInC,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,cAAc;UACvC;UACA,IAAIA,OAAO,CAACiE,QAAQ,IAAI,IAAI,IAAIjE,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;YAChEoB,MAAM,CAAC2C,QAAQ,GAAGnF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACtE,QAAQ,CAAC5B,OAAO,CAACiE,QAAQ,EAAEpC,OAAO,CAAC;YACzF,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,UAAU;UACnC;UACA,IAAIA,OAAO,CAACkE,cAAc,IAAI,IAAI,IAAIlE,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5EoB,MAAM,CAAC4C,cAAc,GAAGpF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAACvE,QAAQ,CAAC5B,OAAO,CAACkE,cAAc,EAAErC,OAAO,CAAC;YAC3G,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,gBAAgB;UACzC;UACA,IAAIA,OAAO,CAACmE,IAAI,IAAI,IAAI,IAAInE,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;YACxDoB,MAAM,CAAC6C,IAAI,GAAGrF,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAACxE,QAAQ,CAAC5B,OAAO,CAACmE,IAAI,EAAEtC,OAAO,CAAC;YAC7E,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,MAAM;UAC/B;UACA,OAAOsB,MAAM;QACjB,CAAC;QASDmB,QAAQ,CAAChD,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC1C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOE,QAAQ;MACnB,CAAC,EAAG;MAEJvD,QAAQ,CAACuH,QAAQ,GAAI,YAAW;QAkB5B,SAASA,QAAQ,CAACrH,UAAU,EAAE;UAC1B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAkH,QAAQ,CAAChH,SAAS,CAACiH,IAAI,GAAG,CAAC;QAQ3BD,QAAQ,CAAChH,SAAS,CAACkH,MAAM,GAAG,CAAC;QAU7BF,QAAQ,CAAC3G,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC1C,OAAO,IAAIqH,QAAQ,CAACrH,UAAU,CAAC;QACnC,CAAC;QAWDqH,QAAQ,CAAC1G,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC0G,IAAI,IAAI,IAAI,IAAI1G,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,CAAC,CAAC,CAACA,MAAM,CAACH,OAAO,CAAC0G,IAAI,CAAC;UAChE,IAAI1G,OAAO,CAAC2G,MAAM,IAAI,IAAI,IAAI3G,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACA,MAAM,CAACH,OAAO,CAAC2G,MAAM,CAAC;UACnE,OAAO1G,MAAM;QACjB,CAAC;QAWDwG,QAAQ,CAACnG,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDkG,QAAQ,CAACjG,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC9C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,EAAE;UACtH,OAAOhG,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC0G,IAAI,GAAGjG,MAAM,CAACN,MAAM,EAAE;gBAC9B;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC2G,MAAM,GAAGlG,MAAM,CAACN,MAAM,EAAE;gBAChC;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDyG,QAAQ,CAACzF,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACxD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDsG,QAAQ,CAACxF,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC0G,IAAI,IAAI,IAAI,IAAI1G,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAAC0G,IAAI,CAAC,EAC9B,OAAO,wBAAwB;UACvC,IAAI1G,OAAO,CAAC2G,MAAM,IAAI,IAAI,IAAI3G,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAAC2G,MAAM,CAAC,EAChC,OAAO,0BAA0B;UACzC,OAAO,IAAI;QACf,CAAC;QAUDF,QAAQ,CAACpF,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC9C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,EACrD,OAAOnF,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,EAAE;UACvD,IAAInF,MAAM,CAACoF,IAAI,IAAI,IAAI,EACnB1G,OAAO,CAAC0G,IAAI,GAAGpF,MAAM,CAACoF,IAAI,KAAK,CAAC;UACpC,IAAIpF,MAAM,CAACqF,MAAM,IAAI,IAAI,EACrB3G,OAAO,CAAC2G,MAAM,GAAGrF,MAAM,CAACqF,MAAM,KAAK,CAAC;UACxC,OAAO3G,OAAO;QAClB,CAAC;QAWDyG,QAAQ,CAAC7E,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACoF,IAAI,GAAG,CAAC;YACfpF,MAAM,CAACqF,MAAM,GAAG,CAAC;UACrB;UACA,IAAI3G,OAAO,CAAC0G,IAAI,IAAI,IAAI,IAAI1G,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACoF,IAAI,GAAG1G,OAAO,CAAC0G,IAAI;UAC9B,IAAI1G,OAAO,CAAC2G,MAAM,IAAI,IAAI,IAAI3G,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DoB,MAAM,CAACqF,MAAM,GAAG3G,OAAO,CAAC2G,MAAM;UAClC,OAAOrF,MAAM;QACjB,CAAC;QASDmF,QAAQ,CAAChH,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC1C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOkE,QAAQ;MACnB,CAAC,EAAG;MAEJvH,QAAQ,CAAC0H,eAAe,GAAI,YAAW;QAmBnC,SAASA,eAAe,CAACxH,UAAU,EAAE;UACjC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAqH,eAAe,CAACnH,SAAS,CAACoH,GAAG,GAAG,EAAE;QAQlCD,eAAe,CAACnH,SAAS,CAACqH,QAAQ,GAAG,IAAI;QAUzCF,eAAe,CAAC9G,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACjD,OAAO,IAAIwH,eAAe,CAACxH,UAAU,CAAC;QAC1C,CAAC;QAWDwH,eAAe,CAAC7G,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACtD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC6G,GAAG,CAAC;UAChE,IAAI7G,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC1H,OAAON,MAAM;QACjB,CAAC;QAWD2G,eAAe,CAACtG,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACxE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDqG,eAAe,CAACpG,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACrD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,EAAE;UAC7H,OAAOnG,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC6G,GAAG,GAAGpG,MAAM,CAACwF,MAAM,EAAE;gBAC7B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACtF;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD4G,eAAe,CAAC5F,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC/D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDyG,eAAe,CAAC3F,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC9C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC6G,GAAG,CAAC,EAC5B,OAAO,sBAAsB;UACrC,IAAI7G,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;YAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;YACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;UAClC;UACA,OAAO,IAAI;QACf,CAAC;QAUDO,eAAe,CAACvF,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACrD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,EAC5D,OAAOtF,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,EAAE;UAC9D,IAAItF,MAAM,CAACuF,GAAG,IAAI,IAAI,EAClB7G,OAAO,CAAC6G,GAAG,GAAG5E,MAAM,CAACX,MAAM,CAACuF,GAAG,CAAC;UACpC,IAAIvF,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;YACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,iEAAiE,CAAC;YACtFvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;UACtF;UACA,OAAO9G,OAAO;QAClB,CAAC;QAWD4G,eAAe,CAAChF,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC3D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACuF,GAAG,GAAG,EAAE;YACfvF,MAAM,CAACwF,QAAQ,GAAG,IAAI;UAC1B;UACA,IAAI9G,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDoB,MAAM,CAACuF,GAAG,GAAG7G,OAAO,CAAC6G,GAAG;UAC5B,IAAI7G,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;UAC7F,OAAOP,MAAM;QACjB,CAAC;QASDsF,eAAe,CAACnH,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACjD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOqE,eAAe;MAC1B,CAAC,EAAG;MAEJ1H,QAAQ,CAAC6H,KAAK,GAAI,YAAW;QAqBzB,SAASA,KAAK,CAAC3H,UAAU,EAAE;UACvB,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAwH,KAAK,CAACtH,SAAS,CAACuH,QAAQ,GAAG,CAAC;QAW5BD,KAAK,CAACtH,SAAS,CAACwH,WAAW,GAAG,EAAE;QAUhCF,KAAK,CAACjH,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACvC,OAAO,IAAI2H,KAAK,CAAC3H,UAAU,CAAC;QAChC,CAAC;QAWD2H,KAAK,CAAChH,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC5C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACgH,QAAQ,IAAI,IAAI,IAAIhH,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,CAAC,CAAC,CAACE,KAAK,CAACL,OAAO,CAACgH,QAAQ,CAAC;UACnE,IAAIhH,OAAO,CAACiH,WAAW,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACiH,WAAW,CAAC;UACxE,OAAOhH,MAAM;QACjB,CAAC;QAWD8G,KAAK,CAACzG,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC9D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDwG,KAAK,CAACvG,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC3C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,EAAE;UACnH,OAAOtG,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACgH,QAAQ,GAAGvG,MAAM,CAACJ,KAAK,EAAE;gBACjC;cACJ,KAAK,CAAC;gBACFL,OAAO,CAACiH,WAAW,GAAGxG,MAAM,CAACwF,MAAM,EAAE;gBACrC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD+G,KAAK,CAAC/F,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACrD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD4G,KAAK,CAAC9F,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACpC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACgH,QAAQ,IAAI,IAAI,IAAIhH,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,QAAQF,OAAO,CAACgH,QAAQ;YACxB;cACI,OAAO,+BAA+B;YAC1C,KAAK,CAAC;YACN,KAAK,CAAC;cACF;UAAM;UAEd,IAAIhH,OAAO,CAACiH,WAAW,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACiH,WAAW,CAAC,EACpC,OAAO,8BAA8B;UAC7C,OAAO,IAAI;QACf,CAAC;QAUDF,KAAK,CAAC1F,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC3C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,EAClD,OAAOzF,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,EAAE;UACpD,QAAQzF,MAAM,CAAC0F,QAAQ;YACvB,KAAK,QAAQ;YACb,KAAK,CAAC;cACFhH,OAAO,CAACgH,QAAQ,GAAG,CAAC;cACpB;YACJ,KAAK,MAAM;YACX,KAAK,CAAC;cACFhH,OAAO,CAACgH,QAAQ,GAAG,CAAC;cACpB;UAAM;UAEV,IAAI1F,MAAM,CAAC2F,WAAW,IAAI,IAAI,EAC1BjH,OAAO,CAACiH,WAAW,GAAGhF,MAAM,CAACX,MAAM,CAAC2F,WAAW,CAAC;UACpD,OAAOjH,OAAO;QAClB,CAAC;QAWD+G,KAAK,CAACnF,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACjD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAAC0F,QAAQ,GAAGnF,OAAO,CAACqF,KAAK,KAAKjF,MAAM,GAAG,QAAQ,GAAG,CAAC;YACzDX,MAAM,CAAC2F,WAAW,GAAG,EAAE;UAC3B;UACA,IAAIjH,OAAO,CAACgH,QAAQ,IAAI,IAAI,IAAIhH,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC0F,QAAQ,GAAGnF,OAAO,CAACqF,KAAK,KAAKjF,MAAM,GAAGnD,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAACI,QAAQ,CAACnH,OAAO,CAACgH,QAAQ,CAAC,GAAGhH,OAAO,CAACgH,QAAQ;UAC/H,IAAIhH,OAAO,CAACiH,WAAW,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAAC2F,WAAW,GAAGjH,OAAO,CAACiH,WAAW;UAC5C,OAAO3F,MAAM;QACjB,CAAC;QASDyF,KAAK,CAACtH,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACvC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QASDwE,KAAK,CAACI,QAAQ,GAAI,YAAW;UACzB,IAAIC,UAAU,GAAG,CAAC,CAAC;YAAEC,MAAM,GAAG/H,MAAM,CAACQ,MAAM,CAACsH,UAAU,CAAC;UACvDC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;UACpCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC;UAClC,OAAOC,MAAM;QACjB,CAAC,EAAG;QAEJ,OAAON,KAAK;MAChB,CAAC,EAAG;MAEJ7H,QAAQ,CAACwF,MAAM,GAAI,YAAW;QAoB1B,SAASA,MAAM,CAACtF,UAAU,EAAE;UACxB,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QASAmF,MAAM,CAACjF,SAAS,CAACoH,GAAG,GAAG,EAAE;QAQzBnC,MAAM,CAACjF,SAAS,CAAC6H,IAAI,GAAG,EAAE;QAQ1B5C,MAAM,CAACjF,SAAS,CAAC8H,KAAK,GAAG,IAAI;QAU7B7C,MAAM,CAAC5E,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACxC,OAAO,IAAIsF,MAAM,CAACtF,UAAU,CAAC;QACjC,CAAC;QAWDsF,MAAM,CAAC3E,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC7C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC6G,GAAG,CAAC;UAChE,IAAI7G,OAAO,CAACsH,IAAI,IAAI,IAAI,IAAItH,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsH,IAAI,CAAC;UACjE,IAAItH,OAAO,CAACuH,KAAK,IAAI,IAAI,IAAIvH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAAChH,MAAM,CAACC,OAAO,CAACuH,KAAK,EAAEtH,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpH,OAAON,MAAM;QACjB,CAAC;QAWDyE,MAAM,CAACpE,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC/D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDmE,MAAM,CAAClE,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC5C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwF,MAAM,EAAE;UACpH,OAAOjE,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC6G,GAAG,GAAGpG,MAAM,CAACwF,MAAM,EAAE;gBAC7B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACsH,IAAI,GAAG7G,MAAM,CAACwF,MAAM,EAAE;gBAC9B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACuH,KAAK,GAAGzI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAACvG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAChF;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD0E,MAAM,CAAC1D,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACtD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDuE,MAAM,CAACzD,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACrC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC6G,GAAG,CAAC,EAC5B,OAAO,sBAAsB;UACrC,IAAI7G,OAAO,CAACsH,IAAI,IAAI,IAAI,IAAItH,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsH,IAAI,CAAC,EAC7B,OAAO,uBAAuB;UACtC,IAAItH,OAAO,CAACuH,KAAK,IAAI,IAAI,IAAIvH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;YAC1D,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAAC9F,MAAM,CAACjB,OAAO,CAACuH,KAAK,CAAC;YAClE,IAAIlB,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;UAC/B;UACA,OAAO,IAAI;QACf,CAAC;QAUD3B,MAAM,CAACrD,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC5C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwF,MAAM,EACnD,OAAOpD,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwF,MAAM,EAAE;UACrD,IAAIpD,MAAM,CAACuF,GAAG,IAAI,IAAI,EAClB7G,OAAO,CAAC6G,GAAG,GAAG5E,MAAM,CAACX,MAAM,CAACuF,GAAG,CAAC;UACpC,IAAIvF,MAAM,CAACgG,IAAI,IAAI,IAAI,EACnBtH,OAAO,CAACsH,IAAI,GAAGrF,MAAM,CAACX,MAAM,CAACgG,IAAI,CAAC;UACtC,IAAIhG,MAAM,CAACiG,KAAK,IAAI,IAAI,EAAE;YACtB,IAAI,OAAOjG,MAAM,CAACiG,KAAK,KAAK,QAAQ,EAChC,MAAMhB,SAAS,CAAC,qDAAqD,CAAC;YAC1EvG,OAAO,CAACuH,KAAK,GAAGzI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAAC1F,UAAU,CAACC,MAAM,CAACiG,KAAK,CAAC;UAC7E;UACA,OAAOvH,OAAO;QAClB,CAAC;QAWD0E,MAAM,CAAC9C,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAClD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACuF,GAAG,GAAG,EAAE;YACfvF,MAAM,CAACgG,IAAI,GAAG,EAAE;YAChBhG,MAAM,CAACiG,KAAK,GAAG,IAAI;UACvB;UACA,IAAIvH,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDoB,MAAM,CAACuF,GAAG,GAAG7G,OAAO,CAAC6G,GAAG;UAC5B,IAAI7G,OAAO,CAACsH,IAAI,IAAI,IAAI,IAAItH,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACgG,IAAI,GAAGtH,OAAO,CAACsH,IAAI;UAC9B,IAAItH,OAAO,CAACuH,KAAK,IAAI,IAAI,IAAIvH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAACiG,KAAK,GAAGzI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAACnF,QAAQ,CAAC5B,OAAO,CAACuH,KAAK,EAAE1F,OAAO,CAAC;UACpF,OAAOP,MAAM;QACjB,CAAC;QASDoD,MAAM,CAACjF,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACxC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOmC,MAAM;MACjB,CAAC,EAAG;MAEJxF,QAAQ,CAAC0F,eAAe,GAAI,YAAW;QAyBnC,SAASA,eAAe,CAACxF,UAAU,EAAE;UACjC,IAAI,CAACoI,QAAQ,GAAG,EAAE;UAClB,IAAIpI,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QASAqF,eAAe,CAACnF,SAAS,CAACoH,GAAG,GAAG,EAAE;QAQlCjC,eAAe,CAACnF,SAAS,CAACgI,OAAO,GAAG,IAAI;QAQxC7C,eAAe,CAACnF,SAAS,CAAC+H,QAAQ,GAAG5I,KAAK,CAAC8I,UAAU;QAUrD9C,eAAe,CAAC9E,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACjD,OAAO,IAAIwF,eAAe,CAACxF,UAAU,CAAC;QAC1C,CAAC;QAWDwF,eAAe,CAAC7E,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACtD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC6G,GAAG,CAAC;UAChE,IAAI7G,OAAO,CAACyH,OAAO,IAAI,IAAI,IAAIzH,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC5H,MAAM,CAACC,OAAO,CAACyH,OAAO,EAAExH,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxI,IAAIP,OAAO,CAACwH,QAAQ,IAAI,IAAI,IAAIxH,OAAO,CAACwH,QAAQ,CAAChI,MAAM,EACnD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACwH,QAAQ,CAAChI,MAAM,EAAE,EAAED,CAAC,EAC5CT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACgD,OAAO,CAAC7H,MAAM,CAACC,OAAO,CAACwH,QAAQ,CAACjI,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAChJ,OAAON,MAAM;QACjB,CAAC;QAWD2E,eAAe,CAACtE,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACxE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDqE,eAAe,CAACpE,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACrD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,EAAE;UAC7H,OAAOnE,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC6G,GAAG,GAAGpG,MAAM,CAACwF,MAAM,EAAE;gBAC7B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACyH,OAAO,GAAG3I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACnH,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACpG;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEH,OAAO,CAACwH,QAAQ,IAAIxH,OAAO,CAACwH,QAAQ,CAAChI,MAAM,CAAC,EAC9CQ,OAAO,CAACwH,QAAQ,GAAG,EAAE;gBACzBxH,OAAO,CAACwH,QAAQ,CAACK,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACgD,OAAO,CAACpH,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBACzG;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD4E,eAAe,CAAC5D,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC/D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDyE,eAAe,CAAC3D,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC9C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC6G,GAAG,CAAC,EAC5B,OAAO,sBAAsB;UACrC,IAAI7G,OAAO,CAACyH,OAAO,IAAI,IAAI,IAAIzH,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;YAC9D,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC1G,MAAM,CAACjB,OAAO,CAACyH,OAAO,CAAC;YACtF,IAAIpB,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;UACjC;UACA,IAAIrG,OAAO,CAACwH,QAAQ,IAAI,IAAI,IAAIxH,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;YAChE,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACwH,QAAQ,CAAC,EAChC,OAAO,0BAA0B;YACrC,KAAK,IAAIjI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACwH,QAAQ,CAAChI,MAAM,EAAE,EAAED,CAAC,EAAE;cAC9C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACgD,OAAO,CAAC3G,MAAM,CAACjB,OAAO,CAACwH,QAAQ,CAACjI,CAAC,CAAC,CAAC;cAC1F,IAAI8G,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;YAClC;UACJ;UACA,OAAO,IAAI;QACf,CAAC;QAUDzB,eAAe,CAACvD,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACrD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,EAC5D,OAAOtD,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,EAAE;UAC9D,IAAItD,MAAM,CAACuF,GAAG,IAAI,IAAI,EAClB7G,OAAO,CAAC6G,GAAG,GAAG5E,MAAM,CAACX,MAAM,CAACuF,GAAG,CAAC;UACpC,IAAIvF,MAAM,CAACmG,OAAO,IAAI,IAAI,EAAE;YACxB,IAAI,OAAOnG,MAAM,CAACmG,OAAO,KAAK,QAAQ,EAClC,MAAMlB,SAAS,CAAC,gEAAgE,CAAC;YACrFvG,OAAO,CAACyH,OAAO,GAAG3I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACtG,UAAU,CAACC,MAAM,CAACmG,OAAO,CAAC;UACnG;UACA,IAAInG,MAAM,CAACkG,QAAQ,EAAE;YACjB,IAAI,CAACM,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACkG,QAAQ,CAAC,EAC/B,MAAMjB,SAAS,CAAC,gEAAgE,CAAC;YACrFvG,OAAO,CAACwH,QAAQ,GAAG,EAAE;YACrB,KAAK,IAAIjI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACkG,QAAQ,CAAChI,MAAM,EAAE,EAAED,CAAC,EAAE;cAC7C,IAAI,OAAO+B,MAAM,CAACkG,QAAQ,CAACjI,CAAC,CAAC,KAAK,QAAQ,EACtC,MAAMgH,SAAS,CAAC,iEAAiE,CAAC;cACtFvG,OAAO,CAACwH,QAAQ,CAACjI,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACgD,OAAO,CAACvG,UAAU,CAACC,MAAM,CAACkG,QAAQ,CAACjI,CAAC,CAAC,CAAC;YAC3G;UACJ;UACA,OAAOS,OAAO;QAClB,CAAC;QAWD4E,eAAe,CAAChD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC3D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAACkG,QAAQ,GAAG,EAAE;UACxB,IAAI3F,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACuF,GAAG,GAAG,EAAE;YACfvF,MAAM,CAACmG,OAAO,GAAG,IAAI;UACzB;UACA,IAAIzH,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDoB,MAAM,CAACuF,GAAG,GAAG7G,OAAO,CAAC6G,GAAG;UAC5B,IAAI7G,OAAO,CAACyH,OAAO,IAAI,IAAI,IAAIzH,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACmG,OAAO,GAAG3I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC/F,QAAQ,CAAC5B,OAAO,CAACyH,OAAO,EAAE5F,OAAO,CAAC;UAC1G,IAAI7B,OAAO,CAACwH,QAAQ,IAAIxH,OAAO,CAACwH,QAAQ,CAAChI,MAAM,EAAE;YAC7C8B,MAAM,CAACkG,QAAQ,GAAG,EAAE;YACpB,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACwH,QAAQ,CAAChI,MAAM,EAAE,EAAEyI,CAAC,EAC5C3G,MAAM,CAACkG,QAAQ,CAACS,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACgD,OAAO,CAAChG,QAAQ,CAAC5B,OAAO,CAACwH,QAAQ,CAACS,CAAC,CAAC,EAAEpG,OAAO,CAAC;UACtH;UACA,OAAOP,MAAM;QACjB,CAAC;QASDsD,eAAe,CAACnF,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACjD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAEDqC,eAAe,CAACgD,OAAO,GAAI,YAAW;UAkBlC,SAASA,OAAO,CAACxI,UAAU,EAAE;YACzB,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;UACnD;UAQAqI,OAAO,CAACnI,SAAS,CAACqH,QAAQ,GAAG,IAAI;UAQjCc,OAAO,CAACnI,SAAS,CAACyI,IAAI,GAAG,EAAE;UAU3BN,OAAO,CAAC9H,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;YACzC,OAAO,IAAIwI,OAAO,CAACxI,UAAU,CAAC;UAClC,CAAC;UAWDwI,OAAO,CAAC7H,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;YAC9C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;YAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;YAC1H,IAAIP,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACkI,IAAI,CAAC;YACjE,OAAOjI,MAAM;UACjB,CAAC;UAWD2H,OAAO,CAACtH,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;YAChE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;UAChD,CAAC;UAaDqH,OAAO,CAACpH,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;YAC7C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;YACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;cAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACgD,OAAO,EAAE;YACrI,OAAOnH,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;cACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;cACzB,QAAQW,GAAG,KAAK,CAAC;gBACjB,KAAK,CAAC;kBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;kBACtF;gBACJ,KAAK,CAAC;kBACFH,OAAO,CAACkI,IAAI,GAAGzH,MAAM,CAACwF,MAAM,EAAE;kBAC9B;gBACJ;kBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;kBACxB;cAAM;YAEd;YACA,OAAOd,OAAO;UAClB,CAAC;UAYD4H,OAAO,CAAC5G,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;YACvD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;YAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;UAC/C,CAAC;UAUDyH,OAAO,CAAC3G,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;YACtC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;YAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;cAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;cACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;YAClC;YACA,IAAIrG,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACkI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;YACtC,OAAO,IAAI;UACf,CAAC;UAUDN,OAAO,CAACvG,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;YAC7C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACgD,OAAO,EACpE,OAAOtG,MAAM;YACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAACgD,OAAO,EAAE;YACtE,IAAItG,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;cACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,yEAAyE,CAAC;cAC9FvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;YACtF;YACA,IAAIxF,MAAM,CAAC4G,IAAI,IAAI,IAAI,EACnBlI,OAAO,CAACkI,IAAI,GAAGjG,MAAM,CAACX,MAAM,CAAC4G,IAAI,CAAC;YACtC,OAAOlI,OAAO;UAClB,CAAC;UAWD4H,OAAO,CAAChG,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;YACnD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;YAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;YACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;cAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;cACtBxF,MAAM,CAAC4G,IAAI,GAAG,EAAE;YACpB;YACA,IAAIlI,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;YAC7F,IAAI7B,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAAC4G,IAAI,GAAGlI,OAAO,CAACkI,IAAI;YAC9B,OAAO5G,MAAM;UACjB,CAAC;UASDsG,OAAO,CAACnI,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;YACzC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;UACxE,CAAC;UAED,OAAOqF,OAAO;QAClB,CAAC,EAAG;QAEJhD,eAAe,CAAC+C,OAAO,GAAI,YAAW;UAuBlC,SAASA,OAAO,CAACvI,UAAU,EAAE;YACzB,IAAI,CAAC+I,IAAI,GAAG,EAAE;YACd,IAAI,CAACC,QAAQ,GAAG,EAAE;YAClB,IAAIhJ,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;UACnD;UAQAoI,OAAO,CAAClI,SAAS,CAACqH,QAAQ,GAAG,IAAI;UAQjCa,OAAO,CAAClI,SAAS,CAAC0I,IAAI,GAAGvJ,KAAK,CAAC8I,UAAU;UAQzCC,OAAO,CAAClI,SAAS,CAAC4I,QAAQ,GAAG,EAAE;UAQ/BV,OAAO,CAAClI,SAAS,CAAC6I,OAAO,GAAG,EAAE;UAQ9BX,OAAO,CAAClI,SAAS,CAAC8I,IAAI,GAAG,EAAE;UAQ3BZ,OAAO,CAAClI,SAAS,CAAC+I,WAAW,GAAG,EAAE;UAQlCb,OAAO,CAAClI,SAAS,CAAC2I,QAAQ,GAAGxJ,KAAK,CAAC8I,UAAU;UAU7CC,OAAO,CAAC7H,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;YACzC,OAAO,IAAIuI,OAAO,CAACvI,UAAU,CAAC;UAClC,CAAC;UAWDuI,OAAO,CAAC5H,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;YAC9C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;YAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;YAC1H,IAAIP,OAAO,CAACmI,IAAI,IAAI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAC3C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EACxCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAAC1I,MAAM,CAACC,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;YAChJ,IAAIP,OAAO,CAACqI,QAAQ,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACqI,QAAQ,CAAC;YACrE,IAAIrI,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsI,OAAO,CAAC;YACpE,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuI,IAAI,CAAC;YACjE,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACwI,WAAW,CAAC;YACxE,IAAIxI,OAAO,CAACoI,QAAQ,IAAI,IAAI,IAAIpI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EACnD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE,EAAED,CAAC,EAC5CT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAAC3I,MAAM,CAACC,OAAO,CAACoI,QAAQ,CAAC7I,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;YAC7J,OAAON,MAAM;UACjB,CAAC;UAWD0H,OAAO,CAACrH,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;YAChE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;UAChD,CAAC;UAaDoH,OAAO,CAACnH,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;YAC7C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;YACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;cAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,EAAE;YACrI,OAAOlH,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;cACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;cACzB,QAAQW,GAAG,KAAK,CAAC;gBACjB,KAAK,CAAC;kBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;kBACtF;gBACJ,KAAK,CAAC;kBACF,IAAI,EAAEH,OAAO,CAACmI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,CAAC,EACtCQ,OAAO,CAACmI,IAAI,GAAG,EAAE;kBACrBnI,OAAO,CAACmI,IAAI,CAACN,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAACjI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;kBACzG;gBACJ,KAAK,CAAC;kBACFH,OAAO,CAACqI,QAAQ,GAAG5H,MAAM,CAACwF,MAAM,EAAE;kBAClC;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAACsI,OAAO,GAAG7H,MAAM,CAACwF,MAAM,EAAE;kBACjC;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAACuI,IAAI,GAAG9H,MAAM,CAACwF,MAAM,EAAE;kBAC9B;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAACwI,WAAW,GAAG/H,MAAM,CAACwF,MAAM,EAAE;kBACrC;gBACJ,KAAK,CAAC;kBACF,IAAI,EAAEjG,OAAO,CAACoI,QAAQ,IAAIpI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,CAAC,EAC9CQ,OAAO,CAACoI,QAAQ,GAAG,EAAE;kBACzBpI,OAAO,CAACoI,QAAQ,CAACP,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAAClI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;kBACtH;gBACJ;kBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;kBACxB;cAAM;YAEd;YACA,OAAOd,OAAO;UAClB,CAAC;UAYD2H,OAAO,CAAC3G,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;YACvD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;YAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;UAC/C,CAAC;UAUDwH,OAAO,CAAC1G,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;YACtC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;YAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;cAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;cACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;YAClC;YACA,IAAIrG,OAAO,CAACmI,IAAI,IAAI,IAAI,IAAInI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;cACxD,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACmI,IAAI,CAAC,EAC5B,OAAO,sBAAsB;cACjC,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EAAE;gBAC1C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAACxH,MAAM,CAACjB,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,CAAC;gBAC1F,IAAI8G,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;cAC9B;YACJ;YACA,IAAIrG,OAAO,CAACqI,QAAQ,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACqI,QAAQ,CAAC,EACjC,OAAO,2BAA2B;YAC1C,IAAIrI,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsI,OAAO,CAAC,EAChC,OAAO,0BAA0B;YACzC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;YACtC,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACwI,WAAW,CAAC,EACpC,OAAO,8BAA8B;YAC7C,IAAIxI,OAAO,CAACoI,QAAQ,IAAI,IAAI,IAAIpI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;cAChE,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoI,QAAQ,CAAC,EAChC,OAAO,0BAA0B;cACrC,KAAK,IAAI7I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE,EAAED,CAAC,EAAE;gBAC9C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACzH,MAAM,CAACjB,OAAO,CAACoI,QAAQ,CAAC7I,CAAC,CAAC,CAAC;gBACvG,IAAI8G,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;cAClC;YACJ;YACA,OAAO,IAAI;UACf,CAAC;UAUDsB,OAAO,CAACtG,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;YAC7C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,EACpE,OAAOrG,MAAM;YACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,EAAE;YACtE,IAAIrG,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;cACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,yEAAyE,CAAC;cAC9FvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;YACtF;YACA,IAAIxF,MAAM,CAAC6G,IAAI,EAAE;cACb,IAAI,CAACL,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC6G,IAAI,CAAC,EAC3B,MAAM5B,SAAS,CAAC,oEAAoE,CAAC;cACzFvG,OAAO,CAACmI,IAAI,GAAG,EAAE;cACjB,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC6G,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EAAE;gBACzC,IAAI,OAAO+B,MAAM,CAAC6G,IAAI,CAAC5I,CAAC,CAAC,KAAK,QAAQ,EAClC,MAAMgH,SAAS,CAAC,qEAAqE,CAAC;gBAC1FvG,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAACpH,UAAU,CAACC,MAAM,CAAC6G,IAAI,CAAC5I,CAAC,CAAC,CAAC;cACvG;YACJ;YACA,IAAI+B,MAAM,CAAC+G,QAAQ,IAAI,IAAI,EACvBrI,OAAO,CAACqI,QAAQ,GAAGpG,MAAM,CAACX,MAAM,CAAC+G,QAAQ,CAAC;YAC9C,IAAI/G,MAAM,CAACgH,OAAO,IAAI,IAAI,EACtBtI,OAAO,CAACsI,OAAO,GAAGrG,MAAM,CAACX,MAAM,CAACgH,OAAO,CAAC;YAC5C,IAAIhH,MAAM,CAACiH,IAAI,IAAI,IAAI,EACnBvI,OAAO,CAACuI,IAAI,GAAGtG,MAAM,CAACX,MAAM,CAACiH,IAAI,CAAC;YACtC,IAAIjH,MAAM,CAACkH,WAAW,IAAI,IAAI,EAC1BxI,OAAO,CAACwI,WAAW,GAAGvG,MAAM,CAACX,MAAM,CAACkH,WAAW,CAAC;YACpD,IAAIlH,MAAM,CAAC8G,QAAQ,EAAE;cACjB,IAAI,CAACN,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8G,QAAQ,CAAC,EAC/B,MAAM7B,SAAS,CAAC,wEAAwE,CAAC;cAC7FvG,OAAO,CAACoI,QAAQ,GAAG,EAAE;cACrB,KAAK,IAAI7I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8G,QAAQ,CAAC5I,MAAM,EAAE,EAAED,CAAC,EAAE;gBAC7C,IAAI,OAAO+B,MAAM,CAAC8G,QAAQ,CAAC7I,CAAC,CAAC,KAAK,QAAQ,EACtC,MAAMgH,SAAS,CAAC,yEAAyE,CAAC;gBAC9FvG,OAAO,CAACoI,QAAQ,CAAC7I,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACrH,UAAU,CAACC,MAAM,CAAC8G,QAAQ,CAAC7I,CAAC,CAAC,CAAC;cACxH;YACJ;YACA,OAAOS,OAAO;UAClB,CAAC;UAWD2H,OAAO,CAAC/F,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;YACnD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;YAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;YACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAAE;cACpCR,MAAM,CAAC6G,IAAI,GAAG,EAAE;cAChB7G,MAAM,CAAC8G,QAAQ,GAAG,EAAE;YACxB;YACA,IAAIvG,OAAO,CAACC,QAAQ,EAAE;cAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;cACtBxF,MAAM,CAAC+G,QAAQ,GAAG,EAAE;cACpB/G,MAAM,CAACgH,OAAO,GAAG,EAAE;cACnBhH,MAAM,CAACiH,IAAI,GAAG,EAAE;cAChBjH,MAAM,CAACkH,WAAW,GAAG,EAAE;YAC3B;YACA,IAAIxI,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;YAC7F,IAAI7B,OAAO,CAACmI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE;cACrC8B,MAAM,CAAC6G,IAAI,GAAG,EAAE;cAChB,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAEyI,CAAC,EACxC3G,MAAM,CAAC6G,IAAI,CAACF,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAAC7G,QAAQ,CAAC5B,OAAO,CAACmI,IAAI,CAACF,CAAC,CAAC,EAAEpG,OAAO,CAAC;YAClH;YACA,IAAI7B,OAAO,CAACqI,QAAQ,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC+G,QAAQ,GAAGrI,OAAO,CAACqI,QAAQ;YACtC,IAAIrI,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACgH,OAAO,GAAGtI,OAAO,CAACsI,OAAO;YACpC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACiH,IAAI,GAAGvI,OAAO,CAACuI,IAAI;YAC9B,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAACkH,WAAW,GAAGxI,OAAO,CAACwI,WAAW;YAC5C,IAAIxI,OAAO,CAACoI,QAAQ,IAAIpI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE;cAC7C8B,MAAM,CAAC8G,QAAQ,GAAG,EAAE;cACpB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE,EAAEyI,CAAC,EAC5C3G,MAAM,CAAC8G,QAAQ,CAACH,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAAC9G,QAAQ,CAAC5B,OAAO,CAACoI,QAAQ,CAACH,CAAC,CAAC,EAAEpG,OAAO,CAAC;YACnI;YACA,OAAOP,MAAM;UACjB,CAAC;UASDqG,OAAO,CAAClI,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;YACzC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;UACxE,CAAC;UAEDoF,OAAO,CAACc,GAAG,GAAI,YAAW;YAmBtB,SAASA,GAAG,CAACrJ,UAAU,EAAE;cACrB,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;YACnD;YAQAkJ,GAAG,CAAChJ,SAAS,CAACqH,QAAQ,GAAG,IAAI;YAQ7B2B,GAAG,CAAChJ,SAAS,CAAC8I,IAAI,GAAG,EAAE;YAQvBE,GAAG,CAAChJ,SAAS,CAACkJ,EAAE,GAAG,EAAE;YAUrBF,GAAG,CAAC3I,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;cACrC,OAAO,IAAIqJ,GAAG,CAACrJ,UAAU,CAAC;YAC9B,CAAC;YAWDqJ,GAAG,CAAC1I,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;cAC1C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;cAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAC1H,IAAIP,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuI,IAAI,CAAC;cACjE,IAAIvI,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;cAC/D,OAAO1I,MAAM;YACjB,CAAC;YAWDwI,GAAG,CAACnI,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;cAC5D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;YAChD,CAAC;YAaDkI,GAAG,CAACjI,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;cACzC,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;cACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;gBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,EAAE;cACzI,OAAOhI,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;gBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;gBACzB,QAAQW,GAAG,KAAK,CAAC;kBACjB,KAAK,CAAC;oBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBACtF;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAACuI,IAAI,GAAG9H,MAAM,CAACwF,MAAM,EAAE;oBAC9B;kBACJ,KAAK,CAAC;oBACFjG,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;oBAC5B;kBACJ;oBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;oBACxB;gBAAM;cAEd;cACA,OAAOd,OAAO;YAClB,CAAC;YAYDyI,GAAG,CAACzH,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;cACnD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;cAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;YAC/C,CAAC;YAUDsI,GAAG,CAACxH,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;cAClC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;cAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;gBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;gBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;cAClC;cACA,IAAIrG,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;cACtC,IAAIvI,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;cACpC,OAAO,IAAI;YACf,CAAC;YAUDF,GAAG,CAACpH,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;cACzC,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,EACxE,OAAOnH,MAAM;cACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,EAAE;cAC1E,IAAInH,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;gBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,6EAA6E,CAAC;gBAClGvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;cACtF;cACA,IAAIxF,MAAM,CAACiH,IAAI,IAAI,IAAI,EACnBvI,OAAO,CAACuI,IAAI,GAAGtG,MAAM,CAACX,MAAM,CAACiH,IAAI,CAAC;cACtC,IAAIjH,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;cAClC,OAAO3I,OAAO;YAClB,CAAC;YAWDyI,GAAG,CAAC7G,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;cAC/C,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;cAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;cACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;gBAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;gBACtBxF,MAAM,CAACiH,IAAI,GAAG,EAAE;gBAChBjH,MAAM,CAACqH,EAAE,GAAG,EAAE;cAClB;cACA,IAAI3I,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;cAC7F,IAAI7B,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACiH,IAAI,GAAGvI,OAAO,CAACuI,IAAI;cAC9B,IAAIvI,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;cAC1B,OAAOrH,MAAM;YACjB,CAAC;YASDmH,GAAG,CAAChJ,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;cACrC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;YACxE,CAAC;YAED,OAAOkG,GAAG;UACd,CAAC,EAAG;UAEJd,OAAO,CAACe,YAAY,GAAI,YAAW;YAmB/B,SAASA,YAAY,CAACtJ,UAAU,EAAE;cAC9B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;YACnD;YAQAmJ,YAAY,CAACjJ,SAAS,CAACmJ,IAAI,GAAG,IAAI;YAQlCF,YAAY,CAACjJ,SAAS,CAACoJ,UAAU,GAAG,IAAI;YAQxCH,YAAY,CAACjJ,SAAS,CAACqJ,QAAQ,GAAG,IAAI;YAGtC,IAAI1E,YAAY;YAQhB9E,MAAM,CAAC+E,cAAc,CAACqE,YAAY,CAACjJ,SAAS,EAAE,OAAO,EAAE;cACnD6E,GAAG,EAAE1F,KAAK,CAAC2F,WAAW,CAACH,YAAY,GAAG,CAAC,MAAM,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;cACzEI,GAAG,EAAE5F,KAAK,CAAC6F,WAAW,CAACL,YAAY;YACvC,CAAC,CAAC;YAUFsE,YAAY,CAAC5I,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;cAC9C,OAAO,IAAIsJ,YAAY,CAACtJ,UAAU,CAAC;YACvC,CAAC;YAWDsJ,YAAY,CAAC3I,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;cACnD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;cAC7B,IAAIE,OAAO,CAAC4I,IAAI,IAAI,IAAI,IAAI5I,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACK,IAAI,CAAChJ,MAAM,CAACC,OAAO,CAAC4I,IAAI,EAAE3I,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cACvJ,IAAIP,OAAO,CAAC6I,UAAU,IAAI,IAAI,IAAI7I,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAACjJ,MAAM,CAACC,OAAO,CAAC6I,UAAU,EAAE5I,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cACtJ,IAAIP,OAAO,CAAC8I,QAAQ,IAAI,IAAI,IAAI9I,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAAClJ,MAAM,CAACC,OAAO,CAAC8I,QAAQ,EAAE7I,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAClJ,OAAON,MAAM;YACjB,CAAC;YAWDyI,YAAY,CAACpI,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;cACrE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;YAChD,CAAC;YAaDmI,YAAY,CAAClI,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;cAClD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;cACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;gBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,EAAE;cAClJ,OAAOjI,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;gBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;gBACzB,QAAQW,GAAG,KAAK,CAAC;kBACjB,KAAK,CAAC;oBACFd,OAAO,CAAC4I,IAAI,GAAG9J,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACK,IAAI,CAACvI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBACnH;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAAC6I,UAAU,GAAG/J,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAACxI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBAClH;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAAC8I,QAAQ,GAAGhK,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACzI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBAC9G;kBACJ;oBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;oBACxB;gBAAM;cAEd;cACA,OAAOd,OAAO;YAClB,CAAC;YAYD0I,YAAY,CAAC1H,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;cAC5D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;cAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;YAC/C,CAAC;YAUDuI,YAAY,CAACzH,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;cAC3C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;cAC5B,IAAIZ,UAAU,GAAG,CAAC,CAAC;cACnB,IAAIY,OAAO,CAAC4I,IAAI,IAAI,IAAI,IAAI5I,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;gBACxDd,UAAU,CAAC8J,KAAK,GAAG,CAAC;gBACpB;kBACI,IAAI7C,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACK,IAAI,CAAC9H,MAAM,CAACjB,OAAO,CAAC4I,IAAI,CAAC;kBACrG,IAAIvC,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;gBAC9B;cACJ;cACA,IAAIrG,OAAO,CAAC6I,UAAU,IAAI,IAAI,IAAI7I,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;gBACpE,IAAId,UAAU,CAAC8J,KAAK,KAAK,CAAC,EACtB,OAAO,wBAAwB;gBACnC9J,UAAU,CAAC8J,KAAK,GAAG,CAAC;gBACpB;kBACI,IAAI7C,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAAC/H,MAAM,CAACjB,OAAO,CAAC6I,UAAU,CAAC;kBACpG,IAAIxC,KAAK,EACL,OAAO,aAAa,GAAGA,KAAK;gBACpC;cACJ;cACA,IAAIrG,OAAO,CAAC8I,QAAQ,IAAI,IAAI,IAAI9I,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;gBAChE,IAAId,UAAU,CAAC8J,KAAK,KAAK,CAAC,EACtB,OAAO,wBAAwB;gBACnC9J,UAAU,CAAC8J,KAAK,GAAG,CAAC;gBACpB;kBACI,IAAI7C,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAAChI,MAAM,CAACjB,OAAO,CAAC8I,QAAQ,CAAC;kBAChG,IAAIzC,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;gBAClC;cACJ;cACA,OAAO,IAAI;YACf,CAAC;YAUDqC,YAAY,CAACrH,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;cAClD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,EACjF,OAAOpH,MAAM;cACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,EAAE;cACnF,IAAIpH,MAAM,CAACsH,IAAI,IAAI,IAAI,EAAE;gBACrB,IAAI,OAAOtH,MAAM,CAACsH,IAAI,KAAK,QAAQ,EAC/B,MAAMrC,SAAS,CAAC,kFAAkF,CAAC;gBACvGvG,OAAO,CAAC4I,IAAI,GAAG9J,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACK,IAAI,CAAC1H,UAAU,CAACC,MAAM,CAACsH,IAAI,CAAC;cAC/G;cACA,IAAItH,MAAM,CAACuH,UAAU,IAAI,IAAI,EAAE;gBAC3B,IAAI,OAAOvH,MAAM,CAACuH,UAAU,KAAK,QAAQ,EACrC,MAAMtC,SAAS,CAAC,wFAAwF,CAAC;gBAC7GvG,OAAO,CAAC6I,UAAU,GAAG/J,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAAC3H,UAAU,CAACC,MAAM,CAACuH,UAAU,CAAC;cACpH;cACA,IAAIvH,MAAM,CAACwH,QAAQ,IAAI,IAAI,EAAE;gBACzB,IAAI,OAAOxH,MAAM,CAACwH,QAAQ,KAAK,QAAQ,EACnC,MAAMvC,SAAS,CAAC,sFAAsF,CAAC;gBAC3GvG,OAAO,CAAC8I,QAAQ,GAAGhK,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAAC5H,UAAU,CAACC,MAAM,CAACwH,QAAQ,CAAC;cAC9G;cACA,OAAO9I,OAAO;YAClB,CAAC;YAWD0I,YAAY,CAAC9G,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;cACxD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;cAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;cACf,IAAItB,OAAO,CAAC4I,IAAI,IAAI,IAAI,IAAI5I,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;gBACxDoB,MAAM,CAACsH,IAAI,GAAG9J,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACK,IAAI,CAACnH,QAAQ,CAAC5B,OAAO,CAAC4I,IAAI,EAAE/G,OAAO,CAAC;gBAClH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAAC4H,KAAK,GAAG,MAAM;cAC7B;cACA,IAAIlJ,OAAO,CAAC6I,UAAU,IAAI,IAAI,IAAI7I,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;gBACpEoB,MAAM,CAACuH,UAAU,GAAG/J,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAACpH,QAAQ,CAAC5B,OAAO,CAAC6I,UAAU,EAAEhH,OAAO,CAAC;gBACvH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAAC4H,KAAK,GAAG,YAAY;cACnC;cACA,IAAIlJ,OAAO,CAAC8I,QAAQ,IAAI,IAAI,IAAI9I,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;gBAChEoB,MAAM,CAACwH,QAAQ,GAAGhK,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACrH,QAAQ,CAAC5B,OAAO,CAAC8I,QAAQ,EAAEjH,OAAO,CAAC;gBACjH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAAC4H,KAAK,GAAG,UAAU;cACjC;cACA,OAAO5H,MAAM;YACjB,CAAC;YASDoH,YAAY,CAACjJ,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;cAC9C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;YACxE,CAAC;YAEDmG,YAAY,CAACK,IAAI,GAAI,YAAW;cAqB5B,SAASA,IAAI,CAAC3J,UAAU,EAAE;gBACtB,IAAI,CAACgJ,QAAQ,GAAG,EAAE;gBAClB,IAAIhJ,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;cACnD;cAQAwJ,IAAI,CAACtJ,SAAS,CAACqH,QAAQ,GAAG,IAAI;cAQ9BiC,IAAI,CAACtJ,SAAS,CAAC6I,OAAO,GAAG,EAAE;cAQ3BS,IAAI,CAACtJ,SAAS,CAAC8I,IAAI,GAAG,EAAE;cAQxBQ,IAAI,CAACtJ,SAAS,CAAC+I,WAAW,GAAG,EAAE;cAQ/BO,IAAI,CAACtJ,SAAS,CAAC2I,QAAQ,GAAGxJ,KAAK,CAAC8I,UAAU;cAU1CqB,IAAI,CAACjJ,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;gBACtC,OAAO,IAAI2J,IAAI,CAAC3J,UAAU,CAAC;cAC/B,CAAC;cAWD2J,IAAI,CAAChJ,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;gBAC3C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;gBAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBAC1H,IAAIP,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsI,OAAO,CAAC;gBACpE,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuI,IAAI,CAAC;gBACjE,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACwI,WAAW,CAAC;gBACxE,IAAIxI,OAAO,CAACoI,QAAQ,IAAI,IAAI,IAAIpI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EACnD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE,EAAED,CAAC,EAC5CT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACS,SAAS,CAACpJ,MAAM,CAACC,OAAO,CAACoI,QAAQ,CAAC7I,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBACvK,OAAON,MAAM;cACjB,CAAC;cAWD8I,IAAI,CAACzI,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;gBAC7D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;cAChD,CAAC;cAaDwI,IAAI,CAACvI,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;gBAC1C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;gBACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;kBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACK,IAAI,EAAE;gBACvJ,OAAOtI,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;kBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;kBACzB,QAAQW,GAAG,KAAK,CAAC;oBACjB,KAAK,CAAC;sBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;sBACtF;oBACJ,KAAK,CAAC;sBACFH,OAAO,CAACsI,OAAO,GAAG7H,MAAM,CAACwF,MAAM,EAAE;sBACjC;oBACJ,KAAK,CAAC;sBACFjG,OAAO,CAACuI,IAAI,GAAG9H,MAAM,CAACwF,MAAM,EAAE;sBAC9B;oBACJ,KAAK,CAAC;sBACFjG,OAAO,CAACwI,WAAW,GAAG/H,MAAM,CAACwF,MAAM,EAAE;sBACrC;oBACJ,KAAK,CAAC;sBACF,IAAI,EAAEjG,OAAO,CAACoI,QAAQ,IAAIpI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,CAAC,EAC9CQ,OAAO,CAACoI,QAAQ,GAAG,EAAE;sBACzBpI,OAAO,CAACoI,QAAQ,CAACP,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACS,SAAS,CAAC3I,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;sBAChI;oBACJ;sBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;sBACxB;kBAAM;gBAEd;gBACA,OAAOd,OAAO;cAClB,CAAC;cAYD+I,IAAI,CAAC/H,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;gBACpD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;gBAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;cAC/C,CAAC;cAUD4I,IAAI,CAAC9H,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;gBACnC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;gBAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;kBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;kBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;gBAClC;gBACA,IAAIrG,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsI,OAAO,CAAC,EAChC,OAAO,0BAA0B;gBACzC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;gBACtC,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACwI,WAAW,CAAC,EACpC,OAAO,8BAA8B;gBAC7C,IAAIxI,OAAO,CAACoI,QAAQ,IAAI,IAAI,IAAIpI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;kBAChE,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoI,QAAQ,CAAC,EAChC,OAAO,0BAA0B;kBACrC,KAAK,IAAI7I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE,EAAED,CAAC,EAAE;oBAC9C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACS,SAAS,CAAClI,MAAM,CAACjB,OAAO,CAACoI,QAAQ,CAAC7I,CAAC,CAAC,CAAC;oBACjH,IAAI8G,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;kBAClC;gBACJ;gBACA,OAAO,IAAI;cACf,CAAC;cAUD0C,IAAI,CAAC1H,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;gBAC1C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACK,IAAI,EACtF,OAAOzH,MAAM;gBACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACK,IAAI,EAAE;gBACxF,IAAIzH,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;kBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,2FAA2F,CAAC;kBAChHvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;gBACtF;gBACA,IAAIxF,MAAM,CAACgH,OAAO,IAAI,IAAI,EACtBtI,OAAO,CAACsI,OAAO,GAAGrG,MAAM,CAACX,MAAM,CAACgH,OAAO,CAAC;gBAC5C,IAAIhH,MAAM,CAACiH,IAAI,IAAI,IAAI,EACnBvI,OAAO,CAACuI,IAAI,GAAGtG,MAAM,CAACX,MAAM,CAACiH,IAAI,CAAC;gBACtC,IAAIjH,MAAM,CAACkH,WAAW,IAAI,IAAI,EAC1BxI,OAAO,CAACwI,WAAW,GAAGvG,MAAM,CAACX,MAAM,CAACkH,WAAW,CAAC;gBACpD,IAAIlH,MAAM,CAAC8G,QAAQ,EAAE;kBACjB,IAAI,CAACN,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8G,QAAQ,CAAC,EAC/B,MAAM7B,SAAS,CAAC,0FAA0F,CAAC;kBAC/GvG,OAAO,CAACoI,QAAQ,GAAG,EAAE;kBACrB,KAAK,IAAI7I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8G,QAAQ,CAAC5I,MAAM,EAAE,EAAED,CAAC,EAAE;oBAC7C,IAAI,OAAO+B,MAAM,CAAC8G,QAAQ,CAAC7I,CAAC,CAAC,KAAK,QAAQ,EACtC,MAAMgH,SAAS,CAAC,2FAA2F,CAAC;oBAChHvG,OAAO,CAACoI,QAAQ,CAAC7I,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACS,SAAS,CAAC9H,UAAU,CAACC,MAAM,CAAC8G,QAAQ,CAAC7I,CAAC,CAAC,CAAC;kBAClI;gBACJ;gBACA,OAAOS,OAAO;cAClB,CAAC;cAWD+I,IAAI,CAACnH,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;gBAChD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;gBACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC8G,QAAQ,GAAG,EAAE;gBACxB,IAAIvG,OAAO,CAACC,QAAQ,EAAE;kBAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;kBACtBxF,MAAM,CAACgH,OAAO,GAAG,EAAE;kBACnBhH,MAAM,CAACiH,IAAI,GAAG,EAAE;kBAChBjH,MAAM,CAACkH,WAAW,GAAG,EAAE;gBAC3B;gBACA,IAAIxI,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;gBAC7F,IAAI7B,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACgH,OAAO,GAAGtI,OAAO,CAACsI,OAAO;gBACpC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACiH,IAAI,GAAGvI,OAAO,CAACuI,IAAI;gBAC9B,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAACkH,WAAW,GAAGxI,OAAO,CAACwI,WAAW;gBAC5C,IAAIxI,OAAO,CAACoI,QAAQ,IAAIpI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE;kBAC7C8B,MAAM,CAAC8G,QAAQ,GAAG,EAAE;kBACpB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE,EAAEyI,CAAC,EAC5C3G,MAAM,CAAC8G,QAAQ,CAACH,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACS,SAAS,CAACvH,QAAQ,CAAC5B,OAAO,CAACoI,QAAQ,CAACH,CAAC,CAAC,EAAEpG,OAAO,CAAC;gBAC7I;gBACA,OAAOP,MAAM;cACjB,CAAC;cASDyH,IAAI,CAACtJ,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;gBACtC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;cACxE,CAAC;cAED,OAAOwG,IAAI;YACf,CAAC,EAAG;YAEJL,YAAY,CAACS,SAAS,GAAI,YAAW;cAkBjC,SAASA,SAAS,CAAC/J,UAAU,EAAE;gBAC3B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;cACnD;cAQA4J,SAAS,CAAC1J,SAAS,CAACoJ,UAAU,GAAG,IAAI;cAQrCM,SAAS,CAAC1J,SAAS,CAACqJ,QAAQ,GAAG,IAAI;cAGnC,IAAI1E,YAAY;cAQhB9E,MAAM,CAAC+E,cAAc,CAAC8E,SAAS,CAAC1J,SAAS,EAAE,OAAO,EAAE;gBAChD6E,GAAG,EAAE1F,KAAK,CAAC2F,WAAW,CAACH,YAAY,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;gBACjEI,GAAG,EAAE5F,KAAK,CAAC6F,WAAW,CAACL,YAAY;cACvC,CAAC,CAAC;cAUF+E,SAAS,CAACrJ,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;gBAC3C,OAAO,IAAI+J,SAAS,CAAC/J,UAAU,CAAC;cACpC,CAAC;cAWD+J,SAAS,CAACpJ,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;gBAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;gBAC7B,IAAIE,OAAO,CAAC6I,UAAU,IAAI,IAAI,IAAI7I,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAACjJ,MAAM,CAACC,OAAO,CAAC6I,UAAU,EAAE5I,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBACtJ,IAAIP,OAAO,CAAC8I,QAAQ,IAAI,IAAI,IAAI9I,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAAClJ,MAAM,CAACC,OAAO,CAAC8I,QAAQ,EAAE7I,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBAClJ,OAAON,MAAM;cACjB,CAAC;cAWDkJ,SAAS,CAAC7I,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;gBAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;cAChD,CAAC;cAaD4I,SAAS,CAAC3I,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;gBAC/C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;gBACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;kBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACS,SAAS,EAAE;gBAC5J,OAAO1I,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;kBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;kBACzB,QAAQW,GAAG,KAAK,CAAC;oBACjB,KAAK,CAAC;sBACFd,OAAO,CAAC6I,UAAU,GAAG/J,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAACxI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;sBAClH;oBACJ,KAAK,CAAC;sBACFH,OAAO,CAAC8I,QAAQ,GAAGhK,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACzI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;sBAC9G;oBACJ;sBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;sBACxB;kBAAM;gBAEd;gBACA,OAAOd,OAAO;cAClB,CAAC;cAYDmJ,SAAS,CAACnI,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;gBACzD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;gBAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;cAC/C,CAAC;cAUDgJ,SAAS,CAAClI,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;gBACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;gBAC5B,IAAIZ,UAAU,GAAG,CAAC,CAAC;gBACnB,IAAIY,OAAO,CAAC6I,UAAU,IAAI,IAAI,IAAI7I,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;kBACpEd,UAAU,CAAC8J,KAAK,GAAG,CAAC;kBACpB;oBACI,IAAI7C,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAAC/H,MAAM,CAACjB,OAAO,CAAC6I,UAAU,CAAC;oBACpG,IAAIxC,KAAK,EACL,OAAO,aAAa,GAAGA,KAAK;kBACpC;gBACJ;gBACA,IAAIrG,OAAO,CAAC8I,QAAQ,IAAI,IAAI,IAAI9I,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;kBAChE,IAAId,UAAU,CAAC8J,KAAK,KAAK,CAAC,EACtB,OAAO,wBAAwB;kBACnC9J,UAAU,CAAC8J,KAAK,GAAG,CAAC;kBACpB;oBACI,IAAI7C,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAAChI,MAAM,CAACjB,OAAO,CAAC8I,QAAQ,CAAC;oBAChG,IAAIzC,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;kBAClC;gBACJ;gBACA,OAAO,IAAI;cACf,CAAC;cAUD8C,SAAS,CAAC9H,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;gBAC/C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACS,SAAS,EAC3F,OAAO7H,MAAM;gBACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACe,YAAY,CAACS,SAAS,EAAE;gBAC7F,IAAI7H,MAAM,CAACuH,UAAU,IAAI,IAAI,EAAE;kBAC3B,IAAI,OAAOvH,MAAM,CAACuH,UAAU,KAAK,QAAQ,EACrC,MAAMtC,SAAS,CAAC,kGAAkG,CAAC;kBACvHvG,OAAO,CAAC6I,UAAU,GAAG/J,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAAC3H,UAAU,CAACC,MAAM,CAACuH,UAAU,CAAC;gBACpH;gBACA,IAAIvH,MAAM,CAACwH,QAAQ,IAAI,IAAI,EAAE;kBACzB,IAAI,OAAOxH,MAAM,CAACwH,QAAQ,KAAK,QAAQ,EACnC,MAAMvC,SAAS,CAAC,gGAAgG,CAAC;kBACrHvG,OAAO,CAAC8I,QAAQ,GAAGhK,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAAC5H,UAAU,CAACC,MAAM,CAACwH,QAAQ,CAAC;gBAC9G;gBACA,OAAO9I,OAAO;cAClB,CAAC;cAWDmJ,SAAS,CAACvH,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;gBACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;gBACf,IAAItB,OAAO,CAAC6I,UAAU,IAAI,IAAI,IAAI7I,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;kBACpEoB,MAAM,CAACuH,UAAU,GAAG/J,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,CAACpH,QAAQ,CAAC5B,OAAO,CAAC6I,UAAU,EAAEhH,OAAO,CAAC;kBACvH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAAC4H,KAAK,GAAG,YAAY;gBACnC;gBACA,IAAIlJ,OAAO,CAAC8I,QAAQ,IAAI,IAAI,IAAI9I,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;kBAChEoB,MAAM,CAACwH,QAAQ,GAAGhK,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACrH,QAAQ,CAAC5B,OAAO,CAAC8I,QAAQ,EAAEjH,OAAO,CAAC;kBACjH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAAC4H,KAAK,GAAG,UAAU;gBACjC;gBACA,OAAO5H,MAAM;cACjB,CAAC;cASD6H,SAAS,CAAC1J,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;gBAC3C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;cACxE,CAAC;cAED,OAAO4G,SAAS;YACpB,CAAC,EAAG;YAEJ,OAAOT,YAAY;UACvB,CAAC,EAAG;UAEJf,OAAO,CAACqB,UAAU,GAAI,YAAW;YAqB7B,SAASA,UAAU,CAAC5J,UAAU,EAAE;cAC5B,IAAI,CAACgK,KAAK,GAAG,EAAE;cACf,IAAIhK,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;YACnD;YAQAyJ,UAAU,CAACvJ,SAAS,CAACqH,QAAQ,GAAG,IAAI;YAQpCkC,UAAU,CAACvJ,SAAS,CAAC6I,OAAO,GAAG,EAAE;YAQjCU,UAAU,CAACvJ,SAAS,CAAC8I,IAAI,GAAG,EAAE;YAQ9BS,UAAU,CAACvJ,SAAS,CAAC+I,WAAW,GAAG,EAAE;YAQrCQ,UAAU,CAACvJ,SAAS,CAAC2J,KAAK,GAAGxK,KAAK,CAAC8I,UAAU;YAU7CsB,UAAU,CAAClJ,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;cAC5C,OAAO,IAAI4J,UAAU,CAAC5J,UAAU,CAAC;YACrC,CAAC;YAWD4J,UAAU,CAACjJ,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;cACjD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;cAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAC1H,IAAIP,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsI,OAAO,CAAC;cACpE,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuI,IAAI,CAAC;cACjE,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACwI,WAAW,CAAC;cACxE,IAAIxI,OAAO,CAACoJ,KAAK,IAAI,IAAI,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EACzCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACtJ,MAAM,CAACC,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAClJ,OAAON,MAAM;YACjB,CAAC;YAWD+I,UAAU,CAAC1I,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;cACnE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;YAChD,CAAC;YAaDyI,UAAU,CAACxI,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;cAChD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;cACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;gBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,EAAE;cAChJ,OAAOvI,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;gBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;gBACzB,QAAQW,GAAG,KAAK,CAAC;kBACjB,KAAK,CAAC;oBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBACtF;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAACsI,OAAO,GAAG7H,MAAM,CAACwF,MAAM,EAAE;oBACjC;kBACJ,KAAK,CAAC;oBACFjG,OAAO,CAACuI,IAAI,GAAG9H,MAAM,CAACwF,MAAM,EAAE;oBAC9B;kBACJ,KAAK,CAAC;oBACFjG,OAAO,CAACwI,WAAW,GAAG/H,MAAM,CAACwF,MAAM,EAAE;oBACrC;kBACJ,KAAK,CAAC;oBACF,IAAI,EAAEjG,OAAO,CAACoJ,KAAK,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,CAAC,EACxCQ,OAAO,CAACoJ,KAAK,GAAG,EAAE;oBACtBpJ,OAAO,CAACoJ,KAAK,CAACvB,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAAC7I,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;oBAC3G;kBACJ;oBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;oBACxB;gBAAM;cAEd;cACA,OAAOd,OAAO;YAClB,CAAC;YAYDgJ,UAAU,CAAChI,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;cAC1D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;cAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;YAC/C,CAAC;YAUD6I,UAAU,CAAC/H,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;cACzC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;cAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;gBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;gBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;cAClC;cACA,IAAIrG,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsI,OAAO,CAAC,EAChC,OAAO,0BAA0B;cACzC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;cACtC,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACwI,WAAW,CAAC,EACpC,OAAO,8BAA8B;cAC7C,IAAIxI,OAAO,CAACoJ,KAAK,IAAI,IAAI,IAAIpJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;gBAC1D,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoJ,KAAK,CAAC,EAC7B,OAAO,uBAAuB;gBAClC,KAAK,IAAI7J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC3C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACpI,MAAM,CAACjB,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,CAAC;kBAC5F,IAAI8G,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;gBAC/B;cACJ;cACA,OAAO,IAAI;YACf,CAAC;YAUD2C,UAAU,CAAC3H,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;cAChD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,EAC/E,OAAO1H,MAAM;cACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACqB,UAAU,EAAE;cACjF,IAAI1H,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;gBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,oFAAoF,CAAC;gBACzGvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;cACtF;cACA,IAAIxF,MAAM,CAACgH,OAAO,IAAI,IAAI,EACtBtI,OAAO,CAACsI,OAAO,GAAGrG,MAAM,CAACX,MAAM,CAACgH,OAAO,CAAC;cAC5C,IAAIhH,MAAM,CAACiH,IAAI,IAAI,IAAI,EACnBvI,OAAO,CAACuI,IAAI,GAAGtG,MAAM,CAACX,MAAM,CAACiH,IAAI,CAAC;cACtC,IAAIjH,MAAM,CAACkH,WAAW,IAAI,IAAI,EAC1BxI,OAAO,CAACwI,WAAW,GAAGvG,MAAM,CAACX,MAAM,CAACkH,WAAW,CAAC;cACpD,IAAIlH,MAAM,CAAC8H,KAAK,EAAE;gBACd,IAAI,CAACtB,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8H,KAAK,CAAC,EAC5B,MAAM7C,SAAS,CAAC,gFAAgF,CAAC;gBACrGvG,OAAO,CAACoJ,KAAK,GAAG,EAAE;gBAClB,KAAK,IAAI7J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8H,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC1C,IAAI,OAAO+B,MAAM,CAAC8H,KAAK,CAAC7J,CAAC,CAAC,KAAK,QAAQ,EACnC,MAAMgH,SAAS,CAAC,iFAAiF,CAAC;kBACtGvG,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAAChI,UAAU,CAACC,MAAM,CAAC8H,KAAK,CAAC7J,CAAC,CAAC,CAAC;gBAC1G;cACJ;cACA,OAAOS,OAAO;YAClB,CAAC;YAWDgJ,UAAU,CAACpH,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;cACtD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;cAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;cACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC8H,KAAK,GAAG,EAAE;cACrB,IAAIvH,OAAO,CAACC,QAAQ,EAAE;gBAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;gBACtBxF,MAAM,CAACgH,OAAO,GAAG,EAAE;gBACnBhH,MAAM,CAACiH,IAAI,GAAG,EAAE;gBAChBjH,MAAM,CAACkH,WAAW,GAAG,EAAE;cAC3B;cACA,IAAIxI,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;cAC7F,IAAI7B,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACgH,OAAO,GAAGtI,OAAO,CAACsI,OAAO;cACpC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACiH,IAAI,GAAGvI,OAAO,CAACuI,IAAI;cAC9B,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAACkH,WAAW,GAAGxI,OAAO,CAACwI,WAAW;cAC5C,IAAIxI,OAAO,CAACoJ,KAAK,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE;gBACvC8B,MAAM,CAAC8H,KAAK,GAAG,EAAE;gBACjB,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAEyI,CAAC,EACzC3G,MAAM,CAAC8H,KAAK,CAACnB,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACzH,QAAQ,CAAC5B,OAAO,CAACoJ,KAAK,CAACnB,CAAC,CAAC,EAAEpG,OAAO,CAAC;cACrH;cACA,OAAOP,MAAM;YACjB,CAAC;YASD0H,UAAU,CAACvJ,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;cAC5C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;YACxE,CAAC;YAED,OAAOyG,UAAU;UACrB,CAAC,EAAG;UAEJrB,OAAO,CAACsB,QAAQ,GAAI,YAAW;YAwB3B,SAASA,QAAQ,CAAC7J,UAAU,EAAE;cAC1B,IAAI,CAAC+I,IAAI,GAAG,EAAE;cACd,IAAI,CAACiB,KAAK,GAAG,EAAE;cACf,IAAI,CAACE,QAAQ,GAAG,EAAE;cAClB,IAAIlK,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;YACnD;YAQA0J,QAAQ,CAACxJ,SAAS,CAACqH,QAAQ,GAAG,IAAI;YAQlCmC,QAAQ,CAACxJ,SAAS,CAAC0I,IAAI,GAAGvJ,KAAK,CAAC8I,UAAU;YAQ1CuB,QAAQ,CAACxJ,SAAS,CAAC6I,OAAO,GAAG,EAAE;YAQ/BW,QAAQ,CAACxJ,SAAS,CAAC8I,IAAI,GAAG,EAAE;YAQ5BU,QAAQ,CAACxJ,SAAS,CAAC+I,WAAW,GAAG,EAAE;YAQnCS,QAAQ,CAACxJ,SAAS,CAAC2J,KAAK,GAAGxK,KAAK,CAAC8I,UAAU;YAQ3CuB,QAAQ,CAACxJ,SAAS,CAAC6J,QAAQ,GAAG1K,KAAK,CAAC8I,UAAU;YAQ9CuB,QAAQ,CAACxJ,SAAS,CAACkJ,EAAE,GAAG,EAAE;YAU1BM,QAAQ,CAACnJ,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;cAC1C,OAAO,IAAI6J,QAAQ,CAAC7J,UAAU,CAAC;YACnC,CAAC;YAWD6J,QAAQ,CAAClJ,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;cAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;cAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAC1H,IAAIP,OAAO,CAACmI,IAAI,IAAI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAC3C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EACxCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAAC1I,MAAM,CAACC,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAChJ,IAAIP,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsI,OAAO,CAAC;cACpE,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuI,IAAI,CAAC;cACjE,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACwI,WAAW,CAAC;cACxE,IAAIxI,OAAO,CAACoJ,KAAK,IAAI,IAAI,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EACzCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACtJ,MAAM,CAACC,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAClJ,IAAIP,OAAO,CAACsJ,QAAQ,IAAI,IAAI,IAAItJ,OAAO,CAACsJ,QAAQ,CAAC9J,MAAM,EACnD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACsJ,QAAQ,CAAC9J,MAAM,EAAE,EAAED,CAAC,EAC5CT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACM,QAAQ,CAACxJ,MAAM,CAACC,OAAO,CAACsJ,QAAQ,CAAC/J,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAClK,IAAIP,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;cAC/D,OAAO1I,MAAM;YACjB,CAAC;YAWDgJ,QAAQ,CAAC3I,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;cACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;YAChD,CAAC;YAaD0I,QAAQ,CAACzI,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;cAC9C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;cACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;gBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,EAAE;cAC9I,OAAOxI,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;gBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;gBACzB,QAAQW,GAAG,KAAK,CAAC;kBACjB,KAAK,CAAC;oBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBACtF;kBACJ,KAAK,CAAC;oBACF,IAAI,EAAEH,OAAO,CAACmI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,CAAC,EACtCQ,OAAO,CAACmI,IAAI,GAAG,EAAE;oBACrBnI,OAAO,CAACmI,IAAI,CAACN,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAACjI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;oBACzG;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAACsI,OAAO,GAAG7H,MAAM,CAACwF,MAAM,EAAE;oBACjC;kBACJ,KAAK,CAAC;oBACFjG,OAAO,CAACuI,IAAI,GAAG9H,MAAM,CAACwF,MAAM,EAAE;oBAC9B;kBACJ,KAAK,CAAC;oBACFjG,OAAO,CAACwI,WAAW,GAAG/H,MAAM,CAACwF,MAAM,EAAE;oBACrC;kBACJ,KAAK,CAAC;oBACF,IAAI,EAAEjG,OAAO,CAACoJ,KAAK,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,CAAC,EACxCQ,OAAO,CAACoJ,KAAK,GAAG,EAAE;oBACtBpJ,OAAO,CAACoJ,KAAK,CAACvB,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAAC7I,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;oBAC3G;kBACJ,KAAK,CAAC;oBACF,IAAI,EAAEH,OAAO,CAACsJ,QAAQ,IAAItJ,OAAO,CAACsJ,QAAQ,CAAC9J,MAAM,CAAC,EAC9CQ,OAAO,CAACsJ,QAAQ,GAAG,EAAE;oBACzBtJ,OAAO,CAACsJ,QAAQ,CAACzB,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACM,QAAQ,CAAC/I,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;oBAC3H;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;oBAC5B;kBACJ;oBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;oBACxB;gBAAM;cAEd;cACA,OAAOd,OAAO;YAClB,CAAC;YAYDiJ,QAAQ,CAACjI,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;cACxD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;cAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;YAC/C,CAAC;YAUD8I,QAAQ,CAAChI,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;cACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;cAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;gBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;gBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;cAClC;cACA,IAAIrG,OAAO,CAACmI,IAAI,IAAI,IAAI,IAAInI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;gBACxD,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACmI,IAAI,CAAC,EAC5B,OAAO,sBAAsB;gBACjC,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC1C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAACxH,MAAM,CAACjB,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,CAAC;kBAC1F,IAAI8G,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;gBAC9B;cACJ;cACA,IAAIrG,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsI,OAAO,CAAC,EAChC,OAAO,0BAA0B;cACzC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;cACtC,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACwI,WAAW,CAAC,EACpC,OAAO,8BAA8B;cAC7C,IAAIxI,OAAO,CAACoJ,KAAK,IAAI,IAAI,IAAIpJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;gBAC1D,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoJ,KAAK,CAAC,EAC7B,OAAO,uBAAuB;gBAClC,KAAK,IAAI7J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC3C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACpI,MAAM,CAACjB,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,CAAC;kBAC5F,IAAI8G,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;gBAC/B;cACJ;cACA,IAAIrG,OAAO,CAACsJ,QAAQ,IAAI,IAAI,IAAItJ,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;gBAChE,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACsJ,QAAQ,CAAC,EAChC,OAAO,0BAA0B;gBACrC,KAAK,IAAI/J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACsJ,QAAQ,CAAC9J,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC9C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACM,QAAQ,CAACtI,MAAM,CAACjB,OAAO,CAACsJ,QAAQ,CAAC/J,CAAC,CAAC,CAAC;kBAC5G,IAAI8G,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;gBAClC;cACJ;cACA,IAAIrG,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;cACpC,OAAO,IAAI;YACf,CAAC;YAUDM,QAAQ,CAAC5H,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;cAC9C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,EAC7E,OAAO3H,MAAM;cACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,EAAE;cAC/E,IAAI3H,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;gBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,kFAAkF,CAAC;gBACvGvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;cACtF;cACA,IAAIxF,MAAM,CAAC6G,IAAI,EAAE;gBACb,IAAI,CAACL,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC6G,IAAI,CAAC,EAC3B,MAAM5B,SAAS,CAAC,6EAA6E,CAAC;gBAClGvG,OAAO,CAACmI,IAAI,GAAG,EAAE;gBACjB,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC6G,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EAAE;kBACzC,IAAI,OAAO+B,MAAM,CAAC6G,IAAI,CAAC5I,CAAC,CAAC,KAAK,QAAQ,EAClC,MAAMgH,SAAS,CAAC,8EAA8E,CAAC;kBACnGvG,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAACpH,UAAU,CAACC,MAAM,CAAC6G,IAAI,CAAC5I,CAAC,CAAC,CAAC;gBACvG;cACJ;cACA,IAAI+B,MAAM,CAACgH,OAAO,IAAI,IAAI,EACtBtI,OAAO,CAACsI,OAAO,GAAGrG,MAAM,CAACX,MAAM,CAACgH,OAAO,CAAC;cAC5C,IAAIhH,MAAM,CAACiH,IAAI,IAAI,IAAI,EACnBvI,OAAO,CAACuI,IAAI,GAAGtG,MAAM,CAACX,MAAM,CAACiH,IAAI,CAAC;cACtC,IAAIjH,MAAM,CAACkH,WAAW,IAAI,IAAI,EAC1BxI,OAAO,CAACwI,WAAW,GAAGvG,MAAM,CAACX,MAAM,CAACkH,WAAW,CAAC;cACpD,IAAIlH,MAAM,CAAC8H,KAAK,EAAE;gBACd,IAAI,CAACtB,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8H,KAAK,CAAC,EAC5B,MAAM7C,SAAS,CAAC,8EAA8E,CAAC;gBACnGvG,OAAO,CAACoJ,KAAK,GAAG,EAAE;gBAClB,KAAK,IAAI7J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8H,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC1C,IAAI,OAAO+B,MAAM,CAAC8H,KAAK,CAAC7J,CAAC,CAAC,KAAK,QAAQ,EACnC,MAAMgH,SAAS,CAAC,+EAA+E,CAAC;kBACpGvG,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAAChI,UAAU,CAACC,MAAM,CAAC8H,KAAK,CAAC7J,CAAC,CAAC,CAAC;gBAC1G;cACJ;cACA,IAAI+B,MAAM,CAACgI,QAAQ,EAAE;gBACjB,IAAI,CAACxB,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACgI,QAAQ,CAAC,EAC/B,MAAM/C,SAAS,CAAC,iFAAiF,CAAC;gBACtGvG,OAAO,CAACsJ,QAAQ,GAAG,EAAE;gBACrB,KAAK,IAAI/J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACgI,QAAQ,CAAC9J,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC7C,IAAI,OAAO+B,MAAM,CAACgI,QAAQ,CAAC/J,CAAC,CAAC,KAAK,QAAQ,EACtC,MAAMgH,SAAS,CAAC,kFAAkF,CAAC;kBACvGvG,OAAO,CAACsJ,QAAQ,CAAC/J,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACM,QAAQ,CAAClI,UAAU,CAACC,MAAM,CAACgI,QAAQ,CAAC/J,CAAC,CAAC,CAAC;gBAC7H;cACJ;cACA,IAAI+B,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;cAClC,OAAO3I,OAAO;YAClB,CAAC;YAWDiJ,QAAQ,CAACrH,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;cACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;cAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;cACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAAE;gBACpCR,MAAM,CAAC6G,IAAI,GAAG,EAAE;gBAChB7G,MAAM,CAAC8H,KAAK,GAAG,EAAE;gBACjB9H,MAAM,CAACgI,QAAQ,GAAG,EAAE;cACxB;cACA,IAAIzH,OAAO,CAACC,QAAQ,EAAE;gBAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;gBACtBxF,MAAM,CAACgH,OAAO,GAAG,EAAE;gBACnBhH,MAAM,CAACiH,IAAI,GAAG,EAAE;gBAChBjH,MAAM,CAACkH,WAAW,GAAG,EAAE;gBACvBlH,MAAM,CAACqH,EAAE,GAAG,EAAE;cAClB;cACA,IAAI3I,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;cAC7F,IAAI7B,OAAO,CAACmI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE;gBACrC8B,MAAM,CAAC6G,IAAI,GAAG,EAAE;gBAChB,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAEyI,CAAC,EACxC3G,MAAM,CAAC6G,IAAI,CAACF,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAAC7G,QAAQ,CAAC5B,OAAO,CAACmI,IAAI,CAACF,CAAC,CAAC,EAAEpG,OAAO,CAAC;cAClH;cACA,IAAI7B,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACgH,OAAO,GAAGtI,OAAO,CAACsI,OAAO;cACpC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACiH,IAAI,GAAGvI,OAAO,CAACuI,IAAI;cAC9B,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAACkH,WAAW,GAAGxI,OAAO,CAACwI,WAAW;cAC5C,IAAIxI,OAAO,CAACoJ,KAAK,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE;gBACvC8B,MAAM,CAAC8H,KAAK,GAAG,EAAE;gBACjB,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAEyI,CAAC,EACzC3G,MAAM,CAAC8H,KAAK,CAACnB,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACzH,QAAQ,CAAC5B,OAAO,CAACoJ,KAAK,CAACnB,CAAC,CAAC,EAAEpG,OAAO,CAAC;cACrH;cACA,IAAI7B,OAAO,CAACsJ,QAAQ,IAAItJ,OAAO,CAACsJ,QAAQ,CAAC9J,MAAM,EAAE;gBAC7C8B,MAAM,CAACgI,QAAQ,GAAG,EAAE;gBACpB,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACsJ,QAAQ,CAAC9J,MAAM,EAAE,EAAEyI,CAAC,EAC5C3G,MAAM,CAACgI,QAAQ,CAACrB,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACM,QAAQ,CAAC3H,QAAQ,CAAC5B,OAAO,CAACsJ,QAAQ,CAACrB,CAAC,CAAC,EAAEpG,OAAO,CAAC;cACxI;cACA,IAAI7B,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;cAC1B,OAAOrH,MAAM;YACjB,CAAC;YASD2H,QAAQ,CAACxJ,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;cAC1C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;YACxE,CAAC;YAED0G,QAAQ,CAACM,QAAQ,GAAI,YAAW;cAuB5B,SAASA,QAAQ,CAACnK,UAAU,EAAE;gBAC1B,IAAI,CAAC+I,IAAI,GAAG,EAAE;gBACd,IAAI,CAACqB,SAAS,GAAG,EAAE;gBACnB,IAAIpK,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;cACnD;cAQAgK,QAAQ,CAAC9J,SAAS,CAACqH,QAAQ,GAAG,IAAI;cAQlCyC,QAAQ,CAAC9J,SAAS,CAAC0I,IAAI,GAAGvJ,KAAK,CAAC8I,UAAU;cAQ1C6B,QAAQ,CAAC9J,SAAS,CAAC6I,OAAO,GAAG,EAAE;cAQ/BiB,QAAQ,CAAC9J,SAAS,CAAC8I,IAAI,GAAG,EAAE;cAQ5BgB,QAAQ,CAAC9J,SAAS,CAAC+I,WAAW,GAAG,EAAE;cAQnCe,QAAQ,CAAC9J,SAAS,CAACgK,WAAW,GAAG,IAAI;cAQrCF,QAAQ,CAAC9J,SAAS,CAAC+J,SAAS,GAAG5K,KAAK,CAAC8I,UAAU;cAU/C6B,QAAQ,CAACzJ,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;gBAC1C,OAAO,IAAImK,QAAQ,CAACnK,UAAU,CAAC;cACnC,CAAC;cAWDmK,QAAQ,CAACxJ,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;gBAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;gBAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBAC1H,IAAIP,OAAO,CAACmI,IAAI,IAAI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAC3C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EACxCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAAC1I,MAAM,CAACC,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBAChJ,IAAIP,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsI,OAAO,CAAC;gBACpE,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuI,IAAI,CAAC;gBACjE,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACwI,WAAW,CAAC;gBACxE,IAAIxI,OAAO,CAACyJ,WAAW,IAAI,IAAI,IAAIzJ,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAAC3J,MAAM,CAACC,OAAO,CAACyJ,WAAW,EAAExJ,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBACrJ,IAAIP,OAAO,CAACwJ,SAAS,IAAI,IAAI,IAAIxJ,OAAO,CAACwJ,SAAS,CAAChK,MAAM,EACrD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACwJ,SAAS,CAAChK,MAAM,EAAE,EAAED,CAAC,EAC7CT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAAC3J,MAAM,CAACC,OAAO,CAACwJ,SAAS,CAACjK,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBAC1J,OAAON,MAAM;cACjB,CAAC;cAWDsJ,QAAQ,CAACjJ,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;gBACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;cAChD,CAAC;cAaDgJ,QAAQ,CAAC/I,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;gBAC9C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;gBACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;kBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACM,QAAQ,EAAE;gBACvJ,OAAO9I,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;kBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;kBACzB,QAAQW,GAAG,KAAK,CAAC;oBACjB,KAAK,CAAC;sBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;sBACtF;oBACJ,KAAK,CAAC;sBACF,IAAI,EAAEH,OAAO,CAACmI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,CAAC,EACtCQ,OAAO,CAACmI,IAAI,GAAG,EAAE;sBACrBnI,OAAO,CAACmI,IAAI,CAACN,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAACjI,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;sBACzG;oBACJ,KAAK,CAAC;sBACFH,OAAO,CAACsI,OAAO,GAAG7H,MAAM,CAACwF,MAAM,EAAE;sBACjC;oBACJ,KAAK,CAAC;sBACFjG,OAAO,CAACuI,IAAI,GAAG9H,MAAM,CAACwF,MAAM,EAAE;sBAC9B;oBACJ,KAAK,CAAC;sBACFjG,OAAO,CAACwI,WAAW,GAAG/H,MAAM,CAACwF,MAAM,EAAE;sBACrC;oBACJ,KAAK,CAAC;sBACFjG,OAAO,CAACyJ,WAAW,GAAG3K,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAAClJ,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;sBACjH;oBACJ,KAAK,CAAC;sBACF,IAAI,EAAEH,OAAO,CAACwJ,SAAS,IAAIxJ,OAAO,CAACwJ,SAAS,CAAChK,MAAM,CAAC,EAChDQ,OAAO,CAACwJ,SAAS,GAAG,EAAE;sBAC1BxJ,OAAO,CAACwJ,SAAS,CAAC3B,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAAClJ,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;sBACnH;oBACJ;sBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;sBACxB;kBAAM;gBAEd;gBACA,OAAOd,OAAO;cAClB,CAAC;cAYDuJ,QAAQ,CAACvI,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;gBACxD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;gBAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;cAC/C,CAAC;cAUDoJ,QAAQ,CAACtI,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;gBACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;gBAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;kBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;kBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;gBAClC;gBACA,IAAIrG,OAAO,CAACmI,IAAI,IAAI,IAAI,IAAInI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;kBACxD,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACmI,IAAI,CAAC,EAC5B,OAAO,sBAAsB;kBACjC,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EAAE;oBAC1C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAACxH,MAAM,CAACjB,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,CAAC;oBAC1F,IAAI8G,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;kBAC9B;gBACJ;gBACA,IAAIrG,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsI,OAAO,CAAC,EAChC,OAAO,0BAA0B;gBACzC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;gBACtC,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACwI,WAAW,CAAC,EACpC,OAAO,8BAA8B;gBAC7C,IAAIxI,OAAO,CAACyJ,WAAW,IAAI,IAAI,IAAIzJ,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EAAE;kBACtE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACzI,MAAM,CAACjB,OAAO,CAACyJ,WAAW,CAAC;kBACnG,IAAIpD,KAAK,EACL,OAAO,cAAc,GAAGA,KAAK;gBACrC;gBACA,IAAIrG,OAAO,CAACwJ,SAAS,IAAI,IAAI,IAAIxJ,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;kBAClE,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACwJ,SAAS,CAAC,EACjC,OAAO,2BAA2B;kBACtC,KAAK,IAAIjK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACwJ,SAAS,CAAChK,MAAM,EAAE,EAAED,CAAC,EAAE;oBAC/C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACzI,MAAM,CAACjB,OAAO,CAACwJ,SAAS,CAACjK,CAAC,CAAC,CAAC;oBACpG,IAAI8G,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;kBACnC;gBACJ;gBACA,OAAO,IAAI;cACf,CAAC;cAUDkD,QAAQ,CAAClI,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;gBAC9C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACM,QAAQ,EACtF,OAAOjI,MAAM;gBACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACsB,QAAQ,CAACM,QAAQ,EAAE;gBACxF,IAAIjI,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;kBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,2FAA2F,CAAC;kBAChHvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;gBACtF;gBACA,IAAIxF,MAAM,CAAC6G,IAAI,EAAE;kBACb,IAAI,CAACL,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC6G,IAAI,CAAC,EAC3B,MAAM5B,SAAS,CAAC,sFAAsF,CAAC;kBAC3GvG,OAAO,CAACmI,IAAI,GAAG,EAAE;kBACjB,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC6G,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EAAE;oBACzC,IAAI,OAAO+B,MAAM,CAAC6G,IAAI,CAAC5I,CAAC,CAAC,KAAK,QAAQ,EAClC,MAAMgH,SAAS,CAAC,uFAAuF,CAAC;oBAC5GvG,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAACpH,UAAU,CAACC,MAAM,CAAC6G,IAAI,CAAC5I,CAAC,CAAC,CAAC;kBACvG;gBACJ;gBACA,IAAI+B,MAAM,CAACgH,OAAO,IAAI,IAAI,EACtBtI,OAAO,CAACsI,OAAO,GAAGrG,MAAM,CAACX,MAAM,CAACgH,OAAO,CAAC;gBAC5C,IAAIhH,MAAM,CAACiH,IAAI,IAAI,IAAI,EACnBvI,OAAO,CAACuI,IAAI,GAAGtG,MAAM,CAACX,MAAM,CAACiH,IAAI,CAAC;gBACtC,IAAIjH,MAAM,CAACkH,WAAW,IAAI,IAAI,EAC1BxI,OAAO,CAACwI,WAAW,GAAGvG,MAAM,CAACX,MAAM,CAACkH,WAAW,CAAC;gBACpD,IAAIlH,MAAM,CAACmI,WAAW,IAAI,IAAI,EAAE;kBAC5B,IAAI,OAAOnI,MAAM,CAACmI,WAAW,KAAK,QAAQ,EACtC,MAAMlD,SAAS,CAAC,8FAA8F,CAAC;kBACnHvG,OAAO,CAACyJ,WAAW,GAAG3K,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACrI,UAAU,CAACC,MAAM,CAACmI,WAAW,CAAC;gBACpH;gBACA,IAAInI,MAAM,CAACkI,SAAS,EAAE;kBAClB,IAAI,CAAC1B,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACkI,SAAS,CAAC,EAChC,MAAMjD,SAAS,CAAC,2FAA2F,CAAC;kBAChHvG,OAAO,CAACwJ,SAAS,GAAG,EAAE;kBACtB,KAAK,IAAIjK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACkI,SAAS,CAAChK,MAAM,EAAE,EAAED,CAAC,EAAE;oBAC9C,IAAI,OAAO+B,MAAM,CAACkI,SAAS,CAACjK,CAAC,CAAC,KAAK,QAAQ,EACvC,MAAMgH,SAAS,CAAC,4FAA4F,CAAC;oBACjHvG,OAAO,CAACwJ,SAAS,CAACjK,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACrI,UAAU,CAACC,MAAM,CAACkI,SAAS,CAACjK,CAAC,CAAC,CAAC;kBACtH;gBACJ;gBACA,OAAOS,OAAO;cAClB,CAAC;cAWDuJ,QAAQ,CAAC3H,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;gBACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;gBACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAAE;kBACpCR,MAAM,CAAC6G,IAAI,GAAG,EAAE;kBAChB7G,MAAM,CAACkI,SAAS,GAAG,EAAE;gBACzB;gBACA,IAAI3H,OAAO,CAACC,QAAQ,EAAE;kBAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;kBACtBxF,MAAM,CAACgH,OAAO,GAAG,EAAE;kBACnBhH,MAAM,CAACiH,IAAI,GAAG,EAAE;kBAChBjH,MAAM,CAACkH,WAAW,GAAG,EAAE;kBACvBlH,MAAM,CAACmI,WAAW,GAAG,IAAI;gBAC7B;gBACA,IAAIzJ,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;gBAC7F,IAAI7B,OAAO,CAACmI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE;kBACrC8B,MAAM,CAAC6G,IAAI,GAAG,EAAE;kBAChB,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAEyI,CAAC,EACxC3G,MAAM,CAAC6G,IAAI,CAACF,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAACc,GAAG,CAAC7G,QAAQ,CAAC5B,OAAO,CAACmI,IAAI,CAACF,CAAC,CAAC,EAAEpG,OAAO,CAAC;gBAClH;gBACA,IAAI7B,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACgH,OAAO,GAAGtI,OAAO,CAACsI,OAAO;gBACpC,IAAItI,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACiH,IAAI,GAAGvI,OAAO,CAACuI,IAAI;gBAC9B,IAAIvI,OAAO,CAACwI,WAAW,IAAI,IAAI,IAAIxI,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAACkH,WAAW,GAAGxI,OAAO,CAACwI,WAAW;gBAC5C,IAAIxI,OAAO,CAACyJ,WAAW,IAAI,IAAI,IAAIzJ,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAACmI,WAAW,GAAG3K,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAAC9H,QAAQ,CAAC5B,OAAO,CAACyJ,WAAW,EAAE5H,OAAO,CAAC;gBAC3H,IAAI7B,OAAO,CAACwJ,SAAS,IAAIxJ,OAAO,CAACwJ,SAAS,CAAChK,MAAM,EAAE;kBAC/C8B,MAAM,CAACkI,SAAS,GAAG,EAAE;kBACrB,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACwJ,SAAS,CAAChK,MAAM,EAAE,EAAEyI,CAAC,EAC7C3G,MAAM,CAACkI,SAAS,CAACvB,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAAC9H,QAAQ,CAAC5B,OAAO,CAACwJ,SAAS,CAACvB,CAAC,CAAC,EAAEpG,OAAO,CAAC;gBACjI;gBACA,OAAOP,MAAM;cACjB,CAAC;cASDiI,QAAQ,CAAC9J,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;gBAC1C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;cACxE,CAAC;cAED,OAAOgH,QAAQ;YACnB,CAAC,EAAG;YAEJ,OAAON,QAAQ;UACnB,CAAC,EAAG;UAEJtB,OAAO,CAAC+B,QAAQ,GAAI,YAAW;YAmB3B,SAASA,QAAQ,CAACtK,UAAU,EAAE;cAC1B,IAAI,CAACuK,KAAK,GAAG,EAAE;cACf,IAAIvK,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;YACnD;YAQAmK,QAAQ,CAACjK,SAAS,CAACqH,QAAQ,GAAG,IAAI;YAQlC4C,QAAQ,CAACjK,SAAS,CAACkK,KAAK,GAAG/K,KAAK,CAAC8I,UAAU;YAQ3CgC,QAAQ,CAACjK,SAAS,CAACkJ,EAAE,GAAG,EAAE;YAU1Be,QAAQ,CAAC5J,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;cAC1C,OAAO,IAAIsK,QAAQ,CAACtK,UAAU,CAAC;YACnC,CAAC;YAWDsK,QAAQ,CAAC3J,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;cAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;cAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAC1H,IAAIP,OAAO,CAAC2J,KAAK,IAAI,IAAI,IAAI3J,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAAE,EAAED,CAAC,EACzCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACE,SAAS,CAAC7J,MAAM,CAACC,OAAO,CAAC2J,KAAK,CAACpK,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAChK,IAAIP,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;cAC/D,OAAO1I,MAAM;YACjB,CAAC;YAWDyJ,QAAQ,CAACpJ,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;cACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;YAChD,CAAC;YAaDmJ,QAAQ,CAAClJ,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;cAC9C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;cACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;gBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,EAAE;cAC9I,OAAOjJ,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;gBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;gBACzB,QAAQW,GAAG,KAAK,CAAC;kBACjB,KAAK,CAAC;oBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBACtF;kBACJ,KAAK,CAAC;oBACF,IAAI,EAAEH,OAAO,CAAC2J,KAAK,IAAI3J,OAAO,CAAC2J,KAAK,CAACnK,MAAM,CAAC,EACxCQ,OAAO,CAAC2J,KAAK,GAAG,EAAE;oBACtB3J,OAAO,CAAC2J,KAAK,CAAC9B,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACE,SAAS,CAACpJ,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;oBACzH;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;oBAC5B;kBACJ;oBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;oBACxB;gBAAM;cAEd;cACA,OAAOd,OAAO;YAClB,CAAC;YAYD0J,QAAQ,CAAC1I,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;cACxD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;cAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;YAC/C,CAAC;YAUDuJ,QAAQ,CAACzI,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;cACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;cAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;gBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;gBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;cAClC;cACA,IAAIrG,OAAO,CAAC2J,KAAK,IAAI,IAAI,IAAI3J,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;gBAC1D,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAAC2J,KAAK,CAAC,EAC7B,OAAO,uBAAuB;gBAClC,KAAK,IAAIpK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC3C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACE,SAAS,CAAC3I,MAAM,CAACjB,OAAO,CAAC2J,KAAK,CAACpK,CAAC,CAAC,CAAC;kBAC1G,IAAI8G,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;gBAC/B;cACJ;cACA,IAAIrG,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;cACpC,OAAO,IAAI;YACf,CAAC;YAUDe,QAAQ,CAACrI,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;cAC9C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,EAC7E,OAAOpI,MAAM;cACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,EAAE;cAC/E,IAAIpI,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;gBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,kFAAkF,CAAC;gBACvGvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;cACtF;cACA,IAAIxF,MAAM,CAACqI,KAAK,EAAE;gBACd,IAAI,CAAC7B,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACqI,KAAK,CAAC,EAC5B,MAAMpD,SAAS,CAAC,8EAA8E,CAAC;gBACnGvG,OAAO,CAAC2J,KAAK,GAAG,EAAE;gBAClB,KAAK,IAAIpK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACqI,KAAK,CAACnK,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC1C,IAAI,OAAO+B,MAAM,CAACqI,KAAK,CAACpK,CAAC,CAAC,KAAK,QAAQ,EACnC,MAAMgH,SAAS,CAAC,+EAA+E,CAAC;kBACpGvG,OAAO,CAAC2J,KAAK,CAACpK,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACE,SAAS,CAACvI,UAAU,CAACC,MAAM,CAACqI,KAAK,CAACpK,CAAC,CAAC,CAAC;gBACxH;cACJ;cACA,IAAI+B,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;cAClC,OAAO3I,OAAO;YAClB,CAAC;YAWD0J,QAAQ,CAAC9H,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;cACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;cAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;cACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAACqI,KAAK,GAAG,EAAE;cACrB,IAAI9H,OAAO,CAACC,QAAQ,EAAE;gBAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;gBACtBxF,MAAM,CAACqH,EAAE,GAAG,EAAE;cAClB;cACA,IAAI3I,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;cAC7F,IAAI7B,OAAO,CAAC2J,KAAK,IAAI3J,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAAE;gBACvC8B,MAAM,CAACqI,KAAK,GAAG,EAAE;gBACjB,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAAE,EAAEyI,CAAC,EACzC3G,MAAM,CAACqI,KAAK,CAAC1B,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACE,SAAS,CAAChI,QAAQ,CAAC5B,OAAO,CAAC2J,KAAK,CAAC1B,CAAC,CAAC,EAAEpG,OAAO,CAAC;cACnI;cACA,IAAI7B,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;cAC1B,OAAOrH,MAAM;YACjB,CAAC;YASDoI,QAAQ,CAACjK,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;cAC1C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;YACxE,CAAC;YAEDmH,QAAQ,CAACE,SAAS,GAAI,YAAW;cAkB7B,SAASA,SAAS,CAACxK,UAAU,EAAE;gBAC3B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;cACnD;cAQAqK,SAAS,CAACnK,SAAS,CAACqH,QAAQ,GAAG,IAAI;cAQnC8C,SAAS,CAACnK,SAAS,CAACyJ,KAAK,GAAG,EAAE;cAU9BU,SAAS,CAAC9J,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;gBAC3C,OAAO,IAAIwK,SAAS,CAACxK,UAAU,CAAC;cACpC,CAAC;cAWDwK,SAAS,CAAC7J,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;gBAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;gBAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBAC1H,IAAIP,OAAO,CAACkJ,KAAK,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACkJ,KAAK,CAAC;gBAClE,OAAOjJ,MAAM;cACjB,CAAC;cAWD2J,SAAS,CAACtJ,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;gBAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;cAChD,CAAC;cAaDqJ,SAAS,CAACpJ,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;gBAC/C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;gBACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;kBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACE,SAAS,EAAE;gBACxJ,OAAOnJ,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;kBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;kBACzB,QAAQW,GAAG,KAAK,CAAC;oBACjB,KAAK,CAAC;sBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;sBACtF;oBACJ,KAAK,CAAC;sBACFH,OAAO,CAACkJ,KAAK,GAAGzI,MAAM,CAACwF,MAAM,EAAE;sBAC/B;oBACJ;sBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;sBACxB;kBAAM;gBAEd;gBACA,OAAOd,OAAO;cAClB,CAAC;cAYD4J,SAAS,CAAC5I,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;gBACzD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;gBAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;cAC/C,CAAC;cAUDyJ,SAAS,CAAC3I,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;gBACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;gBAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;kBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;kBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;gBAClC;gBACA,IAAIrG,OAAO,CAACkJ,KAAK,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACkJ,KAAK,CAAC,EAC9B,OAAO,wBAAwB;gBACvC,OAAO,IAAI;cACf,CAAC;cAUDU,SAAS,CAACvI,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;gBAC/C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACE,SAAS,EACvF,OAAOtI,MAAM;gBACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACE,SAAS,EAAE;gBACzF,IAAItI,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;kBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,4FAA4F,CAAC;kBACjHvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;gBACtF;gBACA,IAAIxF,MAAM,CAAC4H,KAAK,IAAI,IAAI,EACpBlJ,OAAO,CAACkJ,KAAK,GAAGjH,MAAM,CAACX,MAAM,CAAC4H,KAAK,CAAC;gBACxC,OAAOlJ,OAAO;cAClB,CAAC;cAWD4J,SAAS,CAAChI,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;gBACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;gBACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;kBAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;kBACtBxF,MAAM,CAAC4H,KAAK,GAAG,EAAE;gBACrB;gBACA,IAAIlJ,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;gBAC7F,IAAI7B,OAAO,CAACkJ,KAAK,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAAC4H,KAAK,GAAGlJ,OAAO,CAACkJ,KAAK;gBAChC,OAAO5H,MAAM;cACjB,CAAC;cASDsI,SAAS,CAACnK,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;gBAC3C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;cACxE,CAAC;cAED,OAAOqH,SAAS;YACpB,CAAC,EAAG;YAEJ,OAAOF,QAAQ;UACnB,CAAC,EAAG;UAEJ/B,OAAO,CAAC0B,IAAI,GAAI,YAAW;YAsBvB,SAASA,IAAI,CAACjK,UAAU,EAAE;cACtB,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;YACnD;YAQA8J,IAAI,CAAC5J,SAAS,CAACqH,QAAQ,GAAG,IAAI;YAQ9BuC,IAAI,CAAC5J,SAAS,CAAC6I,OAAO,GAAG,EAAE;YAQ3Be,IAAI,CAAC5J,SAAS,CAACyI,IAAI,GAAG,EAAE;YAQxBmB,IAAI,CAAC5J,SAAS,CAACoK,SAAS,GAAG,IAAI;YAQ/BR,IAAI,CAAC5J,SAAS,CAACqK,SAAS,GAAG,IAAI;YAQ/BT,IAAI,CAAC5J,SAAS,CAACkJ,EAAE,GAAG,EAAE;YAGtB,IAAIvE,YAAY;YAQhB9E,MAAM,CAAC+E,cAAc,CAACgF,IAAI,CAAC5J,SAAS,EAAE,UAAU,EAAE;cAC9C6E,GAAG,EAAE1F,KAAK,CAAC2F,WAAW,CAACH,YAAY,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;cACjEI,GAAG,EAAE5F,KAAK,CAAC6F,WAAW,CAACL,YAAY;YACvC,CAAC,CAAC;YAUFiF,IAAI,CAACvJ,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;cACtC,OAAO,IAAIiK,IAAI,CAACjK,UAAU,CAAC;YAC/B,CAAC;YAWDiK,IAAI,CAACtJ,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;cAC3C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;cAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cAC1H,IAAIP,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsI,OAAO,CAAC;cACpE,IAAItI,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACkI,IAAI,CAAC;cACjE,IAAIlI,OAAO,CAAC6J,SAAS,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACU,SAAS,CAAChK,MAAM,CAACC,OAAO,CAAC6J,SAAS,EAAE5J,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cACzJ,IAAIP,OAAO,CAAC8J,SAAS,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACW,SAAS,CAACjK,MAAM,CAACC,OAAO,CAAC8J,SAAS,EAAE7J,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cACzJ,IAAIP,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;cAC/D,OAAO1I,MAAM;YACjB,CAAC;YAWDoJ,IAAI,CAAC/I,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;cAC7D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;YAChD,CAAC;YAaD8I,IAAI,CAAC7I,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;cAC1C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;cACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;gBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,EAAE;cAC1I,OAAO5I,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;gBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;gBACzB,QAAQW,GAAG,KAAK,CAAC;kBACjB,KAAK,CAAC;oBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBACtF;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAACsI,OAAO,GAAG7H,MAAM,CAACwF,MAAM,EAAE;oBACjC;kBACJ,KAAK,CAAC;oBACFjG,OAAO,CAACkI,IAAI,GAAGzH,MAAM,CAACwF,MAAM,EAAE;oBAC9B;kBACJ,KAAK,CAAC;oBACFjG,OAAO,CAAC6J,SAAS,GAAG/K,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACU,SAAS,CAACvJ,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBACrH;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAAC8J,SAAS,GAAGhL,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACW,SAAS,CAACxJ,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;oBACrH;kBACJ,KAAK,CAAC;oBACFH,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;oBAC5B;kBACJ;oBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;oBACxB;gBAAM;cAEd;cACA,OAAOd,OAAO;YAClB,CAAC;YAYDqJ,IAAI,CAACrI,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;cACpD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;cAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;YAC/C,CAAC;YAUDkJ,IAAI,CAACpI,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;cACnC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;cAC5B,IAAIZ,UAAU,GAAG,CAAC,CAAC;cACnB,IAAIY,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;gBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;gBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;cAClC;cACA,IAAIrG,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsI,OAAO,CAAC,EAChC,OAAO,0BAA0B;cACzC,IAAItI,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACkI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;cACtC,IAAIlI,OAAO,CAAC6J,SAAS,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;gBAClEd,UAAU,CAAC6K,QAAQ,GAAG,CAAC;gBACvB;kBACI,IAAI5D,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACU,SAAS,CAAC9I,MAAM,CAACjB,OAAO,CAAC6J,SAAS,CAAC;kBACvG,IAAIxD,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;gBACnC;cACJ;cACA,IAAIrG,OAAO,CAAC8J,SAAS,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;gBAClE,IAAId,UAAU,CAAC6K,QAAQ,KAAK,CAAC,EACzB,OAAO,2BAA2B;gBACtC7K,UAAU,CAAC6K,QAAQ,GAAG,CAAC;gBACvB;kBACI,IAAI5D,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACW,SAAS,CAAC/I,MAAM,CAACjB,OAAO,CAAC8J,SAAS,CAAC;kBACvG,IAAIzD,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;gBACnC;cACJ;cACA,IAAIrG,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;cACpC,OAAO,IAAI;YACf,CAAC;YAUDU,IAAI,CAAChI,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;cAC1C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,EACzE,OAAO/H,MAAM;cACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,EAAE;cAC3E,IAAI/H,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;gBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,8EAA8E,CAAC;gBACnGvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;cACtF;cACA,IAAIxF,MAAM,CAACgH,OAAO,IAAI,IAAI,EACtBtI,OAAO,CAACsI,OAAO,GAAGrG,MAAM,CAACX,MAAM,CAACgH,OAAO,CAAC;cAC5C,IAAIhH,MAAM,CAAC4G,IAAI,IAAI,IAAI,EACnBlI,OAAO,CAACkI,IAAI,GAAGjG,MAAM,CAACX,MAAM,CAAC4G,IAAI,CAAC;cACtC,IAAI5G,MAAM,CAACuI,SAAS,IAAI,IAAI,EAAE;gBAC1B,IAAI,OAAOvI,MAAM,CAACuI,SAAS,KAAK,QAAQ,EACpC,MAAMtD,SAAS,CAAC,+EAA+E,CAAC;gBACpGvG,OAAO,CAAC6J,SAAS,GAAG/K,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACU,SAAS,CAAC1I,UAAU,CAACC,MAAM,CAACuI,SAAS,CAAC;cACtH;cACA,IAAIvI,MAAM,CAACwI,SAAS,IAAI,IAAI,EAAE;gBAC1B,IAAI,OAAOxI,MAAM,CAACwI,SAAS,KAAK,QAAQ,EACpC,MAAMvD,SAAS,CAAC,+EAA+E,CAAC;gBACpGvG,OAAO,CAAC8J,SAAS,GAAGhL,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACW,SAAS,CAAC3I,UAAU,CAACC,MAAM,CAACwI,SAAS,CAAC;cACtH;cACA,IAAIxI,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;cAClC,OAAO3I,OAAO;YAClB,CAAC;YAWDqJ,IAAI,CAACzH,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;cAChD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;cAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;cACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;gBAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;gBACtBxF,MAAM,CAACgH,OAAO,GAAG,EAAE;gBACnBhH,MAAM,CAAC4G,IAAI,GAAG,EAAE;gBAChB5G,MAAM,CAACqH,EAAE,GAAG,EAAE;cAClB;cACA,IAAI3I,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;cAC7F,IAAI7B,OAAO,CAACsI,OAAO,IAAI,IAAI,IAAItI,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACgH,OAAO,GAAGtI,OAAO,CAACsI,OAAO;cACpC,IAAItI,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAAC4G,IAAI,GAAGlI,OAAO,CAACkI,IAAI;cAC9B,IAAIlI,OAAO,CAAC6J,SAAS,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;gBAClEoB,MAAM,CAACuI,SAAS,GAAG/K,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACU,SAAS,CAACnI,QAAQ,CAAC5B,OAAO,CAAC6J,SAAS,EAAEhI,OAAO,CAAC;gBACzH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAAC2I,QAAQ,GAAG,WAAW;cACrC;cACA,IAAIjK,OAAO,CAAC8J,SAAS,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;gBAClEoB,MAAM,CAACwI,SAAS,GAAGhL,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACW,SAAS,CAACpI,QAAQ,CAAC5B,OAAO,CAAC8J,SAAS,EAAEjI,OAAO,CAAC;gBACzH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAAC2I,QAAQ,GAAG,WAAW;cACrC;cACA,IAAIjK,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;cAC1B,OAAOrH,MAAM;YACjB,CAAC;YASD+H,IAAI,CAAC5J,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;cACtC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;YACxE,CAAC;YAED8G,IAAI,CAACW,SAAS,GAAI,YAAW;cAkBzB,SAASA,SAAS,CAAC5K,UAAU,EAAE;gBAC3B,IAAI,CAAC8K,IAAI,GAAG,EAAE;gBACd,IAAI9K,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;cACnD;cAQAyK,SAAS,CAACvK,SAAS,CAACqH,QAAQ,GAAG,IAAI;cAQnCkD,SAAS,CAACvK,SAAS,CAACyK,IAAI,GAAGtL,KAAK,CAAC8I,UAAU;cAU3CsC,SAAS,CAAClK,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;gBAC3C,OAAO,IAAI4K,SAAS,CAAC5K,UAAU,CAAC;cACpC,CAAC;cAWD4K,SAAS,CAACjK,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;gBAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;gBAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBAC1H,IAAIP,OAAO,CAACkK,IAAI,IAAI,IAAI,IAAIlK,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAC3C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAAE,EAAED,CAAC,EACxCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAAC3J,MAAM,CAACC,OAAO,CAACkK,IAAI,CAAC3K,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBACrJ,OAAON,MAAM;cACjB,CAAC;cAWD+J,SAAS,CAAC1J,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;gBAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;cAChD,CAAC;cAaDyJ,SAAS,CAACxJ,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;gBAC/C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;gBACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;kBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACW,SAAS,EAAE;gBACpJ,OAAOvJ,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;kBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;kBACzB,QAAQW,GAAG,KAAK,CAAC;oBACjB,KAAK,CAAC;sBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;sBACtF;oBACJ,KAAK,CAAC;sBACF,IAAI,EAAEH,OAAO,CAACkK,IAAI,IAAIlK,OAAO,CAACkK,IAAI,CAAC1K,MAAM,CAAC,EACtCQ,OAAO,CAACkK,IAAI,GAAG,EAAE;sBACrBlK,OAAO,CAACkK,IAAI,CAACrC,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAAClJ,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;sBAC9G;oBACJ;sBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;sBACxB;kBAAM;gBAEd;gBACA,OAAOd,OAAO;cAClB,CAAC;cAYDgK,SAAS,CAAChJ,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;gBACzD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;gBAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;cAC/C,CAAC;cAUD6J,SAAS,CAAC/I,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;gBACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;gBAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;kBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;kBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;gBAClC;gBACA,IAAIrG,OAAO,CAACkK,IAAI,IAAI,IAAI,IAAIlK,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;kBACxD,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACkK,IAAI,CAAC,EAC5B,OAAO,sBAAsB;kBACjC,KAAK,IAAI3K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAAE,EAAED,CAAC,EAAE;oBAC1C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACzI,MAAM,CAACjB,OAAO,CAACkK,IAAI,CAAC3K,CAAC,CAAC,CAAC;oBAC/F,IAAI8G,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;kBAC9B;gBACJ;gBACA,OAAO,IAAI;cACf,CAAC;cAUD2D,SAAS,CAAC3I,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;gBAC/C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACW,SAAS,EACnF,OAAO1I,MAAM;gBACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACW,SAAS,EAAE;gBACrF,IAAI1I,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;kBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,wFAAwF,CAAC;kBAC7GvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;gBACtF;gBACA,IAAIxF,MAAM,CAAC4I,IAAI,EAAE;kBACb,IAAI,CAACpC,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC4I,IAAI,CAAC,EAC3B,MAAM3D,SAAS,CAAC,mFAAmF,CAAC;kBACxGvG,OAAO,CAACkK,IAAI,GAAG,EAAE;kBACjB,KAAK,IAAI3K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC4I,IAAI,CAAC1K,MAAM,EAAE,EAAED,CAAC,EAAE;oBACzC,IAAI,OAAO+B,MAAM,CAAC4I,IAAI,CAAC3K,CAAC,CAAC,KAAK,QAAQ,EAClC,MAAMgH,SAAS,CAAC,oFAAoF,CAAC;oBACzGvG,OAAO,CAACkK,IAAI,CAAC3K,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAACrI,UAAU,CAACC,MAAM,CAAC4I,IAAI,CAAC3K,CAAC,CAAC,CAAC;kBAC5G;gBACJ;gBACA,OAAOS,OAAO;cAClB,CAAC;cAWDgK,SAAS,CAACpI,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;gBACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;gBACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC4I,IAAI,GAAG,EAAE;gBACpB,IAAIrI,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;gBAC1B,IAAI9G,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;gBAC7F,IAAI7B,OAAO,CAACkK,IAAI,IAAIlK,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAAE;kBACrC8B,MAAM,CAAC4I,IAAI,GAAG,EAAE;kBAChB,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAAE,EAAEyI,CAAC,EACxC3G,MAAM,CAAC4I,IAAI,CAACjC,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC+B,QAAQ,CAAC9H,QAAQ,CAAC5B,OAAO,CAACkK,IAAI,CAACjC,CAAC,CAAC,EAAEpG,OAAO,CAAC;gBACvH;gBACA,OAAOP,MAAM;cACjB,CAAC;cASD0I,SAAS,CAACvK,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;gBAC3C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;cACxE,CAAC;cAED,OAAOyH,SAAS;YACpB,CAAC,EAAG;YAEJX,IAAI,CAACU,SAAS,GAAI,YAAW;cAoBzB,SAASA,SAAS,CAAC3K,UAAU,EAAE;gBAC3B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;cACnD;cAQAwK,SAAS,CAACtK,SAAS,CAACqH,QAAQ,GAAG,IAAI;cAQnCiD,SAAS,CAACtK,SAAS,CAACwH,WAAW,GAAG,EAAE;cAQpC8C,SAAS,CAACtK,SAAS,CAAC0K,OAAO,GAAG,EAAE;cAQhCJ,SAAS,CAACtK,SAAS,CAAC2K,SAAS,GAAG,EAAE;cAUlCL,SAAS,CAACjK,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;gBAC3C,OAAO,IAAI2K,SAAS,CAAC3K,UAAU,CAAC;cACpC,CAAC;cAWD2K,SAAS,CAAChK,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;gBAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;gBAC7B,IAAIE,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC1G,MAAM,CAACC,OAAO,CAAC8G,QAAQ,EAAE7G,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;gBAC1H,IAAIP,OAAO,CAACiH,WAAW,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACiH,WAAW,CAAC;gBACxE,IAAIjH,OAAO,CAACmK,OAAO,IAAI,IAAI,IAAInK,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACmK,OAAO,CAAC;gBACpE,IAAInK,OAAO,CAACoK,SAAS,IAAI,IAAI,IAAIpK,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACoK,SAAS,CAAC;gBACtE,OAAOnK,MAAM;cACjB,CAAC;cAWD8J,SAAS,CAACzJ,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;gBAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;cAChD,CAAC;cAaDwJ,SAAS,CAACvJ,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;gBAC/C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;gBACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;kBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACU,SAAS,EAAE;gBACpJ,OAAOtJ,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;kBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;kBACzB,QAAQW,GAAG,KAAK,CAAC;oBACjB,KAAK,CAAC;sBACFd,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACjG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;sBACtF;oBACJ,KAAK,CAAC;sBACFH,OAAO,CAACiH,WAAW,GAAGxG,MAAM,CAACwF,MAAM,EAAE;sBACrC;oBACJ,KAAK,CAAC;sBACFjG,OAAO,CAACmK,OAAO,GAAG1J,MAAM,CAACwF,MAAM,EAAE;sBACjC;oBACJ,KAAK,CAAC;sBACFjG,OAAO,CAACoK,SAAS,GAAG3J,MAAM,CAACwF,MAAM,EAAE;sBACnC;oBACJ;sBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;sBACxB;kBAAM;gBAEd;gBACA,OAAOd,OAAO;cAClB,CAAC;cAYD+J,SAAS,CAAC/I,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;gBACzD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;gBAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;cAC/C,CAAC;cAUD4J,SAAS,CAAC9I,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;gBACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;gBAC5B,IAAIA,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;kBAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACxF,MAAM,CAACjB,OAAO,CAAC8G,QAAQ,CAAC;kBACxE,IAAIT,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;gBAClC;gBACA,IAAIrG,OAAO,CAACiH,WAAW,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACiH,WAAW,CAAC,EACpC,OAAO,8BAA8B;gBAC7C,IAAIjH,OAAO,CAACmK,OAAO,IAAI,IAAI,IAAInK,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACmK,OAAO,CAAC,EAChC,OAAO,0BAA0B;gBACzC,IAAInK,OAAO,CAACoK,SAAS,IAAI,IAAI,IAAIpK,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACoK,SAAS,CAAC,EAClC,OAAO,4BAA4B;gBAC3C,OAAO,IAAI;cACf,CAAC;cAUDL,SAAS,CAAC1I,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;gBAC/C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACU,SAAS,EACnF,OAAOzI,MAAM;gBACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0F,eAAe,CAAC+C,OAAO,CAAC0B,IAAI,CAACU,SAAS,EAAE;gBACrF,IAAIzI,MAAM,CAACwF,QAAQ,IAAI,IAAI,EAAE;kBACzB,IAAI,OAAOxF,MAAM,CAACwF,QAAQ,KAAK,QAAQ,EACnC,MAAMP,SAAS,CAAC,wFAAwF,CAAC;kBAC7GvG,OAAO,CAAC8G,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAACpF,UAAU,CAACC,MAAM,CAACwF,QAAQ,CAAC;gBACtF;gBACA,IAAIxF,MAAM,CAAC2F,WAAW,IAAI,IAAI,EAC1BjH,OAAO,CAACiH,WAAW,GAAGhF,MAAM,CAACX,MAAM,CAAC2F,WAAW,CAAC;gBACpD,IAAI3F,MAAM,CAAC6I,OAAO,IAAI,IAAI,EACtBnK,OAAO,CAACmK,OAAO,GAAGlI,MAAM,CAACX,MAAM,CAAC6I,OAAO,CAAC;gBAC5C,IAAI7I,MAAM,CAAC8I,SAAS,IAAI,IAAI,EACxBpK,OAAO,CAACoK,SAAS,GAAGnI,MAAM,CAACX,MAAM,CAAC8I,SAAS,CAAC;gBAChD,OAAOpK,OAAO;cAClB,CAAC;cAWD+J,SAAS,CAACnI,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;gBACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;gBACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;kBAClBR,MAAM,CAACwF,QAAQ,GAAG,IAAI;kBACtBxF,MAAM,CAAC2F,WAAW,GAAG,EAAE;kBACvB3F,MAAM,CAAC6I,OAAO,GAAG,EAAE;kBACnB7I,MAAM,CAAC8I,SAAS,GAAG,EAAE;gBACzB;gBACA,IAAIpK,OAAO,CAAC8G,QAAQ,IAAI,IAAI,IAAI9G,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACwF,QAAQ,GAAGhI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuH,QAAQ,CAAC7E,QAAQ,CAAC5B,OAAO,CAAC8G,QAAQ,EAAEjF,OAAO,CAAC;gBAC7F,IAAI7B,OAAO,CAACiH,WAAW,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAAC2F,WAAW,GAAGjH,OAAO,CAACiH,WAAW;gBAC5C,IAAIjH,OAAO,CAACmK,OAAO,IAAI,IAAI,IAAInK,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAAC6I,OAAO,GAAGnK,OAAO,CAACmK,OAAO;gBACpC,IAAInK,OAAO,CAACoK,SAAS,IAAI,IAAI,IAAIpK,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEoB,MAAM,CAAC8I,SAAS,GAAGpK,OAAO,CAACoK,SAAS;gBACxC,OAAO9I,MAAM;cACjB,CAAC;cASDyI,SAAS,CAACtK,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;gBAC3C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;cACxE,CAAC;cAED,OAAOwH,SAAS;YACpB,CAAC,EAAG;YAEJ,OAAOV,IAAI;UACf,CAAC,EAAG;UAEJ,OAAO1B,OAAO;QAClB,CAAC,EAAG;QAEJ,OAAO/C,eAAe;MAC1B,CAAC,EAAG;MAEJ1F,QAAQ,CAAC4F,UAAU,GAAI,YAAW;QA6B9B,SAASA,UAAU,CAAC1F,UAAU,EAAE;UAC5B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAuF,UAAU,CAACrF,SAAS,CAACiD,MAAM,GAAG,IAAI;QAQlCoC,UAAU,CAACrF,SAAS,CAAC6H,IAAI,GAAG,EAAE;QAQ9BxC,UAAU,CAACrF,SAAS,CAAC8H,KAAK,GAAG,IAAI;QAQjCzC,UAAU,CAACrF,SAAS,CAAC4K,UAAU,GAAG,EAAE;QAQpCvF,UAAU,CAACrF,SAAS,CAAC6K,iBAAiB,GAAG,EAAE;QAU3CxF,UAAU,CAAChF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC5C,OAAO,IAAI0F,UAAU,CAAC1F,UAAU,CAAC;QACrC,CAAC;QAWD0F,UAAU,CAAC/E,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACjD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC0C,MAAM,IAAI,IAAI,IAAI1C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC7G,MAAM,CAACC,OAAO,CAAC0C,MAAM,EAAEzC,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC/H,IAAIP,OAAO,CAACsH,IAAI,IAAI,IAAI,IAAItH,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsH,IAAI,CAAC;UACjE,IAAItH,OAAO,CAACuH,KAAK,IAAI,IAAI,IAAIvH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAAChH,MAAM,CAACC,OAAO,CAACuH,KAAK,EAAEtH,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpH,IAAIP,OAAO,CAACqK,UAAU,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACqK,UAAU,CAAC;UACvE,IAAIrK,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsK,iBAAiB,CAAC;UAC9E,OAAOrK,MAAM;QACjB,CAAC;QAWD6E,UAAU,CAACxE,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACnE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDuE,UAAU,CAACtE,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAChD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4F,UAAU,EAAE;UACxH,OAAOrE,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC0C,MAAM,GAAG5D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACpG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC3F;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACsH,IAAI,GAAG7G,MAAM,CAACwF,MAAM,EAAE;gBAC9B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACuH,KAAK,GAAGzI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAACvG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAChF;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACqK,UAAU,GAAG5J,MAAM,CAACwF,MAAM,EAAE;gBACpC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACsK,iBAAiB,GAAG7J,MAAM,CAACwF,MAAM,EAAE;gBAC3C;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD8E,UAAU,CAAC9D,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC1D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD2E,UAAU,CAAC7D,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACzC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC0C,MAAM,IAAI,IAAI,IAAI1C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC5D,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC3F,MAAM,CAACjB,OAAO,CAAC0C,MAAM,CAAC;YAC7E,IAAI2D,KAAK,EACL,OAAO,SAAS,GAAGA,KAAK;UAChC;UACA,IAAIrG,OAAO,CAACsH,IAAI,IAAI,IAAI,IAAItH,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsH,IAAI,CAAC,EAC7B,OAAO,uBAAuB;UACtC,IAAItH,OAAO,CAACuH,KAAK,IAAI,IAAI,IAAIvH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;YAC1D,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAAC9F,MAAM,CAACjB,OAAO,CAACuH,KAAK,CAAC;YAClE,IAAIlB,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;UAC/B;UACA,IAAIrG,OAAO,CAACqK,UAAU,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACqK,UAAU,CAAC,EACnC,OAAO,6BAA6B;UAC5C,IAAIrK,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChF,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsK,iBAAiB,CAAC,EAC1C,OAAO,oCAAoC;UACnD,OAAO,IAAI;QACf,CAAC;QAUDxF,UAAU,CAACzD,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAChD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4F,UAAU,EACvD,OAAOxD,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4F,UAAU,EAAE;UACzD,IAAIxD,MAAM,CAACoB,MAAM,IAAI,IAAI,EAAE;YACvB,IAAI,OAAOpB,MAAM,CAACoB,MAAM,KAAK,QAAQ,EACjC,MAAM6D,SAAS,CAAC,0DAA0D,CAAC;YAC/EvG,OAAO,CAAC0C,MAAM,GAAG5D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACvF,UAAU,CAACC,MAAM,CAACoB,MAAM,CAAC;UACzF;UACA,IAAIpB,MAAM,CAACgG,IAAI,IAAI,IAAI,EACnBtH,OAAO,CAACsH,IAAI,GAAGrF,MAAM,CAACX,MAAM,CAACgG,IAAI,CAAC;UACtC,IAAIhG,MAAM,CAACiG,KAAK,IAAI,IAAI,EAAE;YACtB,IAAI,OAAOjG,MAAM,CAACiG,KAAK,KAAK,QAAQ,EAChC,MAAMhB,SAAS,CAAC,yDAAyD,CAAC;YAC9EvG,OAAO,CAACuH,KAAK,GAAGzI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAAC1F,UAAU,CAACC,MAAM,CAACiG,KAAK,CAAC;UAC7E;UACA,IAAIjG,MAAM,CAAC+I,UAAU,IAAI,IAAI,EACzBrK,OAAO,CAACqK,UAAU,GAAGpI,MAAM,CAACX,MAAM,CAAC+I,UAAU,CAAC;UAClD,IAAI/I,MAAM,CAACgJ,iBAAiB,IAAI,IAAI,EAChCtK,OAAO,CAACsK,iBAAiB,GAAGrI,MAAM,CAACX,MAAM,CAACgJ,iBAAiB,CAAC;UAChE,OAAOtK,OAAO;QAClB,CAAC;QAWD8E,UAAU,CAAClD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACtD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACoB,MAAM,GAAG,IAAI;YACpBpB,MAAM,CAACgG,IAAI,GAAG,EAAE;YAChBhG,MAAM,CAACiG,KAAK,GAAG,IAAI;YACnBjG,MAAM,CAAC+I,UAAU,GAAG,EAAE;YACtB/I,MAAM,CAACgJ,iBAAiB,GAAG,EAAE;UACjC;UACA,IAAItK,OAAO,CAAC0C,MAAM,IAAI,IAAI,IAAI1C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DoB,MAAM,CAACoB,MAAM,GAAG5D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAChF,QAAQ,CAAC5B,OAAO,CAAC0C,MAAM,EAAEb,OAAO,CAAC;UAChG,IAAI7B,OAAO,CAACsH,IAAI,IAAI,IAAI,IAAItH,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACgG,IAAI,GAAGtH,OAAO,CAACsH,IAAI;UAC9B,IAAItH,OAAO,CAACuH,KAAK,IAAI,IAAI,IAAIvH,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAACiG,KAAK,GAAGzI,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6H,KAAK,CAACnF,QAAQ,CAAC5B,OAAO,CAACuH,KAAK,EAAE1F,OAAO,CAAC;UACpF,IAAI7B,OAAO,CAACqK,UAAU,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAAC+I,UAAU,GAAGrK,OAAO,CAACqK,UAAU;UAC1C,IAAIrK,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFoB,MAAM,CAACgJ,iBAAiB,GAAGtK,OAAO,CAACsK,iBAAiB;UACxD,OAAOhJ,MAAM;QACjB,CAAC;QASDwD,UAAU,CAACrF,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC5C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOuC,UAAU;MACrB,CAAC,EAAG;MAEJ5F,QAAQ,CAAC2F,MAAM,GAAI,YAAW;QAmC1B,SAASA,MAAM,CAACzF,UAAU,EAAE;UACxB,IAAI,CAACgK,KAAK,GAAG,EAAE;UACf,IAAI,CAACjB,IAAI,GAAG,EAAE;UACd,IAAI,CAACoC,UAAU,GAAG,EAAE;UACpB,IAAInL,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAUAsF,MAAM,CAACpF,SAAS,CAACkJ,EAAE,GAAG,EAAE;QAQxB9D,MAAM,CAACpF,SAAS,CAACoH,GAAG,GAAG,EAAE;QAQzBhC,MAAM,CAACpF,SAAS,CAAC8I,IAAI,GAAG,EAAE;QAQ1B1D,MAAM,CAACpF,SAAS,CAAC4I,QAAQ,GAAG,EAAE;QAQ9BxD,MAAM,CAACpF,SAAS,CAAC2J,KAAK,GAAGxK,KAAK,CAAC8I,UAAU;QASzC7C,MAAM,CAACpF,SAAS,CAAC0I,IAAI,GAAGvJ,KAAK,CAAC8I,UAAU;QAUxC7C,MAAM,CAACpF,SAAS,CAAC8K,UAAU,GAAG3L,KAAK,CAAC8I,UAAU;QAU9C7C,MAAM,CAAC/E,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACxC,OAAO,IAAIyF,MAAM,CAACzF,UAAU,CAAC;QACjC,CAAC;QAWDyF,MAAM,CAAC9E,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC7C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;UAC/D,IAAI3I,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC6G,GAAG,CAAC;UAChE,IAAI7G,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuI,IAAI,CAAC;UACjE,IAAIvI,OAAO,CAACqI,QAAQ,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACqI,QAAQ,CAAC;UACrE,IAAIrI,OAAO,CAACoJ,KAAK,IAAI,IAAI,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EACzCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC2F,UAAU,CAACzK,MAAM,CAACC,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACvI,IAAIP,OAAO,CAACmI,IAAI,IAAI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAC3C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EACxCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC4F,SAAS,CAAC1K,MAAM,CAACC,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACrI,IAAIP,OAAO,CAACuK,UAAU,IAAI,IAAI,IAAIvK,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EACvD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EAAE,EAAED,CAAC,EAC9CU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuK,UAAU,CAAChL,CAAC,CAAC,CAAC;UAC9E,OAAOU,MAAM;QACjB,CAAC;QAWD4E,MAAM,CAACvE,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC/D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDsE,MAAM,CAACrE,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC5C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,EAAE;UACpH,OAAOpE,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;gBAC5B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC6G,GAAG,GAAGpG,MAAM,CAACwF,MAAM,EAAE;gBAC7B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACuI,IAAI,GAAG9H,MAAM,CAACwF,MAAM,EAAE;gBAC9B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACqI,QAAQ,GAAG5H,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAACoJ,KAAK,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,CAAC,EACxCQ,OAAO,CAACoJ,KAAK,GAAG,EAAE;gBACtBpJ,OAAO,CAACoJ,KAAK,CAACvB,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC2F,UAAU,CAAChK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBAChG;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEH,OAAO,CAACmI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,CAAC,EACtCQ,OAAO,CAACmI,IAAI,GAAG,EAAE;gBACrBnI,OAAO,CAACmI,IAAI,CAACN,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC4F,SAAS,CAACjK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBAC9F;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEH,OAAO,CAACuK,UAAU,IAAIvK,OAAO,CAACuK,UAAU,CAAC/K,MAAM,CAAC,EAClDQ,OAAO,CAACuK,UAAU,GAAG,EAAE;gBAC3BvK,OAAO,CAACuK,UAAU,CAAC1C,IAAI,CAACpH,MAAM,CAACwF,MAAM,EAAE,CAAC;gBACxC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD6E,MAAM,CAAC7D,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACtD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD0E,MAAM,CAAC5D,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACrC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;UACpC,IAAI3I,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC6G,GAAG,CAAC,EAC5B,OAAO,sBAAsB;UACrC,IAAI7G,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;UACtC,IAAIvI,OAAO,CAACqI,QAAQ,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACqI,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAIrI,OAAO,CAACoJ,KAAK,IAAI,IAAI,IAAIpJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;YAC1D,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoJ,KAAK,CAAC,EAC7B,OAAO,uBAAuB;YAClC,KAAK,IAAI7J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EAAE;cAC3C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC2F,UAAU,CAACvJ,MAAM,CAACjB,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,CAAC;cACjF,IAAI8G,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;YAC/B;UACJ;UACA,IAAIrG,OAAO,CAACmI,IAAI,IAAI,IAAI,IAAInI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;YACxD,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACmI,IAAI,CAAC,EAC5B,OAAO,sBAAsB;YACjC,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EAAE;cAC1C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC4F,SAAS,CAACxJ,MAAM,CAACjB,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,CAAC;cAC/E,IAAI8G,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;YAC9B;UACJ;UACA,IAAIrG,OAAO,CAACuK,UAAU,IAAI,IAAI,IAAIvK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;YACpE,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACuK,UAAU,CAAC,EAClC,OAAO,4BAA4B;YACvC,KAAK,IAAIhL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EAAE,EAAED,CAAC,EAC9C,IAAI,CAACX,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuK,UAAU,CAAChL,CAAC,CAAC,CAAC,EACtC,OAAO,+BAA+B;UAClD;UACA,OAAO,IAAI;QACf,CAAC;QAUDsF,MAAM,CAACxD,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC5C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,EACnD,OAAOvD,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,EAAE;UACrD,IAAIvD,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;UAClC,IAAIrH,MAAM,CAACuF,GAAG,IAAI,IAAI,EAClB7G,OAAO,CAAC6G,GAAG,GAAG5E,MAAM,CAACX,MAAM,CAACuF,GAAG,CAAC;UACpC,IAAIvF,MAAM,CAACiH,IAAI,IAAI,IAAI,EACnBvI,OAAO,CAACuI,IAAI,GAAGtG,MAAM,CAACX,MAAM,CAACiH,IAAI,CAAC;UACtC,IAAIjH,MAAM,CAAC+G,QAAQ,IAAI,IAAI,EACvBrI,OAAO,CAACqI,QAAQ,GAAGpG,MAAM,CAACX,MAAM,CAAC+G,QAAQ,CAAC;UAC9C,IAAI/G,MAAM,CAAC8H,KAAK,EAAE;YACd,IAAI,CAACtB,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8H,KAAK,CAAC,EAC5B,MAAM7C,SAAS,CAAC,oDAAoD,CAAC;YACzEvG,OAAO,CAACoJ,KAAK,GAAG,EAAE;YAClB,KAAK,IAAI7J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8H,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EAAE;cAC1C,IAAI,OAAO+B,MAAM,CAAC8H,KAAK,CAAC7J,CAAC,CAAC,KAAK,QAAQ,EACnC,MAAMgH,SAAS,CAAC,qDAAqD,CAAC;cAC1EvG,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC2F,UAAU,CAACnJ,UAAU,CAACC,MAAM,CAAC8H,KAAK,CAAC7J,CAAC,CAAC,CAAC;YAC/F;UACJ;UACA,IAAI+B,MAAM,CAAC6G,IAAI,EAAE;YACb,IAAI,CAACL,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC6G,IAAI,CAAC,EAC3B,MAAM5B,SAAS,CAAC,mDAAmD,CAAC;YACxEvG,OAAO,CAACmI,IAAI,GAAG,EAAE;YACjB,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC6G,IAAI,CAAC3I,MAAM,EAAE,EAAED,CAAC,EAAE;cACzC,IAAI,OAAO+B,MAAM,CAAC6G,IAAI,CAAC5I,CAAC,CAAC,KAAK,QAAQ,EAClC,MAAMgH,SAAS,CAAC,oDAAoD,CAAC;cACzEvG,OAAO,CAACmI,IAAI,CAAC5I,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC4F,SAAS,CAACpJ,UAAU,CAACC,MAAM,CAAC6G,IAAI,CAAC5I,CAAC,CAAC,CAAC;YAC5F;UACJ;UACA,IAAI+B,MAAM,CAACiJ,UAAU,EAAE;YACnB,IAAI,CAACzC,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACiJ,UAAU,CAAC,EACjC,MAAMhE,SAAS,CAAC,yDAAyD,CAAC;YAC9EvG,OAAO,CAACuK,UAAU,GAAG,EAAE;YACvB,KAAK,IAAIhL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACiJ,UAAU,CAAC/K,MAAM,EAAE,EAAED,CAAC,EAC7CS,OAAO,CAACuK,UAAU,CAAChL,CAAC,CAAC,GAAG0C,MAAM,CAACX,MAAM,CAACiJ,UAAU,CAAChL,CAAC,CAAC,CAAC;UAC5D;UACA,OAAOS,OAAO;QAClB,CAAC;QAWD6E,MAAM,CAACjD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAClD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAAE;YACpCR,MAAM,CAAC8H,KAAK,GAAG,EAAE;YACjB9H,MAAM,CAAC6G,IAAI,GAAG,EAAE;YAChB7G,MAAM,CAACiJ,UAAU,GAAG,EAAE;UAC1B;UACA,IAAI1I,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACqH,EAAE,GAAG,EAAE;YACdrH,MAAM,CAACuF,GAAG,GAAG,EAAE;YACfvF,MAAM,CAACiH,IAAI,GAAG,EAAE;YAChBjH,MAAM,CAAC+G,QAAQ,GAAG,EAAE;UACxB;UACA,IAAIrI,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;UAC1B,IAAI3I,OAAO,CAAC6G,GAAG,IAAI,IAAI,IAAI7G,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDoB,MAAM,CAACuF,GAAG,GAAG7G,OAAO,CAAC6G,GAAG;UAC5B,IAAI7G,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACiH,IAAI,GAAGvI,OAAO,CAACuI,IAAI;UAC9B,IAAIvI,OAAO,CAACqI,QAAQ,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC+G,QAAQ,GAAGrI,OAAO,CAACqI,QAAQ;UACtC,IAAIrI,OAAO,CAACoJ,KAAK,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE;YACvC8B,MAAM,CAAC8H,KAAK,GAAG,EAAE;YACjB,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAEyI,CAAC,EACzC3G,MAAM,CAAC8H,KAAK,CAACnB,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC2F,UAAU,CAAC5I,QAAQ,CAAC5B,OAAO,CAACoJ,KAAK,CAACnB,CAAC,CAAC,EAAEpG,OAAO,CAAC;UAC1G;UACA,IAAI7B,OAAO,CAACmI,IAAI,IAAInI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE;YACrC8B,MAAM,CAAC6G,IAAI,GAAG,EAAE;YAChB,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACmI,IAAI,CAAC3I,MAAM,EAAE,EAAEyI,CAAC,EACxC3G,MAAM,CAAC6G,IAAI,CAACF,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC4F,SAAS,CAAC7I,QAAQ,CAAC5B,OAAO,CAACmI,IAAI,CAACF,CAAC,CAAC,EAAEpG,OAAO,CAAC;UACvG;UACA,IAAI7B,OAAO,CAACuK,UAAU,IAAIvK,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EAAE;YACjD8B,MAAM,CAACiJ,UAAU,GAAG,EAAE;YACtB,KAAK,IAAItC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EAAE,EAAEyI,CAAC,EAC9C3G,MAAM,CAACiJ,UAAU,CAACtC,CAAC,CAAC,GAAGjI,OAAO,CAACuK,UAAU,CAACtC,CAAC,CAAC;UACpD;UACA,OAAO3G,MAAM;QACjB,CAAC;QASDuD,MAAM,CAACpF,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACxC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAEDsC,MAAM,CAAC4F,SAAS,GAAI,YAAW;UAkB3B,SAASA,SAAS,CAACrL,UAAU,EAAE;YAC3B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;UACnD;UAQAkL,SAAS,CAAChL,SAAS,CAAC8I,IAAI,GAAG,EAAE;UAQ7BkC,SAAS,CAAChL,SAAS,CAACiL,SAAS,GAAG,EAAE;UAUlCD,SAAS,CAAC3K,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;YAC3C,OAAO,IAAIqL,SAAS,CAACrL,UAAU,CAAC;UACpC,CAAC;UAWDqL,SAAS,CAAC1K,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;YAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;YAC7B,IAAIE,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuI,IAAI,CAAC;YACjE,IAAIvI,OAAO,CAAC0K,SAAS,IAAI,IAAI,IAAI1K,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC0K,SAAS,CAAC;YACtE,OAAOzK,MAAM;UACjB,CAAC;UAWDwK,SAAS,CAACnK,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;YAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;UAChD,CAAC;UAaDkK,SAAS,CAACjK,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;YAC/C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;YACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;cAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC4F,SAAS,EAAE;YAC9H,OAAOhK,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;cACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;cACzB,QAAQW,GAAG,KAAK,CAAC;gBACjB,KAAK,CAAC;kBACFd,OAAO,CAACuI,IAAI,GAAG9H,MAAM,CAACwF,MAAM,EAAE;kBAC9B;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAAC0K,SAAS,GAAGjK,MAAM,CAACwF,MAAM,EAAE;kBACnC;gBACJ;kBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;kBACxB;cAAM;YAEd;YACA,OAAOd,OAAO;UAClB,CAAC;UAYDyK,SAAS,CAACzJ,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;YACzD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;YAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;UAC/C,CAAC;UAUDsK,SAAS,CAACxJ,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;YACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;YAC5B,IAAIA,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;YACtC,IAAIvI,OAAO,CAAC0K,SAAS,IAAI,IAAI,IAAI1K,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC0K,SAAS,CAAC,EAClC,OAAO,4BAA4B;YAC3C,OAAO,IAAI;UACf,CAAC;UAUDD,SAAS,CAACpJ,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;YAC/C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC4F,SAAS,EAC7D,OAAOnJ,MAAM;YACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC4F,SAAS,EAAE;YAC/D,IAAInJ,MAAM,CAACiH,IAAI,IAAI,IAAI,EACnBvI,OAAO,CAACuI,IAAI,GAAGtG,MAAM,CAACX,MAAM,CAACiH,IAAI,CAAC;YACtC,IAAIjH,MAAM,CAACoJ,SAAS,IAAI,IAAI,EACxB1K,OAAO,CAAC0K,SAAS,GAAGzI,MAAM,CAACX,MAAM,CAACoJ,SAAS,CAAC;YAChD,OAAO1K,OAAO;UAClB,CAAC;UAWDyK,SAAS,CAAC7I,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;YACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;YAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;YACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;cAClBR,MAAM,CAACiH,IAAI,GAAG,EAAE;cAChBjH,MAAM,CAACoJ,SAAS,GAAG,EAAE;YACzB;YACA,IAAI1K,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACiH,IAAI,GAAGvI,OAAO,CAACuI,IAAI;YAC9B,IAAIvI,OAAO,CAAC0K,SAAS,IAAI,IAAI,IAAI1K,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEoB,MAAM,CAACoJ,SAAS,GAAG1K,OAAO,CAAC0K,SAAS;YACxC,OAAOpJ,MAAM;UACjB,CAAC;UASDmJ,SAAS,CAAChL,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;YAC3C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;UACxE,CAAC;UAED,OAAOkI,SAAS;QACpB,CAAC,EAAG;QAEJ5F,MAAM,CAAC2F,UAAU,GAAI,YAAW;UAoB5B,SAASA,UAAU,CAACpL,UAAU,EAAE;YAC5B,IAAI,CAACmL,UAAU,GAAG,EAAE;YACpB,IAAInL,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;UACnD;UAQAiL,UAAU,CAAC/K,SAAS,CAACyI,IAAI,GAAG,EAAE;UAQ9BsC,UAAU,CAAC/K,SAAS,CAACwK,QAAQ,GAAG,IAAI;UAQpCO,UAAU,CAAC/K,SAAS,CAACkJ,EAAE,GAAG,EAAE;UAQ5B6B,UAAU,CAAC/K,SAAS,CAAC8K,UAAU,GAAG3L,KAAK,CAAC8I,UAAU;UAUlD8C,UAAU,CAAC1K,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;YAC5C,OAAO,IAAIoL,UAAU,CAACpL,UAAU,CAAC;UACrC,CAAC;UAWDoL,UAAU,CAACzK,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;YACjD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;YAC7B,IAAIE,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACkI,IAAI,CAAC;YACjE,IAAIlI,OAAO,CAACiK,QAAQ,IAAI,IAAI,IAAIjK,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAAC5K,MAAM,CAACC,OAAO,CAACiK,QAAQ,EAAEhK,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;YACpI,IAAIP,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;YAC/D,IAAI3I,OAAO,CAACuK,UAAU,IAAI,IAAI,IAAIvK,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EACvD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EAAE,EAAED,CAAC,EAC9CU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuK,UAAU,CAAChL,CAAC,CAAC,CAAC;YAC9E,OAAOU,MAAM;UACjB,CAAC;UAWDuK,UAAU,CAAClK,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;YACnE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;UAChD,CAAC;UAaDiK,UAAU,CAAChK,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;YAChD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;YACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;cAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC2F,UAAU,EAAE;YAC/H,OAAO/J,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;cACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;cACzB,QAAQW,GAAG,KAAK,CAAC;gBACjB,KAAK,CAAC;kBACFd,OAAO,CAACkI,IAAI,GAAGzH,MAAM,CAACwF,MAAM,EAAE;kBAC9B;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAACiK,QAAQ,GAAGnL,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACnK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;kBAChG;gBACJ,KAAK,CAAC;kBACFH,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;kBAC5B;gBACJ,KAAK,CAAC;kBACF,IAAI,EAAEjG,OAAO,CAACuK,UAAU,IAAIvK,OAAO,CAACuK,UAAU,CAAC/K,MAAM,CAAC,EAClDQ,OAAO,CAACuK,UAAU,GAAG,EAAE;kBAC3BvK,OAAO,CAACuK,UAAU,CAAC1C,IAAI,CAACpH,MAAM,CAACwF,MAAM,EAAE,CAAC;kBACxC;gBACJ;kBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;kBACxB;cAAM;YAEd;YACA,OAAOd,OAAO;UAClB,CAAC;UAYDwK,UAAU,CAACxJ,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;YAC1D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;YAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;UAC/C,CAAC;UAUDqK,UAAU,CAACvJ,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;YACzC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;YAC5B,IAAIA,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACkI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;YACtC,IAAIlI,OAAO,CAACiK,QAAQ,IAAI,IAAI,IAAIjK,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;cAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAAC1J,MAAM,CAACjB,OAAO,CAACiK,QAAQ,CAAC;cAClF,IAAI5D,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;YAClC;YACA,IAAIrG,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;YACpC,IAAI3I,OAAO,CAACuK,UAAU,IAAI,IAAI,IAAIvK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;cACpE,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACuK,UAAU,CAAC,EAClC,OAAO,4BAA4B;cACvC,KAAK,IAAIhL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EAAE,EAAED,CAAC,EAC9C,IAAI,CAACX,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuK,UAAU,CAAChL,CAAC,CAAC,CAAC,EACtC,OAAO,+BAA+B;YAClD;YACA,OAAO,IAAI;UACf,CAAC;UAUDiL,UAAU,CAACnJ,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;YAChD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC2F,UAAU,EAC9D,OAAOlJ,MAAM;YACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC2F,UAAU,EAAE;YAChE,IAAIlJ,MAAM,CAAC4G,IAAI,IAAI,IAAI,EACnBlI,OAAO,CAACkI,IAAI,GAAGjG,MAAM,CAACX,MAAM,CAAC4G,IAAI,CAAC;YACtC,IAAI5G,MAAM,CAAC2I,QAAQ,IAAI,IAAI,EAAE;cACzB,IAAI,OAAO3I,MAAM,CAAC2I,QAAQ,KAAK,QAAQ,EACnC,MAAM1D,SAAS,CAAC,mEAAmE,CAAC;cACxFvG,OAAO,CAACiK,QAAQ,GAAGnL,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACtJ,UAAU,CAACC,MAAM,CAAC2I,QAAQ,CAAC;YAChG;YACA,IAAI3I,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;YAClC,IAAIrH,MAAM,CAACiJ,UAAU,EAAE;cACnB,IAAI,CAACzC,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACiJ,UAAU,CAAC,EACjC,MAAMhE,SAAS,CAAC,oEAAoE,CAAC;cACzFvG,OAAO,CAACuK,UAAU,GAAG,EAAE;cACvB,KAAK,IAAIhL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACiJ,UAAU,CAAC/K,MAAM,EAAE,EAAED,CAAC,EAC7CS,OAAO,CAACuK,UAAU,CAAChL,CAAC,CAAC,GAAG0C,MAAM,CAACX,MAAM,CAACiJ,UAAU,CAAChL,CAAC,CAAC,CAAC;YAC5D;YACA,OAAOS,OAAO;UAClB,CAAC;UAWDwK,UAAU,CAAC5I,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;YACtD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;YAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;YACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAACiJ,UAAU,GAAG,EAAE;YAC1B,IAAI1I,OAAO,CAACC,QAAQ,EAAE;cAClBR,MAAM,CAAC4G,IAAI,GAAG,EAAE;cAChB5G,MAAM,CAAC2I,QAAQ,GAAG,IAAI;cACtB3I,MAAM,CAACqH,EAAE,GAAG,EAAE;YAClB;YACA,IAAI3I,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAAC4G,IAAI,GAAGlI,OAAO,CAACkI,IAAI;YAC9B,IAAIlI,OAAO,CAACiK,QAAQ,IAAI,IAAI,IAAIjK,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC2I,QAAQ,GAAGnL,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAAC/I,QAAQ,CAAC5B,OAAO,CAACiK,QAAQ,EAAEpI,OAAO,CAAC;YACvG,IAAI7B,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;YAC1B,IAAI3I,OAAO,CAACuK,UAAU,IAAIvK,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EAAE;cACjD8B,MAAM,CAACiJ,UAAU,GAAG,EAAE;cACtB,KAAK,IAAItC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACuK,UAAU,CAAC/K,MAAM,EAAE,EAAEyI,CAAC,EAC9C3G,MAAM,CAACiJ,UAAU,CAACtC,CAAC,CAAC,GAAGjI,OAAO,CAACuK,UAAU,CAACtC,CAAC,CAAC;YACpD;YACA,OAAO3G,MAAM;UACjB,CAAC;UASDkJ,UAAU,CAAC/K,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;YAC5C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;UACxE,CAAC;UAED,OAAOiI,UAAU;QACrB,CAAC,EAAG;QAEJ,OAAO3F,MAAM;MACjB,CAAC,EAAG;MAEJ3F,QAAQ,CAACyL,kBAAkB,GAAI,YAAW;QAkBtC,SAASA,kBAAkB,CAACvL,UAAU,EAAE;UACpC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAoL,kBAAkB,CAAClL,SAAS,CAACoK,SAAS,GAAG,IAAI;QAQ7Cc,kBAAkB,CAAClL,SAAS,CAACqK,SAAS,GAAG,IAAI;QAG7C,IAAI1F,YAAY;QAQhB9E,MAAM,CAAC+E,cAAc,CAACsG,kBAAkB,CAAClL,SAAS,EAAE,SAAS,EAAE;UAC3D6E,GAAG,EAAE1F,KAAK,CAAC2F,WAAW,CAACH,YAAY,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;UACjEI,GAAG,EAAE5F,KAAK,CAAC6F,WAAW,CAACL,YAAY;QACvC,CAAC,CAAC;QAUFuG,kBAAkB,CAAC7K,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACpD,OAAO,IAAIuL,kBAAkB,CAACvL,UAAU,CAAC;QAC7C,CAAC;QAWDuL,kBAAkB,CAAC5K,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACzD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC6J,SAAS,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACC,eAAe,CAAC7K,MAAM,CAACC,OAAO,CAAC6J,SAAS,EAAE5J,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACrJ,IAAIP,OAAO,CAAC8J,SAAS,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAAC9K,MAAM,CAACC,OAAO,CAAC8J,SAAS,EAAE7J,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACjJ,OAAON,MAAM;QACjB,CAAC;QAWD0K,kBAAkB,CAACrK,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC3E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDoK,kBAAkB,CAACnK,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACxD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,EAAE;UAChI,OAAOlK,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC6J,SAAS,GAAG/K,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACC,eAAe,CAACpK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACjH;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC8J,SAAS,GAAGhL,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACrK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC7G;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD2K,kBAAkB,CAAC3J,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAClE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDwK,kBAAkB,CAAC1J,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACjD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIZ,UAAU,GAAG,CAAC,CAAC;UACnB,IAAIY,OAAO,CAAC6J,SAAS,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClEd,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACC,eAAe,CAAC3J,MAAM,CAACjB,OAAO,CAAC6J,SAAS,CAAC;cACnG,IAAIxD,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;YACnC;UACJ;UACA,IAAIrG,OAAO,CAAC8J,SAAS,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClE,IAAId,UAAU,CAACY,OAAO,KAAK,CAAC,EACxB,OAAO,0BAA0B;YACrCZ,UAAU,CAACY,OAAO,GAAG,CAAC;YACtB;cACI,IAAIqG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAAC5J,MAAM,CAACjB,OAAO,CAAC8J,SAAS,CAAC;cAC/F,IAAIzD,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;YACnC;UACJ;UACA,OAAO,IAAI;QACf,CAAC;QAUDsE,kBAAkB,CAACtJ,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACxD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,EAC/D,OAAOrJ,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,EAAE;UACjE,IAAIrJ,MAAM,CAACuI,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,OAAOvI,MAAM,CAACuI,SAAS,KAAK,QAAQ,EACpC,MAAMtD,SAAS,CAAC,qEAAqE,CAAC;YAC1FvG,OAAO,CAAC6J,SAAS,GAAG/K,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACC,eAAe,CAACvJ,UAAU,CAACC,MAAM,CAACuI,SAAS,CAAC;UAClH;UACA,IAAIvI,MAAM,CAACwI,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,OAAOxI,MAAM,CAACwI,SAAS,KAAK,QAAQ,EACpC,MAAMvD,SAAS,CAAC,qEAAqE,CAAC;YAC1FvG,OAAO,CAAC8J,SAAS,GAAGhL,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACxJ,UAAU,CAACC,MAAM,CAACwI,SAAS,CAAC;UAC9G;UACA,OAAO9J,OAAO;QAClB,CAAC;QAWD2K,kBAAkB,CAAC/I,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC9D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAItB,OAAO,CAAC6J,SAAS,IAAI,IAAI,IAAI7J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClEoB,MAAM,CAACuI,SAAS,GAAG/K,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACC,eAAe,CAAChJ,QAAQ,CAAC5B,OAAO,CAAC6J,SAAS,EAAEhI,OAAO,CAAC;YACrH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,WAAW;UACpC;UACA,IAAIA,OAAO,CAAC8J,SAAS,IAAI,IAAI,IAAI9J,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClEoB,MAAM,CAACwI,SAAS,GAAGhL,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACjJ,QAAQ,CAAC5B,OAAO,CAAC8J,SAAS,EAAEjI,OAAO,CAAC;YACjH,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACtB,OAAO,GAAG,WAAW;UACpC;UACA,OAAOsB,MAAM;QACjB,CAAC;QASDqJ,kBAAkB,CAAClL,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACpD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAEDoI,kBAAkB,CAACC,eAAe,GAAI,YAAW;UAkB7C,SAASA,eAAe,CAACxL,UAAU,EAAE;YACjC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;UACnD;UAQAqL,eAAe,CAACnL,SAAS,CAACwH,WAAW,GAAG,EAAE;UAQ1C2D,eAAe,CAACnL,SAAS,CAAC0K,OAAO,GAAG,EAAE;UAUtCS,eAAe,CAAC9K,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;YACjD,OAAO,IAAIwL,eAAe,CAACxL,UAAU,CAAC;UAC1C,CAAC;UAWDwL,eAAe,CAAC7K,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;YACtD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;YAC7B,IAAIE,OAAO,CAACiH,WAAW,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACiH,WAAW,CAAC;YACxE,IAAIjH,OAAO,CAACmK,OAAO,IAAI,IAAI,IAAInK,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACmK,OAAO,CAAC;YACpE,OAAOlK,MAAM;UACjB,CAAC;UAWD2K,eAAe,CAACtK,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;YACxE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;UAChD,CAAC;UAaDqK,eAAe,CAACpK,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;YACrD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;YACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;cAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACC,eAAe,EAAE;YAChJ,OAAOnK,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;cACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;cACzB,QAAQW,GAAG,KAAK,CAAC;gBACjB,KAAK,CAAC;kBACFd,OAAO,CAACiH,WAAW,GAAGxG,MAAM,CAACwF,MAAM,EAAE;kBACrC;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAACmK,OAAO,GAAG1J,MAAM,CAACwF,MAAM,EAAE;kBACjC;gBACJ;kBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;kBACxB;cAAM;YAEd;YACA,OAAOd,OAAO;UAClB,CAAC;UAYD4K,eAAe,CAAC5J,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;YAC/D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;YAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;UAC/C,CAAC;UAUDyK,eAAe,CAAC3J,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;YAC9C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;YAC5B,IAAIA,OAAO,CAACiH,WAAW,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACiH,WAAW,CAAC,EACpC,OAAO,8BAA8B;YAC7C,IAAIjH,OAAO,CAACmK,OAAO,IAAI,IAAI,IAAInK,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACmK,OAAO,CAAC,EAChC,OAAO,0BAA0B;YACzC,OAAO,IAAI;UACf,CAAC;UAUDS,eAAe,CAACvJ,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;YACrD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACC,eAAe,EAC/E,OAAOtJ,MAAM;YACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACC,eAAe,EAAE;YACjF,IAAItJ,MAAM,CAAC2F,WAAW,IAAI,IAAI,EAC1BjH,OAAO,CAACiH,WAAW,GAAGhF,MAAM,CAACX,MAAM,CAAC2F,WAAW,CAAC;YACpD,IAAI3F,MAAM,CAAC6I,OAAO,IAAI,IAAI,EACtBnK,OAAO,CAACmK,OAAO,GAAGlI,MAAM,CAACX,MAAM,CAAC6I,OAAO,CAAC;YAC5C,OAAOnK,OAAO;UAClB,CAAC;UAWD4K,eAAe,CAAChJ,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;YAC3D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;YAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;YACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;cAClBR,MAAM,CAAC2F,WAAW,GAAG,EAAE;cACvB3F,MAAM,CAAC6I,OAAO,GAAG,EAAE;YACvB;YACA,IAAInK,OAAO,CAACiH,WAAW,IAAI,IAAI,IAAIjH,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAAC2F,WAAW,GAAGjH,OAAO,CAACiH,WAAW;YAC5C,IAAIjH,OAAO,CAACmK,OAAO,IAAI,IAAI,IAAInK,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAAC6I,OAAO,GAAGnK,OAAO,CAACmK,OAAO;YACpC,OAAO7I,MAAM;UACjB,CAAC;UASDsJ,eAAe,CAACnL,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;YACjD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;UACxE,CAAC;UAED,OAAOqI,eAAe;QAC1B,CAAC,EAAG;QAEJD,kBAAkB,CAACE,WAAW,GAAI,YAAW;UAiBzC,SAASA,WAAW,CAACzL,UAAU,EAAE;YAC7B,IAAI,CAAC8K,IAAI,GAAG,EAAE;YACd,IAAI9K,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;UACnD;UAQAsL,WAAW,CAACpL,SAAS,CAACyK,IAAI,GAAGtL,KAAK,CAAC8I,UAAU;UAU7CmD,WAAW,CAAC/K,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;YAC7C,OAAO,IAAIyL,WAAW,CAACzL,UAAU,CAAC;UACtC,CAAC;UAWDyL,WAAW,CAAC9K,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;YAClD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;YAC7B,IAAIE,OAAO,CAACkK,IAAI,IAAI,IAAI,IAAIlK,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAC3C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAAE,EAAED,CAAC,EACxCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAAC/K,MAAM,CAACC,OAAO,CAACkK,IAAI,CAAC3K,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;YAClK,OAAON,MAAM;UACjB,CAAC;UAWD4K,WAAW,CAACvK,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;YACpE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;UAChD,CAAC;UAaDsK,WAAW,CAACrK,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;YACjD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;YACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;cAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,EAAE;YAC5I,OAAOpK,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;cACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;cACzB,QAAQW,GAAG,KAAK,CAAC;gBACjB,KAAK,CAAC;kBACF,IAAI,EAAEd,OAAO,CAACkK,IAAI,IAAIlK,OAAO,CAACkK,IAAI,CAAC1K,MAAM,CAAC,EACtCQ,OAAO,CAACkK,IAAI,GAAG,EAAE;kBACrBlK,OAAO,CAACkK,IAAI,CAACrC,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACtK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;kBAC3H;gBACJ;kBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;kBACxB;cAAM;YAEd;YACA,OAAOd,OAAO;UAClB,CAAC;UAYD6K,WAAW,CAAC7J,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;YAC3D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;YAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;UAC/C,CAAC;UAUD0K,WAAW,CAAC5J,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;YAC1C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;YAC5B,IAAIA,OAAO,CAACkK,IAAI,IAAI,IAAI,IAAIlK,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;cACxD,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACkK,IAAI,CAAC,EAC5B,OAAO,sBAAsB;cACjC,KAAK,IAAI3K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAAE,EAAED,CAAC,EAAE;gBAC1C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAAC7J,MAAM,CAACjB,OAAO,CAACkK,IAAI,CAAC3K,CAAC,CAAC,CAAC;gBAC5G,IAAI8G,KAAK,EACL,OAAO,OAAO,GAAGA,KAAK;cAC9B;YACJ;YACA,OAAO,IAAI;UACf,CAAC;UAUDwE,WAAW,CAACxJ,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;YACjD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,EAC3E,OAAOvJ,MAAM;YACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,EAAE;YAC7E,IAAIvJ,MAAM,CAAC4I,IAAI,EAAE;cACb,IAAI,CAACpC,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC4I,IAAI,CAAC,EAC3B,MAAM3D,SAAS,CAAC,2EAA2E,CAAC;cAChGvG,OAAO,CAACkK,IAAI,GAAG,EAAE;cACjB,KAAK,IAAI3K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC4I,IAAI,CAAC1K,MAAM,EAAE,EAAED,CAAC,EAAE;gBACzC,IAAI,OAAO+B,MAAM,CAAC4I,IAAI,CAAC3K,CAAC,CAAC,KAAK,QAAQ,EAClC,MAAMgH,SAAS,CAAC,4EAA4E,CAAC;gBACjGvG,OAAO,CAACkK,IAAI,CAAC3K,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACzJ,UAAU,CAACC,MAAM,CAAC4I,IAAI,CAAC3K,CAAC,CAAC,CAAC;cACzH;YACJ;YACA,OAAOS,OAAO;UAClB,CAAC;UAWD6K,WAAW,CAACjJ,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;YACvD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;YAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;YACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC4I,IAAI,GAAG,EAAE;YACpB,IAAIlK,OAAO,CAACkK,IAAI,IAAIlK,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAAE;cACrC8B,MAAM,CAAC4I,IAAI,GAAG,EAAE;cAChB,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACkK,IAAI,CAAC1K,MAAM,EAAE,EAAEyI,CAAC,EACxC3G,MAAM,CAAC4I,IAAI,CAACjC,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAAClJ,QAAQ,CAAC5B,OAAO,CAACkK,IAAI,CAACjC,CAAC,CAAC,EAAEpG,OAAO,CAAC;YACpI;YACA,OAAOP,MAAM;UACjB,CAAC;UASDuJ,WAAW,CAACpL,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;YAC7C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;UACxE,CAAC;UAEDsI,WAAW,CAACC,cAAc,GAAI,YAAW;YAiBrC,SAASA,cAAc,CAAC1L,UAAU,EAAE;cAChC,IAAI,CAACuK,KAAK,GAAG,EAAE;cACf,IAAIvK,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;YACnD;YAQAuL,cAAc,CAACrL,SAAS,CAACkK,KAAK,GAAG/K,KAAK,CAAC8I,UAAU;YAUjDoD,cAAc,CAAChL,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;cAChD,OAAO,IAAI0L,cAAc,CAAC1L,UAAU,CAAC;YACzC,CAAC;YAWD0L,cAAc,CAAC/K,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;cACrD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;cAC7B,IAAIE,OAAO,CAAC2J,KAAK,IAAI,IAAI,IAAI3J,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAAE,EAAED,CAAC,EACzCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACC,eAAe,CAAChL,MAAM,CAACC,OAAO,CAAC2J,KAAK,CAACpK,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;cACnL,OAAON,MAAM;YACjB,CAAC;YAWD6K,cAAc,CAACxK,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;cACvE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;YAChD,CAAC;YAaDuK,cAAc,CAACtK,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;cACpD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;cACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;gBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,EAAE;cAC3J,OAAOrK,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;gBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;gBACzB,QAAQW,GAAG,KAAK,CAAC;kBACjB,KAAK,CAAC;oBACF,IAAI,EAAEd,OAAO,CAAC2J,KAAK,IAAI3J,OAAO,CAAC2J,KAAK,CAACnK,MAAM,CAAC,EACxCQ,OAAO,CAAC2J,KAAK,GAAG,EAAE;oBACtB3J,OAAO,CAAC2J,KAAK,CAAC9B,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACC,eAAe,CAACvK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;oBAC5I;kBACJ;oBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;oBACxB;gBAAM;cAEd;cACA,OAAOd,OAAO;YAClB,CAAC;YAYD8K,cAAc,CAAC9J,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;cAC9D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;cAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;YAC/C,CAAC;YAUD2K,cAAc,CAAC7J,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;cAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;cAC5B,IAAIA,OAAO,CAAC2J,KAAK,IAAI,IAAI,IAAI3J,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;gBAC1D,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAAC2J,KAAK,CAAC,EAC7B,OAAO,uBAAuB;gBAClC,KAAK,IAAIpK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC3C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACC,eAAe,CAAC9J,MAAM,CAACjB,OAAO,CAAC2J,KAAK,CAACpK,CAAC,CAAC,CAAC;kBAC7H,IAAI8G,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;gBAC/B;cACJ;cACA,OAAO,IAAI;YACf,CAAC;YAUDyE,cAAc,CAACzJ,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;cACpD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,EAC1F,OAAOxJ,MAAM;cACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,EAAE;cAC5F,IAAIxJ,MAAM,CAACqI,KAAK,EAAE;gBACd,IAAI,CAAC7B,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACqI,KAAK,CAAC,EAC5B,MAAMpD,SAAS,CAAC,2FAA2F,CAAC;gBAChHvG,OAAO,CAAC2J,KAAK,GAAG,EAAE;gBAClB,KAAK,IAAIpK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACqI,KAAK,CAACnK,MAAM,EAAE,EAAED,CAAC,EAAE;kBAC1C,IAAI,OAAO+B,MAAM,CAACqI,KAAK,CAACpK,CAAC,CAAC,KAAK,QAAQ,EACnC,MAAMgH,SAAS,CAAC,4FAA4F,CAAC;kBACjHvG,OAAO,CAAC2J,KAAK,CAACpK,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACC,eAAe,CAAC1J,UAAU,CAACC,MAAM,CAACqI,KAAK,CAACpK,CAAC,CAAC,CAAC;gBAC3I;cACJ;cACA,OAAOS,OAAO;YAClB,CAAC;YAWD8K,cAAc,CAAClJ,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;cAC1D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;cAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;cACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAACqI,KAAK,GAAG,EAAE;cACrB,IAAI3J,OAAO,CAAC2J,KAAK,IAAI3J,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAAE;gBACvC8B,MAAM,CAACqI,KAAK,GAAG,EAAE;gBACjB,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAAC2J,KAAK,CAACnK,MAAM,EAAE,EAAEyI,CAAC,EACzC3G,MAAM,CAACqI,KAAK,CAAC1B,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACC,eAAe,CAACnJ,QAAQ,CAAC5B,OAAO,CAAC2J,KAAK,CAAC1B,CAAC,CAAC,EAAEpG,OAAO,CAAC;cACtJ;cACA,OAAOP,MAAM;YACjB,CAAC;YASDwJ,cAAc,CAACrL,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;cAChD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;YACxE,CAAC;YAEDuI,cAAc,CAACC,eAAe,GAAI,YAAW;cAiBzC,SAASA,eAAe,CAAC3L,UAAU,EAAE;gBACjC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;cACnD;cAQAwL,eAAe,CAACtL,SAAS,CAACyJ,KAAK,GAAG,EAAE;cAUpC6B,eAAe,CAACjL,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;gBACjD,OAAO,IAAI2L,eAAe,CAAC3L,UAAU,CAAC;cAC1C,CAAC;cAWD2L,eAAe,CAAChL,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;gBACtD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;gBAC7B,IAAIE,OAAO,CAACkJ,KAAK,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACkJ,KAAK,CAAC;gBAClE,OAAOjJ,MAAM;cACjB,CAAC;cAWD8K,eAAe,CAACzK,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;gBACxE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;cAChD,CAAC;cAaDwK,eAAe,CAACvK,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;gBACrD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;gBACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;kBAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACC,eAAe,EAAE;gBAC3K,OAAOtK,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;kBACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;kBACzB,QAAQW,GAAG,KAAK,CAAC;oBACjB,KAAK,CAAC;sBACFd,OAAO,CAACkJ,KAAK,GAAGzI,MAAM,CAACwF,MAAM,EAAE;sBAC/B;oBACJ;sBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;sBACxB;kBAAM;gBAEd;gBACA,OAAOd,OAAO;cAClB,CAAC;cAYD+K,eAAe,CAAC/J,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;gBAC/D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;gBAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;cAC/C,CAAC;cAUD4K,eAAe,CAAC9J,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;gBAC9C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;gBAC5B,IAAIA,OAAO,CAACkJ,KAAK,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACkJ,KAAK,CAAC,EAC9B,OAAO,wBAAwB;gBACvC,OAAO,IAAI;cACf,CAAC;cAUD6B,eAAe,CAAC1J,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;gBACrD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACC,eAAe,EAC1G,OAAOzJ,MAAM;gBACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACE,WAAW,CAACC,cAAc,CAACC,eAAe,EAAE;gBAC5G,IAAIzJ,MAAM,CAAC4H,KAAK,IAAI,IAAI,EACpBlJ,OAAO,CAACkJ,KAAK,GAAGjH,MAAM,CAACX,MAAM,CAAC4H,KAAK,CAAC;gBACxC,OAAOlJ,OAAO;cAClB,CAAC;cAWD+K,eAAe,CAACnJ,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;gBAC3D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;gBAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;gBACf,IAAIO,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAAC4H,KAAK,GAAG,EAAE;gBACrB,IAAIlJ,OAAO,CAACkJ,KAAK,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAAC4H,KAAK,GAAGlJ,OAAO,CAACkJ,KAAK;gBAChC,OAAO5H,MAAM;cACjB,CAAC;cASDyJ,eAAe,CAACtL,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;gBACjD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;cACxE,CAAC;cAED,OAAOwI,eAAe;YAC1B,CAAC,EAAG;YAEJ,OAAOD,cAAc;UACzB,CAAC,EAAG;UAEJ,OAAOD,WAAW;QACtB,CAAC,EAAG;QAEJ,OAAOF,kBAAkB;MAC7B,CAAC,EAAG;MAEJzL,QAAQ,CAACgH,QAAQ,GAAI,YAAW;QAmB5B,SAASA,QAAQ,CAAC9G,UAAU,EAAE;UAC1B,IAAI,CAAC4L,SAAS,GAAG,EAAE;UACnB,IAAI5L,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA2G,QAAQ,CAACzG,SAAS,CAACkJ,EAAE,GAAG,EAAE;QAQ1BzC,QAAQ,CAACzG,SAAS,CAACwL,QAAQ,GAAG,EAAE;QAQhC/E,QAAQ,CAACzG,SAAS,CAACuL,SAAS,GAAGpM,KAAK,CAAC8I,UAAU;QAU/CxB,QAAQ,CAACpG,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC1C,OAAO,IAAI8G,QAAQ,CAAC9G,UAAU,CAAC;QACnC,CAAC;QAWD8G,QAAQ,CAACnG,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;UAC/D,IAAI3I,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACiL,QAAQ,CAAC;UACrE,IAAIjL,OAAO,CAACgL,SAAS,IAAI,IAAI,IAAIhL,OAAO,CAACgL,SAAS,CAACxL,MAAM,EACrD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACgL,SAAS,CAACxL,MAAM,EAAE,EAAED,CAAC,EAC7CT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACgF,QAAQ,CAACnL,MAAM,CAACC,OAAO,CAACgL,SAAS,CAACzL,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC3I,OAAON,MAAM;QACjB,CAAC;QAWDiG,QAAQ,CAAC5F,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD2F,QAAQ,CAAC1F,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC9C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,EAAE;UACtH,OAAOzF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;gBAC5B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACiL,QAAQ,GAAGxK,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAACgL,SAAS,IAAIhL,OAAO,CAACgL,SAAS,CAACxL,MAAM,CAAC,EAChDQ,OAAO,CAACgL,SAAS,GAAG,EAAE;gBAC1BhL,OAAO,CAACgL,SAAS,CAACnD,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACgF,QAAQ,CAAC1K,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBACpG;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDkG,QAAQ,CAAClF,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACxD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD+F,QAAQ,CAACjF,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;UACpC,IAAI3I,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACiL,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAIjL,OAAO,CAACgL,SAAS,IAAI,IAAI,IAAIhL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClE,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACgL,SAAS,CAAC,EACjC,OAAO,2BAA2B;YACtC,KAAK,IAAIzL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACgL,SAAS,CAACxL,MAAM,EAAE,EAAED,CAAC,EAAE;cAC/C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACgF,QAAQ,CAACjK,MAAM,CAACjB,OAAO,CAACgL,SAAS,CAACzL,CAAC,CAAC,CAAC;cACrF,IAAI8G,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;YACnC;UACJ;UACA,OAAO,IAAI;QACf,CAAC;QAUDH,QAAQ,CAAC7E,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC9C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,EACrD,OAAO5E,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,EAAE;UACvD,IAAI5E,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;UAClC,IAAIrH,MAAM,CAAC2J,QAAQ,IAAI,IAAI,EACvBjL,OAAO,CAACiL,QAAQ,GAAGhJ,MAAM,CAACX,MAAM,CAAC2J,QAAQ,CAAC;UAC9C,IAAI3J,MAAM,CAAC0J,SAAS,EAAE;YAClB,IAAI,CAAClD,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC0J,SAAS,CAAC,EAChC,MAAMzE,SAAS,CAAC,0DAA0D,CAAC;YAC/EvG,OAAO,CAACgL,SAAS,GAAG,EAAE;YACtB,KAAK,IAAIzL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC0J,SAAS,CAACxL,MAAM,EAAE,EAAED,CAAC,EAAE;cAC9C,IAAI,OAAO+B,MAAM,CAAC0J,SAAS,CAACzL,CAAC,CAAC,KAAK,QAAQ,EACvC,MAAMgH,SAAS,CAAC,2DAA2D,CAAC;cAChFvG,OAAO,CAACgL,SAAS,CAACzL,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACgF,QAAQ,CAAC7J,UAAU,CAACC,MAAM,CAAC0J,SAAS,CAACzL,CAAC,CAAC,CAAC;YACvG;UACJ;UACA,OAAOS,OAAO;QAClB,CAAC;QAWDkG,QAAQ,CAACtE,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC0J,SAAS,GAAG,EAAE;UACzB,IAAInJ,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACqH,EAAE,GAAG,EAAE;YACdrH,MAAM,CAAC2J,QAAQ,GAAG,EAAE;UACxB;UACA,IAAIjL,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;UAC1B,IAAI3I,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC2J,QAAQ,GAAGjL,OAAO,CAACiL,QAAQ;UACtC,IAAIjL,OAAO,CAACgL,SAAS,IAAIhL,OAAO,CAACgL,SAAS,CAACxL,MAAM,EAAE;YAC/C8B,MAAM,CAAC0J,SAAS,GAAG,EAAE;YACrB,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACgL,SAAS,CAACxL,MAAM,EAAE,EAAEyI,CAAC,EAC7C3G,MAAM,CAAC0J,SAAS,CAAC/C,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACgF,QAAQ,CAACtJ,QAAQ,CAAC5B,OAAO,CAACgL,SAAS,CAAC/C,CAAC,CAAC,EAAEpG,OAAO,CAAC;UAClH;UACA,OAAOP,MAAM;QACjB,CAAC;QASD4E,QAAQ,CAACzG,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC1C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED2D,QAAQ,CAACgF,QAAQ,GAAI,YAAW;UAqB5B,SAASA,QAAQ,CAAC9L,UAAU,EAAE;YAC1B,IAAI,CAAC+L,iBAAiB,GAAG,EAAE;YAC3B,IAAI,CAACC,kBAAkB,GAAG,EAAE;YAC5B,IAAIhM,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;UACnD;UAQA2L,QAAQ,CAACzL,SAAS,CAACkJ,EAAE,GAAG,EAAE;UAQ1BuC,QAAQ,CAACzL,SAAS,CAAC4L,YAAY,GAAG,EAAE;UAQpCH,QAAQ,CAACzL,SAAS,CAAC0L,iBAAiB,GAAGvM,KAAK,CAAC8I,UAAU;UAQvDwD,QAAQ,CAACzL,SAAS,CAAC2L,kBAAkB,GAAGxM,KAAK,CAAC8I,UAAU;UAQxDwD,QAAQ,CAACzL,SAAS,CAAC6L,MAAM,GAAG,EAAE;UAU9BJ,QAAQ,CAACpL,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;YAC1C,OAAO,IAAI8L,QAAQ,CAAC9L,UAAU,CAAC;UACnC,CAAC;UAWD8L,QAAQ,CAACnL,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;YAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;YAC7B,IAAIE,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;YAC/D,IAAI3I,OAAO,CAACqL,YAAY,IAAI,IAAI,IAAIrL,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACqL,YAAY,CAAC;YACzE,IAAIrL,OAAO,CAACmL,iBAAiB,IAAI,IAAI,IAAInL,OAAO,CAACmL,iBAAiB,CAAC3L,MAAM,EACrE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmL,iBAAiB,CAAC3L,MAAM,EAAE,EAAED,CAAC,EACrDU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACmL,iBAAiB,CAAC5L,CAAC,CAAC,CAAC;YACrF,IAAIS,OAAO,CAACoL,kBAAkB,IAAI,IAAI,IAAIpL,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EACvE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EAAE,EAAED,CAAC,EACtDT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACxL,MAAM,CAACC,OAAO,CAACoL,kBAAkB,CAAC7L,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;YACpJ,IAAIP,OAAO,CAACsL,MAAM,IAAI,IAAI,IAAItL,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsL,MAAM,CAAC;YACnE,OAAOrL,MAAM;UACjB,CAAC;UAWDiL,QAAQ,CAAC5K,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;YACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;UAChD,CAAC;UAaD2K,QAAQ,CAAC1K,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;YAC9C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;YACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;cAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACgF,QAAQ,EAAE;YAC/H,OAAOzK,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;cACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;cACzB,QAAQW,GAAG,KAAK,CAAC;gBACjB,KAAK,CAAC;kBACFd,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;kBAC5B;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAACqL,YAAY,GAAG5K,MAAM,CAACwF,MAAM,EAAE;kBACtC;gBACJ,KAAK,CAAC;kBACF,IAAI,EAAEjG,OAAO,CAACmL,iBAAiB,IAAInL,OAAO,CAACmL,iBAAiB,CAAC3L,MAAM,CAAC,EAChEQ,OAAO,CAACmL,iBAAiB,GAAG,EAAE;kBAClCnL,OAAO,CAACmL,iBAAiB,CAACtD,IAAI,CAACpH,MAAM,CAACwF,MAAM,EAAE,CAAC;kBAC/C;gBACJ,KAAK,CAAC;kBACF,IAAI,EAAEjG,OAAO,CAACoL,kBAAkB,IAAIpL,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,CAAC,EAClEQ,OAAO,CAACoL,kBAAkB,GAAG,EAAE;kBACnCpL,OAAO,CAACoL,kBAAkB,CAACvD,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAAC/K,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;kBAC7G;gBACJ,KAAK,CAAC;kBACFH,OAAO,CAACsL,MAAM,GAAG7K,MAAM,CAACwF,MAAM,EAAE;kBAChC;gBACJ;kBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;kBACxB;cAAM;YAEd;YACA,OAAOd,OAAO;UAClB,CAAC;UAYDkL,QAAQ,CAAClK,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;YACxD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;YAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;UAC/C,CAAC;UAUD+K,QAAQ,CAACjK,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;YACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;YAC5B,IAAIA,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;YACpC,IAAI3I,OAAO,CAACqL,YAAY,IAAI,IAAI,IAAIrL,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACqL,YAAY,CAAC,EACrC,OAAO,+BAA+B;YAC9C,IAAIrL,OAAO,CAACmL,iBAAiB,IAAI,IAAI,IAAInL,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAAE;cAClF,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACmL,iBAAiB,CAAC,EACzC,OAAO,mCAAmC;cAC9C,KAAK,IAAI5L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACmL,iBAAiB,CAAC3L,MAAM,EAAE,EAAED,CAAC,EACrD,IAAI,CAACX,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACmL,iBAAiB,CAAC5L,CAAC,CAAC,CAAC,EAC7C,OAAO,sCAAsC;YACzD;YACA,IAAIS,OAAO,CAACoL,kBAAkB,IAAI,IAAI,IAAIpL,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAAE;cACpF,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoL,kBAAkB,CAAC,EAC1C,OAAO,oCAAoC;cAC/C,KAAK,IAAI7L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EAAE,EAAED,CAAC,EAAE;gBACxD,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACtK,MAAM,CAACjB,OAAO,CAACoL,kBAAkB,CAAC7L,CAAC,CAAC,CAAC;gBAC9F,IAAI8G,KAAK,EACL,OAAO,qBAAqB,GAAGA,KAAK;cAC5C;YACJ;YACA,IAAIrG,OAAO,CAACsL,MAAM,IAAI,IAAI,IAAItL,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsL,MAAM,CAAC,EAC/B,OAAO,yBAAyB;YACxC,OAAO,IAAI;UACf,CAAC;UAUDJ,QAAQ,CAAC7J,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;YAC9C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACgF,QAAQ,EAC9D,OAAO5J,MAAM;YACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgH,QAAQ,CAACgF,QAAQ,EAAE;YAChE,IAAI5J,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;YAClC,IAAIrH,MAAM,CAAC+J,YAAY,IAAI,IAAI,EAC3BrL,OAAO,CAACqL,YAAY,GAAGpJ,MAAM,CAACX,MAAM,CAAC+J,YAAY,CAAC;YACtD,IAAI/J,MAAM,CAAC6J,iBAAiB,EAAE;cAC1B,IAAI,CAACrD,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC6J,iBAAiB,CAAC,EACxC,MAAM5E,SAAS,CAAC,2EAA2E,CAAC;cAChGvG,OAAO,CAACmL,iBAAiB,GAAG,EAAE;cAC9B,KAAK,IAAI5L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC6J,iBAAiB,CAAC3L,MAAM,EAAE,EAAED,CAAC,EACpDS,OAAO,CAACmL,iBAAiB,CAAC5L,CAAC,CAAC,GAAG0C,MAAM,CAACX,MAAM,CAAC6J,iBAAiB,CAAC5L,CAAC,CAAC,CAAC;YAC1E;YACA,IAAI+B,MAAM,CAAC8J,kBAAkB,EAAE;cAC3B,IAAI,CAACtD,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8J,kBAAkB,CAAC,EACzC,MAAM7E,SAAS,CAAC,4EAA4E,CAAC;cACjGvG,OAAO,CAACoL,kBAAkB,GAAG,EAAE;cAC/B,KAAK,IAAI7L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8J,kBAAkB,CAAC5L,MAAM,EAAE,EAAED,CAAC,EAAE;gBACvD,IAAI,OAAO+B,MAAM,CAAC8J,kBAAkB,CAAC7L,CAAC,CAAC,KAAK,QAAQ,EAChD,MAAMgH,SAAS,CAAC,6EAA6E,CAAC;gBAClGvG,OAAO,CAACoL,kBAAkB,CAAC7L,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAAClK,UAAU,CAACC,MAAM,CAAC8J,kBAAkB,CAAC7L,CAAC,CAAC,CAAC;cACzH;YACJ;YACA,IAAI+B,MAAM,CAACgK,MAAM,IAAI,IAAI,EACrBtL,OAAO,CAACsL,MAAM,GAAGrJ,MAAM,CAACX,MAAM,CAACgK,MAAM,CAAC;YAC1C,OAAOtL,OAAO;UAClB,CAAC;UAWDkL,QAAQ,CAACtJ,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;YACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;YAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;YACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAAE;cACpCR,MAAM,CAAC6J,iBAAiB,GAAG,EAAE;cAC7B7J,MAAM,CAAC8J,kBAAkB,GAAG,EAAE;YAClC;YACA,IAAIvJ,OAAO,CAACC,QAAQ,EAAE;cAClBR,MAAM,CAACqH,EAAE,GAAG,EAAE;cACdrH,MAAM,CAAC+J,YAAY,GAAG,EAAE;cACxB/J,MAAM,CAACgK,MAAM,GAAG,EAAE;YACtB;YACA,IAAItL,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;YAC1B,IAAI3I,OAAO,CAACqL,YAAY,IAAI,IAAI,IAAIrL,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtEoB,MAAM,CAAC+J,YAAY,GAAGrL,OAAO,CAACqL,YAAY;YAC9C,IAAIrL,OAAO,CAACmL,iBAAiB,IAAInL,OAAO,CAACmL,iBAAiB,CAAC3L,MAAM,EAAE;cAC/D8B,MAAM,CAAC6J,iBAAiB,GAAG,EAAE;cAC7B,KAAK,IAAIlD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACmL,iBAAiB,CAAC3L,MAAM,EAAE,EAAEyI,CAAC,EACrD3G,MAAM,CAAC6J,iBAAiB,CAAClD,CAAC,CAAC,GAAGjI,OAAO,CAACmL,iBAAiB,CAAClD,CAAC,CAAC;YAClE;YACA,IAAIjI,OAAO,CAACoL,kBAAkB,IAAIpL,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EAAE;cACjE8B,MAAM,CAAC8J,kBAAkB,GAAG,EAAE;cAC9B,KAAK,IAAInD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EAAE,EAAEyI,CAAC,EACtD3G,MAAM,CAAC8J,kBAAkB,CAACnD,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAAC3J,QAAQ,CAAC5B,OAAO,CAACoL,kBAAkB,CAACnD,CAAC,CAAC,EAAEpG,OAAO,CAAC;YACpI;YACA,IAAI7B,OAAO,CAACsL,MAAM,IAAI,IAAI,IAAItL,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DoB,MAAM,CAACgK,MAAM,GAAGtL,OAAO,CAACsL,MAAM;YAClC,OAAOhK,MAAM;UACjB,CAAC;UASD4J,QAAQ,CAACzL,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;YAC1C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;UACxE,CAAC;UAED,OAAO2I,QAAQ;QACnB,CAAC,EAAG;QAEJ,OAAOhF,QAAQ;MACnB,CAAC,EAAG;MAEJhH,QAAQ,CAACiG,cAAc,GAAI,YAAW;QAiBlC,SAASA,cAAc,CAAC/F,UAAU,EAAE;UAChC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA4F,cAAc,CAAC1F,SAAS,CAACwL,QAAQ,GAAG,EAAE;QAUtC9F,cAAc,CAACrF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAChD,OAAO,IAAI+F,cAAc,CAAC/F,UAAU,CAAC;QACzC,CAAC;QAWD+F,cAAc,CAACpF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACrD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACiL,QAAQ,CAAC;UACrE,OAAOhL,MAAM;QACjB,CAAC;QAWDkF,cAAc,CAAC7E,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACvE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD4E,cAAc,CAAC3E,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACpD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiG,cAAc,EAAE;UAC5H,OAAO1E,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACiL,QAAQ,GAAGxK,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDmF,cAAc,CAACnE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC9D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDgF,cAAc,CAAClE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACiL,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,OAAO,IAAI;QACf,CAAC;QAUD9F,cAAc,CAAC9D,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACpD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiG,cAAc,EAC3D,OAAO7D,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiG,cAAc,EAAE;UAC7D,IAAI7D,MAAM,CAAC2J,QAAQ,IAAI,IAAI,EACvBjL,OAAO,CAACiL,QAAQ,GAAGhJ,MAAM,CAACX,MAAM,CAAC2J,QAAQ,CAAC;UAC9C,OAAOjL,OAAO;QAClB,CAAC;QAWDmF,cAAc,CAACvD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC1D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAAC2J,QAAQ,GAAG,EAAE;UACxB,IAAIjL,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC2J,QAAQ,GAAGjL,OAAO,CAACiL,QAAQ;UACtC,OAAO3J,MAAM;QACjB,CAAC;QASD6D,cAAc,CAAC1F,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAChD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO4C,cAAc;MACzB,CAAC,EAAG;MAEJjG,QAAQ,CAACkG,cAAc,GAAI,YAAW;QAiBlC,SAASA,cAAc,CAAChG,UAAU,EAAE;UAChC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA6F,cAAc,CAAC3F,SAAS,CAACwL,QAAQ,GAAG,EAAE;QAUtC7F,cAAc,CAACtF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAChD,OAAO,IAAIgG,cAAc,CAAChG,UAAU,CAAC;QACzC,CAAC;QAWDgG,cAAc,CAACrF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACrD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACiL,QAAQ,CAAC;UACrE,OAAOhL,MAAM;QACjB,CAAC;QAWDmF,cAAc,CAAC9E,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACvE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD6E,cAAc,CAAC5E,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACpD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkG,cAAc,EAAE;UAC5H,OAAO3E,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACiL,QAAQ,GAAGxK,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDoF,cAAc,CAACpE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC9D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDiF,cAAc,CAACnE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACiL,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,OAAO,IAAI;QACf,CAAC;QAUD7F,cAAc,CAAC/D,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACpD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkG,cAAc,EAC3D,OAAO9D,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkG,cAAc,EAAE;UAC7D,IAAI9D,MAAM,CAAC2J,QAAQ,IAAI,IAAI,EACvBjL,OAAO,CAACiL,QAAQ,GAAGhJ,MAAM,CAACX,MAAM,CAAC2J,QAAQ,CAAC;UAC9C,OAAOjL,OAAO;QAClB,CAAC;QAWDoF,cAAc,CAACxD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC1D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAAC2J,QAAQ,GAAG,EAAE;UACxB,IAAIjL,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC2J,QAAQ,GAAGjL,OAAO,CAACiL,QAAQ;UACtC,OAAO3J,MAAM;QACjB,CAAC;QASD8D,cAAc,CAAC3F,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAChD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO6C,cAAc;MACzB,CAAC,EAAG;MAEJlG,QAAQ,CAACoG,cAAc,GAAI,YAAW;QAiBlC,SAASA,cAAc,CAAClG,UAAU,EAAE;UAChC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA+F,cAAc,CAAC7F,SAAS,CAAC+L,SAAS,GAAG,IAAI;QAUzClG,cAAc,CAACxF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAChD,OAAO,IAAIkG,cAAc,CAAClG,UAAU,CAAC;QACzC,CAAC;QAWDkG,cAAc,CAACvF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACrD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACY,MAAM,CAACC,OAAO,CAACwL,SAAS,EAAEvL,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC5H,OAAON,MAAM;QACjB,CAAC;QAWDqF,cAAc,CAAChF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACvE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD+E,cAAc,CAAC9E,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACpD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACoG,cAAc,EAAE;UAC5H,OAAO7E,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACqB,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACxF;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDsF,cAAc,CAACtE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC9D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDmF,cAAc,CAACrE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAAC8B,MAAM,CAACjB,OAAO,CAACwL,SAAS,CAAC;YAC1E,IAAInF,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;UACnC;UACA,OAAO,IAAI;QACf,CAAC;QAUDf,cAAc,CAACjE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACpD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACoG,cAAc,EAC3D,OAAOhE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACoG,cAAc,EAAE;UAC7D,IAAIhE,MAAM,CAACkK,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,OAAOlK,MAAM,CAACkK,SAAS,KAAK,QAAQ,EACpC,MAAMjF,SAAS,CAAC,iEAAiE,CAAC;YACtFvG,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACkC,UAAU,CAACC,MAAM,CAACkK,SAAS,CAAC;UACzF;UACA,OAAOxL,OAAO;QAClB,CAAC;QAWDsF,cAAc,CAAC1D,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC1D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAACkK,SAAS,GAAG,IAAI;UAC3B,IAAIxL,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEoB,MAAM,CAACkK,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACyC,QAAQ,CAAC5B,OAAO,CAACwL,SAAS,EAAE3J,OAAO,CAAC;UAChG,OAAOP,MAAM;QACjB,CAAC;QASDgE,cAAc,CAAC7F,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAChD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO+C,cAAc;MACzB,CAAC,EAAG;MAEJpG,QAAQ,CAACuM,oBAAoB,GAAI,YAAW;QAkBxC,SAASA,oBAAoB,CAACrM,UAAU,EAAE;UACtC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAkM,oBAAoB,CAAChM,SAAS,CAACiM,cAAc,GAAG,IAAI;QAQpDD,oBAAoB,CAAChM,SAAS,CAACkM,cAAc,GAAG,IAAI;QAUpDF,oBAAoB,CAAC3L,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACtD,OAAO,IAAIqM,oBAAoB,CAACrM,UAAU,CAAC;QAC/C,CAAC;QAWDqM,oBAAoB,CAAC1L,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC3D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC0L,cAAc,IAAI,IAAI,IAAI1L,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC7G,MAAM,CAACC,OAAO,CAAC0L,cAAc,EAAEzL,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACvI,IAAIP,OAAO,CAAC2L,cAAc,IAAI,IAAI,IAAI3L,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC7G,MAAM,CAACC,OAAO,CAAC2L,cAAc,EAAE1L,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACvI,OAAON,MAAM;QACjB,CAAC;QAWDwL,oBAAoB,CAACnL,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC7E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDkL,oBAAoB,CAACjL,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC1D,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuM,oBAAoB,EAAE;UAClI,OAAOhL,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC0L,cAAc,GAAG5M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACpG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACnG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC2L,cAAc,GAAG7M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACpG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACnG;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDyL,oBAAoB,CAACzK,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACpE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDsL,oBAAoB,CAACxK,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACnD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC0L,cAAc,IAAI,IAAI,IAAI1L,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5E,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC3F,MAAM,CAACjB,OAAO,CAAC0L,cAAc,CAAC;YACrF,IAAIrF,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;UACxC;UACA,IAAIrG,OAAO,CAAC2L,cAAc,IAAI,IAAI,IAAI3L,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5E,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC3F,MAAM,CAACjB,OAAO,CAAC2L,cAAc,CAAC;YACrF,IAAItF,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;UACxC;UACA,OAAO,IAAI;QACf,CAAC;QAUDoF,oBAAoB,CAACpK,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC1D,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuM,oBAAoB,EACjE,OAAOnK,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuM,oBAAoB,EAAE;UACnE,IAAInK,MAAM,CAACoK,cAAc,IAAI,IAAI,EAAE;YAC/B,IAAI,OAAOpK,MAAM,CAACoK,cAAc,KAAK,QAAQ,EACzC,MAAMnF,SAAS,CAAC,4EAA4E,CAAC;YACjGvG,OAAO,CAAC0L,cAAc,GAAG5M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACvF,UAAU,CAACC,MAAM,CAACoK,cAAc,CAAC;UACzG;UACA,IAAIpK,MAAM,CAACqK,cAAc,IAAI,IAAI,EAAE;YAC/B,IAAI,OAAOrK,MAAM,CAACqK,cAAc,KAAK,QAAQ,EACzC,MAAMpF,SAAS,CAAC,4EAA4E,CAAC;YACjGvG,OAAO,CAAC2L,cAAc,GAAG7M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACvF,UAAU,CAACC,MAAM,CAACqK,cAAc,CAAC;UACzG;UACA,OAAO3L,OAAO;QAClB,CAAC;QAWDyL,oBAAoB,CAAC7J,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAChE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACoK,cAAc,GAAG,IAAI;YAC5BpK,MAAM,CAACqK,cAAc,GAAG,IAAI;UAChC;UACA,IAAI3L,OAAO,CAAC0L,cAAc,IAAI,IAAI,IAAI1L,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EoB,MAAM,CAACoK,cAAc,GAAG5M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAChF,QAAQ,CAAC5B,OAAO,CAAC0L,cAAc,EAAE7J,OAAO,CAAC;UAChH,IAAI7B,OAAO,CAAC2L,cAAc,IAAI,IAAI,IAAI3L,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EoB,MAAM,CAACqK,cAAc,GAAG7M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAChF,QAAQ,CAAC5B,OAAO,CAAC2L,cAAc,EAAE9J,OAAO,CAAC;UAChH,OAAOP,MAAM;QACjB,CAAC;QASDmK,oBAAoB,CAAChM,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACtD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOkJ,oBAAoB;MAC/B,CAAC,EAAG;MAEJvM,QAAQ,CAACmG,gBAAgB,GAAI,YAAW;QAkBpC,SAASA,gBAAgB,CAACjG,UAAU,EAAE;UAClC,IAAI,CAACgK,KAAK,GAAG,EAAE;UACf,IAAIhK,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA8F,gBAAgB,CAAC5F,SAAS,CAACwL,QAAQ,GAAG,EAAE;QAQxC5F,gBAAgB,CAAC5F,SAAS,CAAC2J,KAAK,GAAGxK,KAAK,CAAC8I,UAAU;QAUnDrC,gBAAgB,CAACvF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAClD,OAAO,IAAIiG,gBAAgB,CAACjG,UAAU,CAAC;QAC3C,CAAC;QAWDiG,gBAAgB,CAACtF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACvD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACiL,QAAQ,CAAC;UACrE,IAAIjL,OAAO,CAACoJ,KAAK,IAAI,IAAI,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAC7C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EACzCT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuM,oBAAoB,CAAC1L,MAAM,CAACC,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC1I,OAAON,MAAM;QACjB,CAAC;QAWDoF,gBAAgB,CAAC/E,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACzE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD8E,gBAAgB,CAAC7E,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACtD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmG,gBAAgB,EAAE;UAC9H,OAAO5E,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACiL,QAAQ,GAAGxK,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAACoJ,KAAK,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,CAAC,EACxCQ,OAAO,CAACoJ,KAAK,GAAG,EAAE;gBACtBpJ,OAAO,CAACoJ,KAAK,CAACvB,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuM,oBAAoB,CAACjL,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBACnG;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDqF,gBAAgB,CAACrE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAChE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDkF,gBAAgB,CAACpE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC/C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACiL,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAIjL,OAAO,CAACoJ,KAAK,IAAI,IAAI,IAAIpJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;YAC1D,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoJ,KAAK,CAAC,EAC7B,OAAO,uBAAuB;YAClC,KAAK,IAAI7J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EAAE;cAC3C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuM,oBAAoB,CAACxK,MAAM,CAACjB,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,CAAC;cACpF,IAAI8G,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;YAC/B;UACJ;UACA,OAAO,IAAI;QACf,CAAC;QAUDhB,gBAAgB,CAAChE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACtD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmG,gBAAgB,EAC7D,OAAO/D,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmG,gBAAgB,EAAE;UAC/D,IAAI/D,MAAM,CAAC2J,QAAQ,IAAI,IAAI,EACvBjL,OAAO,CAACiL,QAAQ,GAAGhJ,MAAM,CAACX,MAAM,CAAC2J,QAAQ,CAAC;UAC9C,IAAI3J,MAAM,CAAC8H,KAAK,EAAE;YACd,IAAI,CAACtB,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8H,KAAK,CAAC,EAC5B,MAAM7C,SAAS,CAAC,8DAA8D,CAAC;YACnFvG,OAAO,CAACoJ,KAAK,GAAG,EAAE;YAClB,KAAK,IAAI7J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8H,KAAK,CAAC5J,MAAM,EAAE,EAAED,CAAC,EAAE;cAC1C,IAAI,OAAO+B,MAAM,CAAC8H,KAAK,CAAC7J,CAAC,CAAC,KAAK,QAAQ,EACnC,MAAMgH,SAAS,CAAC,+DAA+D,CAAC;cACpFvG,OAAO,CAACoJ,KAAK,CAAC7J,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuM,oBAAoB,CAACpK,UAAU,CAACC,MAAM,CAAC8H,KAAK,CAAC7J,CAAC,CAAC,CAAC;YAClG;UACJ;UACA,OAAOS,OAAO;QAClB,CAAC;QAWDqF,gBAAgB,CAACzD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC5D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC8H,KAAK,GAAG,EAAE;UACrB,IAAIvH,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAAC2J,QAAQ,GAAG,EAAE;UACxB,IAAIjL,OAAO,CAACiL,QAAQ,IAAI,IAAI,IAAIjL,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC2J,QAAQ,GAAGjL,OAAO,CAACiL,QAAQ;UACtC,IAAIjL,OAAO,CAACoJ,KAAK,IAAIpJ,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE;YACvC8B,MAAM,CAAC8H,KAAK,GAAG,EAAE;YACjB,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoJ,KAAK,CAAC5J,MAAM,EAAE,EAAEyI,CAAC,EACzC3G,MAAM,CAAC8H,KAAK,CAACnB,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuM,oBAAoB,CAAC7J,QAAQ,CAAC5B,OAAO,CAACoJ,KAAK,CAACnB,CAAC,CAAC,EAAEpG,OAAO,CAAC;UAC7G;UACA,OAAOP,MAAM;QACjB,CAAC;QASD+D,gBAAgB,CAAC5F,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAClD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO8C,gBAAgB;MAC3B,CAAC,EAAG;MAEJnG,QAAQ,CAAC6F,eAAe,GAAI,YAAW;QAuBnC,SAASA,eAAe,CAAC3F,UAAU,EAAE;UACjC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAwF,eAAe,CAACtF,SAAS,CAAC+L,SAAS,GAAG,IAAI;QAQ1CzG,eAAe,CAACtF,SAAS,CAACmM,QAAQ,GAAG,IAAI;QASzC7G,eAAe,CAACtF,SAAS,CAACoM,OAAO,GAAG,CAAC;QAQrC9G,eAAe,CAACtF,SAAS,CAACqM,UAAU,GAAG,EAAE;QASzC/G,eAAe,CAACtF,SAAS,CAACkJ,EAAE,GAAG,EAAE;QAUjC5D,eAAe,CAACjF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACjD,OAAO,IAAI2F,eAAe,CAAC3F,UAAU,CAAC;QAC1C,CAAC;QAWD2F,eAAe,CAAChF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACtD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACY,MAAM,CAACC,OAAO,CAACwL,SAAS,EAAEvL,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC5H,IAAIP,OAAO,CAAC4L,QAAQ,IAAI,IAAI,IAAI5L,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACgH,QAAQ,CAAChM,MAAM,CAACC,OAAO,CAAC4L,QAAQ,EAAE3L,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC1I,IAAIP,OAAO,CAAC6L,OAAO,IAAI,IAAI,IAAI7L,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACA,MAAM,CAACH,OAAO,CAAC6L,OAAO,CAAC;UACpE,IAAI7L,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC8L,UAAU,CAAC;UACvE,IAAI9L,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;UAC/D,OAAO1I,MAAM;QACjB,CAAC;QAWD8E,eAAe,CAACzE,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACxE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDwE,eAAe,CAACvE,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACrD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,EAAE;UAC7H,OAAOtE,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACqB,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACxF;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC4L,QAAQ,GAAG9M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACgH,QAAQ,CAACvL,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACtG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC6L,OAAO,GAAGpL,MAAM,CAACN,MAAM,EAAE;gBACjC;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC8L,UAAU,GAAGrL,MAAM,CAACwF,MAAM,EAAE;gBACpC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;gBAC5B;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD+E,eAAe,CAAC/D,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC/D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD4E,eAAe,CAAC9D,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC9C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAAC8B,MAAM,CAACjB,OAAO,CAACwL,SAAS,CAAC;YAC1E,IAAInF,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;UACnC;UACA,IAAIrG,OAAO,CAAC4L,QAAQ,IAAI,IAAI,IAAI5L,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;YAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACgH,QAAQ,CAAC9K,MAAM,CAACjB,OAAO,CAAC4L,QAAQ,CAAC;YACxF,IAAIvF,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;UAClC;UACA,IAAIrG,OAAO,CAAC6L,OAAO,IAAI,IAAI,IAAI7L,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAAC6L,OAAO,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAI7L,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC8L,UAAU,CAAC,EACnC,OAAO,6BAA6B;UAC5C,IAAI9L,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;UACpC,OAAO,IAAI;QACf,CAAC;QAUD5D,eAAe,CAAC1D,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACrD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,EAC5D,OAAOzD,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,EAAE;UAC9D,IAAIzD,MAAM,CAACkK,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,OAAOlK,MAAM,CAACkK,SAAS,KAAK,QAAQ,EACpC,MAAMjF,SAAS,CAAC,kEAAkE,CAAC;YACvFvG,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACkC,UAAU,CAACC,MAAM,CAACkK,SAAS,CAAC;UACzF;UACA,IAAIlK,MAAM,CAACsK,QAAQ,IAAI,IAAI,EAAE;YACzB,IAAI,OAAOtK,MAAM,CAACsK,QAAQ,KAAK,QAAQ,EACnC,MAAMrF,SAAS,CAAC,iEAAiE,CAAC;YACtFvG,OAAO,CAAC4L,QAAQ,GAAG9M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACgH,QAAQ,CAAC1K,UAAU,CAACC,MAAM,CAACsK,QAAQ,CAAC;UACtG;UACA,IAAItK,MAAM,CAACuK,OAAO,IAAI,IAAI,EACtB7L,OAAO,CAAC6L,OAAO,GAAGvK,MAAM,CAACuK,OAAO,KAAK,CAAC;UAC1C,IAAIvK,MAAM,CAACwK,UAAU,IAAI,IAAI,EACzB9L,OAAO,CAAC8L,UAAU,GAAG7J,MAAM,CAACX,MAAM,CAACwK,UAAU,CAAC;UAClD,IAAIxK,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;UAClC,OAAO3I,OAAO;QAClB,CAAC;QAWD+E,eAAe,CAACnD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC3D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACkK,SAAS,GAAG,IAAI;YACvBlK,MAAM,CAACsK,QAAQ,GAAG,IAAI;YACtBtK,MAAM,CAACuK,OAAO,GAAG,CAAC;YAClBvK,MAAM,CAACwK,UAAU,GAAG,EAAE;YACtBxK,MAAM,CAACqH,EAAE,GAAG,EAAE;UAClB;UACA,IAAI3I,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEoB,MAAM,CAACkK,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACyC,QAAQ,CAAC5B,OAAO,CAACwL,SAAS,EAAE3J,OAAO,CAAC;UAChG,IAAI7B,OAAO,CAAC4L,QAAQ,IAAI,IAAI,IAAI5L,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACsK,QAAQ,GAAG9M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACgH,QAAQ,CAACnK,QAAQ,CAAC5B,OAAO,CAAC4L,QAAQ,EAAE/J,OAAO,CAAC;UAC7G,IAAI7B,OAAO,CAAC6L,OAAO,IAAI,IAAI,IAAI7L,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACuK,OAAO,GAAG7L,OAAO,CAAC6L,OAAO;UACpC,IAAI7L,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAACwK,UAAU,GAAG9L,OAAO,CAAC8L,UAAU;UAC1C,IAAI9L,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;UAC1B,OAAOrH,MAAM;QACjB,CAAC;QASDyD,eAAe,CAACtF,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACjD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAEDwC,eAAe,CAACgH,QAAQ,GAAI,YAAW;UAoBnC,SAASA,QAAQ,CAAC3M,UAAU,EAAE;YAC1B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;UACnD;UAQAwM,QAAQ,CAACtM,SAAS,CAACuM,cAAc,GAAG,EAAE;UAQtCD,QAAQ,CAACtM,SAAS,CAACwM,OAAO,GAAG,EAAE;UAQ/BF,QAAQ,CAACtM,SAAS,CAACyM,EAAE,GAAG,EAAE;UAQ1BH,QAAQ,CAACtM,SAAS,CAAC0M,GAAG,GAAG,EAAE;UAU3BJ,QAAQ,CAACjM,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;YAC1C,OAAO,IAAI2M,QAAQ,CAAC3M,UAAU,CAAC;UACnC,CAAC;UAWD2M,QAAQ,CAAChM,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;YAC/C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;YAC7B,IAAIE,OAAO,CAACgM,cAAc,IAAI,IAAI,IAAIhM,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1ED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACgM,cAAc,CAAC;YAC3E,IAAIhM,OAAO,CAACiM,OAAO,IAAI,IAAI,IAAIjM,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACiM,OAAO,CAAC;YACpE,IAAIjM,OAAO,CAACkM,EAAE,IAAI,IAAI,IAAIlM,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACkM,EAAE,CAAC;YAC/D,IAAIlM,OAAO,CAACmM,GAAG,IAAI,IAAI,IAAInM,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACmM,GAAG,CAAC;YAChE,OAAOlM,MAAM;UACjB,CAAC;UAWD8L,QAAQ,CAACzL,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;YACjE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;UAChD,CAAC;UAaDwL,QAAQ,CAACvL,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;YAC9C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;YACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;cAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACgH,QAAQ,EAAE;YACtI,OAAOtL,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;cACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;cACzB,QAAQW,GAAG,KAAK,CAAC;gBACjB,KAAK,CAAC;kBACFd,OAAO,CAACgM,cAAc,GAAGvL,MAAM,CAACwF,MAAM,EAAE;kBACxC;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAACiM,OAAO,GAAGxL,MAAM,CAACwF,MAAM,EAAE;kBACjC;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAACkM,EAAE,GAAGzL,MAAM,CAACwF,MAAM,EAAE;kBAC5B;gBACJ,KAAK,CAAC;kBACFjG,OAAO,CAACmM,GAAG,GAAG1L,MAAM,CAACwF,MAAM,EAAE;kBAC7B;gBACJ;kBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;kBACxB;cAAM;YAEd;YACA,OAAOd,OAAO;UAClB,CAAC;UAYD+L,QAAQ,CAAC/K,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;YACxD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;YAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;UAC/C,CAAC;UAUD4L,QAAQ,CAAC9K,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;YACvC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;YAC5B,IAAIA,OAAO,CAACgM,cAAc,IAAI,IAAI,IAAIhM,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACgM,cAAc,CAAC,EACvC,OAAO,iCAAiC;YAChD,IAAIhM,OAAO,CAACiM,OAAO,IAAI,IAAI,IAAIjM,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACiM,OAAO,CAAC,EAChC,OAAO,0BAA0B;YACzC,IAAIjM,OAAO,CAACkM,EAAE,IAAI,IAAI,IAAIlM,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACkM,EAAE,CAAC,EAC3B,OAAO,qBAAqB;YACpC,IAAIlM,OAAO,CAACmM,GAAG,IAAI,IAAI,IAAInM,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACmM,GAAG,CAAC,EAC5B,OAAO,sBAAsB;YACrC,OAAO,IAAI;UACf,CAAC;UAUDJ,QAAQ,CAAC1K,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;YAC9C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACgH,QAAQ,EACrE,OAAOzK,MAAM;YACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6F,eAAe,CAACgH,QAAQ,EAAE;YACvE,IAAIzK,MAAM,CAAC0K,cAAc,IAAI,IAAI,EAC7BhM,OAAO,CAACgM,cAAc,GAAG/J,MAAM,CAACX,MAAM,CAAC0K,cAAc,CAAC;YAC1D,IAAI1K,MAAM,CAAC2K,OAAO,IAAI,IAAI,EACtBjM,OAAO,CAACiM,OAAO,GAAGhK,MAAM,CAACX,MAAM,CAAC2K,OAAO,CAAC;YAC5C,IAAI3K,MAAM,CAAC4K,EAAE,IAAI,IAAI,EACjBlM,OAAO,CAACkM,EAAE,GAAGjK,MAAM,CAACX,MAAM,CAAC4K,EAAE,CAAC;YAClC,IAAI5K,MAAM,CAAC6K,GAAG,IAAI,IAAI,EAClBnM,OAAO,CAACmM,GAAG,GAAGlK,MAAM,CAACX,MAAM,CAAC6K,GAAG,CAAC;YACpC,OAAOnM,OAAO;UAClB,CAAC;UAWD+L,QAAQ,CAACnK,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;YACpD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;YAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;YACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;cAClBR,MAAM,CAAC0K,cAAc,GAAG,EAAE;cAC1B1K,MAAM,CAAC2K,OAAO,GAAG,EAAE;cACnB3K,MAAM,CAAC4K,EAAE,GAAG,EAAE;cACd5K,MAAM,CAAC6K,GAAG,GAAG,EAAE;YACnB;YACA,IAAInM,OAAO,CAACgM,cAAc,IAAI,IAAI,IAAIhM,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EoB,MAAM,CAAC0K,cAAc,GAAGhM,OAAO,CAACgM,cAAc;YAClD,IAAIhM,OAAO,CAACiM,OAAO,IAAI,IAAI,IAAIjM,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAAC2K,OAAO,GAAGjM,OAAO,CAACiM,OAAO;YACpC,IAAIjM,OAAO,CAACkM,EAAE,IAAI,IAAI,IAAIlM,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAAC4K,EAAE,GAAGlM,OAAO,CAACkM,EAAE;YAC1B,IAAIlM,OAAO,CAACmM,GAAG,IAAI,IAAI,IAAInM,OAAO,CAACE,cAAc,CAAC,KAAK,CAAC,EACpDoB,MAAM,CAAC6K,GAAG,GAAGnM,OAAO,CAACmM,GAAG;YAC5B,OAAO7K,MAAM;UACjB,CAAC;UASDyK,QAAQ,CAACtM,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;YAC1C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;UACxE,CAAC;UAED,OAAOwJ,QAAQ;QACnB,CAAC,EAAG;QAEJ,OAAOhH,eAAe;MAC1B,CAAC,EAAG;MAEJ7F,QAAQ,CAACgG,gBAAgB,GAAI,YAAW;QAmBpC,SAASA,gBAAgB,CAAC9F,UAAU,EAAE;UAClC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA2F,gBAAgB,CAACzF,SAAS,CAAC+L,SAAS,GAAG,IAAI;QAQ3CtG,gBAAgB,CAACzF,SAAS,CAAC2M,UAAU,GAAG,IAAI;QAQ5ClH,gBAAgB,CAACzF,SAAS,CAAC6K,iBAAiB,GAAG,EAAE;QAUjDpF,gBAAgB,CAACpF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAClD,OAAO,IAAI8F,gBAAgB,CAAC9F,UAAU,CAAC;QAC3C,CAAC;QAWD8F,gBAAgB,CAACnF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACvD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACY,MAAM,CAACC,OAAO,CAACwL,SAAS,EAAEvL,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC5H,IAAIP,OAAO,CAACoM,UAAU,IAAI,IAAI,IAAIpM,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACtM,MAAM,CAACC,OAAO,CAACoM,UAAU,EAAEnM,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC9H,IAAIP,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsK,iBAAiB,CAAC;UAC9E,OAAOrK,MAAM;QACjB,CAAC;QAWDiF,gBAAgB,CAAC5E,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACzE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD2E,gBAAgB,CAAC1E,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACtD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgG,gBAAgB,EAAE;UAC9H,OAAOzE,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACqB,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACxF;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACoM,UAAU,GAAGtN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAAC7L,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC1F;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACsK,iBAAiB,GAAG7J,MAAM,CAACwF,MAAM,EAAE;gBAC3C;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDkF,gBAAgB,CAAClE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAChE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD+E,gBAAgB,CAACjE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC/C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAAC8B,MAAM,CAACjB,OAAO,CAACwL,SAAS,CAAC;YAC1E,IAAInF,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;UACnC;UACA,IAAIrG,OAAO,CAACoM,UAAU,IAAI,IAAI,IAAIpM,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;YACpE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACpL,MAAM,CAACjB,OAAO,CAACoM,UAAU,CAAC;YAC5E,IAAI/F,KAAK,EACL,OAAO,aAAa,GAAGA,KAAK;UACpC;UACA,IAAIrG,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChF,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsK,iBAAiB,CAAC,EAC1C,OAAO,oCAAoC;UACnD,OAAO,IAAI;QACf,CAAC;QAUDpF,gBAAgB,CAAC7D,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACtD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgG,gBAAgB,EAC7D,OAAO5D,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgG,gBAAgB,EAAE;UAC/D,IAAI5D,MAAM,CAACkK,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,OAAOlK,MAAM,CAACkK,SAAS,KAAK,QAAQ,EACpC,MAAMjF,SAAS,CAAC,mEAAmE,CAAC;YACxFvG,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACkC,UAAU,CAACC,MAAM,CAACkK,SAAS,CAAC;UACzF;UACA,IAAIlK,MAAM,CAAC8K,UAAU,IAAI,IAAI,EAAE;YAC3B,IAAI,OAAO9K,MAAM,CAAC8K,UAAU,KAAK,QAAQ,EACrC,MAAM7F,SAAS,CAAC,oEAAoE,CAAC;YACzFvG,OAAO,CAACoM,UAAU,GAAGtN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAAChL,UAAU,CAACC,MAAM,CAAC8K,UAAU,CAAC;UAC5F;UACA,IAAI9K,MAAM,CAACgJ,iBAAiB,IAAI,IAAI,EAChCtK,OAAO,CAACsK,iBAAiB,GAAGrI,MAAM,CAACX,MAAM,CAACgJ,iBAAiB,CAAC;UAChE,OAAOtK,OAAO;QAClB,CAAC;QAWDkF,gBAAgB,CAACtD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC5D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACkK,SAAS,GAAG,IAAI;YACvBlK,MAAM,CAAC8K,UAAU,GAAG,IAAI;YACxB9K,MAAM,CAACgJ,iBAAiB,GAAG,EAAE;UACjC;UACA,IAAItK,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEoB,MAAM,CAACkK,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACyC,QAAQ,CAAC5B,OAAO,CAACwL,SAAS,EAAE3J,OAAO,CAAC;UAChG,IAAI7B,OAAO,CAACoM,UAAU,IAAI,IAAI,IAAIpM,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAAC8K,UAAU,GAAGtN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACzK,QAAQ,CAAC5B,OAAO,CAACoM,UAAU,EAAEvK,OAAO,CAAC;UACnG,IAAI7B,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFoB,MAAM,CAACgJ,iBAAiB,GAAGtK,OAAO,CAACsK,iBAAiB;UACxD,OAAOhJ,MAAM;QACjB,CAAC;QASD4D,gBAAgB,CAACzF,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAClD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO2C,gBAAgB;MAC3B,CAAC,EAAG;MAEJhG,QAAQ,CAAC8F,eAAe,GAAI,YAAW;QAmBnC,SAASA,eAAe,CAAC5F,UAAU,EAAE;UACjC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAyF,eAAe,CAACvF,SAAS,CAAC+L,SAAS,GAAG,IAAI;QAQ1CxG,eAAe,CAACvF,SAAS,CAAC4K,UAAU,GAAG,EAAE;QAQzCrF,eAAe,CAACvF,SAAS,CAAC6K,iBAAiB,GAAG,EAAE;QAUhDtF,eAAe,CAAClF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACjD,OAAO,IAAI4F,eAAe,CAAC5F,UAAU,CAAC;QAC1C,CAAC;QAWD4F,eAAe,CAACjF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACtD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACY,MAAM,CAACC,OAAO,CAACwL,SAAS,EAAEvL,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC5H,IAAIP,OAAO,CAACqK,UAAU,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACqK,UAAU,CAAC;UACvE,IAAIrK,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsK,iBAAiB,CAAC;UAC9E,OAAOrK,MAAM;QACjB,CAAC;QAWD+E,eAAe,CAAC1E,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACxE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDyE,eAAe,CAACxE,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACrD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8F,eAAe,EAAE;UAC7H,OAAOvE,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACqB,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACxF;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACqK,UAAU,GAAG5J,MAAM,CAACwF,MAAM,EAAE;gBACpC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACsK,iBAAiB,GAAG7J,MAAM,CAACwF,MAAM,EAAE;gBAC3C;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDgF,eAAe,CAAChE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC/D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD6E,eAAe,CAAC/D,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC9C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAAC8B,MAAM,CAACjB,OAAO,CAACwL,SAAS,CAAC;YAC1E,IAAInF,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;UACnC;UACA,IAAIrG,OAAO,CAACqK,UAAU,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACqK,UAAU,CAAC,EACnC,OAAO,6BAA6B;UAC5C,IAAIrK,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChF,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsK,iBAAiB,CAAC,EAC1C,OAAO,oCAAoC;UACnD,OAAO,IAAI;QACf,CAAC;QAUDtF,eAAe,CAAC3D,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACrD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8F,eAAe,EAC5D,OAAO1D,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8F,eAAe,EAAE;UAC9D,IAAI1D,MAAM,CAACkK,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,OAAOlK,MAAM,CAACkK,SAAS,KAAK,QAAQ,EACpC,MAAMjF,SAAS,CAAC,kEAAkE,CAAC;YACvFvG,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACkC,UAAU,CAACC,MAAM,CAACkK,SAAS,CAAC;UACzF;UACA,IAAIlK,MAAM,CAAC+I,UAAU,IAAI,IAAI,EACzBrK,OAAO,CAACqK,UAAU,GAAGpI,MAAM,CAACX,MAAM,CAAC+I,UAAU,CAAC;UAClD,IAAI/I,MAAM,CAACgJ,iBAAiB,IAAI,IAAI,EAChCtK,OAAO,CAACsK,iBAAiB,GAAGrI,MAAM,CAACX,MAAM,CAACgJ,iBAAiB,CAAC;UAChE,OAAOtK,OAAO;QAClB,CAAC;QAWDgF,eAAe,CAACpD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC3D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACkK,SAAS,GAAG,IAAI;YACvBlK,MAAM,CAAC+I,UAAU,GAAG,EAAE;YACtB/I,MAAM,CAACgJ,iBAAiB,GAAG,EAAE;UACjC;UACA,IAAItK,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEoB,MAAM,CAACkK,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACyC,QAAQ,CAAC5B,OAAO,CAACwL,SAAS,EAAE3J,OAAO,CAAC;UAChG,IAAI7B,OAAO,CAACqK,UAAU,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAAC+I,UAAU,GAAGrK,OAAO,CAACqK,UAAU;UAC1C,IAAIrK,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFoB,MAAM,CAACgJ,iBAAiB,GAAGtK,OAAO,CAACsK,iBAAiB;UACxD,OAAOhJ,MAAM;QACjB,CAAC;QASD0D,eAAe,CAACvF,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACjD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOyC,eAAe;MAC1B,CAAC,EAAG;MAEJ9F,QAAQ,CAAC+F,gBAAgB,GAAI,YAAW;QAoBpC,SAASA,gBAAgB,CAAC7F,UAAU,EAAE;UAClC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA0F,gBAAgB,CAACxF,SAAS,CAAC2M,UAAU,GAAG,IAAI;QAQ5CnH,gBAAgB,CAACxF,SAAS,CAAC+L,SAAS,GAAG,IAAI;QAQ3CvG,gBAAgB,CAACxF,SAAS,CAAC4K,UAAU,GAAG,EAAE;QAQ1CpF,gBAAgB,CAACxF,SAAS,CAAC6K,iBAAiB,GAAG,EAAE;QAUjDrF,gBAAgB,CAACnF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAClD,OAAO,IAAI6F,gBAAgB,CAAC7F,UAAU,CAAC;QAC3C,CAAC;QAWD6F,gBAAgB,CAAClF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACvD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACoM,UAAU,IAAI,IAAI,IAAIpM,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACtM,MAAM,CAACC,OAAO,CAACoM,UAAU,EAAEnM,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC9H,IAAIP,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACY,MAAM,CAACC,OAAO,CAACwL,SAAS,EAAEvL,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC5H,IAAIP,OAAO,CAACqK,UAAU,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACqK,UAAU,CAAC;UACvE,IAAIrK,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsK,iBAAiB,CAAC;UAC9E,OAAOrK,MAAM;QACjB,CAAC;QAWDgF,gBAAgB,CAAC3E,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACzE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD0E,gBAAgB,CAACzE,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACtD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+F,gBAAgB,EAAE;UAC9H,OAAOxE,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACoM,UAAU,GAAGtN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAAC7L,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC1F;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACqB,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACxF;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACqK,UAAU,GAAG5J,MAAM,CAACwF,MAAM,EAAE;gBACpC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACsK,iBAAiB,GAAG7J,MAAM,CAACwF,MAAM,EAAE;gBAC3C;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDiF,gBAAgB,CAACjE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAChE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD8E,gBAAgB,CAAChE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC/C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACoM,UAAU,IAAI,IAAI,IAAIpM,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;YACpE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACpL,MAAM,CAACjB,OAAO,CAACoM,UAAU,CAAC;YAC5E,IAAI/F,KAAK,EACL,OAAO,aAAa,GAAGA,KAAK;UACpC;UACA,IAAIrG,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAAC8B,MAAM,CAACjB,OAAO,CAACwL,SAAS,CAAC;YAC1E,IAAInF,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;UACnC;UACA,IAAIrG,OAAO,CAACqK,UAAU,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACqK,UAAU,CAAC,EACnC,OAAO,6BAA6B;UAC5C,IAAIrK,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChF,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsK,iBAAiB,CAAC,EAC1C,OAAO,oCAAoC;UACnD,OAAO,IAAI;QACf,CAAC;QAUDrF,gBAAgB,CAAC5D,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACtD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+F,gBAAgB,EAC7D,OAAO3D,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+F,gBAAgB,EAAE;UAC/D,IAAI3D,MAAM,CAAC8K,UAAU,IAAI,IAAI,EAAE;YAC3B,IAAI,OAAO9K,MAAM,CAAC8K,UAAU,KAAK,QAAQ,EACrC,MAAM7F,SAAS,CAAC,oEAAoE,CAAC;YACzFvG,OAAO,CAACoM,UAAU,GAAGtN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAAChL,UAAU,CAACC,MAAM,CAAC8K,UAAU,CAAC;UAC5F;UACA,IAAI9K,MAAM,CAACkK,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,OAAOlK,MAAM,CAACkK,SAAS,KAAK,QAAQ,EACpC,MAAMjF,SAAS,CAAC,mEAAmE,CAAC;YACxFvG,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACkC,UAAU,CAACC,MAAM,CAACkK,SAAS,CAAC;UACzF;UACA,IAAIlK,MAAM,CAAC+I,UAAU,IAAI,IAAI,EACzBrK,OAAO,CAACqK,UAAU,GAAGpI,MAAM,CAACX,MAAM,CAAC+I,UAAU,CAAC;UAClD,IAAI/I,MAAM,CAACgJ,iBAAiB,IAAI,IAAI,EAChCtK,OAAO,CAACsK,iBAAiB,GAAGrI,MAAM,CAACX,MAAM,CAACgJ,iBAAiB,CAAC;UAChE,OAAOtK,OAAO;QAClB,CAAC;QAWDiF,gBAAgB,CAACrD,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC5D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAAC8K,UAAU,GAAG,IAAI;YACxB9K,MAAM,CAACkK,SAAS,GAAG,IAAI;YACvBlK,MAAM,CAAC+I,UAAU,GAAG,EAAE;YACtB/I,MAAM,CAACgJ,iBAAiB,GAAG,EAAE;UACjC;UACA,IAAItK,OAAO,CAACoM,UAAU,IAAI,IAAI,IAAIpM,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAAC8K,UAAU,GAAGtN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACzK,QAAQ,CAAC5B,OAAO,CAACoM,UAAU,EAAEvK,OAAO,CAAC;UACnG,IAAI7B,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEoB,MAAM,CAACkK,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACyC,QAAQ,CAAC5B,OAAO,CAACwL,SAAS,EAAE3J,OAAO,CAAC;UAChG,IAAI7B,OAAO,CAACqK,UAAU,IAAI,IAAI,IAAIrK,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAAC+I,UAAU,GAAGrK,OAAO,CAACqK,UAAU;UAC1C,IAAIrK,OAAO,CAACsK,iBAAiB,IAAI,IAAI,IAAItK,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFoB,MAAM,CAACgJ,iBAAiB,GAAGtK,OAAO,CAACsK,iBAAiB;UACxD,OAAOhJ,MAAM;QACjB,CAAC;QASD2D,gBAAgB,CAACxF,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAClD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO0C,gBAAgB;MAC3B,CAAC,EAAG;MAEJ/F,QAAQ,CAACmN,UAAU,GAAI,YAAW;QAoB9B,SAASA,UAAU,CAACjN,UAAU,EAAE;UAC5B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA8M,UAAU,CAAC5M,SAAS,CAAC6M,MAAM,GAAG,CAAC;QAQ/BD,UAAU,CAAC5M,SAAS,CAACO,OAAO,GAAG,EAAE;QAQjCqM,UAAU,CAAC5M,SAAS,CAAC8M,QAAQ,GAAG,IAAI;QAQpCF,UAAU,CAAC5M,SAAS,CAAC+M,aAAa,GAAG,KAAK;QAU1CH,UAAU,CAACvM,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC5C,OAAO,IAAIiN,UAAU,CAACjN,UAAU,CAAC;QACrC,CAAC;QAWDiN,UAAU,CAACtM,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACjD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACsM,MAAM,IAAI,IAAI,IAAItM,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DD,MAAM,CAACE,MAAM,CAAwB,CAAC,CAAC,CAACE,KAAK,CAACL,OAAO,CAACsM,MAAM,CAAC;UACjE,IAAItM,OAAO,CAACA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACA,OAAO,CAAC;UACpE,IAAIA,OAAO,CAACuM,QAAQ,IAAI,IAAI,IAAIvM,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsD,QAAQ,CAACzC,MAAM,CAACC,OAAO,CAACuM,QAAQ,EAAEtM,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC1H,IAAIP,OAAO,CAACwM,aAAa,IAAI,IAAI,IAAIxM,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACsM,IAAI,CAACzM,OAAO,CAACwM,aAAa,CAAC;UACxE,OAAOvM,MAAM;QACjB,CAAC;QAWDoM,UAAU,CAAC/L,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACnE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD8L,UAAU,CAAC7L,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAChD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,EAAE;UACxH,OAAO5L,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACsM,MAAM,GAAG7L,MAAM,CAACJ,KAAK,EAAE;gBAC/B;cACJ,KAAK,CAAC;gBACFL,OAAO,CAACA,OAAO,GAAGS,MAAM,CAACwF,MAAM,EAAE;gBACjC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACuM,QAAQ,GAAGzN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsD,QAAQ,CAAChC,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACtF;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACwM,aAAa,GAAG/L,MAAM,CAACgM,IAAI,EAAE;gBACrC;cACJ;gBACIhM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDqM,UAAU,CAACrL,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC1D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDkM,UAAU,CAACpL,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACzC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACsM,MAAM,IAAI,IAAI,IAAItM,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,QAAQF,OAAO,CAACsM,MAAM;YACtB;cACI,OAAO,6BAA6B;YACxC,KAAK,CAAC;YACN,KAAK,CAAC;YACN,KAAK,CAAC;YACN,KAAK,CAAC;YACN,KAAK,CAAC;YACN,KAAK,CAAC;YACN,KAAK,CAAC;cACF;UAAM;UAEd,IAAItM,OAAO,CAACA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACA,OAAO,CAAC,EAChC,OAAO,0BAA0B;UACzC,IAAIA,OAAO,CAACuM,QAAQ,IAAI,IAAI,IAAIvM,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;YAChE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsD,QAAQ,CAACvB,MAAM,CAACjB,OAAO,CAACuM,QAAQ,CAAC;YACxE,IAAIlG,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;UAClC;UACA,IAAIrG,OAAO,CAACwM,aAAa,IAAI,IAAI,IAAIxM,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxE,IAAI,OAAOF,OAAO,CAACwM,aAAa,KAAK,SAAS,EAC1C,OAAO,iCAAiC;UAChD,OAAO,IAAI;QACf,CAAC;QAUDH,UAAU,CAAChL,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAChD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,EACvD,OAAO/K,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,EAAE;UACzD,QAAQ/K,MAAM,CAACgL,MAAM;YACrB,KAAK,SAAS;YACd,KAAK,CAAC;cACFtM,OAAO,CAACsM,MAAM,GAAG,CAAC;cAClB;YACJ,KAAK,QAAQ;YACb,KAAK,CAAC;cACFtM,OAAO,CAACsM,MAAM,GAAG,CAAC;cAClB;YACJ,KAAK,SAAS;YACd,KAAK,CAAC;cACFtM,OAAO,CAACsM,MAAM,GAAG,CAAC;cAClB;YACJ,KAAK,SAAS;YACd,KAAK,CAAC;cACFtM,OAAO,CAACsM,MAAM,GAAG,CAAC;cAClB;YACJ,KAAK,WAAW;YAChB,KAAK,CAAC;cACFtM,OAAO,CAACsM,MAAM,GAAG,CAAC;cAClB;YACJ,KAAK,WAAW;YAChB,KAAK,CAAC;cACFtM,OAAO,CAACsM,MAAM,GAAG,CAAC;cAClB;YACJ,KAAK,QAAQ;YACb,KAAK,CAAC;cACFtM,OAAO,CAACsM,MAAM,GAAG,CAAC;cAClB;UAAM;UAEV,IAAIhL,MAAM,CAACtB,OAAO,IAAI,IAAI,EACtBA,OAAO,CAACA,OAAO,GAAGiC,MAAM,CAACX,MAAM,CAACtB,OAAO,CAAC;UAC5C,IAAIsB,MAAM,CAACiL,QAAQ,IAAI,IAAI,EAAE;YACzB,IAAI,OAAOjL,MAAM,CAACiL,QAAQ,KAAK,QAAQ,EACnC,MAAMhG,SAAS,CAAC,4DAA4D,CAAC;YACjFvG,OAAO,CAACuM,QAAQ,GAAGzN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsD,QAAQ,CAACnB,UAAU,CAACC,MAAM,CAACiL,QAAQ,CAAC;UACtF;UACA,IAAIjL,MAAM,CAACkL,aAAa,IAAI,IAAI,EAC5BxM,OAAO,CAACwM,aAAa,GAAGE,OAAO,CAACpL,MAAM,CAACkL,aAAa,CAAC;UACzD,OAAOxM,OAAO;QAClB,CAAC;QAWDqM,UAAU,CAACzK,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACtD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACgL,MAAM,GAAGzK,OAAO,CAACqF,KAAK,KAAKjF,MAAM,GAAG,SAAS,GAAG,CAAC;YACxDX,MAAM,CAACtB,OAAO,GAAG,EAAE;YACnBsB,MAAM,CAACiL,QAAQ,GAAG,IAAI;YACtBjL,MAAM,CAACkL,aAAa,GAAG,KAAK;UAChC;UACA,IAAIxM,OAAO,CAACsM,MAAM,IAAI,IAAI,IAAItM,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DoB,MAAM,CAACgL,MAAM,GAAGzK,OAAO,CAACqF,KAAK,KAAKjF,MAAM,GAAGnD,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACM,MAAM,CAAC3M,OAAO,CAACsM,MAAM,CAAC,GAAGtM,OAAO,CAACsM,MAAM;UAC5H,IAAItM,OAAO,CAACA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACtB,OAAO,GAAGA,OAAO,CAACA,OAAO;UACpC,IAAIA,OAAO,CAACuM,QAAQ,IAAI,IAAI,IAAIvM,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACiL,QAAQ,GAAGzN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsD,QAAQ,CAACZ,QAAQ,CAAC5B,OAAO,CAACuM,QAAQ,EAAE1K,OAAO,CAAC;UAC7F,IAAI7B,OAAO,CAACwM,aAAa,IAAI,IAAI,IAAIxM,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEoB,MAAM,CAACkL,aAAa,GAAGxM,OAAO,CAACwM,aAAa;UAChD,OAAOlL,MAAM;QACjB,CAAC;QASD+K,UAAU,CAAC5M,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC5C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAuBD8J,UAAU,CAACM,MAAM,GAAI,YAAW;UAC5B,IAAIvF,UAAU,GAAG,CAAC,CAAC;YAAEC,MAAM,GAAG/H,MAAM,CAACQ,MAAM,CAACsH,UAAU,CAAC;UACvDC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;UACrCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;UACpCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;UACrCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;UACrCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC;UACvCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC;UACvCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;UACpC,OAAOC,MAAM;QACjB,CAAC,EAAG;QAEJ,OAAOgF,UAAU;MACrB,CAAC,EAAG;MAEJnN,QAAQ,CAACqG,eAAe,GAAI,YAAW;QAkBnC,SAASA,eAAe,CAACnG,UAAU,EAAE;UACjC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAgG,eAAe,CAAC9F,SAAS,CAACmN,OAAO,GAAG,KAAK;QAQzCrH,eAAe,CAAC9F,SAAS,CAAC+L,SAAS,GAAG,IAAI;QAU1CjG,eAAe,CAACzF,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACjD,OAAO,IAAImG,eAAe,CAACnG,UAAU,CAAC;QAC1C,CAAC;QAWDmG,eAAe,CAACxF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACtD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC4M,OAAO,IAAI,IAAI,IAAI5M,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,CAAC,CAAC,CAACsM,IAAI,CAACzM,OAAO,CAAC4M,OAAO,CAAC;UACjE,IAAI5M,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACY,MAAM,CAACC,OAAO,CAACwL,SAAS,EAAEvL,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC5H,OAAON,MAAM;QACjB,CAAC;QAWDsF,eAAe,CAACjF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACxE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDgF,eAAe,CAAC/E,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACrD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqG,eAAe,EAAE;UAC7H,OAAO9E,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC4M,OAAO,GAAGnM,MAAM,CAACgM,IAAI,EAAE;gBAC/B;cACJ,KAAK,CAAC;gBACFzM,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACqB,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACxF;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDuF,eAAe,CAACvE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC/D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDoF,eAAe,CAACtE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC9C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC4M,OAAO,IAAI,IAAI,IAAI5M,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,OAAOF,OAAO,CAAC4M,OAAO,KAAK,SAAS,EACpC,OAAO,2BAA2B;UAC1C,IAAI5M,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAAE;YAClE,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAAC8B,MAAM,CAACjB,OAAO,CAACwL,SAAS,CAAC;YAC1E,IAAInF,KAAK,EACL,OAAO,YAAY,GAAGA,KAAK;UACnC;UACA,OAAO,IAAI;QACf,CAAC;QAUDd,eAAe,CAAClE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACrD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqG,eAAe,EAC5D,OAAOjE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqG,eAAe,EAAE;UAC9D,IAAIjE,MAAM,CAACsL,OAAO,IAAI,IAAI,EACtB5M,OAAO,CAAC4M,OAAO,GAAGF,OAAO,CAACpL,MAAM,CAACsL,OAAO,CAAC;UAC7C,IAAItL,MAAM,CAACkK,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,OAAOlK,MAAM,CAACkK,SAAS,KAAK,QAAQ,EACpC,MAAMjF,SAAS,CAAC,kEAAkE,CAAC;YACvFvG,OAAO,CAACwL,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACkC,UAAU,CAACC,MAAM,CAACkK,SAAS,CAAC;UACzF;UACA,OAAOxL,OAAO;QAClB,CAAC;QAWDuF,eAAe,CAAC3D,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC3D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACsL,OAAO,GAAG,KAAK;YACtBtL,MAAM,CAACkK,SAAS,GAAG,IAAI;UAC3B;UACA,IAAIxL,OAAO,CAAC4M,OAAO,IAAI,IAAI,IAAI5M,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACsL,OAAO,GAAG5M,OAAO,CAAC4M,OAAO;UACpC,IAAI5M,OAAO,CAACwL,SAAS,IAAI,IAAI,IAAIxL,OAAO,CAACE,cAAc,CAAC,WAAW,CAAC,EAChEoB,MAAM,CAACkK,SAAS,GAAG1M,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAACyC,QAAQ,CAAC5B,OAAO,CAACwL,SAAS,EAAE3J,OAAO,CAAC;UAChG,OAAOP,MAAM;QACjB,CAAC;QASDiE,eAAe,CAAC9F,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACjD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOgD,eAAe;MAC1B,CAAC,EAAG;MAEJrG,QAAQ,CAACsG,YAAY,GAAI,YAAW;QAoBhC,SAASA,YAAY,CAACpG,UAAU,EAAE;UAC9B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAiG,YAAY,CAAC/F,SAAS,CAACoN,aAAa,GAAG,EAAE;QAQzCrH,YAAY,CAAC/F,SAAS,CAACqN,aAAa,GAAG,IAAI;QAQ3CtH,YAAY,CAAC/F,SAAS,CAACsN,aAAa,GAAG,IAAI;QAQ3CvH,YAAY,CAAC/F,SAAS,CAACuN,iBAAiB,GAAG,IAAI;QAU/CxH,YAAY,CAAC1F,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC9C,OAAO,IAAIoG,YAAY,CAACpG,UAAU,CAAC;QACvC,CAAC;QAWDoG,YAAY,CAACzF,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACnD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC6M,aAAa,IAAI,IAAI,IAAI7M,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC6M,aAAa,CAAC;UAC1E,IAAI7M,OAAO,CAAC8M,aAAa,IAAI,IAAI,IAAI9M,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+N,aAAa,CAAClN,MAAM,CAACC,OAAO,CAAC8M,aAAa,EAAE7M,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpI,IAAIP,OAAO,CAAC+M,aAAa,IAAI,IAAI,IAAI/M,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgO,aAAa,CAACnN,MAAM,CAACC,OAAO,CAAC+M,aAAa,EAAE9M,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpI,IAAIP,OAAO,CAACgN,iBAAiB,IAAI,IAAI,IAAIhN,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiO,iBAAiB,CAACpN,MAAM,CAACC,OAAO,CAACgN,iBAAiB,EAAE/M,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC5I,OAAON,MAAM;QACjB,CAAC;QAWDuF,YAAY,CAAClF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACrE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDiF,YAAY,CAAChF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAClD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsG,YAAY,EAAE;UAC1H,OAAO/E,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC6M,aAAa,GAAGpM,MAAM,CAACwF,MAAM,EAAE;gBACvC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC8M,aAAa,GAAGhO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+N,aAAa,CAACzM,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAChG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC+M,aAAa,GAAGjO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgO,aAAa,CAAC1M,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAChG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACgN,iBAAiB,GAAGlO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiO,iBAAiB,CAAC3M,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACxG;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDwF,YAAY,CAACxE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC5D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDqF,YAAY,CAACvE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC3C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC6M,aAAa,IAAI,IAAI,IAAI7M,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC6M,aAAa,CAAC,EACtC,OAAO,gCAAgC;UAC/C,IAAI7M,OAAO,CAAC8M,aAAa,IAAI,IAAI,IAAI9M,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EAAE;YAC1E,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+N,aAAa,CAAChM,MAAM,CAACjB,OAAO,CAAC8M,aAAa,CAAC;YAClF,IAAIzG,KAAK,EACL,OAAO,gBAAgB,GAAGA,KAAK;UACvC;UACA,IAAIrG,OAAO,CAAC+M,aAAa,IAAI,IAAI,IAAI/M,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EAAE;YAC1E,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgO,aAAa,CAACjM,MAAM,CAACjB,OAAO,CAAC+M,aAAa,CAAC;YAClF,IAAI1G,KAAK,EACL,OAAO,gBAAgB,GAAGA,KAAK;UACvC;UACA,IAAIrG,OAAO,CAACgN,iBAAiB,IAAI,IAAI,IAAIhN,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAAE;YAClF,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiO,iBAAiB,CAAClM,MAAM,CAACjB,OAAO,CAACgN,iBAAiB,CAAC;YAC1F,IAAI3G,KAAK,EACL,OAAO,oBAAoB,GAAGA,KAAK;UAC3C;UACA,OAAO,IAAI;QACf,CAAC;QAUDb,YAAY,CAACnE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAClD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsG,YAAY,EACzD,OAAOlE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsG,YAAY,EAAE;UAC3D,IAAIlE,MAAM,CAACuL,aAAa,IAAI,IAAI,EAC5B7M,OAAO,CAAC6M,aAAa,GAAG5K,MAAM,CAACX,MAAM,CAACuL,aAAa,CAAC;UACxD,IAAIvL,MAAM,CAACwL,aAAa,IAAI,IAAI,EAAE;YAC9B,IAAI,OAAOxL,MAAM,CAACwL,aAAa,KAAK,QAAQ,EACxC,MAAMvG,SAAS,CAAC,mEAAmE,CAAC;YACxFvG,OAAO,CAAC8M,aAAa,GAAGhO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+N,aAAa,CAAC5L,UAAU,CAACC,MAAM,CAACwL,aAAa,CAAC;UACrG;UACA,IAAIxL,MAAM,CAACyL,aAAa,IAAI,IAAI,EAAE;YAC9B,IAAI,OAAOzL,MAAM,CAACyL,aAAa,KAAK,QAAQ,EACxC,MAAMxG,SAAS,CAAC,mEAAmE,CAAC;YACxFvG,OAAO,CAAC+M,aAAa,GAAGjO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgO,aAAa,CAAC7L,UAAU,CAACC,MAAM,CAACyL,aAAa,CAAC;UACrG;UACA,IAAIzL,MAAM,CAAC0L,iBAAiB,IAAI,IAAI,EAAE;YAClC,IAAI,OAAO1L,MAAM,CAAC0L,iBAAiB,KAAK,QAAQ,EAC5C,MAAMzG,SAAS,CAAC,uEAAuE,CAAC;YAC5FvG,OAAO,CAACgN,iBAAiB,GAAGlO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiO,iBAAiB,CAAC9L,UAAU,CAACC,MAAM,CAAC0L,iBAAiB,CAAC;UACjH;UACA,OAAOhN,OAAO;QAClB,CAAC;QAWDwF,YAAY,CAAC5D,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACxD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACuL,aAAa,GAAG,EAAE;YACzBvL,MAAM,CAACwL,aAAa,GAAG,IAAI;YAC3BxL,MAAM,CAACyL,aAAa,GAAG,IAAI;YAC3BzL,MAAM,CAAC0L,iBAAiB,GAAG,IAAI;UACnC;UACA,IAAIhN,OAAO,CAAC6M,aAAa,IAAI,IAAI,IAAI7M,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEoB,MAAM,CAACuL,aAAa,GAAG7M,OAAO,CAAC6M,aAAa;UAChD,IAAI7M,OAAO,CAAC8M,aAAa,IAAI,IAAI,IAAI9M,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEoB,MAAM,CAACwL,aAAa,GAAGhO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+N,aAAa,CAACrL,QAAQ,CAAC5B,OAAO,CAAC8M,aAAa,EAAEjL,OAAO,CAAC;UAC5G,IAAI7B,OAAO,CAAC+M,aAAa,IAAI,IAAI,IAAI/M,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEoB,MAAM,CAACyL,aAAa,GAAGjO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgO,aAAa,CAACtL,QAAQ,CAAC5B,OAAO,CAAC+M,aAAa,EAAElL,OAAO,CAAC;UAC5G,IAAI7B,OAAO,CAACgN,iBAAiB,IAAI,IAAI,IAAIhN,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFoB,MAAM,CAAC0L,iBAAiB,GAAGlO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiO,iBAAiB,CAACvL,QAAQ,CAAC5B,OAAO,CAACgN,iBAAiB,EAAEnL,OAAO,CAAC;UACxH,OAAOP,MAAM;QACjB,CAAC;QASDkE,YAAY,CAAC/F,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC9C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOiD,YAAY;MACvB,CAAC,EAAG;MAEJtG,QAAQ,CAAC+N,aAAa,GAAI,YAAW;QAoBjC,SAASA,aAAa,CAAC7N,UAAU,EAAE;UAC/B,IAAI,CAACgO,aAAa,GAAG,EAAE;UACvB,IAAIhO,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA0N,aAAa,CAACxN,SAAS,CAAC2N,aAAa,GAAGxO,KAAK,CAAC8I,UAAU;QAQxDuF,aAAa,CAACxN,SAAS,CAAC4I,QAAQ,GAAG,EAAE;QAQrC4E,aAAa,CAACxN,SAAS,CAAC4N,OAAO,GAAG,IAAI;QAQtCJ,aAAa,CAACxN,SAAS,CAAC6N,KAAK,GAAG,IAAI;QAUpCL,aAAa,CAACnN,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC/C,OAAO,IAAI6N,aAAa,CAAC7N,UAAU,CAAC;QACxC,CAAC;QAWD6N,aAAa,CAAClN,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACpD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACoN,aAAa,IAAI,IAAI,IAAIpN,OAAO,CAACoN,aAAa,CAAC5N,MAAM,EAC7D,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoN,aAAa,CAAC5N,MAAM,EAAE,EAAED,CAAC,EACjDU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACoN,aAAa,CAAC7N,CAAC,CAAC,CAAC;UACjF,IAAIS,OAAO,CAACqI,QAAQ,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACqI,QAAQ,CAAC;UACrE,IAAIrI,OAAO,CAACqN,OAAO,IAAI,IAAI,IAAIrN,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqO,mBAAmB,CAACxN,MAAM,CAACC,OAAO,CAACqN,OAAO,EAAEpN,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpI,IAAIP,OAAO,CAACsN,KAAK,IAAI,IAAI,IAAItN,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsO,YAAY,CAACzN,MAAM,CAACC,OAAO,CAACsN,KAAK,EAAErN,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC3H,OAAON,MAAM;QACjB,CAAC;QAWDgN,aAAa,CAAC3M,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACtE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD0M,aAAa,CAACzM,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACnD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+N,aAAa,EAAE;UAC3H,OAAOxM,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACF,IAAI,EAAEd,OAAO,CAACoN,aAAa,IAAIpN,OAAO,CAACoN,aAAa,CAAC5N,MAAM,CAAC,EACxDQ,OAAO,CAACoN,aAAa,GAAG,EAAE;gBAC9BpN,OAAO,CAACoN,aAAa,CAACvF,IAAI,CAACpH,MAAM,CAACwF,MAAM,EAAE,CAAC;gBAC3C;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACqI,QAAQ,GAAG5H,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACqN,OAAO,GAAGvO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqO,mBAAmB,CAAC/M,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAChG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACsN,KAAK,GAAGxO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsO,YAAY,CAAChN,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACvF;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDiN,aAAa,CAACjM,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC7D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD8M,aAAa,CAAChM,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC5C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACoN,aAAa,IAAI,IAAI,IAAIpN,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EAAE;YAC1E,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoN,aAAa,CAAC,EACrC,OAAO,+BAA+B;YAC1C,KAAK,IAAI7N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoN,aAAa,CAAC5N,MAAM,EAAE,EAAED,CAAC,EACjD,IAAI,CAACX,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACoN,aAAa,CAAC7N,CAAC,CAAC,CAAC,EACzC,OAAO,kCAAkC;UACrD;UACA,IAAIS,OAAO,CAACqI,QAAQ,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACqI,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAIrI,OAAO,CAACqN,OAAO,IAAI,IAAI,IAAIrN,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;YAC9D,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqO,mBAAmB,CAACtM,MAAM,CAACjB,OAAO,CAACqN,OAAO,CAAC;YAClF,IAAIhH,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;UACjC;UACA,IAAIrG,OAAO,CAACsN,KAAK,IAAI,IAAI,IAAItN,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;YAC1D,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsO,YAAY,CAACvM,MAAM,CAACjB,OAAO,CAACsN,KAAK,CAAC;YACzE,IAAIjH,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;UAC/B;UACA,OAAO,IAAI;QACf,CAAC;QAUD4G,aAAa,CAAC5L,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACnD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+N,aAAa,EAC1D,OAAO3L,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC+N,aAAa,EAAE;UAC5D,IAAI3L,MAAM,CAAC8L,aAAa,EAAE;YACtB,IAAI,CAACtF,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8L,aAAa,CAAC,EACpC,MAAM7G,SAAS,CAAC,mEAAmE,CAAC;YACxFvG,OAAO,CAACoN,aAAa,GAAG,EAAE;YAC1B,KAAK,IAAI7N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8L,aAAa,CAAC5N,MAAM,EAAE,EAAED,CAAC,EAChDS,OAAO,CAACoN,aAAa,CAAC7N,CAAC,CAAC,GAAG0C,MAAM,CAACX,MAAM,CAAC8L,aAAa,CAAC7N,CAAC,CAAC,CAAC;UAClE;UACA,IAAI+B,MAAM,CAAC+G,QAAQ,IAAI,IAAI,EACvBrI,OAAO,CAACqI,QAAQ,GAAGpG,MAAM,CAACX,MAAM,CAAC+G,QAAQ,CAAC;UAC9C,IAAI/G,MAAM,CAAC+L,OAAO,IAAI,IAAI,EAAE;YACxB,IAAI,OAAO/L,MAAM,CAAC+L,OAAO,KAAK,QAAQ,EAClC,MAAM9G,SAAS,CAAC,8DAA8D,CAAC;YACnFvG,OAAO,CAACqN,OAAO,GAAGvO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqO,mBAAmB,CAAClM,UAAU,CAACC,MAAM,CAAC+L,OAAO,CAAC;UAC/F;UACA,IAAI/L,MAAM,CAACgM,KAAK,IAAI,IAAI,EAAE;YACtB,IAAI,OAAOhM,MAAM,CAACgM,KAAK,KAAK,QAAQ,EAChC,MAAM/G,SAAS,CAAC,4DAA4D,CAAC;YACjFvG,OAAO,CAACsN,KAAK,GAAGxO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsO,YAAY,CAACnM,UAAU,CAACC,MAAM,CAACgM,KAAK,CAAC;UACpF;UACA,OAAOtN,OAAO;QAClB,CAAC;QAWDiN,aAAa,CAACrL,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACzD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC8L,aAAa,GAAG,EAAE;UAC7B,IAAIvL,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAAC+G,QAAQ,GAAG,EAAE;YACpB/G,MAAM,CAAC+L,OAAO,GAAG,IAAI;YACrB/L,MAAM,CAACgM,KAAK,GAAG,IAAI;UACvB;UACA,IAAItN,OAAO,CAACoN,aAAa,IAAIpN,OAAO,CAACoN,aAAa,CAAC5N,MAAM,EAAE;YACvD8B,MAAM,CAAC8L,aAAa,GAAG,EAAE;YACzB,KAAK,IAAInF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoN,aAAa,CAAC5N,MAAM,EAAE,EAAEyI,CAAC,EACjD3G,MAAM,CAAC8L,aAAa,CAACnF,CAAC,CAAC,GAAGjI,OAAO,CAACoN,aAAa,CAACnF,CAAC,CAAC;UAC1D;UACA,IAAIjI,OAAO,CAACqI,QAAQ,IAAI,IAAI,IAAIrI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC+G,QAAQ,GAAGrI,OAAO,CAACqI,QAAQ;UACtC,IAAIrI,OAAO,CAACqN,OAAO,IAAI,IAAI,IAAIrN,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAAC+L,OAAO,GAAGvO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqO,mBAAmB,CAAC3L,QAAQ,CAAC5B,OAAO,CAACqN,OAAO,EAAExL,OAAO,CAAC;UACtG,IAAI7B,OAAO,CAACsN,KAAK,IAAI,IAAI,IAAItN,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAACgM,KAAK,GAAGxO,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsO,YAAY,CAAC5L,QAAQ,CAAC5B,OAAO,CAACsN,KAAK,EAAEzL,OAAO,CAAC;UAC3F,OAAOP,MAAM;QACjB,CAAC;QASD2L,aAAa,CAACxN,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC/C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO0K,aAAa;MACxB,CAAC,EAAG;MAEJ/N,QAAQ,CAACqO,mBAAmB,GAAI,YAAW;QAmBvC,SAASA,mBAAmB,CAACnO,UAAU,EAAE;UACrC,IAAI,CAACqO,sBAAsB,GAAG,EAAE;UAChC,IAAI,CAACC,iBAAiB,GAAG,EAAE;UAC3B,IAAItO,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAgO,mBAAmB,CAAC9N,SAAS,CAACkO,aAAa,GAAG,EAAE;QAQhDJ,mBAAmB,CAAC9N,SAAS,CAACgO,sBAAsB,GAAG7O,KAAK,CAAC8I,UAAU;QAQvE6F,mBAAmB,CAAC9N,SAAS,CAACiO,iBAAiB,GAAG9O,KAAK,CAAC8I,UAAU;QAUlE6F,mBAAmB,CAACzN,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACrD,OAAO,IAAImO,mBAAmB,CAACnO,UAAU,CAAC;QAC9C,CAAC;QAWDmO,mBAAmB,CAACxN,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC1D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC2N,aAAa,IAAI,IAAI,IAAI3N,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2N,aAAa,CAAC;UAC1E,IAAI3N,OAAO,CAACyN,sBAAsB,IAAI,IAAI,IAAIzN,OAAO,CAACyN,sBAAsB,CAACjO,MAAM,EAC/E,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACyN,sBAAsB,CAACjO,MAAM,EAAE,EAAED,CAAC,EAC1DU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACyN,sBAAsB,CAAClO,CAAC,CAAC,CAAC;UAC1F,IAAIS,OAAO,CAAC0N,iBAAiB,IAAI,IAAI,IAAI1N,OAAO,CAAC0N,iBAAiB,CAAClO,MAAM,EACrE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC0N,iBAAiB,CAAClO,MAAM,EAAE,EAAED,CAAC,EACrDT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0O,iBAAiB,CAAC7N,MAAM,CAACC,OAAO,CAAC0N,iBAAiB,CAACnO,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACnJ,OAAON,MAAM;QACjB,CAAC;QAWDsN,mBAAmB,CAACjN,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC5E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDgN,mBAAmB,CAAC/M,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACzD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqO,mBAAmB,EAAE;UACjI,OAAO9M,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC2N,aAAa,GAAGlN,MAAM,CAACwF,MAAM,EAAE;gBACvC;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAACyN,sBAAsB,IAAIzN,OAAO,CAACyN,sBAAsB,CAACjO,MAAM,CAAC,EAC1EQ,OAAO,CAACyN,sBAAsB,GAAG,EAAE;gBACvCzN,OAAO,CAACyN,sBAAsB,CAAC5F,IAAI,CAACpH,MAAM,CAACwF,MAAM,EAAE,CAAC;gBACpD;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAAC0N,iBAAiB,IAAI1N,OAAO,CAAC0N,iBAAiB,CAAClO,MAAM,CAAC,EAChEQ,OAAO,CAAC0N,iBAAiB,GAAG,EAAE;gBAClC1N,OAAO,CAAC0N,iBAAiB,CAAC7F,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0O,iBAAiB,CAACpN,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBAC5G;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDuN,mBAAmB,CAACvM,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACnE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDoN,mBAAmB,CAACtM,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAClD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC2N,aAAa,IAAI,IAAI,IAAI3N,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2N,aAAa,CAAC,EACtC,OAAO,gCAAgC;UAC/C,IAAI3N,OAAO,CAACyN,sBAAsB,IAAI,IAAI,IAAIzN,OAAO,CAACE,cAAc,CAAC,wBAAwB,CAAC,EAAE;YAC5F,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACyN,sBAAsB,CAAC,EAC9C,OAAO,wCAAwC;YACnD,KAAK,IAAIlO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACyN,sBAAsB,CAACjO,MAAM,EAAE,EAAED,CAAC,EAC1D,IAAI,CAACX,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACyN,sBAAsB,CAAClO,CAAC,CAAC,CAAC,EAClD,OAAO,2CAA2C;UAC9D;UACA,IAAIS,OAAO,CAAC0N,iBAAiB,IAAI,IAAI,IAAI1N,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAAE;YAClF,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAAC0N,iBAAiB,CAAC,EACzC,OAAO,mCAAmC;YAC9C,KAAK,IAAInO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC0N,iBAAiB,CAAClO,MAAM,EAAE,EAAED,CAAC,EAAE;cACvD,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0O,iBAAiB,CAAC3M,MAAM,CAACjB,OAAO,CAAC0N,iBAAiB,CAACnO,CAAC,CAAC,CAAC;cAC7F,IAAI8G,KAAK,EACL,OAAO,oBAAoB,GAAGA,KAAK;YAC3C;UACJ;UACA,OAAO,IAAI;QACf,CAAC;QAUDkH,mBAAmB,CAAClM,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACzD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqO,mBAAmB,EAChE,OAAOjM,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqO,mBAAmB,EAAE;UAClE,IAAIjM,MAAM,CAACqM,aAAa,IAAI,IAAI,EAC5B3N,OAAO,CAAC2N,aAAa,GAAG1L,MAAM,CAACX,MAAM,CAACqM,aAAa,CAAC;UACxD,IAAIrM,MAAM,CAACmM,sBAAsB,EAAE;YAC/B,IAAI,CAAC3F,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACmM,sBAAsB,CAAC,EAC7C,MAAMlH,SAAS,CAAC,kFAAkF,CAAC;YACvGvG,OAAO,CAACyN,sBAAsB,GAAG,EAAE;YACnC,KAAK,IAAIlO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACmM,sBAAsB,CAACjO,MAAM,EAAE,EAAED,CAAC,EACzDS,OAAO,CAACyN,sBAAsB,CAAClO,CAAC,CAAC,GAAG0C,MAAM,CAACX,MAAM,CAACmM,sBAAsB,CAAClO,CAAC,CAAC,CAAC;UACpF;UACA,IAAI+B,MAAM,CAACoM,iBAAiB,EAAE;YAC1B,IAAI,CAAC5F,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACoM,iBAAiB,CAAC,EACxC,MAAMnH,SAAS,CAAC,6EAA6E,CAAC;YAClGvG,OAAO,CAAC0N,iBAAiB,GAAG,EAAE;YAC9B,KAAK,IAAInO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACoM,iBAAiB,CAAClO,MAAM,EAAE,EAAED,CAAC,EAAE;cACtD,IAAI,OAAO+B,MAAM,CAACoM,iBAAiB,CAACnO,CAAC,CAAC,KAAK,QAAQ,EAC/C,MAAMgH,SAAS,CAAC,8EAA8E,CAAC;cACnGvG,OAAO,CAAC0N,iBAAiB,CAACnO,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0O,iBAAiB,CAACvM,UAAU,CAACC,MAAM,CAACoM,iBAAiB,CAACnO,CAAC,CAAC,CAAC;YACvH;UACJ;UACA,OAAOS,OAAO;QAClB,CAAC;QAWDuN,mBAAmB,CAAC3L,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC/D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAAE;YACpCR,MAAM,CAACmM,sBAAsB,GAAG,EAAE;YAClCnM,MAAM,CAACoM,iBAAiB,GAAG,EAAE;UACjC;UACA,IAAI7L,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAACqM,aAAa,GAAG,EAAE;UAC7B,IAAI3N,OAAO,CAAC2N,aAAa,IAAI,IAAI,IAAI3N,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEoB,MAAM,CAACqM,aAAa,GAAG3N,OAAO,CAAC2N,aAAa;UAChD,IAAI3N,OAAO,CAACyN,sBAAsB,IAAIzN,OAAO,CAACyN,sBAAsB,CAACjO,MAAM,EAAE;YACzE8B,MAAM,CAACmM,sBAAsB,GAAG,EAAE;YAClC,KAAK,IAAIxF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACyN,sBAAsB,CAACjO,MAAM,EAAE,EAAEyI,CAAC,EAC1D3G,MAAM,CAACmM,sBAAsB,CAACxF,CAAC,CAAC,GAAGjI,OAAO,CAACyN,sBAAsB,CAACxF,CAAC,CAAC;UAC5E;UACA,IAAIjI,OAAO,CAAC0N,iBAAiB,IAAI1N,OAAO,CAAC0N,iBAAiB,CAAClO,MAAM,EAAE;YAC/D8B,MAAM,CAACoM,iBAAiB,GAAG,EAAE;YAC7B,KAAK,IAAIzF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAAC0N,iBAAiB,CAAClO,MAAM,EAAE,EAAEyI,CAAC,EACrD3G,MAAM,CAACoM,iBAAiB,CAACzF,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0O,iBAAiB,CAAChM,QAAQ,CAAC5B,OAAO,CAAC0N,iBAAiB,CAACzF,CAAC,CAAC,EAAEpG,OAAO,CAAC;UAClI;UACA,OAAOP,MAAM;QACjB,CAAC;QASDiM,mBAAmB,CAAC9N,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACrD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOgL,mBAAmB;MAC9B,CAAC,EAAG;MAEJrO,QAAQ,CAAC0O,iBAAiB,GAAI,YAAW;QAkBrC,SAASA,iBAAiB,CAACxO,UAAU,EAAE;UACnC,IAAI,CAACyO,KAAK,GAAG,EAAE;UACf,IAAIzO,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAqO,iBAAiB,CAACnO,SAAS,CAACqO,YAAY,GAAG,EAAE;QAQ7CF,iBAAiB,CAACnO,SAAS,CAACoO,KAAK,GAAGjP,KAAK,CAAC8I,UAAU;QAUpDkG,iBAAiB,CAAC9N,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACnD,OAAO,IAAIwO,iBAAiB,CAACxO,UAAU,CAAC;QAC5C,CAAC;QAWDwO,iBAAiB,CAAC7N,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACxD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC8N,YAAY,IAAI,IAAI,IAAI9N,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC8N,YAAY,CAAC;UACzE,IAAI9N,OAAO,CAAC6N,KAAK,IAAI,IAAI,IAAI7N,OAAO,CAAC6N,KAAK,CAACrO,MAAM,EAAE;YAC/CS,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE;YAC/C,KAAK,IAAIpF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC6N,KAAK,CAACrO,MAAM,EAAE,EAAED,CAAC,EACzCU,MAAM,CAAC8N,MAAM,CAAC/N,OAAO,CAAC6N,KAAK,CAACtO,CAAC,CAAC,CAAC;YACnCU,MAAM,CAACM,MAAM,EAAE;UACnB;UACA,OAAON,MAAM;QACjB,CAAC;QAWD2N,iBAAiB,CAACtN,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC1E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDqN,iBAAiB,CAACpN,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACvD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0O,iBAAiB,EAAE;UAC/H,OAAOnN,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC8N,YAAY,GAAGrN,MAAM,CAACwF,MAAM,EAAE;gBACtC;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAAC6N,KAAK,IAAI7N,OAAO,CAAC6N,KAAK,CAACrO,MAAM,CAAC,EACxCQ,OAAO,CAAC6N,KAAK,GAAG,EAAE;gBACtB,IAAI,CAAC/M,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE;kBACjB,IAAIkN,IAAI,GAAGvN,MAAM,CAACN,MAAM,EAAE,GAAGM,MAAM,CAACI,GAAG;kBACvC,OAAOJ,MAAM,CAACI,GAAG,GAAGmN,IAAI,EACpBhO,OAAO,CAAC6N,KAAK,CAAChG,IAAI,CAACpH,MAAM,CAACsN,MAAM,EAAE,CAAC;gBAC3C,CAAC,MACG/N,OAAO,CAAC6N,KAAK,CAAChG,IAAI,CAACpH,MAAM,CAACsN,MAAM,EAAE,CAAC;gBACvC;cACJ;gBACItN,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD4N,iBAAiB,CAAC5M,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACjE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDyN,iBAAiB,CAAC3M,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAChD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC8N,YAAY,IAAI,IAAI,IAAI9N,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC8N,YAAY,CAAC,EACrC,OAAO,+BAA+B;UAC9C,IAAI9N,OAAO,CAAC6N,KAAK,IAAI,IAAI,IAAI7N,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;YAC1D,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAAC6N,KAAK,CAAC,EAC7B,OAAO,uBAAuB;YAClC,KAAK,IAAItO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC6N,KAAK,CAACrO,MAAM,EAAE,EAAED,CAAC,EACzC,IAAI,CAACX,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAAC6N,KAAK,CAACtO,CAAC,CAAC,CAAC,IAAI,EAAES,OAAO,CAAC6N,KAAK,CAACtO,CAAC,CAAC,IAAIX,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAAC6N,KAAK,CAACtO,CAAC,CAAC,CAAC4B,GAAG,CAAC,IAAIvC,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAAC6N,KAAK,CAACtO,CAAC,CAAC,CAAC6B,IAAI,CAAC,CAAC,EAC5I,OAAO,gCAAgC;UACnD;UACA,OAAO,IAAI;QACf,CAAC;QAUDwM,iBAAiB,CAACvM,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACvD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0O,iBAAiB,EAC9D,OAAOtM,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0O,iBAAiB,EAAE;UAChE,IAAItM,MAAM,CAACwM,YAAY,IAAI,IAAI,EAC3B9N,OAAO,CAAC8N,YAAY,GAAG7L,MAAM,CAACX,MAAM,CAACwM,YAAY,CAAC;UACtD,IAAIxM,MAAM,CAACuM,KAAK,EAAE;YACd,IAAI,CAAC/F,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACuM,KAAK,CAAC,EAC5B,MAAMtH,SAAS,CAAC,+DAA+D,CAAC;YACpFvG,OAAO,CAAC6N,KAAK,GAAG,EAAE;YAClB,KAAK,IAAItO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACuM,KAAK,CAACrO,MAAM,EAAE,EAAED,CAAC,EACxC,IAAIX,KAAK,CAACe,IAAI,EACV,CAACK,OAAO,CAAC6N,KAAK,CAACtO,CAAC,CAAC,GAAGX,KAAK,CAACe,IAAI,CAAC4B,SAAS,CAACD,MAAM,CAACuM,KAAK,CAACtO,CAAC,CAAC,CAAC,EAAEiC,QAAQ,GAAG,IAAI,CAAC,KAC1E,IAAI,OAAOF,MAAM,CAACuM,KAAK,CAACtO,CAAC,CAAC,KAAK,QAAQ,EACxCS,OAAO,CAAC6N,KAAK,CAACtO,CAAC,CAAC,GAAGkC,QAAQ,CAACH,MAAM,CAACuM,KAAK,CAACtO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAChD,IAAI,OAAO+B,MAAM,CAACuM,KAAK,CAACtO,CAAC,CAAC,KAAK,QAAQ,EACxCS,OAAO,CAAC6N,KAAK,CAACtO,CAAC,CAAC,GAAG+B,MAAM,CAACuM,KAAK,CAACtO,CAAC,CAAC,CAAC,KAClC,IAAI,OAAO+B,MAAM,CAACuM,KAAK,CAACtO,CAAC,CAAC,KAAK,QAAQ,EACxCS,OAAO,CAAC6N,KAAK,CAACtO,CAAC,CAAC,GAAG,IAAIX,KAAK,CAAC8C,QAAQ,CAACJ,MAAM,CAACuM,KAAK,CAACtO,CAAC,CAAC,CAAC4B,GAAG,KAAK,CAAC,EAAEG,MAAM,CAACuM,KAAK,CAACtO,CAAC,CAAC,CAAC6B,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,CAAC,IAAI,CAAC;UACvH;UACA,OAAO3B,OAAO;QAClB,CAAC;QAWD4N,iBAAiB,CAAChM,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC7D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAACuM,KAAK,GAAG,EAAE;UACrB,IAAIhM,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAACwM,YAAY,GAAG,EAAE;UAC5B,IAAI9N,OAAO,CAAC8N,YAAY,IAAI,IAAI,IAAI9N,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EACtEoB,MAAM,CAACwM,YAAY,GAAG9N,OAAO,CAAC8N,YAAY;UAC9C,IAAI9N,OAAO,CAAC6N,KAAK,IAAI7N,OAAO,CAAC6N,KAAK,CAACrO,MAAM,EAAE;YACvC8B,MAAM,CAACuM,KAAK,GAAG,EAAE;YACjB,KAAK,IAAI5F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAAC6N,KAAK,CAACrO,MAAM,EAAE,EAAEyI,CAAC,EACzC,IAAI,OAAOjI,OAAO,CAAC6N,KAAK,CAAC5F,CAAC,CAAC,KAAK,QAAQ,EACpC3G,MAAM,CAACuM,KAAK,CAAC5F,CAAC,CAAC,GAAGpG,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACjC,OAAO,CAAC6N,KAAK,CAAC5F,CAAC,CAAC,CAAC,GAAGjI,OAAO,CAAC6N,KAAK,CAAC5F,CAAC,CAAC,CAAC,KAEzF3G,MAAM,CAACuM,KAAK,CAAC5F,CAAC,CAAC,GAAGpG,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGrD,KAAK,CAACe,IAAI,CAACF,SAAS,CAACyC,QAAQ,CAACE,IAAI,CAACpC,OAAO,CAAC6N,KAAK,CAAC5F,CAAC,CAAC,CAAC,GAAGpG,OAAO,CAACG,KAAK,KAAKG,MAAM,GAAG,IAAIvD,KAAK,CAAC8C,QAAQ,CAAC1B,OAAO,CAAC6N,KAAK,CAAC5F,CAAC,CAAC,CAAC9G,GAAG,KAAK,CAAC,EAAEnB,OAAO,CAAC6N,KAAK,CAAC5F,CAAC,CAAC,CAAC7G,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,CAAC,IAAI,CAAC,GAAG3B,OAAO,CAAC6N,KAAK,CAAC5F,CAAC,CAAC;UACxP;UACA,OAAO3G,MAAM;QACjB,CAAC;QASDsM,iBAAiB,CAACnO,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACnD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOqL,iBAAiB;MAC5B,CAAC,EAAG;MAEJ1O,QAAQ,CAACsO,YAAY,GAAI,YAAW;QAkBhC,SAASA,YAAY,CAACpO,UAAU,EAAE;UAC9B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAiO,YAAY,CAAC/N,SAAS,CAACwO,IAAI,GAAG,CAAC;QAQ/BT,YAAY,CAAC/N,SAAS,CAACyO,IAAI,GAAGtP,KAAK,CAACe,IAAI,GAAGf,KAAK,CAACe,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;QAU5E4N,YAAY,CAAC1N,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC9C,OAAO,IAAIoO,YAAY,CAACpO,UAAU,CAAC;QACvC,CAAC;QAWDoO,YAAY,CAACzN,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACnD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACiO,IAAI,IAAI,IAAI,IAAIjO,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,CAAC,CAAC,CAACE,KAAK,CAACL,OAAO,CAACiO,IAAI,CAAC;UAC/D,IAAIjO,OAAO,CAACkO,IAAI,IAAI,IAAI,IAAIlO,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC4N,MAAM,CAAC/N,OAAO,CAACkO,IAAI,CAAC;UACjE,OAAOjO,MAAM;QACjB,CAAC;QAWDuN,YAAY,CAAClN,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACrE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDiN,YAAY,CAAChN,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAClD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsO,YAAY,EAAE;UAC1H,OAAO/M,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACiO,IAAI,GAAGxN,MAAM,CAACJ,KAAK,EAAE;gBAC7B;cACJ,KAAK,CAAC;gBACFL,OAAO,CAACkO,IAAI,GAAGzN,MAAM,CAACsN,MAAM,EAAE;gBAC9B;cACJ;gBACItN,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDwN,YAAY,CAACxM,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC5D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDqN,YAAY,CAACvM,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC3C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACiO,IAAI,IAAI,IAAI,IAAIjO,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,QAAQF,OAAO,CAACiO,IAAI;YACpB;cACI,OAAO,2BAA2B;YACtC,KAAK,CAAC;YACN,KAAK,CAAC;cACF;UAAM;UAEd,IAAIjO,OAAO,CAACkO,IAAI,IAAI,IAAI,IAAIlO,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACkO,IAAI,CAAC,IAAI,EAAElO,OAAO,CAACkO,IAAI,IAAItP,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACkO,IAAI,CAAC/M,GAAG,CAAC,IAAIvC,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACkO,IAAI,CAAC9M,IAAI,CAAC,CAAC,EAC5H,OAAO,6BAA6B;UAC5C,OAAO,IAAI;QACf,CAAC;QAUDoM,YAAY,CAACnM,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAClD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsO,YAAY,EACzD,OAAOlM,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACsO,YAAY,EAAE;UAC3D,QAAQlM,MAAM,CAAC2M,IAAI;YACnB,KAAK,qBAAqB;YAC1B,KAAK,CAAC;cACFjO,OAAO,CAACiO,IAAI,GAAG,CAAC;cAChB;YACJ,KAAK,QAAQ;YACb,KAAK,CAAC;cACFjO,OAAO,CAACiO,IAAI,GAAG,CAAC;cAChB;UAAM;UAEV,IAAI3M,MAAM,CAAC4M,IAAI,IAAI,IAAI,EACnB,IAAItP,KAAK,CAACe,IAAI,EACV,CAACK,OAAO,CAACkO,IAAI,GAAGtP,KAAK,CAACe,IAAI,CAAC4B,SAAS,CAACD,MAAM,CAAC4M,IAAI,CAAC,EAAE1M,QAAQ,GAAG,IAAI,CAAC,KAClE,IAAI,OAAOF,MAAM,CAAC4M,IAAI,KAAK,QAAQ,EACpClO,OAAO,CAACkO,IAAI,GAAGzM,QAAQ,CAACH,MAAM,CAAC4M,IAAI,EAAE,EAAE,CAAC,CAAC,KACxC,IAAI,OAAO5M,MAAM,CAAC4M,IAAI,KAAK,QAAQ,EACpClO,OAAO,CAACkO,IAAI,GAAG5M,MAAM,CAAC4M,IAAI,CAAC,KAC1B,IAAI,OAAO5M,MAAM,CAAC4M,IAAI,KAAK,QAAQ,EACpClO,OAAO,CAACkO,IAAI,GAAG,IAAItP,KAAK,CAAC8C,QAAQ,CAACJ,MAAM,CAAC4M,IAAI,CAAC/M,GAAG,KAAK,CAAC,EAAEG,MAAM,CAAC4M,IAAI,CAAC9M,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,CAAC,IAAI,CAAC;UACvG,OAAO3B,OAAO;QAClB,CAAC;QAWDwN,YAAY,CAAC5L,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACxD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAAC2M,IAAI,GAAGpM,OAAO,CAACqF,KAAK,KAAKjF,MAAM,GAAG,qBAAqB,GAAG,CAAC;YAClE,IAAIrD,KAAK,CAACe,IAAI,EAAE;cACZ,IAAIoC,IAAI,GAAG,IAAInD,KAAK,CAACe,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;cACrC2B,MAAM,CAAC4M,IAAI,GAAGrM,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGL,OAAO,CAACG,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACJ,QAAQ,EAAE,GAAGI,IAAI;YAChH,CAAC,MACGT,MAAM,CAAC4M,IAAI,GAAGrM,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;UACxD;UACA,IAAIjC,OAAO,CAACiO,IAAI,IAAI,IAAI,IAAIjO,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAAC2M,IAAI,GAAGpM,OAAO,CAACqF,KAAK,KAAKjF,MAAM,GAAGnD,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiP,gBAAgB,CAACnO,OAAO,CAACiO,IAAI,CAAC,GAAGjO,OAAO,CAACiO,IAAI;UACrH,IAAIjO,OAAO,CAACkO,IAAI,IAAI,IAAI,IAAIlO,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,OAAOF,OAAO,CAACkO,IAAI,KAAK,QAAQ,EAChC5M,MAAM,CAAC4M,IAAI,GAAGrM,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACjC,OAAO,CAACkO,IAAI,CAAC,GAAGlO,OAAO,CAACkO,IAAI,CAAC,KAE7E5M,MAAM,CAAC4M,IAAI,GAAGrM,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGrD,KAAK,CAACe,IAAI,CAACF,SAAS,CAACyC,QAAQ,CAACE,IAAI,CAACpC,OAAO,CAACkO,IAAI,CAAC,GAAGrM,OAAO,CAACG,KAAK,KAAKG,MAAM,GAAG,IAAIvD,KAAK,CAAC8C,QAAQ,CAAC1B,OAAO,CAACkO,IAAI,CAAC/M,GAAG,KAAK,CAAC,EAAEnB,OAAO,CAACkO,IAAI,CAAC9M,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,CAAC,IAAI,CAAC,GAAG3B,OAAO,CAACkO,IAAI;UAChO,OAAO5M,MAAM;QACjB,CAAC;QASDkM,YAAY,CAAC/N,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC9C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOiL,YAAY;MACvB,CAAC,EAAG;MASJtO,QAAQ,CAACiP,gBAAgB,GAAI,YAAW;QACpC,IAAI/G,UAAU,GAAG,CAAC,CAAC;UAAEC,MAAM,GAAG/H,MAAM,CAACQ,MAAM,CAACsH,UAAU,CAAC;QACvDC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,qBAAqB,CAAC,GAAG,CAAC;QACjDC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;QACpC,OAAOC,MAAM;MACjB,CAAC,EAAG;MAEJnI,QAAQ,CAACgO,aAAa,GAAI,YAAW;QAoBjC,SAASA,aAAa,CAAC9N,UAAU,EAAE;UAC/B,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA2N,aAAa,CAACzN,SAAS,CAAC2O,UAAU,GAAG,KAAK;QAQ1ClB,aAAa,CAACzN,SAAS,CAAC4O,QAAQ,GAAG,KAAK;QAQxCnB,aAAa,CAACzN,SAAS,CAAC6O,QAAQ,GAAG,KAAK;QAQxCpB,aAAa,CAACzN,SAAS,CAAC8O,WAAW,GAAG3P,KAAK,CAACe,IAAI,GAAGf,KAAK,CAACe,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;QAUpFsN,aAAa,CAACpN,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC/C,OAAO,IAAI8N,aAAa,CAAC9N,UAAU,CAAC;QACxC,CAAC;QAWD8N,aAAa,CAACnN,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACpD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACoO,UAAU,IAAI,IAAI,IAAIpO,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClED,MAAM,CAACE,MAAM,CAAwB,CAAC,CAAC,CAACsM,IAAI,CAACzM,OAAO,CAACoO,UAAU,CAAC;UACpE,IAAIpO,OAAO,CAACqO,QAAQ,IAAI,IAAI,IAAIrO,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACsM,IAAI,CAACzM,OAAO,CAACqO,QAAQ,CAAC;UACnE,IAAIrO,OAAO,CAACsO,QAAQ,IAAI,IAAI,IAAItO,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACsM,IAAI,CAACzM,OAAO,CAACsO,QAAQ,CAAC;UACnE,IAAItO,OAAO,CAACuO,WAAW,IAAI,IAAI,IAAIvO,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC4N,MAAM,CAAC/N,OAAO,CAACuO,WAAW,CAAC;UACxE,OAAOtO,MAAM;QACjB,CAAC;QAWDiN,aAAa,CAAC5M,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACtE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD2M,aAAa,CAAC1M,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACnD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgO,aAAa,EAAE;UAC3H,OAAOzM,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACoO,UAAU,GAAG3N,MAAM,CAACgM,IAAI,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACFzM,OAAO,CAACqO,QAAQ,GAAG5N,MAAM,CAACgM,IAAI,EAAE;gBAChC;cACJ,KAAK,CAAC;gBACFzM,OAAO,CAACsO,QAAQ,GAAG7N,MAAM,CAACgM,IAAI,EAAE;gBAChC;cACJ,KAAK,CAAC;gBACFzM,OAAO,CAACuO,WAAW,GAAG9N,MAAM,CAACsN,MAAM,EAAE;gBACrC;cACJ;gBACItN,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDkN,aAAa,CAAClM,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC7D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD+M,aAAa,CAACjM,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC5C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACoO,UAAU,IAAI,IAAI,IAAIpO,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,OAAOF,OAAO,CAACoO,UAAU,KAAK,SAAS,EACvC,OAAO,8BAA8B;UAC7C,IAAIpO,OAAO,CAACqO,QAAQ,IAAI,IAAI,IAAIrO,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,OAAOF,OAAO,CAACqO,QAAQ,KAAK,SAAS,EACrC,OAAO,4BAA4B;UAC3C,IAAIrO,OAAO,CAACsO,QAAQ,IAAI,IAAI,IAAItO,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,OAAOF,OAAO,CAACsO,QAAQ,KAAK,SAAS,EACrC,OAAO,4BAA4B;UAC3C,IAAItO,OAAO,CAACuO,WAAW,IAAI,IAAI,IAAIvO,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACuO,WAAW,CAAC,IAAI,EAAEvO,OAAO,CAACuO,WAAW,IAAI3P,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACuO,WAAW,CAACpN,GAAG,CAAC,IAAIvC,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAACuO,WAAW,CAACnN,IAAI,CAAC,CAAC,EACxJ,OAAO,oCAAoC;UACnD,OAAO,IAAI;QACf,CAAC;QAUD8L,aAAa,CAAC7L,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACnD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgO,aAAa,EAC1D,OAAO5L,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACgO,aAAa,EAAE;UAC5D,IAAI5L,MAAM,CAAC8M,UAAU,IAAI,IAAI,EACzBpO,OAAO,CAACoO,UAAU,GAAG1B,OAAO,CAACpL,MAAM,CAAC8M,UAAU,CAAC;UACnD,IAAI9M,MAAM,CAAC+M,QAAQ,IAAI,IAAI,EACvBrO,OAAO,CAACqO,QAAQ,GAAG3B,OAAO,CAACpL,MAAM,CAAC+M,QAAQ,CAAC;UAC/C,IAAI/M,MAAM,CAACgN,QAAQ,IAAI,IAAI,EACvBtO,OAAO,CAACsO,QAAQ,GAAG5B,OAAO,CAACpL,MAAM,CAACgN,QAAQ,CAAC;UAC/C,IAAIhN,MAAM,CAACiN,WAAW,IAAI,IAAI,EAC1B,IAAI3P,KAAK,CAACe,IAAI,EACV,CAACK,OAAO,CAACuO,WAAW,GAAG3P,KAAK,CAACe,IAAI,CAAC4B,SAAS,CAACD,MAAM,CAACiN,WAAW,CAAC,EAAE/M,QAAQ,GAAG,IAAI,CAAC,KAChF,IAAI,OAAOF,MAAM,CAACiN,WAAW,KAAK,QAAQ,EAC3CvO,OAAO,CAACuO,WAAW,GAAG9M,QAAQ,CAACH,MAAM,CAACiN,WAAW,EAAE,EAAE,CAAC,CAAC,KACtD,IAAI,OAAOjN,MAAM,CAACiN,WAAW,KAAK,QAAQ,EAC3CvO,OAAO,CAACuO,WAAW,GAAGjN,MAAM,CAACiN,WAAW,CAAC,KACxC,IAAI,OAAOjN,MAAM,CAACiN,WAAW,KAAK,QAAQ,EAC3CvO,OAAO,CAACuO,WAAW,GAAG,IAAI3P,KAAK,CAAC8C,QAAQ,CAACJ,MAAM,CAACiN,WAAW,CAACpN,GAAG,KAAK,CAAC,EAAEG,MAAM,CAACiN,WAAW,CAACnN,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,CAAC,IAAI,CAAC;UAC5H,OAAO3B,OAAO;QAClB,CAAC;QAWDkN,aAAa,CAACtL,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACzD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAAC8M,UAAU,GAAG,KAAK;YACzB9M,MAAM,CAAC+M,QAAQ,GAAG,KAAK;YACvB/M,MAAM,CAACgN,QAAQ,GAAG,KAAK;YACvB,IAAI1P,KAAK,CAACe,IAAI,EAAE;cACZ,IAAIoC,IAAI,GAAG,IAAInD,KAAK,CAACe,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;cACrC2B,MAAM,CAACiN,WAAW,GAAG1M,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGL,OAAO,CAACG,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACJ,QAAQ,EAAE,GAAGI,IAAI;YACvH,CAAC,MACGT,MAAM,CAACiN,WAAW,GAAG1M,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;UAC/D;UACA,IAAIjC,OAAO,CAACoO,UAAU,IAAI,IAAI,IAAIpO,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAAC8M,UAAU,GAAGpO,OAAO,CAACoO,UAAU;UAC1C,IAAIpO,OAAO,CAACqO,QAAQ,IAAI,IAAI,IAAIrO,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAAC+M,QAAQ,GAAGrO,OAAO,CAACqO,QAAQ;UACtC,IAAIrO,OAAO,CAACsO,QAAQ,IAAI,IAAI,IAAItO,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACgN,QAAQ,GAAGtO,OAAO,CAACsO,QAAQ;UACtC,IAAItO,OAAO,CAACuO,WAAW,IAAI,IAAI,IAAIvO,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,OAAOF,OAAO,CAACuO,WAAW,KAAK,QAAQ,EACvCjN,MAAM,CAACiN,WAAW,GAAG1M,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAACjC,OAAO,CAACuO,WAAW,CAAC,GAAGvO,OAAO,CAACuO,WAAW,CAAC,KAElGjN,MAAM,CAACiN,WAAW,GAAG1M,OAAO,CAACG,KAAK,KAAKC,MAAM,GAAGrD,KAAK,CAACe,IAAI,CAACF,SAAS,CAACyC,QAAQ,CAACE,IAAI,CAACpC,OAAO,CAACuO,WAAW,CAAC,GAAG1M,OAAO,CAACG,KAAK,KAAKG,MAAM,GAAG,IAAIvD,KAAK,CAAC8C,QAAQ,CAAC1B,OAAO,CAACuO,WAAW,CAACpN,GAAG,KAAK,CAAC,EAAEnB,OAAO,CAACuO,WAAW,CAACnN,IAAI,KAAK,CAAC,CAAC,CAACO,QAAQ,CAAC,IAAI,CAAC,GAAG3B,OAAO,CAACuO,WAAW;UACnQ,OAAOjN,MAAM;QACjB,CAAC;QASD4L,aAAa,CAACzN,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC/C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO2K,aAAa;MACxB,CAAC,EAAG;MAEJhO,QAAQ,CAACiO,iBAAiB,GAAI,YAAW;QAoBrC,SAASA,iBAAiB,CAAC/N,UAAU,EAAE;UACnC,IAAI,CAACoP,mBAAmB,GAAG,EAAE;UAC7B,IAAI,CAACC,kBAAkB,GAAG,EAAE;UAC5B,IAAI,CAACC,eAAe,GAAG,EAAE;UACzB,IAAI,CAACC,cAAc,GAAG,EAAE;UACxB,IAAIvP,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA4N,iBAAiB,CAAC1N,SAAS,CAAC+O,mBAAmB,GAAG5P,KAAK,CAAC8I,UAAU;QAQlEyF,iBAAiB,CAAC1N,SAAS,CAACgP,kBAAkB,GAAG7P,KAAK,CAAC8I,UAAU;QAQjEyF,iBAAiB,CAAC1N,SAAS,CAACiP,eAAe,GAAG9P,KAAK,CAAC8I,UAAU;QAQ9DyF,iBAAiB,CAAC1N,SAAS,CAACkP,cAAc,GAAG/P,KAAK,CAAC8I,UAAU;QAU7DyF,iBAAiB,CAACrN,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACnD,OAAO,IAAI+N,iBAAiB,CAAC/N,UAAU,CAAC;QAC5C,CAAC;QAWD+N,iBAAiB,CAACpN,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACxD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACwO,mBAAmB,IAAI,IAAI,IAAIxO,OAAO,CAACwO,mBAAmB,CAAChP,MAAM,EACzE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACwO,mBAAmB,CAAChP,MAAM,EAAE,EAAED,CAAC,EACvDT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAACrG,MAAM,CAACC,OAAO,CAACwO,mBAAmB,CAACjP,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxI,IAAIP,OAAO,CAACyO,kBAAkB,IAAI,IAAI,IAAIzO,OAAO,CAACyO,kBAAkB,CAACjP,MAAM,EACvE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACyO,kBAAkB,CAACjP,MAAM,EAAE,EAAED,CAAC,EACtDT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAACrG,MAAM,CAACC,OAAO,CAACyO,kBAAkB,CAAClP,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACvI,IAAIP,OAAO,CAAC0O,eAAe,IAAI,IAAI,IAAI1O,OAAO,CAAC0O,eAAe,CAAClP,MAAM,EACjE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC0O,eAAe,CAAClP,MAAM,EAAE,EAAED,CAAC,EACnDT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAACpG,MAAM,CAACC,OAAO,CAAC0O,eAAe,CAACnP,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC9I,IAAIP,OAAO,CAAC2O,cAAc,IAAI,IAAI,IAAI3O,OAAO,CAAC2O,cAAc,CAACnP,MAAM,EAC/D,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC2O,cAAc,CAACnP,MAAM,EAAE,EAAED,CAAC,EAClDT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0P,aAAa,CAAC7O,MAAM,CAACC,OAAO,CAAC2O,cAAc,CAACpP,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC5I,OAAON,MAAM;QACjB,CAAC;QAWDkN,iBAAiB,CAAC7M,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC1E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD4M,iBAAiB,CAAC3M,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACvD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiO,iBAAiB,EAAE;UAC/H,OAAO1M,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACF,IAAI,EAAEd,OAAO,CAACwO,mBAAmB,IAAIxO,OAAO,CAACwO,mBAAmB,CAAChP,MAAM,CAAC,EACpEQ,OAAO,CAACwO,mBAAmB,GAAG,EAAE;gBACpCxO,OAAO,CAACwO,mBAAmB,CAAC3G,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAAC5F,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBACjG;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEH,OAAO,CAACyO,kBAAkB,IAAIzO,OAAO,CAACyO,kBAAkB,CAACjP,MAAM,CAAC,EAClEQ,OAAO,CAACyO,kBAAkB,GAAG,EAAE;gBACnCzO,OAAO,CAACyO,kBAAkB,CAAC5G,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAAC5F,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBAChG;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEH,OAAO,CAAC0O,eAAe,IAAI1O,OAAO,CAAC0O,eAAe,CAAClP,MAAM,CAAC,EAC5DQ,OAAO,CAAC0O,eAAe,GAAG,EAAE;gBAChC1O,OAAO,CAAC0O,eAAe,CAAC7G,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAAC3F,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBACvG;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEH,OAAO,CAAC2O,cAAc,IAAI3O,OAAO,CAAC2O,cAAc,CAACnP,MAAM,CAAC,EAC1DQ,OAAO,CAAC2O,cAAc,GAAG,EAAE;gBAC/B3O,OAAO,CAAC2O,cAAc,CAAC9G,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0P,aAAa,CAACpO,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBACrG;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDmN,iBAAiB,CAACnM,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACjE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDgN,iBAAiB,CAAClM,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAChD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACwO,mBAAmB,IAAI,IAAI,IAAIxO,OAAO,CAACE,cAAc,CAAC,qBAAqB,CAAC,EAAE;YACtF,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACwO,mBAAmB,CAAC,EAC3C,OAAO,qCAAqC;YAChD,KAAK,IAAIjP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACwO,mBAAmB,CAAChP,MAAM,EAAE,EAAED,CAAC,EAAE;cACzD,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAACnF,MAAM,CAACjB,OAAO,CAACwO,mBAAmB,CAACjP,CAAC,CAAC,CAAC;cAClF,IAAI8G,KAAK,EACL,OAAO,sBAAsB,GAAGA,KAAK;YAC7C;UACJ;UACA,IAAIrG,OAAO,CAACyO,kBAAkB,IAAI,IAAI,IAAIzO,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAAE;YACpF,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACyO,kBAAkB,CAAC,EAC1C,OAAO,oCAAoC;YAC/C,KAAK,IAAIlP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACyO,kBAAkB,CAACjP,MAAM,EAAE,EAAED,CAAC,EAAE;cACxD,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAACnF,MAAM,CAACjB,OAAO,CAACyO,kBAAkB,CAAClP,CAAC,CAAC,CAAC;cACjF,IAAI8G,KAAK,EACL,OAAO,qBAAqB,GAAGA,KAAK;YAC5C;UACJ;UACA,IAAIrG,OAAO,CAAC0O,eAAe,IAAI,IAAI,IAAI1O,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9E,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAAC0O,eAAe,CAAC,EACvC,OAAO,iCAAiC;YAC5C,KAAK,IAAInP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC0O,eAAe,CAAClP,MAAM,EAAE,EAAED,CAAC,EAAE;cACrD,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAAClF,MAAM,CAACjB,OAAO,CAAC0O,eAAe,CAACnP,CAAC,CAAC,CAAC;cACxF,IAAI8G,KAAK,EACL,OAAO,kBAAkB,GAAGA,KAAK;YACzC;UACJ;UACA,IAAIrG,OAAO,CAAC2O,cAAc,IAAI,IAAI,IAAI3O,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC5E,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAAC2O,cAAc,CAAC,EACtC,OAAO,gCAAgC;YAC3C,KAAK,IAAIpP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC2O,cAAc,CAACnP,MAAM,EAAE,EAAED,CAAC,EAAE;cACpD,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0P,aAAa,CAAC3N,MAAM,CAACjB,OAAO,CAAC2O,cAAc,CAACpP,CAAC,CAAC,CAAC;cACtF,IAAI8G,KAAK,EACL,OAAO,iBAAiB,GAAGA,KAAK;YACxC;UACJ;UACA,OAAO,IAAI;QACf,CAAC;QAUD8G,iBAAiB,CAAC9L,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACvD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiO,iBAAiB,EAC9D,OAAO7L,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiO,iBAAiB,EAAE;UAChE,IAAI7L,MAAM,CAACkN,mBAAmB,EAAE;YAC5B,IAAI,CAAC1G,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACkN,mBAAmB,CAAC,EAC1C,MAAMjI,SAAS,CAAC,6EAA6E,CAAC;YAClGvG,OAAO,CAACwO,mBAAmB,GAAG,EAAE;YAChC,KAAK,IAAIjP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACkN,mBAAmB,CAAChP,MAAM,EAAE,EAAED,CAAC,EAAE;cACxD,IAAI,OAAO+B,MAAM,CAACkN,mBAAmB,CAACjP,CAAC,CAAC,KAAK,QAAQ,EACjD,MAAMgH,SAAS,CAAC,8EAA8E,CAAC;cACnGvG,OAAO,CAACwO,mBAAmB,CAACjP,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAAC/E,UAAU,CAACC,MAAM,CAACkN,mBAAmB,CAACjP,CAAC,CAAC,CAAC;YAC9G;UACJ;UACA,IAAI+B,MAAM,CAACmN,kBAAkB,EAAE;YAC3B,IAAI,CAAC3G,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACmN,kBAAkB,CAAC,EACzC,MAAMlI,SAAS,CAAC,4EAA4E,CAAC;YACjGvG,OAAO,CAACyO,kBAAkB,GAAG,EAAE;YAC/B,KAAK,IAAIlP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACmN,kBAAkB,CAACjP,MAAM,EAAE,EAAED,CAAC,EAAE;cACvD,IAAI,OAAO+B,MAAM,CAACmN,kBAAkB,CAAClP,CAAC,CAAC,KAAK,QAAQ,EAChD,MAAMgH,SAAS,CAAC,6EAA6E,CAAC;cAClGvG,OAAO,CAACyO,kBAAkB,CAAClP,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAAC/E,UAAU,CAACC,MAAM,CAACmN,kBAAkB,CAAClP,CAAC,CAAC,CAAC;YAC5G;UACJ;UACA,IAAI+B,MAAM,CAACoN,eAAe,EAAE;YACxB,IAAI,CAAC5G,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACoN,eAAe,CAAC,EACtC,MAAMnI,SAAS,CAAC,yEAAyE,CAAC;YAC9FvG,OAAO,CAAC0O,eAAe,GAAG,EAAE;YAC5B,KAAK,IAAInP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACoN,eAAe,CAAClP,MAAM,EAAE,EAAED,CAAC,EAAE;cACpD,IAAI,OAAO+B,MAAM,CAACoN,eAAe,CAACnP,CAAC,CAAC,KAAK,QAAQ,EAC7C,MAAMgH,SAAS,CAAC,0EAA0E,CAAC;cAC/FvG,OAAO,CAAC0O,eAAe,CAACnP,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAAC9E,UAAU,CAACC,MAAM,CAACoN,eAAe,CAACnP,CAAC,CAAC,CAAC;YAChH;UACJ;UACA,IAAI+B,MAAM,CAACqN,cAAc,EAAE;YACvB,IAAI,CAAC7G,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACqN,cAAc,CAAC,EACrC,MAAMpI,SAAS,CAAC,wEAAwE,CAAC;YAC7FvG,OAAO,CAAC2O,cAAc,GAAG,EAAE;YAC3B,KAAK,IAAIpP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACqN,cAAc,CAACnP,MAAM,EAAE,EAAED,CAAC,EAAE;cACnD,IAAI,OAAO+B,MAAM,CAACqN,cAAc,CAACpP,CAAC,CAAC,KAAK,QAAQ,EAC5C,MAAMgH,SAAS,CAAC,yEAAyE,CAAC;cAC9FvG,OAAO,CAAC2O,cAAc,CAACpP,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0P,aAAa,CAACvN,UAAU,CAACC,MAAM,CAACqN,cAAc,CAACpP,CAAC,CAAC,CAAC;YAC7G;UACJ;UACA,OAAOS,OAAO;QAClB,CAAC;QAWDmN,iBAAiB,CAACvL,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC7D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAAE;YACpCR,MAAM,CAACkN,mBAAmB,GAAG,EAAE;YAC/BlN,MAAM,CAACmN,kBAAkB,GAAG,EAAE;YAC9BnN,MAAM,CAACoN,eAAe,GAAG,EAAE;YAC3BpN,MAAM,CAACqN,cAAc,GAAG,EAAE;UAC9B;UACA,IAAI3O,OAAO,CAACwO,mBAAmB,IAAIxO,OAAO,CAACwO,mBAAmB,CAAChP,MAAM,EAAE;YACnE8B,MAAM,CAACkN,mBAAmB,GAAG,EAAE;YAC/B,KAAK,IAAIvG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACwO,mBAAmB,CAAChP,MAAM,EAAE,EAAEyI,CAAC,EACvD3G,MAAM,CAACkN,mBAAmB,CAACvG,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAACxE,QAAQ,CAAC5B,OAAO,CAACwO,mBAAmB,CAACvG,CAAC,CAAC,EAAEpG,OAAO,CAAC;UACzH;UACA,IAAI7B,OAAO,CAACyO,kBAAkB,IAAIzO,OAAO,CAACyO,kBAAkB,CAACjP,MAAM,EAAE;YACjE8B,MAAM,CAACmN,kBAAkB,GAAG,EAAE;YAC9B,KAAK,IAAIxG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACyO,kBAAkB,CAACjP,MAAM,EAAE,EAAEyI,CAAC,EACtD3G,MAAM,CAACmN,kBAAkB,CAACxG,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,CAACxE,QAAQ,CAAC5B,OAAO,CAACyO,kBAAkB,CAACxG,CAAC,CAAC,EAAEpG,OAAO,CAAC;UACvH;UACA,IAAI7B,OAAO,CAAC0O,eAAe,IAAI1O,OAAO,CAAC0O,eAAe,CAAClP,MAAM,EAAE;YAC3D8B,MAAM,CAACoN,eAAe,GAAG,EAAE;YAC3B,KAAK,IAAIzG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAAC0O,eAAe,CAAClP,MAAM,EAAE,EAAEyI,CAAC,EACnD3G,MAAM,CAACoN,eAAe,CAACzG,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,CAACvE,QAAQ,CAAC5B,OAAO,CAAC0O,eAAe,CAACzG,CAAC,CAAC,EAAEpG,OAAO,CAAC;UAC3H;UACA,IAAI7B,OAAO,CAAC2O,cAAc,IAAI3O,OAAO,CAAC2O,cAAc,CAACnP,MAAM,EAAE;YACzD8B,MAAM,CAACqN,cAAc,GAAG,EAAE;YAC1B,KAAK,IAAI1G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAAC2O,cAAc,CAACnP,MAAM,EAAE,EAAEyI,CAAC,EAClD3G,MAAM,CAACqN,cAAc,CAAC1G,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0P,aAAa,CAAChN,QAAQ,CAAC5B,OAAO,CAAC2O,cAAc,CAAC1G,CAAC,CAAC,EAAEpG,OAAO,CAAC;UACxH;UACA,OAAOP,MAAM;QACjB,CAAC;QASD6L,iBAAiB,CAAC1N,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACnD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO4K,iBAAiB;MAC5B,CAAC,EAAG;MAEJjO,QAAQ,CAACkH,IAAI,GAAI,YAAW;QAmBxB,SAASA,IAAI,CAAChH,UAAU,EAAE;UACtB,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA6G,IAAI,CAAC3G,SAAS,CAACkJ,EAAE,GAAG,EAAE;QAQtBvC,IAAI,CAAC3G,SAAS,CAACkO,aAAa,GAAG,EAAE;QAQjCvH,IAAI,CAAC3G,SAAS,CAACoP,eAAe,GAAG,IAAI;QAUrCzI,IAAI,CAACtG,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACtC,OAAO,IAAIgH,IAAI,CAAChH,UAAU,CAAC;QAC/B,CAAC;QAWDgH,IAAI,CAACrG,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC3C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;UAC/D,IAAI3I,OAAO,CAAC2N,aAAa,IAAI,IAAI,IAAI3N,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2N,aAAa,CAAC;UAC1E,IAAI3N,OAAO,CAAC6O,eAAe,IAAI,IAAI,IAAI7O,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC7G,MAAM,CAACC,OAAO,CAAC6O,eAAe,EAAE5O,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxI,OAAON,MAAM;QACjB,CAAC;QAWDmG,IAAI,CAAC9F,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC7D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD6F,IAAI,CAAC5F,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC1C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,EAAE;UAClH,OAAO3F,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;gBAC5B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC2N,aAAa,GAAGlN,MAAM,CAACwF,MAAM,EAAE;gBACvC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC6O,eAAe,GAAG/P,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACpG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACpG;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDoG,IAAI,CAACpF,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACpD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDiG,IAAI,CAACnF,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACnC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;UACpC,IAAI3I,OAAO,CAAC2N,aAAa,IAAI,IAAI,IAAI3N,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2N,aAAa,CAAC,EACtC,OAAO,gCAAgC;UAC/C,IAAI3N,OAAO,CAAC6O,eAAe,IAAI,IAAI,IAAI7O,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9E,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC3F,MAAM,CAACjB,OAAO,CAAC6O,eAAe,CAAC;YACtF,IAAIxI,KAAK,EACL,OAAO,kBAAkB,GAAGA,KAAK;UACzC;UACA,OAAO,IAAI;QACf,CAAC;QAUDD,IAAI,CAAC/E,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC1C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,EACjD,OAAO9E,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACkH,IAAI,EAAE;UACnD,IAAI9E,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;UAClC,IAAIrH,MAAM,CAACqM,aAAa,IAAI,IAAI,EAC5B3N,OAAO,CAAC2N,aAAa,GAAG1L,MAAM,CAACX,MAAM,CAACqM,aAAa,CAAC;UACxD,IAAIrM,MAAM,CAACuN,eAAe,IAAI,IAAI,EAAE;YAChC,IAAI,OAAOvN,MAAM,CAACuN,eAAe,KAAK,QAAQ,EAC1C,MAAMtI,SAAS,CAAC,6DAA6D,CAAC;YAClFvG,OAAO,CAAC6O,eAAe,GAAG/P,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACvF,UAAU,CAACC,MAAM,CAACuN,eAAe,CAAC;UAC3G;UACA,OAAO7O,OAAO;QAClB,CAAC;QAWDoG,IAAI,CAACxE,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAChD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACqH,EAAE,GAAG,EAAE;YACdrH,MAAM,CAACqM,aAAa,GAAG,EAAE;YACzBrM,MAAM,CAACuN,eAAe,GAAG,IAAI;UACjC;UACA,IAAI7O,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;UAC1B,IAAI3I,OAAO,CAAC2N,aAAa,IAAI,IAAI,IAAI3N,OAAO,CAACE,cAAc,CAAC,eAAe,CAAC,EACxEoB,MAAM,CAACqM,aAAa,GAAG3N,OAAO,CAAC2N,aAAa;UAChD,IAAI3N,OAAO,CAAC6O,eAAe,IAAI,IAAI,IAAI7O,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5EoB,MAAM,CAACuN,eAAe,GAAG/P,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAChF,QAAQ,CAAC5B,OAAO,CAAC6O,eAAe,EAAEhN,OAAO,CAAC;UAClH,OAAOP,MAAM;QACjB,CAAC;QASD8E,IAAI,CAAC3G,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACtC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO6D,IAAI;MACf,CAAC,EAAG;MAEJlH,QAAQ,CAACiH,cAAc,GAAI,YAAW;QAmBlC,SAASA,cAAc,CAAC/G,UAAU,EAAE;UAChC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQA4G,cAAc,CAAC1G,SAAS,CAACkJ,EAAE,GAAG,EAAE;QAQhCxC,cAAc,CAAC1G,SAAS,CAACqP,OAAO,GAAG,IAAI;QAQvC3I,cAAc,CAAC1G,SAAS,CAACoP,eAAe,GAAG,IAAI;QAU/C1I,cAAc,CAACrG,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAChD,OAAO,IAAI+G,cAAc,CAAC/G,UAAU,CAAC;QACzC,CAAC;QAWD+G,cAAc,CAACpG,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACrD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC2I,EAAE,CAAC;UAC/D,IAAI3I,OAAO,CAAC8O,OAAO,IAAI,IAAI,IAAI9O,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6P,qBAAqB,CAAChP,MAAM,CAACC,OAAO,CAAC8O,OAAO,EAAE7O,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACtI,IAAIP,OAAO,CAAC6O,eAAe,IAAI,IAAI,IAAI7O,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5EpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC7G,MAAM,CAACC,OAAO,CAAC6O,eAAe,EAAE5O,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxI,OAAON,MAAM;QACjB,CAAC;QAWDkG,cAAc,CAAC7F,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACvE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaD4F,cAAc,CAAC3F,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACpD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,EAAE;UAC5H,OAAO1F,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC2I,EAAE,GAAGlI,MAAM,CAACwF,MAAM,EAAE;gBAC5B;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC8O,OAAO,GAAGhQ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6P,qBAAqB,CAACvO,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClG;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC6O,eAAe,GAAG/P,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACpG,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBACpG;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDmG,cAAc,CAACnF,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC9D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDgG,cAAc,CAAClF,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC2I,EAAE,CAAC,EAC3B,OAAO,qBAAqB;UACpC,IAAI3I,OAAO,CAAC8O,OAAO,IAAI,IAAI,IAAI9O,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;YAC9D,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6P,qBAAqB,CAAC9N,MAAM,CAACjB,OAAO,CAAC8O,OAAO,CAAC;YACpF,IAAIzI,KAAK,EACL,OAAO,UAAU,GAAGA,KAAK;UACjC;UACA,IAAIrG,OAAO,CAAC6O,eAAe,IAAI,IAAI,IAAI7O,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAAE;YAC9E,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAC3F,MAAM,CAACjB,OAAO,CAAC6O,eAAe,CAAC;YACtF,IAAIxI,KAAK,EACL,OAAO,kBAAkB,GAAGA,KAAK;UACzC;UACA,OAAO,IAAI;QACf,CAAC;QAUDF,cAAc,CAAC9E,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACpD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,EAC3D,OAAO7E,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACiH,cAAc,EAAE;UAC7D,IAAI7E,MAAM,CAACqH,EAAE,IAAI,IAAI,EACjB3I,OAAO,CAAC2I,EAAE,GAAG1G,MAAM,CAACX,MAAM,CAACqH,EAAE,CAAC;UAClC,IAAIrH,MAAM,CAACwN,OAAO,IAAI,IAAI,EAAE;YACxB,IAAI,OAAOxN,MAAM,CAACwN,OAAO,KAAK,QAAQ,EAClC,MAAMvI,SAAS,CAAC,+DAA+D,CAAC;YACpFvG,OAAO,CAAC8O,OAAO,GAAGhQ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6P,qBAAqB,CAAC1N,UAAU,CAACC,MAAM,CAACwN,OAAO,CAAC;UACjG;UACA,IAAIxN,MAAM,CAACuN,eAAe,IAAI,IAAI,EAAE;YAChC,IAAI,OAAOvN,MAAM,CAACuN,eAAe,KAAK,QAAQ,EAC1C,MAAMtI,SAAS,CAAC,uEAAuE,CAAC;YAC5FvG,OAAO,CAAC6O,eAAe,GAAG/P,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAACvF,UAAU,CAACC,MAAM,CAACuN,eAAe,CAAC;UAC3G;UACA,OAAO7O,OAAO;QAClB,CAAC;QAWDmG,cAAc,CAACvE,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC1D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACqH,EAAE,GAAG,EAAE;YACdrH,MAAM,CAACwN,OAAO,GAAG,IAAI;YACrBxN,MAAM,CAACuN,eAAe,GAAG,IAAI;UACjC;UACA,IAAI7O,OAAO,CAAC2I,EAAE,IAAI,IAAI,IAAI3I,OAAO,CAACE,cAAc,CAAC,IAAI,CAAC,EAClDoB,MAAM,CAACqH,EAAE,GAAG3I,OAAO,CAAC2I,EAAE;UAC1B,IAAI3I,OAAO,CAAC8O,OAAO,IAAI,IAAI,IAAI9O,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DoB,MAAM,CAACwN,OAAO,GAAGhQ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6P,qBAAqB,CAACnN,QAAQ,CAAC5B,OAAO,CAAC8O,OAAO,EAAEjN,OAAO,CAAC;UACxG,IAAI7B,OAAO,CAAC6O,eAAe,IAAI,IAAI,IAAI7O,OAAO,CAACE,cAAc,CAAC,iBAAiB,CAAC,EAC5EoB,MAAM,CAACuN,eAAe,GAAG/P,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0H,eAAe,CAAChF,QAAQ,CAAC5B,OAAO,CAAC6O,eAAe,EAAEhN,OAAO,CAAC;UAClH,OAAOP,MAAM;QACjB,CAAC;QASD6E,cAAc,CAAC1G,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAChD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAO4D,cAAc;MACzB,CAAC,EAAG;MAEJjH,QAAQ,CAAC6P,qBAAqB,GAAI,YAAW;QAkBzC,SAASA,qBAAqB,CAAC3P,UAAU,EAAE;UACvC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAwP,qBAAqB,CAACtP,SAAS,CAACiD,MAAM,GAAG,EAAE;QAQ3CqM,qBAAqB,CAACtP,SAAS,CAACwO,IAAI,GAAG,CAAC;QAUxCc,qBAAqB,CAACjP,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACvD,OAAO,IAAI2P,qBAAqB,CAAC3P,UAAU,CAAC;QAChD,CAAC;QAWD2P,qBAAqB,CAAChP,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC5D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC0C,MAAM,IAAI,IAAI,IAAI1C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC0C,MAAM,CAAC;UACnE,IAAI1C,OAAO,CAACiO,IAAI,IAAI,IAAI,IAAIjO,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACE,KAAK,CAACL,OAAO,CAACiO,IAAI,CAAC;UAChE,OAAOhO,MAAM;QACjB,CAAC;QAWD8O,qBAAqB,CAACzO,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC9E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDwO,qBAAqB,CAACvO,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC3D,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6P,qBAAqB,EAAE;UACnI,OAAOtO,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC0C,MAAM,GAAGjC,MAAM,CAACwF,MAAM,EAAE;gBAChC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACiO,IAAI,GAAGxN,MAAM,CAACJ,KAAK,EAAE;gBAC7B;cACJ;gBACII,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD+O,qBAAqB,CAAC/N,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACrE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD4O,qBAAqB,CAAC9N,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACpD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC0C,MAAM,IAAI,IAAI,IAAI1C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC0C,MAAM,CAAC,EAC/B,OAAO,yBAAyB;UACxC,IAAI1C,OAAO,CAACiO,IAAI,IAAI,IAAI,IAAIjO,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,QAAQF,OAAO,CAACiO,IAAI;YACpB;cACI,OAAO,2BAA2B;YACtC,KAAK,CAAC;YACN,KAAK,CAAC;cACF;UAAM;UAEd,OAAO,IAAI;QACf,CAAC;QAUDc,qBAAqB,CAAC1N,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC3D,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6P,qBAAqB,EAClE,OAAOzN,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6P,qBAAqB,EAAE;UACpE,IAAIzN,MAAM,CAACoB,MAAM,IAAI,IAAI,EACrB1C,OAAO,CAAC0C,MAAM,GAAGT,MAAM,CAACX,MAAM,CAACoB,MAAM,CAAC;UAC1C,QAAQpB,MAAM,CAAC2M,IAAI;YACnB,KAAK,qBAAqB;YAC1B,KAAK,CAAC;cACFjO,OAAO,CAACiO,IAAI,GAAG,CAAC;cAChB;YACJ,KAAK,oBAAoB;YACzB,KAAK,CAAC;cACFjO,OAAO,CAACiO,IAAI,GAAG,CAAC;cAChB;UAAM;UAEV,OAAOjO,OAAO;QAClB,CAAC;QAWD+O,qBAAqB,CAACnN,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACjE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACoB,MAAM,GAAG,EAAE;YAClBpB,MAAM,CAAC2M,IAAI,GAAGpM,OAAO,CAACqF,KAAK,KAAKjF,MAAM,GAAG,qBAAqB,GAAG,CAAC;UACtE;UACA,IAAIjC,OAAO,CAAC0C,MAAM,IAAI,IAAI,IAAI1C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DoB,MAAM,CAACoB,MAAM,GAAG1C,OAAO,CAAC0C,MAAM;UAClC,IAAI1C,OAAO,CAACiO,IAAI,IAAI,IAAI,IAAIjO,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAAC2M,IAAI,GAAGpM,OAAO,CAACqF,KAAK,KAAKjF,MAAM,GAAGnD,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8P,yBAAyB,CAAChP,OAAO,CAACiO,IAAI,CAAC,GAAGjO,OAAO,CAACiO,IAAI;UAC9H,OAAO3M,MAAM;QACjB,CAAC;QASDyN,qBAAqB,CAACtP,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACvD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOwM,qBAAqB;MAChC,CAAC,EAAG;MASJ7P,QAAQ,CAAC8P,yBAAyB,GAAI,YAAW;QAC7C,IAAI5H,UAAU,GAAG,CAAC,CAAC;UAAEC,MAAM,GAAG/H,MAAM,CAACQ,MAAM,CAACsH,UAAU,CAAC;QACvDC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,qBAAqB,CAAC,GAAG,CAAC;QACjDC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,GAAG,CAAC;QAChD,OAAOC,MAAM;MACjB,CAAC,EAAG;MAEJnI,QAAQ,CAAC0P,aAAa,GAAI,YAAW;QAoBjC,SAASA,aAAa,CAACxP,UAAU,EAAE;UAC/B,IAAI,CAAC6P,kBAAkB,GAAG,EAAE;UAC5B,IAAI7P,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAqP,aAAa,CAACnP,SAAS,CAAC8I,IAAI,GAAG,EAAE;QAQjCqG,aAAa,CAACnP,SAAS,CAACwP,kBAAkB,GAAGrQ,KAAK,CAAC8I,UAAU;QAQ7DkH,aAAa,CAACnP,SAAS,CAACyP,+BAA+B,GAAG,KAAK;QAQ/DN,aAAa,CAACnP,SAAS,CAAC0P,cAAc,GAAG,KAAK;QAU9CP,aAAa,CAAC9O,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC/C,OAAO,IAAIwP,aAAa,CAACxP,UAAU,CAAC;QACxC,CAAC;QAWDwP,aAAa,CAAC7O,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACpD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuI,IAAI,CAAC;UACjE,IAAIvI,OAAO,CAACiP,kBAAkB,IAAI,IAAI,IAAIjP,OAAO,CAACiP,kBAAkB,CAACzP,MAAM,EACvE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACiP,kBAAkB,CAACzP,MAAM,EAAE,EAAED,CAAC,EACtDU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACiP,kBAAkB,CAAC1P,CAAC,CAAC,CAAC;UACtF,IAAIS,OAAO,CAACkP,+BAA+B,IAAI,IAAI,IAAIlP,OAAO,CAACE,cAAc,CAAC,iCAAiC,CAAC,EAC5GD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACsM,IAAI,CAACzM,OAAO,CAACkP,+BAA+B,CAAC;UAC1F,IAAIlP,OAAO,CAACmP,cAAc,IAAI,IAAI,IAAInP,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1ED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACsM,IAAI,CAACzM,OAAO,CAACmP,cAAc,CAAC;UACzE,OAAOlP,MAAM;QACjB,CAAC;QAWD2O,aAAa,CAACtO,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACtE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDqO,aAAa,CAACpO,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACnD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0P,aAAa,EAAE;UAC3H,OAAOnO,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACuI,IAAI,GAAG9H,MAAM,CAACwF,MAAM,EAAE;gBAC9B;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAACiP,kBAAkB,IAAIjP,OAAO,CAACiP,kBAAkB,CAACzP,MAAM,CAAC,EAClEQ,OAAO,CAACiP,kBAAkB,GAAG,EAAE;gBACnCjP,OAAO,CAACiP,kBAAkB,CAACpH,IAAI,CAACpH,MAAM,CAACwF,MAAM,EAAE,CAAC;gBAChD;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACkP,+BAA+B,GAAGzO,MAAM,CAACgM,IAAI,EAAE;gBACvD;cACJ,KAAK,CAAC;gBACFzM,OAAO,CAACmP,cAAc,GAAG1O,MAAM,CAACgM,IAAI,EAAE;gBACtC;cACJ;gBACIhM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD4O,aAAa,CAAC5N,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC7D,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDyO,aAAa,CAAC3N,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC5C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;UACtC,IAAIvI,OAAO,CAACiP,kBAAkB,IAAI,IAAI,IAAIjP,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAAE;YACpF,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACiP,kBAAkB,CAAC,EAC1C,OAAO,oCAAoC;YAC/C,KAAK,IAAI1P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACiP,kBAAkB,CAACzP,MAAM,EAAE,EAAED,CAAC,EACtD,IAAI,CAACX,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACiP,kBAAkB,CAAC1P,CAAC,CAAC,CAAC,EAC9C,OAAO,uCAAuC;UAC1D;UACA,IAAIS,OAAO,CAACkP,+BAA+B,IAAI,IAAI,IAAIlP,OAAO,CAACE,cAAc,CAAC,iCAAiC,CAAC,EAC5G,IAAI,OAAOF,OAAO,CAACkP,+BAA+B,KAAK,SAAS,EAC5D,OAAO,mDAAmD;UAClE,IAAIlP,OAAO,CAACmP,cAAc,IAAI,IAAI,IAAInP,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1E,IAAI,OAAOF,OAAO,CAACmP,cAAc,KAAK,SAAS,EAC3C,OAAO,kCAAkC;UACjD,OAAO,IAAI;QACf,CAAC;QAUDP,aAAa,CAACvN,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACnD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0P,aAAa,EAC1D,OAAOtN,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0P,aAAa,EAAE;UAC5D,IAAItN,MAAM,CAACiH,IAAI,IAAI,IAAI,EACnBvI,OAAO,CAACuI,IAAI,GAAGtG,MAAM,CAACX,MAAM,CAACiH,IAAI,CAAC;UACtC,IAAIjH,MAAM,CAAC2N,kBAAkB,EAAE;YAC3B,IAAI,CAACnH,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC2N,kBAAkB,CAAC,EACzC,MAAM1I,SAAS,CAAC,wEAAwE,CAAC;YAC7FvG,OAAO,CAACiP,kBAAkB,GAAG,EAAE;YAC/B,KAAK,IAAI1P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC2N,kBAAkB,CAACzP,MAAM,EAAE,EAAED,CAAC,EACrDS,OAAO,CAACiP,kBAAkB,CAAC1P,CAAC,CAAC,GAAG0C,MAAM,CAACX,MAAM,CAAC2N,kBAAkB,CAAC1P,CAAC,CAAC,CAAC;UAC5E;UACA,IAAI+B,MAAM,CAAC4N,+BAA+B,IAAI,IAAI,EAC9ClP,OAAO,CAACkP,+BAA+B,GAAGxC,OAAO,CAACpL,MAAM,CAAC4N,+BAA+B,CAAC;UAC7F,IAAI5N,MAAM,CAAC6N,cAAc,IAAI,IAAI,EAC7BnP,OAAO,CAACmP,cAAc,GAAGzC,OAAO,CAACpL,MAAM,CAAC6N,cAAc,CAAC;UAC3D,OAAOnP,OAAO;QAClB,CAAC;QAWD4O,aAAa,CAAChN,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACzD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC2N,kBAAkB,GAAG,EAAE;UAClC,IAAIpN,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACiH,IAAI,GAAG,EAAE;YAChBjH,MAAM,CAAC4N,+BAA+B,GAAG,KAAK;YAC9C5N,MAAM,CAAC6N,cAAc,GAAG,KAAK;UACjC;UACA,IAAInP,OAAO,CAACuI,IAAI,IAAI,IAAI,IAAIvI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAACiH,IAAI,GAAGvI,OAAO,CAACuI,IAAI;UAC9B,IAAIvI,OAAO,CAACiP,kBAAkB,IAAIjP,OAAO,CAACiP,kBAAkB,CAACzP,MAAM,EAAE;YACjE8B,MAAM,CAAC2N,kBAAkB,GAAG,EAAE;YAC9B,KAAK,IAAIhH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACiP,kBAAkB,CAACzP,MAAM,EAAE,EAAEyI,CAAC,EACtD3G,MAAM,CAAC2N,kBAAkB,CAAChH,CAAC,CAAC,GAAGjI,OAAO,CAACiP,kBAAkB,CAAChH,CAAC,CAAC;UACpE;UACA,IAAIjI,OAAO,CAACkP,+BAA+B,IAAI,IAAI,IAAIlP,OAAO,CAACE,cAAc,CAAC,iCAAiC,CAAC,EAC5GoB,MAAM,CAAC4N,+BAA+B,GAAGlP,OAAO,CAACkP,+BAA+B;UACpF,IAAIlP,OAAO,CAACmP,cAAc,IAAI,IAAI,IAAInP,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAC1EoB,MAAM,CAAC6N,cAAc,GAAGnP,OAAO,CAACmP,cAAc;UAClD,OAAO7N,MAAM;QACjB,CAAC;QASDsN,aAAa,CAACnP,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC/C,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOqM,aAAa;MACxB,CAAC,EAAG;MAEJ1P,QAAQ,CAACuG,qBAAqB,GAAI,YAAW;QAmBzC,SAASA,qBAAqB,CAACrG,UAAU,EAAE;UACvC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAkG,qBAAqB,CAAChG,SAAS,CAAC2P,WAAW,GAAG,EAAE;QAQhD3J,qBAAqB,CAAChG,SAAS,CAAC2M,UAAU,GAAG,IAAI;QAQjD3G,qBAAqB,CAAChG,SAAS,CAAC4P,OAAO,GAAG,EAAE;QAG5C,IAAIjL,YAAY;QAQhB9E,MAAM,CAAC+E,cAAc,CAACoB,qBAAqB,CAAChG,SAAS,EAAE,QAAQ,EAAE;UAC7D6E,GAAG,EAAE1F,KAAK,CAAC2F,WAAW,CAACH,YAAY,GAAG,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;UAChEI,GAAG,EAAE5F,KAAK,CAAC6F,WAAW,CAACL,YAAY;QACvC,CAAC,CAAC;QAUFqB,qBAAqB,CAAC3F,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACvD,OAAO,IAAIqG,qBAAqB,CAACrG,UAAU,CAAC;QAChD,CAAC;QAWDqG,qBAAqB,CAAC1F,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC5D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACoP,WAAW,IAAI,IAAI,IAAIpP,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACoP,WAAW,CAAC;UACxE,IAAIpP,OAAO,CAACoM,UAAU,IAAI,IAAI,IAAIpM,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACtM,MAAM,CAACC,OAAO,CAACoM,UAAU,EAAEnM,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC9H,IAAIP,OAAO,CAACqP,OAAO,IAAI,IAAI,IAAIrP,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACqP,OAAO,CAAC;UACpE,OAAOpP,MAAM;QACjB,CAAC;QAWDwF,qBAAqB,CAACnF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC9E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDkF,qBAAqB,CAACjF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC3D,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuG,qBAAqB,EAAE;UACnI,OAAOhF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACoP,WAAW,GAAG3O,MAAM,CAACwF,MAAM,EAAE;gBACrC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACoM,UAAU,GAAGtN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAAC7L,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC1F;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACqP,OAAO,GAAG5O,MAAM,CAACwF,MAAM,EAAE;gBACjC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDyF,qBAAqB,CAACzE,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACrE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDsF,qBAAqB,CAACxE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACpD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIZ,UAAU,GAAG,CAAC,CAAC;UACnB,IAAIY,OAAO,CAACoP,WAAW,IAAI,IAAI,IAAIpP,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACoP,WAAW,CAAC,EACpC,OAAO,8BAA8B;UAC7C,IAAIpP,OAAO,CAACoM,UAAU,IAAI,IAAI,IAAIpM,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;YACpEd,UAAU,CAACkQ,MAAM,GAAG,CAAC;YACrB;cACI,IAAIjJ,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACpL,MAAM,CAACjB,OAAO,CAACoM,UAAU,CAAC;cAC5E,IAAI/F,KAAK,EACL,OAAO,aAAa,GAAGA,KAAK;YACpC;UACJ;UACA,IAAIrG,OAAO,CAACqP,OAAO,IAAI,IAAI,IAAIrP,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;YAC9D,IAAId,UAAU,CAACkQ,MAAM,KAAK,CAAC,EACvB,OAAO,yBAAyB;YACpClQ,UAAU,CAACkQ,MAAM,GAAG,CAAC;YACrB,IAAI,CAAC1Q,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACqP,OAAO,CAAC,EAChC,OAAO,0BAA0B;UACzC;UACA,OAAO,IAAI;QACf,CAAC;QAUD5J,qBAAqB,CAACpE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC3D,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuG,qBAAqB,EAClE,OAAOnE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACuG,qBAAqB,EAAE;UACpE,IAAInE,MAAM,CAAC8N,WAAW,IAAI,IAAI,EAC1BpP,OAAO,CAACoP,WAAW,GAAGnN,MAAM,CAACX,MAAM,CAAC8N,WAAW,CAAC;UACpD,IAAI9N,MAAM,CAAC8K,UAAU,IAAI,IAAI,EAAE;YAC3B,IAAI,OAAO9K,MAAM,CAAC8K,UAAU,KAAK,QAAQ,EACrC,MAAM7F,SAAS,CAAC,yEAAyE,CAAC;YAC9FvG,OAAO,CAACoM,UAAU,GAAGtN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAAChL,UAAU,CAACC,MAAM,CAAC8K,UAAU,CAAC;UAC5F;UACA,IAAI9K,MAAM,CAAC+N,OAAO,IAAI,IAAI,EACtBrP,OAAO,CAACqP,OAAO,GAAGpN,MAAM,CAACX,MAAM,CAAC+N,OAAO,CAAC;UAC5C,OAAOrP,OAAO;QAClB,CAAC;QAWDyF,qBAAqB,CAAC7D,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACjE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAAC8N,WAAW,GAAG,EAAE;UAC3B,IAAIpP,OAAO,CAACoP,WAAW,IAAI,IAAI,IAAIpP,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEoB,MAAM,CAAC8N,WAAW,GAAGpP,OAAO,CAACoP,WAAW;UAC5C,IAAIpP,OAAO,CAACoM,UAAU,IAAI,IAAI,IAAIpM,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAAE;YACpEoB,MAAM,CAAC8K,UAAU,GAAGtN,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACmN,UAAU,CAACzK,QAAQ,CAAC5B,OAAO,CAACoM,UAAU,EAAEvK,OAAO,CAAC;YAC/F,IAAIA,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACgO,MAAM,GAAG,YAAY;UACpC;UACA,IAAItP,OAAO,CAACqP,OAAO,IAAI,IAAI,IAAIrP,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;YAC9DoB,MAAM,CAAC+N,OAAO,GAAGrP,OAAO,CAACqP,OAAO;YAChC,IAAIxN,OAAO,CAAC2E,MAAM,EACdlF,MAAM,CAACgO,MAAM,GAAG,SAAS;UACjC;UACA,OAAOhO,MAAM;QACjB,CAAC;QASDmE,qBAAqB,CAAChG,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACvD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOkD,qBAAqB;MAChC,CAAC,EAAG;MAEJvG,QAAQ,CAACwG,4BAA4B,GAAI,YAAW;QAiBhD,SAASA,4BAA4B,CAACtG,UAAU,EAAE;UAC9C,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAmG,4BAA4B,CAACjG,SAAS,CAAC8P,QAAQ,GAAG,EAAE;QAUpD7J,4BAA4B,CAAC5F,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC9D,OAAO,IAAIsG,4BAA4B,CAACtG,UAAU,CAAC;QACvD,CAAC;QAWDsG,4BAA4B,CAAC3F,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACnE,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuP,QAAQ,CAAC;UACrE,OAAOtP,MAAM;QACjB,CAAC;QAWDyF,4BAA4B,CAACpF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACrF,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDmF,4BAA4B,CAAClF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAClE,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwG,4BAA4B,EAAE;UAC1I,OAAOjF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACuP,QAAQ,GAAG9O,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD0F,4BAA4B,CAAC1E,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC5E,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDuF,4BAA4B,CAACzE,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC3D,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuP,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,OAAO,IAAI;QACf,CAAC;QAUD7J,4BAA4B,CAACrE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAClE,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwG,4BAA4B,EACzE,OAAOpE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACwG,4BAA4B,EAAE;UAC3E,IAAIpE,MAAM,CAACiO,QAAQ,IAAI,IAAI,EACvBvP,OAAO,CAACuP,QAAQ,GAAGtN,MAAM,CAACX,MAAM,CAACiO,QAAQ,CAAC;UAC9C,OAAOvP,OAAO;QAClB,CAAC;QAWD0F,4BAA4B,CAAC9D,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACxE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAACiO,QAAQ,GAAG,EAAE;UACxB,IAAIvP,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACiO,QAAQ,GAAGvP,OAAO,CAACuP,QAAQ;UACtC,OAAOjO,MAAM;QACjB,CAAC;QASDoE,4BAA4B,CAACjG,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC9D,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOmD,4BAA4B;MACvC,CAAC,EAAG;MAEJxG,QAAQ,CAAC6G,2BAA2B,GAAI,YAAW;QAiB/C,SAASA,2BAA2B,CAAC3G,UAAU,EAAE;UAC7C,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAwG,2BAA2B,CAACtG,SAAS,CAAC8P,QAAQ,GAAG,EAAE;QAUnDxJ,2BAA2B,CAACjG,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC7D,OAAO,IAAI2G,2BAA2B,CAAC3G,UAAU,CAAC;QACtD,CAAC;QAWD2G,2BAA2B,CAAChG,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAClE,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuP,QAAQ,CAAC;UACrE,OAAOtP,MAAM;QACjB,CAAC;QAWD8F,2BAA2B,CAACzF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACpF,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDwF,2BAA2B,CAACvF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACjE,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6G,2BAA2B,EAAE;UACzI,OAAOtF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACuP,QAAQ,GAAG9O,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD+F,2BAA2B,CAAC/E,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC3E,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD4F,2BAA2B,CAAC9E,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC1D,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuP,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,OAAO,IAAI;QACf,CAAC;QAUDxJ,2BAA2B,CAAC1E,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACjE,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6G,2BAA2B,EACxE,OAAOzE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6G,2BAA2B,EAAE;UAC1E,IAAIzE,MAAM,CAACiO,QAAQ,IAAI,IAAI,EACvBvP,OAAO,CAACuP,QAAQ,GAAGtN,MAAM,CAACX,MAAM,CAACiO,QAAQ,CAAC;UAC9C,OAAOvP,OAAO;QAClB,CAAC;QAWD+F,2BAA2B,CAACnE,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACvE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAACiO,QAAQ,GAAG,EAAE;UACxB,IAAIvP,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACiO,QAAQ,GAAGvP,OAAO,CAACuP,QAAQ;UACtC,OAAOjO,MAAM;QACjB,CAAC;QASDyE,2BAA2B,CAACtG,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC7D,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOwD,2BAA2B;MACtC,CAAC,EAAG;MAEJ7G,QAAQ,CAACyG,yBAAyB,GAAI,YAAW;QAkB7C,SAASA,yBAAyB,CAACvG,UAAU,EAAE;UAC3C,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAoG,yBAAyB,CAAClG,SAAS,CAAC8P,QAAQ,GAAG,EAAE;QAQjD5J,yBAAyB,CAAClG,SAAS,CAACmD,MAAM,GAAG,IAAI;QAUjD+C,yBAAyB,CAAC7F,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC3D,OAAO,IAAIuG,yBAAyB,CAACvG,UAAU,CAAC;QACpD,CAAC;QAWDuG,yBAAyB,CAAC5F,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAChE,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuP,QAAQ,CAAC;UACrE,IAAIvP,OAAO,CAAC4C,MAAM,IAAI,IAAI,IAAI5C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC9E,MAAM,CAACC,OAAO,CAAC4C,MAAM,EAAE3C,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACtH,OAAON,MAAM;QACjB,CAAC;QAWD0F,yBAAyB,CAACrF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAClF,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDoF,yBAAyB,CAACnF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC/D,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyG,yBAAyB,EAAE;UACvI,OAAOlF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACuP,QAAQ,GAAG9O,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC4C,MAAM,GAAG9D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAACrE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClF;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD2F,yBAAyB,CAAC3E,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACzE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDwF,yBAAyB,CAAC1E,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACxD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuP,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAIvP,OAAO,CAAC4C,MAAM,IAAI,IAAI,IAAI5C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC5D,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAAC5D,MAAM,CAACjB,OAAO,CAAC4C,MAAM,CAAC;YACpE,IAAIyD,KAAK,EACL,OAAO,SAAS,GAAGA,KAAK;UAChC;UACA,OAAO,IAAI;QACf,CAAC;QAUDV,yBAAyB,CAACtE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC/D,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyG,yBAAyB,EACtE,OAAOrE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyG,yBAAyB,EAAE;UACxE,IAAIrE,MAAM,CAACiO,QAAQ,IAAI,IAAI,EACvBvP,OAAO,CAACuP,QAAQ,GAAGtN,MAAM,CAACX,MAAM,CAACiO,QAAQ,CAAC;UAC9C,IAAIjO,MAAM,CAACsB,MAAM,IAAI,IAAI,EAAE;YACvB,IAAI,OAAOtB,MAAM,CAACsB,MAAM,KAAK,QAAQ,EACjC,MAAM2D,SAAS,CAAC,yEAAyE,CAAC;YAC9FvG,OAAO,CAAC4C,MAAM,GAAG9D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAACxD,UAAU,CAACC,MAAM,CAACsB,MAAM,CAAC;UAChF;UACA,OAAO5C,OAAO;QAClB,CAAC;QAWD2F,yBAAyB,CAAC/D,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACrE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACiO,QAAQ,GAAG,EAAE;YACpBjO,MAAM,CAACsB,MAAM,GAAG,IAAI;UACxB;UACA,IAAI5C,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACiO,QAAQ,GAAGvP,OAAO,CAACuP,QAAQ;UACtC,IAAIvP,OAAO,CAAC4C,MAAM,IAAI,IAAI,IAAI5C,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DoB,MAAM,CAACsB,MAAM,GAAG9D,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2F,MAAM,CAACjD,QAAQ,CAAC5B,OAAO,CAAC4C,MAAM,EAAEf,OAAO,CAAC;UACvF,OAAOP,MAAM;QACjB,CAAC;QASDqE,yBAAyB,CAAClG,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC3D,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOoD,yBAAyB;MACpC,CAAC,EAAG;MAEJzG,QAAQ,CAAC0G,4BAA4B,GAAI,YAAW;QAmBhD,SAASA,4BAA4B,CAACxG,UAAU,EAAE;UAC9C,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAqG,4BAA4B,CAACnG,SAAS,CAAC8P,QAAQ,GAAG,EAAE;QAQpD3J,4BAA4B,CAACnG,SAAS,CAAC6L,MAAM,GAAG,EAAE;QAQlD1F,4BAA4B,CAACnG,SAAS,CAACqM,UAAU,GAAG,EAAE;QAUtDlG,4BAA4B,CAAC9F,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC9D,OAAO,IAAIwG,4BAA4B,CAACxG,UAAU,CAAC;QACvD,CAAC;QAWDwG,4BAA4B,CAAC7F,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACnE,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuP,QAAQ,CAAC;UACrE,IAAIvP,OAAO,CAACsL,MAAM,IAAI,IAAI,IAAItL,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsL,MAAM,CAAC;UACnE,IAAItL,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC8L,UAAU,CAAC;UACvE,OAAO7L,MAAM;QACjB,CAAC;QAWD2F,4BAA4B,CAACtF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACrF,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDqF,4BAA4B,CAACpF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAClE,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0G,4BAA4B,EAAE;UAC1I,OAAOnF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACuP,QAAQ,GAAG9O,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACsL,MAAM,GAAG7K,MAAM,CAACwF,MAAM,EAAE;gBAChC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC8L,UAAU,GAAGrL,MAAM,CAACwF,MAAM,EAAE;gBACpC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD4F,4BAA4B,CAAC5E,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC5E,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDyF,4BAA4B,CAAC3E,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC3D,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuP,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAIvP,OAAO,CAACsL,MAAM,IAAI,IAAI,IAAItL,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsL,MAAM,CAAC,EAC/B,OAAO,yBAAyB;UACxC,IAAItL,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC8L,UAAU,CAAC,EACnC,OAAO,6BAA6B;UAC5C,OAAO,IAAI;QACf,CAAC;QAUDlG,4BAA4B,CAACvE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAClE,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0G,4BAA4B,EACzE,OAAOtE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC0G,4BAA4B,EAAE;UAC3E,IAAItE,MAAM,CAACiO,QAAQ,IAAI,IAAI,EACvBvP,OAAO,CAACuP,QAAQ,GAAGtN,MAAM,CAACX,MAAM,CAACiO,QAAQ,CAAC;UAC9C,IAAIjO,MAAM,CAACgK,MAAM,IAAI,IAAI,EACrBtL,OAAO,CAACsL,MAAM,GAAGrJ,MAAM,CAACX,MAAM,CAACgK,MAAM,CAAC;UAC1C,IAAIhK,MAAM,CAACwK,UAAU,IAAI,IAAI,EACzB9L,OAAO,CAAC8L,UAAU,GAAG7J,MAAM,CAACX,MAAM,CAACwK,UAAU,CAAC;UAClD,OAAO9L,OAAO;QAClB,CAAC;QAWD4F,4BAA4B,CAAChE,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACxE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACiO,QAAQ,GAAG,EAAE;YACpBjO,MAAM,CAACgK,MAAM,GAAG,EAAE;YAClBhK,MAAM,CAACwK,UAAU,GAAG,EAAE;UAC1B;UACA,IAAI9L,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACiO,QAAQ,GAAGvP,OAAO,CAACuP,QAAQ;UACtC,IAAIvP,OAAO,CAACsL,MAAM,IAAI,IAAI,IAAItL,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DoB,MAAM,CAACgK,MAAM,GAAGtL,OAAO,CAACsL,MAAM;UAClC,IAAItL,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAACwK,UAAU,GAAG9L,OAAO,CAAC8L,UAAU;UAC1C,OAAOxK,MAAM;QACjB,CAAC;QASDsE,4BAA4B,CAACnG,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC9D,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOqD,4BAA4B;MACvC,CAAC,EAAG;MAEJ1G,QAAQ,CAAC4G,2BAA2B,GAAI,YAAW;QAmB/C,SAASA,2BAA2B,CAAC1G,UAAU,EAAE;UAC7C,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAuG,2BAA2B,CAACrG,SAAS,CAAC8P,QAAQ,GAAG,EAAE;QAQnDzJ,2BAA2B,CAACrG,SAAS,CAAC6L,MAAM,GAAG,EAAE;QAQjDxF,2BAA2B,CAACrG,SAAS,CAACqM,UAAU,GAAG,EAAE;QAUrDhG,2BAA2B,CAAChG,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UAC7D,OAAO,IAAI0G,2BAA2B,CAAC1G,UAAU,CAAC;QACtD,CAAC;QAWD0G,2BAA2B,CAAC/F,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAClE,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuP,QAAQ,CAAC;UACrE,IAAIvP,OAAO,CAACsL,MAAM,IAAI,IAAI,IAAItL,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACsL,MAAM,CAAC;UACnE,IAAItL,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC8L,UAAU,CAAC;UACvE,OAAO7L,MAAM;QACjB,CAAC;QAWD6F,2BAA2B,CAACxF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UACpF,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDuF,2BAA2B,CAACtF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACjE,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4G,2BAA2B,EAAE;UACzI,OAAOrF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACuP,QAAQ,GAAG9O,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACsL,MAAM,GAAG7K,MAAM,CAACwF,MAAM,EAAE;gBAChC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC8L,UAAU,GAAGrL,MAAM,CAACwF,MAAM,EAAE;gBACpC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD8F,2BAA2B,CAAC9E,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAC3E,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD2F,2BAA2B,CAAC7E,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAC1D,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuP,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAIvP,OAAO,CAACsL,MAAM,IAAI,IAAI,IAAItL,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACsL,MAAM,CAAC,EAC/B,OAAO,yBAAyB;UACxC,IAAItL,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC8L,UAAU,CAAC,EACnC,OAAO,6BAA6B;UAC5C,OAAO,IAAI;QACf,CAAC;QAUDhG,2BAA2B,CAACzE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACjE,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4G,2BAA2B,EACxE,OAAOxE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC4G,2BAA2B,EAAE;UAC1E,IAAIxE,MAAM,CAACiO,QAAQ,IAAI,IAAI,EACvBvP,OAAO,CAACuP,QAAQ,GAAGtN,MAAM,CAACX,MAAM,CAACiO,QAAQ,CAAC;UAC9C,IAAIjO,MAAM,CAACgK,MAAM,IAAI,IAAI,EACrBtL,OAAO,CAACsL,MAAM,GAAGrJ,MAAM,CAACX,MAAM,CAACgK,MAAM,CAAC;UAC1C,IAAIhK,MAAM,CAACwK,UAAU,IAAI,IAAI,EACzB9L,OAAO,CAAC8L,UAAU,GAAG7J,MAAM,CAACX,MAAM,CAACwK,UAAU,CAAC;UAClD,OAAO9L,OAAO;QAClB,CAAC;QAWD8F,2BAA2B,CAAClE,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UACvE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACiO,QAAQ,GAAG,EAAE;YACpBjO,MAAM,CAACgK,MAAM,GAAG,EAAE;YAClBhK,MAAM,CAACwK,UAAU,GAAG,EAAE;UAC1B;UACA,IAAI9L,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACiO,QAAQ,GAAGvP,OAAO,CAACuP,QAAQ;UACtC,IAAIvP,OAAO,CAACsL,MAAM,IAAI,IAAI,IAAItL,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAC1DoB,MAAM,CAACgK,MAAM,GAAGtL,OAAO,CAACsL,MAAM;UAClC,IAAItL,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAACwK,UAAU,GAAG9L,OAAO,CAAC8L,UAAU;UAC1C,OAAOxK,MAAM;QACjB,CAAC;QASDwE,2BAA2B,CAACrG,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UAC7D,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOuD,2BAA2B;MACtC,CAAC,EAAG;MAEJ5G,QAAQ,CAAC2G,kBAAkB,GAAI,YAAW;QAqBtC,SAASA,kBAAkB,CAACzG,UAAU,EAAE;UACpC,IAAI,CAACgM,kBAAkB,GAAG,EAAE;UAC5B,IAAIhM,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAsG,kBAAkB,CAACpG,SAAS,CAAC8P,QAAQ,GAAG,EAAE;QAQ1C1J,kBAAkB,CAACpG,SAAS,CAAC+P,gBAAgB,GAAG,EAAE;QAQlD3J,kBAAkB,CAACpG,SAAS,CAAC2L,kBAAkB,GAAGxM,KAAK,CAAC8I,UAAU;QAQlE7B,kBAAkB,CAACpG,SAAS,CAACgQ,kBAAkB,GAAG,IAAI;QAQtD5J,kBAAkB,CAACpG,SAAS,CAACqM,UAAU,GAAG,EAAE;QAU5CjG,kBAAkB,CAAC/F,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACpD,OAAO,IAAIyG,kBAAkB,CAACzG,UAAU,CAAC;QAC7C,CAAC;QAWDyG,kBAAkB,CAAC9F,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACzD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuP,QAAQ,CAAC;UACrE,IAAIvP,OAAO,CAACwP,gBAAgB,IAAI,IAAI,IAAIxP,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAC9ED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACwP,gBAAgB,CAAC;UAC7E,IAAIxP,OAAO,CAACoL,kBAAkB,IAAI,IAAI,IAAIpL,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EACvE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EAAE,EAAED,CAAC,EACtDT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACxL,MAAM,CAACC,OAAO,CAACoL,kBAAkB,CAAC7L,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACpJ,IAAIP,OAAO,CAACyP,kBAAkB,IAAI,IAAI,IAAIzP,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClFpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAAC5K,MAAM,CAACC,OAAO,CAACyP,kBAAkB,EAAExP,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC9I,IAAIP,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClED,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC8L,UAAU,CAAC;UACvE,OAAO7L,MAAM;QACjB,CAAC;QAWD4F,kBAAkB,CAACvF,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC3E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDsF,kBAAkB,CAACrF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACxD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2G,kBAAkB,EAAE;UAChI,OAAOpF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACuP,QAAQ,GAAG9O,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAACwP,gBAAgB,GAAG/O,MAAM,CAACwF,MAAM,EAAE;gBAC1C;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAACoL,kBAAkB,IAAIpL,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,CAAC,EAClEQ,OAAO,CAACoL,kBAAkB,GAAG,EAAE;gBACnCpL,OAAO,CAACoL,kBAAkB,CAACvD,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAAC/K,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBAC7G;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACyP,kBAAkB,GAAG3Q,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACnK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC1G;cACJ,KAAK,CAAC;gBACFH,OAAO,CAAC8L,UAAU,GAAGrL,MAAM,CAACwF,MAAM,EAAE;gBACpC;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD6F,kBAAkB,CAAC7E,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UAClE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD0F,kBAAkB,CAAC5E,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACjD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuP,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAIvP,OAAO,CAACwP,gBAAgB,IAAI,IAAI,IAAIxP,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAC9E,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACwP,gBAAgB,CAAC,EACzC,OAAO,mCAAmC;UAClD,IAAIxP,OAAO,CAACoL,kBAAkB,IAAI,IAAI,IAAIpL,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAAE;YACpF,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoL,kBAAkB,CAAC,EAC1C,OAAO,oCAAoC;YAC/C,KAAK,IAAI7L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EAAE,EAAED,CAAC,EAAE;cACxD,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACtK,MAAM,CAACjB,OAAO,CAACoL,kBAAkB,CAAC7L,CAAC,CAAC,CAAC;cAC9F,IAAI8G,KAAK,EACL,OAAO,qBAAqB,GAAGA,KAAK;YAC5C;UACJ;UACA,IAAIrG,OAAO,CAACyP,kBAAkB,IAAI,IAAI,IAAIzP,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAAE;YACpF,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAAC1J,MAAM,CAACjB,OAAO,CAACyP,kBAAkB,CAAC;YAC5F,IAAIpJ,KAAK,EACL,OAAO,qBAAqB,GAAGA,KAAK;UAC5C;UACA,IAAIrG,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClE,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC8L,UAAU,CAAC,EACnC,OAAO,6BAA6B;UAC5C,OAAO,IAAI;QACf,CAAC;QAUDjG,kBAAkB,CAACxE,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACxD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2G,kBAAkB,EAC/D,OAAOvE,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC2G,kBAAkB,EAAE;UACjE,IAAIvE,MAAM,CAACiO,QAAQ,IAAI,IAAI,EACvBvP,OAAO,CAACuP,QAAQ,GAAGtN,MAAM,CAACX,MAAM,CAACiO,QAAQ,CAAC;UAC9C,IAAIjO,MAAM,CAACkO,gBAAgB,IAAI,IAAI,EAC/BxP,OAAO,CAACwP,gBAAgB,GAAGvN,MAAM,CAACX,MAAM,CAACkO,gBAAgB,CAAC;UAC9D,IAAIlO,MAAM,CAAC8J,kBAAkB,EAAE;YAC3B,IAAI,CAACtD,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8J,kBAAkB,CAAC,EACzC,MAAM7E,SAAS,CAAC,6EAA6E,CAAC;YAClGvG,OAAO,CAACoL,kBAAkB,GAAG,EAAE;YAC/B,KAAK,IAAI7L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8J,kBAAkB,CAAC5L,MAAM,EAAE,EAAED,CAAC,EAAE;cACvD,IAAI,OAAO+B,MAAM,CAAC8J,kBAAkB,CAAC7L,CAAC,CAAC,KAAK,QAAQ,EAChD,MAAMgH,SAAS,CAAC,8EAA8E,CAAC;cACnGvG,OAAO,CAACoL,kBAAkB,CAAC7L,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAAClK,UAAU,CAACC,MAAM,CAAC8J,kBAAkB,CAAC7L,CAAC,CAAC,CAAC;YACzH;UACJ;UACA,IAAI+B,MAAM,CAACmO,kBAAkB,IAAI,IAAI,EAAE;YACnC,IAAI,OAAOnO,MAAM,CAACmO,kBAAkB,KAAK,QAAQ,EAC7C,MAAMlJ,SAAS,CAAC,8EAA8E,CAAC;YACnGvG,OAAO,CAACyP,kBAAkB,GAAG3Q,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACtJ,UAAU,CAACC,MAAM,CAACmO,kBAAkB,CAAC;UACpH;UACA,IAAInO,MAAM,CAACwK,UAAU,IAAI,IAAI,EACzB9L,OAAO,CAAC8L,UAAU,GAAG7J,MAAM,CAACX,MAAM,CAACwK,UAAU,CAAC;UAClD,OAAO9L,OAAO;QAClB,CAAC;QAWD6F,kBAAkB,CAACjE,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC9D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC8J,kBAAkB,GAAG,EAAE;UAClC,IAAIvJ,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACiO,QAAQ,GAAG,EAAE;YACpBjO,MAAM,CAACkO,gBAAgB,GAAG,EAAE;YAC5BlO,MAAM,CAACmO,kBAAkB,GAAG,IAAI;YAChCnO,MAAM,CAACwK,UAAU,GAAG,EAAE;UAC1B;UACA,IAAI9L,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACiO,QAAQ,GAAGvP,OAAO,CAACuP,QAAQ;UACtC,IAAIvP,OAAO,CAACwP,gBAAgB,IAAI,IAAI,IAAIxP,OAAO,CAACE,cAAc,CAAC,kBAAkB,CAAC,EAC9EoB,MAAM,CAACkO,gBAAgB,GAAGxP,OAAO,CAACwP,gBAAgB;UACtD,IAAIxP,OAAO,CAACoL,kBAAkB,IAAIpL,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EAAE;YACjE8B,MAAM,CAAC8J,kBAAkB,GAAG,EAAE;YAC9B,KAAK,IAAInD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoL,kBAAkB,CAAC5L,MAAM,EAAE,EAAEyI,CAAC,EACtD3G,MAAM,CAAC8J,kBAAkB,CAACnD,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAAC3J,QAAQ,CAAC5B,OAAO,CAACoL,kBAAkB,CAACnD,CAAC,CAAC,EAAEpG,OAAO,CAAC;UACpI;UACA,IAAI7B,OAAO,CAACyP,kBAAkB,IAAI,IAAI,IAAIzP,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClFoB,MAAM,CAACmO,kBAAkB,GAAG3Q,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAAC/I,QAAQ,CAAC5B,OAAO,CAACyP,kBAAkB,EAAE5N,OAAO,CAAC;UAC3H,IAAI7B,OAAO,CAAC8L,UAAU,IAAI,IAAI,IAAI9L,OAAO,CAACE,cAAc,CAAC,YAAY,CAAC,EAClEoB,MAAM,CAACwK,UAAU,GAAG9L,OAAO,CAAC8L,UAAU;UAC1C,OAAOxK,MAAM;QACjB,CAAC;QASDuE,kBAAkB,CAACpG,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACpD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOsD,kBAAkB;MAC7B,CAAC,EAAG;MAEJ3G,QAAQ,CAACqM,iBAAiB,GAAI,YAAW;QAwBrC,SAASA,iBAAiB,CAACnM,UAAU,EAAE;UACnC,IAAIA,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAgM,iBAAiB,CAAC9L,SAAS,CAACiQ,iBAAiB,GAAG,EAAE;QASlDnE,iBAAiB,CAAC9L,SAAS,CAACkQ,KAAK,GAAG,IAAI;QAUxCpE,iBAAiB,CAACzL,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACnD,OAAO,IAAImM,iBAAiB,CAACnM,UAAU,CAAC;QAC5C,CAAC;QAWDmM,iBAAiB,CAACxL,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UACxD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAAC0P,iBAAiB,IAAI,IAAI,IAAI1P,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAAC0P,iBAAiB,CAAC;UAC9E,IAAI1P,OAAO,CAAC2P,KAAK,IAAI,IAAI,IAAI3P,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAAC7P,MAAM,CAACC,OAAO,CAAC2P,KAAK,EAAE1P,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACtI,OAAON,MAAM;QACjB,CAAC;QAWDsL,iBAAiB,CAACjL,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC1E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDgL,iBAAiB,CAAC/K,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACvD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,EAAE;UAC/H,OAAO9K,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAAC0P,iBAAiB,GAAGjP,MAAM,CAACwF,MAAM,EAAE;gBAC3C;cACJ,KAAK,CAAC;gBACFjG,OAAO,CAAC2P,KAAK,GAAG7Q,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAACpP,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAClG;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDuL,iBAAiB,CAACvK,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACjE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUDoL,iBAAiB,CAACtK,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAChD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAAC0P,iBAAiB,IAAI,IAAI,IAAI1P,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChF,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAAC0P,iBAAiB,CAAC,EAC1C,OAAO,oCAAoC;UACnD,IAAI1P,OAAO,CAAC2P,KAAK,IAAI,IAAI,IAAI3P,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EAAE;YAC1D,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAAC3O,MAAM,CAACjB,OAAO,CAAC2P,KAAK,CAAC;YACpF,IAAItJ,KAAK,EACL,OAAO,QAAQ,GAAGA,KAAK;UAC/B;UACA,OAAO,IAAI;QACf,CAAC;QAUDkF,iBAAiB,CAAClK,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACvD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,EAC9D,OAAOjK,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,EAAE;UAChE,IAAIjK,MAAM,CAACoO,iBAAiB,IAAI,IAAI,EAChC1P,OAAO,CAAC0P,iBAAiB,GAAGzN,MAAM,CAACX,MAAM,CAACoO,iBAAiB,CAAC;UAChE,IAAIpO,MAAM,CAACqO,KAAK,IAAI,IAAI,EAAE;YACtB,IAAI,OAAOrO,MAAM,CAACqO,KAAK,KAAK,QAAQ,EAChC,MAAMpJ,SAAS,CAAC,gEAAgE,CAAC;YACrFvG,OAAO,CAAC2P,KAAK,GAAG7Q,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAACvO,UAAU,CAACC,MAAM,CAACqO,KAAK,CAAC;UAC/F;UACA,OAAO3P,OAAO;QAClB,CAAC;QAWDuL,iBAAiB,CAAC3J,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC7D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACoO,iBAAiB,GAAG,EAAE;YAC7BpO,MAAM,CAACqO,KAAK,GAAG,IAAI;UACvB;UACA,IAAI3P,OAAO,CAAC0P,iBAAiB,IAAI,IAAI,IAAI1P,OAAO,CAACE,cAAc,CAAC,mBAAmB,CAAC,EAChFoB,MAAM,CAACoO,iBAAiB,GAAG1P,OAAO,CAAC0P,iBAAiB;UACxD,IAAI1P,OAAO,CAAC2P,KAAK,IAAI,IAAI,IAAI3P,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAACqO,KAAK,GAAG7Q,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAAChO,QAAQ,CAAC5B,OAAO,CAAC2P,KAAK,EAAE9N,OAAO,CAAC;UACtG,OAAOP,MAAM;QACjB,CAAC;QASDiK,iBAAiB,CAAC9L,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACnD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAEDgJ,iBAAiB,CAACqE,KAAK,GAAI,YAAW;UAmBlC,SAASA,KAAK,CAACxQ,UAAU,EAAE;YACvB,IAAI,CAACgJ,QAAQ,GAAG,EAAE;YAClB,IAAIhJ,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;UACnD;UAQAqQ,KAAK,CAACnQ,SAAS,CAACoQ,KAAK,GAAG,CAAC;UAQzBD,KAAK,CAACnQ,SAAS,CAACyJ,KAAK,GAAG,EAAE;UAQ1B0G,KAAK,CAACnQ,SAAS,CAAC2I,QAAQ,GAAGxJ,KAAK,CAAC8I,UAAU;UAU3CkI,KAAK,CAAC9P,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;YACvC,OAAO,IAAIwQ,KAAK,CAACxQ,UAAU,CAAC;UAChC,CAAC;UAWDwQ,KAAK,CAAC7P,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;YAC5C,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;YAC7B,IAAIE,OAAO,CAAC6P,KAAK,IAAI,IAAI,IAAI7P,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDD,MAAM,CAACE,MAAM,CAAwB,CAAC,CAAC,CAACA,MAAM,CAACH,OAAO,CAAC6P,KAAK,CAAC;YACjE,IAAI7P,OAAO,CAACkJ,KAAK,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACkJ,KAAK,CAAC;YAClE,IAAIlJ,OAAO,CAACoI,QAAQ,IAAI,IAAI,IAAIpI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EACnD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE,EAAED,CAAC,EAC5CT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAAC7P,MAAM,CAACC,OAAO,CAACoI,QAAQ,CAAC7I,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;YAChJ,OAAON,MAAM;UACjB,CAAC;UAWD2P,KAAK,CAACtP,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;YAC9D,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;UAChD,CAAC;UAaDqP,KAAK,CAACpP,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;YAC3C,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;YACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;cAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,EAAE;YACrI,OAAOnP,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;cACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;cACzB,QAAQW,GAAG,KAAK,CAAC;gBACjB,KAAK,CAAC;kBACFd,OAAO,CAAC6P,KAAK,GAAGpP,MAAM,CAACN,MAAM,EAAE;kBAC/B;gBACJ,KAAK,CAAC;kBACFH,OAAO,CAACkJ,KAAK,GAAGzI,MAAM,CAACwF,MAAM,EAAE;kBAC/B;gBACJ,KAAK,CAAC;kBACF,IAAI,EAAEjG,OAAO,CAACoI,QAAQ,IAAIpI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,CAAC,EAC9CQ,OAAO,CAACoI,QAAQ,GAAG,EAAE;kBACzBpI,OAAO,CAACoI,QAAQ,CAACP,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAACpP,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;kBACzG;gBACJ;kBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;kBACxB;cAAM;YAEd;YACA,OAAOd,OAAO;UAClB,CAAC;UAYD4P,KAAK,CAAC5O,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;YACrD,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;YAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;UAC/C,CAAC;UAUDyP,KAAK,CAAC3O,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;YACpC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;YAC5B,IAAIA,OAAO,CAAC6P,KAAK,IAAI,IAAI,IAAI7P,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxD,IAAI,CAACtB,KAAK,CAACsC,SAAS,CAAClB,OAAO,CAAC6P,KAAK,CAAC,EAC/B,OAAO,yBAAyB;YACxC,IAAI7P,OAAO,CAACkJ,KAAK,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACkJ,KAAK,CAAC,EAC9B,OAAO,wBAAwB;YACvC,IAAIlJ,OAAO,CAACoI,QAAQ,IAAI,IAAI,IAAIpI,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;cAChE,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACoI,QAAQ,CAAC,EAChC,OAAO,0BAA0B;cACrC,KAAK,IAAI7I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE,EAAED,CAAC,EAAE;gBAC9C,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAAC3O,MAAM,CAACjB,OAAO,CAACoI,QAAQ,CAAC7I,CAAC,CAAC,CAAC;gBAC1F,IAAI8G,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;cAClC;YACJ;YACA,OAAO,IAAI;UACf,CAAC;UAUDuJ,KAAK,CAACvO,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;YAC3C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,EACpE,OAAOtO,MAAM;YACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,EAAE;YACtE,IAAItO,MAAM,CAACuO,KAAK,IAAI,IAAI,EACpB7P,OAAO,CAAC6P,KAAK,GAAGvO,MAAM,CAACuO,KAAK,KAAK,CAAC;YACtC,IAAIvO,MAAM,CAAC4H,KAAK,IAAI,IAAI,EACpBlJ,OAAO,CAACkJ,KAAK,GAAGjH,MAAM,CAACX,MAAM,CAAC4H,KAAK,CAAC;YACxC,IAAI5H,MAAM,CAAC8G,QAAQ,EAAE;cACjB,IAAI,CAACN,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC8G,QAAQ,CAAC,EAC/B,MAAM7B,SAAS,CAAC,wEAAwE,CAAC;cAC7FvG,OAAO,CAACoI,QAAQ,GAAG,EAAE;cACrB,KAAK,IAAI7I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8G,QAAQ,CAAC5I,MAAM,EAAE,EAAED,CAAC,EAAE;gBAC7C,IAAI,OAAO+B,MAAM,CAAC8G,QAAQ,CAAC7I,CAAC,CAAC,KAAK,QAAQ,EACtC,MAAMgH,SAAS,CAAC,yEAAyE,CAAC;gBAC9FvG,OAAO,CAACoI,QAAQ,CAAC7I,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAACvO,UAAU,CAACC,MAAM,CAAC8G,QAAQ,CAAC7I,CAAC,CAAC,CAAC;cAC3G;YACJ;YACA,OAAOS,OAAO;UAClB,CAAC;UAWD4P,KAAK,CAAChO,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;YACjD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;YAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;YACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC8G,QAAQ,GAAG,EAAE;YACxB,IAAIvG,OAAO,CAACC,QAAQ,EAAE;cAClBR,MAAM,CAACuO,KAAK,GAAG,CAAC;cAChBvO,MAAM,CAAC4H,KAAK,GAAG,EAAE;YACrB;YACA,IAAIlJ,OAAO,CAAC6P,KAAK,IAAI,IAAI,IAAI7P,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAACuO,KAAK,GAAG7P,OAAO,CAAC6P,KAAK;YAChC,IAAI7P,OAAO,CAACkJ,KAAK,IAAI,IAAI,IAAIlJ,OAAO,CAACE,cAAc,CAAC,OAAO,CAAC,EACxDoB,MAAM,CAAC4H,KAAK,GAAGlJ,OAAO,CAACkJ,KAAK;YAChC,IAAIlJ,OAAO,CAACoI,QAAQ,IAAIpI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE;cAC7C8B,MAAM,CAAC8G,QAAQ,GAAG,EAAE;cACpB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACoI,QAAQ,CAAC5I,MAAM,EAAE,EAAEyI,CAAC,EAC5C3G,MAAM,CAAC8G,QAAQ,CAACH,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACqM,iBAAiB,CAACqE,KAAK,CAAChO,QAAQ,CAAC5B,OAAO,CAACoI,QAAQ,CAACH,CAAC,CAAC,EAAEpG,OAAO,CAAC;YACtH;YACA,OAAOP,MAAM;UACjB,CAAC;UASDsO,KAAK,CAACnQ,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;YACvC,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;UACxE,CAAC;UAED,OAAOqN,KAAK;QAChB,CAAC,EAAG;QAEJ,OAAOrE,iBAAiB;MAC5B,CAAC,EAAG;MAEJrM,QAAQ,CAAC8G,sBAAsB,GAAI,YAAW;QAmB1C,SAASA,sBAAsB,CAAC5G,UAAU,EAAE;UACxC,IAAI,CAAC0Q,oBAAoB,GAAG,EAAE;UAC9B,IAAI1Q,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAyG,sBAAsB,CAACvG,SAAS,CAAC8P,QAAQ,GAAG,EAAE;QAQ9CvJ,sBAAsB,CAACvG,SAAS,CAACqQ,oBAAoB,GAAGlR,KAAK,CAAC8I,UAAU;QAQxE1B,sBAAsB,CAACvG,SAAS,CAACgQ,kBAAkB,GAAG,IAAI;QAU1DzJ,sBAAsB,CAAClG,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACxD,OAAO,IAAI4G,sBAAsB,CAAC5G,UAAU,CAAC;QACjD,CAAC;QAWD4G,sBAAsB,CAACjG,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC7D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACuP,QAAQ,CAAC;UACrE,IAAIvP,OAAO,CAAC8P,oBAAoB,IAAI,IAAI,IAAI9P,OAAO,CAAC8P,oBAAoB,CAACtQ,MAAM,EAC3E,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC8P,oBAAoB,CAACtQ,MAAM,EAAE,EAAED,CAAC,EACxDT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6Q,mBAAmB,CAAChQ,MAAM,CAACC,OAAO,CAAC8P,oBAAoB,CAACvQ,CAAC,CAAC,EAAEU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UACxJ,IAAIP,OAAO,CAACyP,kBAAkB,IAAI,IAAI,IAAIzP,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClFpB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAAC5K,MAAM,CAACC,OAAO,CAACyP,kBAAkB,EAAExP,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAACwE,IAAI,EAAE,CAAC,CAACpE,MAAM,EAAE;UAC9I,OAAON,MAAM;QACjB,CAAC;QAWD+F,sBAAsB,CAAC1F,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC/E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDyF,sBAAsB,CAACxF,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UAC5D,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8G,sBAAsB,EAAE;UACpI,OAAOvF,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACuP,QAAQ,GAAG9O,MAAM,CAACwF,MAAM,EAAE;gBAClC;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAAC8P,oBAAoB,IAAI9P,OAAO,CAAC8P,oBAAoB,CAACtQ,MAAM,CAAC,EACtEQ,OAAO,CAAC8P,oBAAoB,GAAG,EAAE;gBACrC9P,OAAO,CAAC8P,oBAAoB,CAACjI,IAAI,CAAC/I,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6Q,mBAAmB,CAACvP,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;gBACjH;cACJ,KAAK,CAAC;gBACFH,OAAO,CAACyP,kBAAkB,GAAG3Q,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACnK,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;gBAC1G;cACJ;gBACIM,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYDgG,sBAAsB,CAAChF,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACtE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD6F,sBAAsB,CAAC/E,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UACrD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9D,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACuP,QAAQ,CAAC,EACjC,OAAO,2BAA2B;UAC1C,IAAIvP,OAAO,CAAC8P,oBAAoB,IAAI,IAAI,IAAI9P,OAAO,CAACE,cAAc,CAAC,sBAAsB,CAAC,EAAE;YACxF,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAAC8P,oBAAoB,CAAC,EAC5C,OAAO,sCAAsC;YACjD,KAAK,IAAIvQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAAC8P,oBAAoB,CAACtQ,MAAM,EAAE,EAAED,CAAC,EAAE;cAC1D,IAAI8G,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6Q,mBAAmB,CAAC9O,MAAM,CAACjB,OAAO,CAAC8P,oBAAoB,CAACvQ,CAAC,CAAC,CAAC;cAClG,IAAI8G,KAAK,EACL,OAAO,uBAAuB,GAAGA,KAAK;YAC9C;UACJ;UACA,IAAIrG,OAAO,CAACyP,kBAAkB,IAAI,IAAI,IAAIzP,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAAE;YACpF,IAAImG,KAAK,GAAGvH,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAAC1J,MAAM,CAACjB,OAAO,CAACyP,kBAAkB,CAAC;YAC5F,IAAIpJ,KAAK,EACL,OAAO,qBAAqB,GAAGA,KAAK;UAC5C;UACA,OAAO,IAAI;QACf,CAAC;QAUDL,sBAAsB,CAAC3E,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UAC5D,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8G,sBAAsB,EACnE,OAAO1E,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC8G,sBAAsB,EAAE;UACrE,IAAI1E,MAAM,CAACiO,QAAQ,IAAI,IAAI,EACvBvP,OAAO,CAACuP,QAAQ,GAAGtN,MAAM,CAACX,MAAM,CAACiO,QAAQ,CAAC;UAC9C,IAAIjO,MAAM,CAACwO,oBAAoB,EAAE;YAC7B,IAAI,CAAChI,KAAK,CAACC,OAAO,CAACzG,MAAM,CAACwO,oBAAoB,CAAC,EAC3C,MAAMvJ,SAAS,CAAC,mFAAmF,CAAC;YACxGvG,OAAO,CAAC8P,oBAAoB,GAAG,EAAE;YACjC,KAAK,IAAIvQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAACwO,oBAAoB,CAACtQ,MAAM,EAAE,EAAED,CAAC,EAAE;cACzD,IAAI,OAAO+B,MAAM,CAACwO,oBAAoB,CAACvQ,CAAC,CAAC,KAAK,QAAQ,EAClD,MAAMgH,SAAS,CAAC,oFAAoF,CAAC;cACzGvG,OAAO,CAAC8P,oBAAoB,CAACvQ,CAAC,CAAC,GAAGT,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6Q,mBAAmB,CAAC1O,UAAU,CAACC,MAAM,CAACwO,oBAAoB,CAACvQ,CAAC,CAAC,CAAC;YAC/H;UACJ;UACA,IAAI+B,MAAM,CAACmO,kBAAkB,IAAI,IAAI,EAAE;YACnC,IAAI,OAAOnO,MAAM,CAACmO,kBAAkB,KAAK,QAAQ,EAC7C,MAAMlJ,SAAS,CAAC,kFAAkF,CAAC;YACvGvG,OAAO,CAACyP,kBAAkB,GAAG3Q,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAACtJ,UAAU,CAACC,MAAM,CAACmO,kBAAkB,CAAC;UACpH;UACA,OAAOzP,OAAO;QAClB,CAAC;QAWDgG,sBAAsB,CAACpE,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAClE,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAACwO,oBAAoB,GAAG,EAAE;UACpC,IAAIjO,OAAO,CAACC,QAAQ,EAAE;YAClBR,MAAM,CAACiO,QAAQ,GAAG,EAAE;YACpBjO,MAAM,CAACmO,kBAAkB,GAAG,IAAI;UACpC;UACA,IAAIzP,OAAO,CAACuP,QAAQ,IAAI,IAAI,IAAIvP,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DoB,MAAM,CAACiO,QAAQ,GAAGvP,OAAO,CAACuP,QAAQ;UACtC,IAAIvP,OAAO,CAAC8P,oBAAoB,IAAI9P,OAAO,CAAC8P,oBAAoB,CAACtQ,MAAM,EAAE;YACrE8B,MAAM,CAACwO,oBAAoB,GAAG,EAAE;YAChC,KAAK,IAAI7H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAAC8P,oBAAoB,CAACtQ,MAAM,EAAE,EAAEyI,CAAC,EACxD3G,MAAM,CAACwO,oBAAoB,CAAC7H,CAAC,CAAC,GAAGnJ,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6Q,mBAAmB,CAACnO,QAAQ,CAAC5B,OAAO,CAAC8P,oBAAoB,CAAC7H,CAAC,CAAC,EAAEpG,OAAO,CAAC;UAC1I;UACA,IAAI7B,OAAO,CAACyP,kBAAkB,IAAI,IAAI,IAAIzP,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAClFoB,MAAM,CAACmO,kBAAkB,GAAG3Q,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAACyL,kBAAkB,CAAC/I,QAAQ,CAAC5B,OAAO,CAACyP,kBAAkB,EAAE5N,OAAO,CAAC;UAC3H,OAAOP,MAAM;QACjB,CAAC;QASD0E,sBAAsB,CAACvG,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACxD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOyD,sBAAsB;MACjC,CAAC,EAAG;MAEJ9G,QAAQ,CAAC6Q,mBAAmB,GAAI,YAAW;QAkBvC,SAASA,mBAAmB,CAAC3Q,UAAU,EAAE;UACrC,IAAI,CAAC4Q,kBAAkB,GAAG,EAAE;UAC5B,IAAI5Q,UAAU,EACV,KAAK,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,UAAU,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGH,UAAU,CAACC,IAAI,CAACE,CAAC,CAAC,CAAC;QACnD;QAQAwQ,mBAAmB,CAACtQ,SAAS,CAACyI,IAAI,GAAG,EAAE;QAQvC6H,mBAAmB,CAACtQ,SAAS,CAACuQ,kBAAkB,GAAGpR,KAAK,CAAC8I,UAAU;QAUnEqI,mBAAmB,CAACjQ,MAAM,GAAG,SAASA,MAAM,CAACV,UAAU,EAAE;UACrD,OAAO,IAAI2Q,mBAAmB,CAAC3Q,UAAU,CAAC;QAC9C,CAAC;QAWD2Q,mBAAmB,CAAChQ,MAAM,GAAG,SAASA,MAAM,CAACC,OAAO,EAAEC,MAAM,EAAE;UAC1D,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGvB,OAAO,CAACoB,MAAM,EAAE;UAC7B,IAAIE,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDD,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACkI,IAAI,CAAC;UACjE,IAAIlI,OAAO,CAACgQ,kBAAkB,IAAI,IAAI,IAAIhQ,OAAO,CAACgQ,kBAAkB,CAACxQ,MAAM,EACvE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACgQ,kBAAkB,CAACxQ,MAAM,EAAE,EAAED,CAAC,EACtDU,MAAM,CAACE,MAAM,CAAwB,EAAE,CAAC,CAAC8F,MAAM,CAACjG,OAAO,CAACgQ,kBAAkB,CAACzQ,CAAC,CAAC,CAAC;UACtF,OAAOU,MAAM;QACjB,CAAC;QAWD8P,mBAAmB,CAACzP,eAAe,GAAG,SAASA,eAAe,CAACN,OAAO,EAAEC,MAAM,EAAE;UAC5E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACM,MAAM,EAAE;QAChD,CAAC;QAaDwP,mBAAmB,CAACvP,MAAM,GAAG,SAASA,MAAM,CAACC,MAAM,EAAEjB,MAAM,EAAE;UACzD,IAAI,EAAEiB,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAGjC,OAAO,CAACsB,MAAM,CAACW,MAAM,CAAC;UACnC,IAAIC,GAAG,GAAGlB,MAAM,KAAKmB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGrB,MAAM;YAAEQ,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6Q,mBAAmB,EAAE;UACjI,OAAOtP,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;YACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;YACzB,QAAQW,GAAG,KAAK,CAAC;cACjB,KAAK,CAAC;gBACFd,OAAO,CAACkI,IAAI,GAAGzH,MAAM,CAACwF,MAAM,EAAE;gBAC9B;cACJ,KAAK,CAAC;gBACF,IAAI,EAAEjG,OAAO,CAACgQ,kBAAkB,IAAIhQ,OAAO,CAACgQ,kBAAkB,CAACxQ,MAAM,CAAC,EAClEQ,OAAO,CAACgQ,kBAAkB,GAAG,EAAE;gBACnChQ,OAAO,CAACgQ,kBAAkB,CAACnI,IAAI,CAACpH,MAAM,CAACwF,MAAM,EAAE,CAAC;gBAChD;cACJ;gBACIxF,MAAM,CAACM,QAAQ,CAACD,GAAG,GAAG,CAAC,CAAC;gBACxB;YAAM;UAEd;UACA,OAAOd,OAAO;QAClB,CAAC;QAYD+P,mBAAmB,CAAC/O,eAAe,GAAG,SAASA,eAAe,CAACP,MAAM,EAAE;UACnE,IAAI,EAAEA,MAAM,YAAYjC,OAAO,CAAC,EAC5BiC,MAAM,GAAG,IAAIjC,OAAO,CAACiC,MAAM,CAAC;UAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;QAC/C,CAAC;QAUD4P,mBAAmB,CAAC9O,MAAM,GAAG,SAASA,MAAM,CAACjB,OAAO,EAAE;UAClD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;UAC5B,IAAIA,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtD,IAAI,CAACtB,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACkI,IAAI,CAAC,EAC7B,OAAO,uBAAuB;UACtC,IAAIlI,OAAO,CAACgQ,kBAAkB,IAAI,IAAI,IAAIhQ,OAAO,CAACE,cAAc,CAAC,oBAAoB,CAAC,EAAE;YACpF,IAAI,CAAC4H,KAAK,CAACC,OAAO,CAAC/H,OAAO,CAACgQ,kBAAkB,CAAC,EAC1C,OAAO,oCAAoC;YAC/C,KAAK,IAAIzQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,OAAO,CAACgQ,kBAAkB,CAACxQ,MAAM,EAAE,EAAED,CAAC,EACtD,IAAI,CAACX,KAAK,CAAC0H,QAAQ,CAACtG,OAAO,CAACgQ,kBAAkB,CAACzQ,CAAC,CAAC,CAAC,EAC9C,OAAO,uCAAuC;UAC1D;UACA,OAAO,IAAI;QACf,CAAC;QAUDwQ,mBAAmB,CAAC1O,UAAU,GAAG,SAASA,UAAU,CAACC,MAAM,EAAE;UACzD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6Q,mBAAmB,EAChE,OAAOzO,MAAM;UACjB,IAAItB,OAAO,GAAG,IAAIlB,KAAK,CAACE,EAAE,CAACC,QAAQ,CAACC,QAAQ,CAAC6Q,mBAAmB,EAAE;UAClE,IAAIzO,MAAM,CAAC4G,IAAI,IAAI,IAAI,EACnBlI,OAAO,CAACkI,IAAI,GAAGjG,MAAM,CAACX,MAAM,CAAC4G,IAAI,CAAC;UACtC,IAAI5G,MAAM,CAAC0O,kBAAkB,EAAE;YAC3B,IAAI,CAAClI,KAAK,CAACC,OAAO,CAACzG,MAAM,CAAC0O,kBAAkB,CAAC,EACzC,MAAMzJ,SAAS,CAAC,8EAA8E,CAAC;YACnGvG,OAAO,CAACgQ,kBAAkB,GAAG,EAAE;YAC/B,KAAK,IAAIzQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC0O,kBAAkB,CAACxQ,MAAM,EAAE,EAAED,CAAC,EACrDS,OAAO,CAACgQ,kBAAkB,CAACzQ,CAAC,CAAC,GAAG0C,MAAM,CAACX,MAAM,CAAC0O,kBAAkB,CAACzQ,CAAC,CAAC,CAAC;UAC5E;UACA,OAAOS,OAAO;QAClB,CAAC;QAWD+P,mBAAmB,CAACnO,QAAQ,GAAG,SAASA,QAAQ,CAAC5B,OAAO,EAAE6B,OAAO,EAAE;UAC/D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;UAChB,IAAIP,MAAM,GAAG,CAAC,CAAC;UACf,IAAIO,OAAO,CAACmG,MAAM,IAAInG,OAAO,CAACC,QAAQ,EAClCR,MAAM,CAAC0O,kBAAkB,GAAG,EAAE;UAClC,IAAInO,OAAO,CAACC,QAAQ,EAChBR,MAAM,CAAC4G,IAAI,GAAG,EAAE;UACpB,IAAIlI,OAAO,CAACkI,IAAI,IAAI,IAAI,IAAIlI,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EACtDoB,MAAM,CAAC4G,IAAI,GAAGlI,OAAO,CAACkI,IAAI;UAC9B,IAAIlI,OAAO,CAACgQ,kBAAkB,IAAIhQ,OAAO,CAACgQ,kBAAkB,CAACxQ,MAAM,EAAE;YACjE8B,MAAM,CAAC0O,kBAAkB,GAAG,EAAE;YAC9B,KAAK,IAAI/H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjI,OAAO,CAACgQ,kBAAkB,CAACxQ,MAAM,EAAE,EAAEyI,CAAC,EACtD3G,MAAM,CAAC0O,kBAAkB,CAAC/H,CAAC,CAAC,GAAGjI,OAAO,CAACgQ,kBAAkB,CAAC/H,CAAC,CAAC;UACpE;UACA,OAAO3G,MAAM;QACjB,CAAC;QASDyO,mBAAmB,CAACtQ,SAAS,CAAC4C,MAAM,GAAG,SAASA,MAAM,GAAG;UACrD,OAAO,IAAI,CAACC,WAAW,CAACV,QAAQ,CAAC,IAAI,EAAEtD,SAAS,CAACO,IAAI,CAAC0D,aAAa,CAAC;QACxE,CAAC;QAED,OAAOwN,mBAAmB;MAC9B,CAAC,EAAG;MAEJ,OAAO7Q,QAAQ;IACnB,CAAC,EAAG;IAEJ,OAAOD,QAAQ;EACnB,CAAC,EAAG;EAEJ,OAAOD,EAAE;AACb,CAAC,EAAG;AAEJiR,MAAM,CAACC,OAAO,GAAGpR,KAAK"}