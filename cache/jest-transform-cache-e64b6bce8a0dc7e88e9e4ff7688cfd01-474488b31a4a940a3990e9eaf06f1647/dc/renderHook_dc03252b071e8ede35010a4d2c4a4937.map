{"version":3,"mappings":";;;;;;AAAA;AAEA;AAA8B;EAAA;IAAAA;EAAA;AAAA;AAmBvB,SAASC,UAAU,CACxBC,cAAwC,EACxCC,OAAkC,EACD;EACjC,IAAMC,YAAY,GAAGD,OAAO,oBAAPA,OAAO,CAAEC,YAAY;EAC1C,IAAMC,OAAO,GAAGF,OAAO,oBAAPA,OAAO,CAAEE,OAAO;EAEhC,IAAMC,MAA6C,GAAGC,cAAK,CAACC,SAAS,EAAE;EAEvE,SAASC,aAAa,OAInB;IAAA,IAHDC;IAIA,IAAMC,YAAY,GAAGT,cAAc,CAACQ,mBAAmB,CAAC;IAExDH,cAAK,CAACK,SAAS,CAAC,YAAM;MACpBN,MAAM,CAACO,OAAO,GAAGF,YAAY;IAC/B,CAAC,CAAC;IAEF,OAAO,IAAI;EACb;EAEA,YAA4C,mBAAM,EAEhDG,6BAACL,aAAa;MAACC,mBAAmB,EAAEN;IAAa,EAAG,EACpD;MAAEC;IAAQ,CAAC,CACZ;IAJiBU,YAAY,SAAtBC,QAAQ;IAAgBC;EAMhC,SAASD,QAAQ,CAACE,qBAA4B,EAAE;IAC9C,OAAOH,YAAY,CACjBD,6BAACL,aAAa;MAACC,mBAAmB,EAAEQ;IAAsB,EAAG,CAC9D;EACH;EAGA,OAAO;IAAEZ,MAAM,EAANA,MAAM;IAAEU,QAAQ,EAARA,QAAQ;IAAEC;EAAQ,CAAC;AACtC","names":["default","renderHook","renderCallback","options","initialProps","wrapper","result","React","createRef","TestComponent","renderCallbackProps","renderResult","useEffect","current","_react","baseRerender","rerender","unmount","rerenderCallbackProps"],"sources":["../src/renderHook.tsx"],"sourcesContent":["import React from 'react';\nimport type { ComponentType } from 'react';\nimport render from './render';\n\nexport type RenderHookResult<Result, Props> = {\n  rerender: (props: Props) => void;\n  result: { current: Result };\n  unmount: () => void;\n};\n\nexport type RenderHookOptions<Props> = Props extends\n  | object\n  | string\n  | number\n  | boolean\n  ? {\n      initialProps: Props;\n      wrapper?: ComponentType<any>;\n    }\n  : { wrapper?: ComponentType<any>; initialProps?: never } | undefined;\n\nexport function renderHook<Result, Props>(\n  renderCallback: (props: Props) => Result,\n  options?: RenderHookOptions<Props>\n): RenderHookResult<Result, Props> {\n  const initialProps = options?.initialProps;\n  const wrapper = options?.wrapper;\n\n  const result: React.MutableRefObject<Result | null> = React.createRef();\n\n  function TestComponent({\n    renderCallbackProps,\n  }: {\n    renderCallbackProps: Props;\n  }) {\n    const renderResult = renderCallback(renderCallbackProps);\n\n    React.useEffect(() => {\n      result.current = renderResult;\n    });\n\n    return null;\n  }\n\n  const { rerender: baseRerender, unmount } = render(\n    // @ts-expect-error since option can be undefined, initialProps can be undefined when it should'nt\n    <TestComponent renderCallbackProps={initialProps} />,\n    { wrapper }\n  );\n\n  function rerender(rerenderCallbackProps: Props) {\n    return baseRerender(\n      <TestComponent renderCallbackProps={rerenderCallbackProps} />\n    );\n  }\n\n  // @ts-expect-error result is ill typed because ref is initialized to null\n  return { result, rerender, unmount };\n}\n"]}