b2b7fc84ba8bd0f3967c177c3fe16bea
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveAccessibilityState = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
function toHaveAccessibilityState(element, expectedState) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toHaveAccessibilityState, this);
  var impliedState = getAccessibilityState(element);
  return {
    pass: matchAccessibilityState(element, expectedState),
    message: function message() {
      var matcher = (0, jest_matcher_utils_1.matcherHint)((_this.isNot ? '.not' : '') + ".toHaveAccessibilityState", 'element', (0, jest_matcher_utils_1.stringify)(expectedState));
      return (0, utils_1.getMessage)(matcher, "Expected the element " + (_this.isNot ? 'not to' : 'to') + " have accessibility state", (0, jest_matcher_utils_1.stringify)(expectedState), 'Received element with implied accessibility state', (0, jest_matcher_utils_1.stringify)(impliedState));
    }
  };
}
exports.toHaveAccessibilityState = toHaveAccessibilityState;
var defaultState = {
  disabled: false,
  selected: false,
  busy: false
};
var getAccessibilityState = function getAccessibilityState(element) {
  return Object.assign({}, defaultState, element.props.accessibilityState);
};
var accessibilityStateKeys = ['disabled', 'selected', 'checked', 'busy', 'expanded'];
function matchAccessibilityState(element, matcher) {
  var state = getAccessibilityState(element);
  return accessibilityStateKeys.every(function (key) {
    return matchStateEntry(state, matcher, key);
  });
}
function matchStateEntry(state, matcher, key) {
  return matcher[key] === undefined || matcher[key] === state[key];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSIsImplc3RfbWF0Y2hlcl91dGlsc18xIiwicmVxdWlyZSIsInV0aWxzXzEiLCJlbGVtZW50IiwiZXhwZWN0ZWRTdGF0ZSIsImNoZWNrUmVhY3RFbGVtZW50IiwiaW1wbGllZFN0YXRlIiwiZ2V0QWNjZXNzaWJpbGl0eVN0YXRlIiwicGFzcyIsIm1hdGNoQWNjZXNzaWJpbGl0eVN0YXRlIiwibWVzc2FnZSIsIm1hdGNoZXIiLCJtYXRjaGVySGludCIsImlzTm90Iiwic3RyaW5naWZ5IiwiZ2V0TWVzc2FnZSIsImRlZmF1bHRTdGF0ZSIsImRpc2FibGVkIiwic2VsZWN0ZWQiLCJidXN5IiwicHJvcHMiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJhY2Nlc3NpYmlsaXR5U3RhdGVLZXlzIiwic3RhdGUiLCJldmVyeSIsImtleSIsIm1hdGNoU3RhdGVFbnRyeSIsInVuZGVmaW5lZCJdLCJzb3VyY2VzIjpbInRvLWhhdmUtYWNjZXNzaWJpbGl0eS1zdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlID0gdm9pZCAwO1xuY29uc3QgamVzdF9tYXRjaGVyX3V0aWxzXzEgPSByZXF1aXJlKFwiamVzdC1tYXRjaGVyLXV0aWxzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuZnVuY3Rpb24gdG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlKGVsZW1lbnQsIGV4cGVjdGVkU3RhdGUpIHtcbiAgICAoMCwgdXRpbHNfMS5jaGVja1JlYWN0RWxlbWVudCkoZWxlbWVudCwgdG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlLCB0aGlzKTtcbiAgICBjb25zdCBpbXBsaWVkU3RhdGUgPSBnZXRBY2Nlc3NpYmlsaXR5U3RhdGUoZWxlbWVudCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFzczogbWF0Y2hBY2Nlc3NpYmlsaXR5U3RhdGUoZWxlbWVudCwgZXhwZWN0ZWRTdGF0ZSksXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXIgPSAoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEubWF0Y2hlckhpbnQpKGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlYCwgJ2VsZW1lbnQnLCAoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEuc3RyaW5naWZ5KShleHBlY3RlZFN0YXRlKSk7XG4gICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuZ2V0TWVzc2FnZSkobWF0Y2hlciwgYEV4cGVjdGVkIHRoZSBlbGVtZW50ICR7dGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJ30gaGF2ZSBhY2Nlc3NpYmlsaXR5IHN0YXRlYCwgKDAsIGplc3RfbWF0Y2hlcl91dGlsc18xLnN0cmluZ2lmeSkoZXhwZWN0ZWRTdGF0ZSksICdSZWNlaXZlZCBlbGVtZW50IHdpdGggaW1wbGllZCBhY2Nlc3NpYmlsaXR5IHN0YXRlJywgKDAsIGplc3RfbWF0Y2hlcl91dGlsc18xLnN0cmluZ2lmeSkoaW1wbGllZFN0YXRlKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMudG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlID0gdG9IYXZlQWNjZXNzaWJpbGl0eVN0YXRlO1xuLyoqXG4gKiBEZWZhdWx0IGFjY2Vzc2liaWxpdHkgc3RhdGUgdmFsdWVzIGJhc2VkIG9uIGV4cGVyaW1lbnRzIHVzaW5nIGFjY2Vzc2liaWxpdHlcbiAqIGluc3BlY3Rvci9zY3JlZW4gcmVhZGVyIG9uIGlPUyBhbmQgQW5kcm9pZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jYWxsc3RhY2svcmVhY3QtbmF0aXZlLXRlc3RpbmctbGlicmFyeS93aWtpL0FjY2Vzc2liaWxpdHk6LVN0YXRlXG4gKi9cbmNvbnN0IGRlZmF1bHRTdGF0ZSA9IHtcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgIGJ1c3k6IGZhbHNlLFxufTtcbmNvbnN0IGdldEFjY2Vzc2liaWxpdHlTdGF0ZSA9IChlbGVtZW50KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGVmYXVsdFN0YXRlLFxuICAgICAgICAuLi5lbGVtZW50LnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZSxcbiAgICB9O1xufTtcbmNvbnN0IGFjY2Vzc2liaWxpdHlTdGF0ZUtleXMgPSBbXG4gICAgJ2Rpc2FibGVkJyxcbiAgICAnc2VsZWN0ZWQnLFxuICAgICdjaGVja2VkJyxcbiAgICAnYnVzeScsXG4gICAgJ2V4cGFuZGVkJyxcbl07XG5mdW5jdGlvbiBtYXRjaEFjY2Vzc2liaWxpdHlTdGF0ZShlbGVtZW50LCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBnZXRBY2Nlc3NpYmlsaXR5U3RhdGUoZWxlbWVudCk7XG4gICAgcmV0dXJuIGFjY2Vzc2liaWxpdHlTdGF0ZUtleXMuZXZlcnkoKGtleSkgPT4gbWF0Y2hTdGF0ZUVudHJ5KHN0YXRlLCBtYXRjaGVyLCBrZXkpKTtcbn1cbmZ1bmN0aW9uIG1hdGNoU3RhdGVFbnRyeShzdGF0ZSwgbWF0Y2hlciwga2V5KSB7XG4gICAgcmV0dXJuIG1hdGNoZXJba2V5XSA9PT0gdW5kZWZpbmVkIHx8IG1hdGNoZXJba2V5XSA9PT0gc3RhdGVba2V5XTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdERCxPQUFPLENBQUNFLHdCQUF3QixHQUFHLEtBQUssQ0FBQztBQUN6QyxJQUFNQyxvQkFBb0IsR0FBR0MsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQzFELElBQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUNsQyxTQUFTRix3QkFBd0IsQ0FBQ0ksT0FBTyxFQUFFQyxhQUFhLEVBQUU7RUFBQTtFQUN0RCxDQUFDLENBQUMsRUFBRUYsT0FBTyxDQUFDRyxpQkFBaUIsRUFBRUYsT0FBTyxFQUFFSix3QkFBd0IsRUFBRSxJQUFJLENBQUM7RUFDdkUsSUFBTU8sWUFBWSxHQUFHQyxxQkFBcUIsQ0FBQ0osT0FBTyxDQUFDO0VBQ25ELE9BQU87SUFDSEssSUFBSSxFQUFFQyx1QkFBdUIsQ0FBQ04sT0FBTyxFQUFFQyxhQUFhLENBQUM7SUFDckRNLE9BQU8sRUFBRSxtQkFBTTtNQUNYLElBQU1DLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRVgsb0JBQW9CLENBQUNZLFdBQVcsR0FBSyxLQUFJLENBQUNDLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRSxpQ0FBNkIsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFYixvQkFBb0IsQ0FBQ2MsU0FBUyxFQUFFVixhQUFhLENBQUMsQ0FBQztNQUM1SyxPQUFPLENBQUMsQ0FBQyxFQUFFRixPQUFPLENBQUNhLFVBQVUsRUFBRUosT0FBTyw2QkFBMEIsS0FBSSxDQUFDRSxLQUFLLEdBQUcsUUFBUSxHQUFHLElBQUksaUNBQTZCLENBQUMsQ0FBQyxFQUFFYixvQkFBb0IsQ0FBQ2MsU0FBUyxFQUFFVixhQUFhLENBQUMsRUFBRSxtREFBbUQsRUFBRSxDQUFDLENBQUMsRUFBRUosb0JBQW9CLENBQUNjLFNBQVMsRUFBRVIsWUFBWSxDQUFDLENBQUM7SUFDeFI7RUFDSixDQUFDO0FBQ0w7QUFDQVQsT0FBTyxDQUFDRSx3QkFBd0IsR0FBR0Esd0JBQXdCO0FBTzNELElBQU1pQixZQUFZLEdBQUc7RUFDakJDLFFBQVEsRUFBRSxLQUFLO0VBQ2ZDLFFBQVEsRUFBRSxLQUFLO0VBQ2ZDLElBQUksRUFBRTtBQUNWLENBQUM7QUFDRCxJQUFNWixxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXFCLENBQUlKLE9BQU8sRUFBSztFQUN2Qyx5QkFDT2EsWUFBWSxFQUNaYixPQUFPLENBQUNpQixLQUFLLENBQUNDLGtCQUFrQjtBQUUzQyxDQUFDO0FBQ0QsSUFBTUMsc0JBQXNCLEdBQUcsQ0FDM0IsVUFBVSxFQUNWLFVBQVUsRUFDVixTQUFTLEVBQ1QsTUFBTSxFQUNOLFVBQVUsQ0FDYjtBQUNELFNBQVNiLHVCQUF1QixDQUFDTixPQUFPLEVBQUVRLE9BQU8sRUFBRTtFQUMvQyxJQUFNWSxLQUFLLEdBQUdoQixxQkFBcUIsQ0FBQ0osT0FBTyxDQUFDO0VBQzVDLE9BQU9tQixzQkFBc0IsQ0FBQ0UsS0FBSyxDQUFDLFVBQUNDLEdBQUc7SUFBQSxPQUFLQyxlQUFlLENBQUNILEtBQUssRUFBRVosT0FBTyxFQUFFYyxHQUFHLENBQUM7RUFBQSxFQUFDO0FBQ3RGO0FBQ0EsU0FBU0MsZUFBZSxDQUFDSCxLQUFLLEVBQUVaLE9BQU8sRUFBRWMsR0FBRyxFQUFFO0VBQzFDLE9BQU9kLE9BQU8sQ0FBQ2MsR0FBRyxDQUFDLEtBQUtFLFNBQVMsSUFBSWhCLE9BQU8sQ0FBQ2MsR0FBRyxDQUFDLEtBQUtGLEtBQUssQ0FBQ0UsR0FBRyxDQUFDO0FBQ3BFIn0=