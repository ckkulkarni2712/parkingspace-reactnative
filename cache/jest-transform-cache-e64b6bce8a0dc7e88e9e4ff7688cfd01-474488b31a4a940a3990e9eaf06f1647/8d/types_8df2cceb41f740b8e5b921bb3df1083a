5534b3b926607f9fa1480089d69fdca7
"use strict";
var types = exports;
var util = require("./util");
var s = ["double", "float", "int32", "uint32", "sint32", "fixed32", "sfixed32", "int64", "uint64", "sint64", "fixed64", "sfixed64", "bool", "string", "bytes"];
function bake(values, offset) {
  var i = 0,
    o = {};
  offset |= 0;
  while (i < values.length) o[s[i + offset]] = values[i++];
  return o;
}
types.basic = bake([1, 5, 0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0, 2, 2]);
types.defaults = bake([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, "", util.emptyArray, null]);
types.long = bake([0, 0, 0, 1, 1], 7);
types.mapKey = bake([0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0, 2], 2);
types.packed = bake([1, 5, 0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,