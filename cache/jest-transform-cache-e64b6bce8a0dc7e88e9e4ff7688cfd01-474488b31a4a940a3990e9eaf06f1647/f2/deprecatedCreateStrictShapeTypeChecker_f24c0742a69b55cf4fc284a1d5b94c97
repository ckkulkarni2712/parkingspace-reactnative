be60853f1ddb4b60bb409576b878e454
'use strict';

var invariant = require('invariant');
function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';
    if (propType !== 'object') {
      invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
    }
    var allKeys = Object.assign({}, props[propName], shapeTypes);
    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }
    for (var key in allKeys) {
      var checker = shapeTypes[key];
      if (!checker) {
        invariant(false, "Invalid props." + propName + " key `" + key + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }
      var error = checker.apply(void 0, [propValue, key, componentName, location].concat(rest));
      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }
  function chainedCheckType(props, propName, componentName, location) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
      rest[_key2 - 4] = arguments[_key2];
    }
    return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}
module.exports = deprecatedCreateStrictShapeTypeChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiZGVwcmVjYXRlZENyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIiLCJzaGFwZVR5cGVzIiwiY2hlY2tUeXBlIiwiaXNSZXF1aXJlZCIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wVmFsdWUiLCJwcm9wVHlwZSIsImxvY2F0aW9uTmFtZSIsImFsbEtleXMiLCJyZXN0Iiwia2V5IiwiY2hlY2tlciIsIkpTT04iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJrZXlzIiwiZXJyb3IiLCJtZXNzYWdlIiwiY2hhaW5lZENoZWNrVHlwZSIsImJpbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZGVwcmVjYXRlZENyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBkZXByZWNhdGVkQ3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShcbiAgICBpc1JlcXVpcmVkLFxuICAgIHByb3BzLFxuICAgIHByb3BOYW1lLFxuICAgIGNvbXBvbmVudE5hbWUsXG4gICAgbG9jYXRpb24sXG4gICAgLi4ucmVzdFxuICApIHtcbiAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSkge1xuICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIGBSZXF1aXJlZCBvYmplY3QgXFxgJHtwcm9wTmFtZX1cXGAgd2FzIG5vdCBzcGVjaWZpZWQgaW4gYCArXG4gICAgICAgICAgICBgXFxgJHtjb21wb25lbnROYW1lfVxcYC5gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgY29uc3QgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICAgIGNvbnN0IGxvY2F0aW9uTmFtZSA9IGxvY2F0aW9uIHx8ICcodW5rbm93biknO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGBJbnZhbGlkICR7bG9jYXRpb25OYW1lfSBcXGAke3Byb3BOYW1lfVxcYCBvZiB0eXBlIFxcYCR7cHJvcFR5cGV9XFxgIGAgK1xuICAgICAgICAgIGBzdXBwbGllZCB0byBcXGAke2NvbXBvbmVudE5hbWV9XFxgLCBleHBlY3RlZCBcXGBvYmplY3RcXGAuYCxcbiAgICAgICk7XG4gICAgfVxuICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgYWxsIGtleXMgaW4gY2FzZSBzb21lIGFyZSByZXF1aXJlZCBidXQgbWlzc2luZyBmcm9tXG4gICAgLy8gcHJvcHMuXG4gICAgY29uc3QgYWxsS2V5cyA9IHsuLi5wcm9wc1twcm9wTmFtZV0sIC4uLnNoYXBlVHlwZXN9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGFsbEtleXMpIHtcbiAgICAgIGNvbnN0IGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIGBJbnZhbGlkIHByb3BzLiR7cHJvcE5hbWV9IGtleSBcXGAke2tleX1cXGAgc3VwcGxpZWQgdG8gXFxgJHtjb21wb25lbnROYW1lfVxcYC5gICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByb3BzW3Byb3BOYW1lXSwgbnVsbCwgJyAgJykgK1xuICAgICAgICAgICAgJ1xcblZhbGlkIGtleXM6ICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoc2hhcGVUeXBlcyksIG51bGwsICcgICcpLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgZXJyb3IgPSBjaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgLi4ucmVzdCk7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIGVycm9yLm1lc3NhZ2UgK1xuICAgICAgICAgICAgJ1xcbkJhZCBvYmplY3Q6ICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2hhaW5lZENoZWNrVHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCAuLi5yZXN0KSB7XG4gICAgcmV0dXJuIGNoZWNrVHlwZShmYWxzZSwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgLi4ucmVzdCk7XG4gIH1cbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG4gIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZWRDcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyO1xuIl0sIm1hcHBp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