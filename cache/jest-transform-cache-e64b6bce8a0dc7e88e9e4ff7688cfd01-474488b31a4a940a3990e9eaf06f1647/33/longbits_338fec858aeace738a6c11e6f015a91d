14c804293abf28d348b379323904727f
"use strict";

module.exports = LongBits;
var util = require("../util/minimal");
function LongBits(lo, hi) {
  this.lo = lo >>> 0;
  this.hi = hi >>> 0;
}
var zero = LongBits.zero = new LongBits(0, 0);
zero.toNumber = function () {
  return 0;
};
zero.zzEncode = zero.zzDecode = function () {
  return this;
};
zero.length = function () {
  return 1;
};
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
LongBits.fromNumber = function fromNumber(value) {
  if (value === 0) return zero;
  var sign = value < 0;
  if (sign) value = -value;
  var lo = value >>> 0,
    hi = (value - lo) / 4294967296 >>> 0;
  if (sign) {
    hi = ~hi >>> 0;
    lo = ~lo >>> 0;
    if (++lo > 4294967295) {
      lo = 0;
      if (++hi > 4294967295) hi = 0;
    }
  }
  return new LongBits(lo, hi);
};
LongBits.from = function from(value) {
  if (typeof value === "number") return LongBits.fromNumber(value);
  if (util.isString(value)) {
    if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));
  }
  return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};
LongBits.prototype.toNumber = function toNumber(unsigned) {
  if (!unsigned && this.hi >>> 31) {
    var lo = ~this.lo + 1 >>> 0,
      hi = ~this.hi >>> 0;
    if (!lo) hi = hi + 1 >>> 0;
    return -(lo + hi * 4294967296);
  }
  return this.lo + this.hi * 4294967296;
};
LongBits.prototype.toLong = function toLong(unsigned) {
  return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : {
    low: this.lo | 0,
    high: this.hi | 0,
    unsigned: Boolean(unsigned)
  };
};
var charCodeAt = String.prototype.charCodeAt;
LongBits.fromHash = function fromHash(hash) {
  if (hash === zeroHash) return zero;
  return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
};
LongBits.prototype.toHash = function toHash() {
  return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
};
LongBits.prototype.zzEncode = function zzEncode() {
  var mask = this.hi >> 31;
  this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
  this.lo = (this.lo << 1 ^ mask) >>> 0;
  return this;
};
LongBits.prototype.zzDecode = function zzDecode() {
  var mask = -(this.lo & 1);
  this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
  this.hi = (this.hi >>> 1 ^ mask) >>> 0;
  return this;
};
LongBits.prototype.length = function length() {
  var part0 = this.lo,
    part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
    part2 = this.hi >>> 24;
  return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiTG9uZ0JpdHMiLCJ1dGlsIiwicmVxdWlyZSIsImxvIiwiaGkiLCJ6ZXJvIiwidG9OdW1iZXIiLCJ6ekVuY29kZSIsInp6RGVjb2RlIiwibGVuZ3RoIiwiemVyb0hhc2giLCJmcm9tTnVtYmVyIiwidmFsdWUiLCJzaWduIiwiZnJvbSIsImlzU3RyaW5nIiwiTG9uZyIsImZyb21TdHJpbmciLCJwYXJzZUludCIsImxvdyIsImhpZ2giLCJwcm90b3R5cGUiLCJ1bnNpZ25lZCIsInRvTG9uZyIsIkJvb2xlYW4iLCJjaGFyQ29kZUF0IiwiU3RyaW5nIiwiZnJvbUhhc2giLCJoYXNoIiwiY2FsbCIsInRvSGFzaCIsImZyb21DaGFyQ29kZSIsIm1hc2siLCJwYXJ0MCIsInBhcnQxIiwicGFydDIiXSwic291cmNlcyI6WyJsb25nYml0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gTG9uZ0JpdHM7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMuXG4gKiBAY2xhc3NkZXNjIEhlbHBlciBjbGFzcyBmb3Igd29ya2luZyB3aXRoIHRoZSBsb3cgYW5kIGhpZ2ggYml0cyBvZiBhIDY0IGJpdCB2YWx1ZS5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBsbyBMb3cgMzIgYml0cywgdW5zaWduZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSBIaWdoIDMyIGJpdHMsIHVuc2lnbmVkXG4gKi9cbmZ1bmN0aW9uIExvbmdCaXRzKGxvLCBoaSkge1xuXG4gICAgLy8gbm90ZSB0aGF0IHRoZSBjYXN0cyBiZWxvdyBhcmUgdGhlb3JldGljYWxseSB1bm5lY2Vzc2FyeSBhcyBvZiB0b2RheSwgYnV0IG9sZGVyIHN0YXRpY2FsbHlcbiAgICAvLyBnZW5lcmF0ZWQgY29udmVydGVyIGNvZGUgbWlnaHQgc3RpbGwgY2FsbCB0aGUgY3RvciB3aXRoIHNpZ25lZCAzMmJpdHMuIGtlcHQgZm9yIGNvbXBhdC5cblxuICAgIC8qKlxuICAgICAqIExvdyBiaXRzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sbyA9IGxvID4+PiAwO1xuXG4gICAgLyoqXG4gICAgICogSGlnaCBiaXRzLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5oaSA9IGhpID4+PiAwO1xufVxuXG4vKipcbiAqIFplcm8gYml0cy5cbiAqIEBtZW1iZXJvZiB1dGlsLkxvbmdCaXRzXG4gKiBAdHlwZSB7dXRpbC5Mb25nQml0c31cbiAqL1xudmFyIHplcm8gPSBMb25nQml0cy56ZXJvID0gbmV3IExvbmdCaXRzKDAsIDApO1xuXG56ZXJvLnRvTnVtYmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuemVyby56ekVuY29kZSA9IHplcm8uenpEZWNvZGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH07XG56ZXJvLmxlbmd0aCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMTsgfTtcblxuLyoqXG4gKiBaZXJvIGhhc2guXG4gKiBAbWVtYmVyb2YgdXRpbC5Mb25nQml0c1xuICogQHR5cGUge3N0cmluZ31cbiAqL1xudmFyIHplcm9IYXNoID0gTG9uZ0JpdHMuemVyb0hhc2ggPSBcIlxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFwiO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gSW5zdGFuY2VcbiAqL1xuTG9uZ0JpdHMuZnJvbU51bWJlciA9IGZ1bmN0aW9uIGZyb21OdW1iZXIodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IDApXG4gICAgICAgIHJldHVybiB6ZXJvO1xuICAgIHZhciBzaWduID0gdmFsdWUgPCAwO1xuICAgIGlmIChzaWduKVxuICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgICB2YXIgbG8gPSB2YWx1ZSA+Pj4gMCxcbiAgICAgICAgaGkgPSAodmFsdWUgLSBsbykgLyA0Mjk0OTY3Mjk2ID4+PiAwO1xuICAgIGlmIChzaWduKSB7XG4gICAgICAgIGhpID0gfmhpID4+PiAwO1xuICAgICAgICBsbyA9IH5sbyA+Pj4gMDtcbiAgICAgICAgaWYgKCsrbG8gPiA0Mjk0OTY3Mjk1KSB7XG4gICAgICAgICAgICBsbyA9IDA7XG4gICAgICAgICAgICBpZiAoKytoaSA+IDQyOTQ5NjcyOTUpXG4gICAgICAgICAgICAgICAgaGkgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMobG8sIGhpKTtcbn07XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gYSBudW1iZXIsIGxvbmcgb3Igc3RyaW5nLlxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gSW5zdGFuY2VcbiAqL1xuTG9uZ0JpdHMuZnJvbSA9IGZ1bmN0aW9uIGZyb20odmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKVxuICAgICAgICByZXR1cm4gTG9uZ0JpdHMuZnJvbU51bWJlcih2YWx1ZSk7XG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmICh1dGlsLkxvbmcpXG4gICAgICAgICAgICB2YWx1ZSA9IHV0aWwuTG9uZy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIExvbmdCaXRzLmZyb21OdW1iZXIocGFyc2VJbnQodmFsdWUsIDEwKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5sb3cgfHwgdmFsdWUuaGlnaCA/IG5ldyBMb25nQml0cyh2YWx1ZS5sb3cgPj4+IDAsIHZhbHVlLmhpZ2ggPj4+IDApIDogemVybztcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSBwb3NzaWJseSB1bnNhZmUgSmF2YVNjcmlwdCBudW1iZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1bnNpZ25lZD1mYWxzZV0gV2hldGhlciB1bnNpZ25lZCBvciBub3RcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFBvc3NpYmx5IHVuc2FmZSBudW1iZXJcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIodW5zaWduZWQpIHtcbiAgICBpZiAoIXVuc2lnbmVkICYmIHRoaXMuaGkgPj4+IDMxKSB7XG4gICAgICAgIHZhciBsbyA9IH50aGlzLmxvICsgMSA+Pj4gMCxcbiAgICAgICAgICAgIGhpID0gfnRoaXMuaGkgICAgID4+PiAwO1xuICAgICAgICBpZiAoIWxvKVxuICAgICAgICAgICAgaGkgPSBoaSArIDEgPj4+IDA7XG4gICAgICAgIHJldHVybiAtKGxvICsgaGkgKiA0Mjk0OTY3Mjk2KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubG8gKyB0aGlzLmhpICogNDI5NDk2NzI5Njtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSBsb25nLlxuICogQHBhcmFtIHtib29sZWFufSBbdW5zaWduZWQ9ZmFsc2VdIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XG4gKiBAcmV0dXJucyB7TG9uZ30gTG9uZ1xuICovXG5Mb25nQml0cy5wcm90b3R5cGUudG9Mb25nID0gZnVuY3Rpb24gdG9Mb25nKHVuc2lnbmVkKSB7XG4gICAgcmV0dXJuIHV0aWwuTG9uZ1xuICAgICAgICA/IG5ldyB1dGlsLkxvbmcodGhpcy5sbyB8IDAsIHRoaXMuaGkgfCAwLCBCb29sZWFuKHVuc2lnbmVkKSlcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiB7IGxvdzogdGhpcy5sbyB8IDAsIGhpZ2g6IHRoaXMuaGkgfCAwLCB1bnNpZ25lZDogQm9vbGVhbih1bnNpZ25lZCkgfTtcbn07XG5cbnZhciBjaGFyQ29kZUF0ID0gU3RyaW5nLnByb3RvdHlwZS5jaGFyQ29kZUF0O1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIHRoZSBzcGVjaWZpZWQgOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoIEhhc2hcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBCaXRzXG4gKi9cbkxvbmdCaXRzLmZyb21IYXNoID0gZnVuY3Rpb24gZnJvbUhhc2goaGFzaCkge1xuICAgIGlmIChoYXNoID09PSB6ZXJvSGFzaClcbiAgICAgICAgcmV0dXJuIHplcm87XG4gICAgcmV0dXJuIG5ldyBMb25nQml0cyhcbiAgICAgICAgKCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMClcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMSkgPDwgOFxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAyKSA8PCAxNlxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAzKSA8PCAyNCkgPj4+IDBcbiAgICAsXG4gICAgICAgICggY2hhckNvZGVBdC5jYWxsKGhhc2gsIDQpXG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDUpIDw8IDhcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNikgPDwgMTZcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNykgPDwgMjQpID4+PiAwXG4gICAgKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoLlxuICogQHJldHVybnMge3N0cmluZ30gSGFzaFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUudG9IYXNoID0gZnVuY3Rpb24gdG9IYXNoKCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICB0aGlzLmxvICAgICAgICAmIDI1NSxcbiAgICAgICAgdGhpcy5sbyA+Pj4gOCAgJiAyNTUsXG4gICAgICAgIHRoaXMubG8gPj4+IDE2ICYgMjU1LFxuICAgICAgICB0aGlzLmxvID4+PiAyNCAgICAgICxcbiAgICAgICAgdGhpcy5oaSAgICAgICAgJiAyNTUsXG4gICAgICAgIHRoaXMuaGkgPj4+IDggICYgMjU1LFxuICAgICAgICB0aGlzLmhpID4+PiAxNiAmIDI1NSxcbiAgICAgICAgdGhpcy5oaSA+Pj4gMjRcbiAgICApO1xufTtcblxuLyoqXG4gKiBaaWctemFnIGVuY29kZXMgdGhpcyBsb25nIGJpdHMuXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gYHRoaXNgXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS56ekVuY29kZSA9IGZ1bmN0aW9uIHp6RW5jb2RlKCkge1xuICAgIHZhciBtYXNrID0gICB0aGlzLmhpID4+IDMxO1xuICAgIHRoaXMuaGkgID0gKCh0aGlzLmhpIDw8IDEgfCB0aGlzLmxvID4+PiAzMSkgXiBtYXNrKSA+Pj4gMDtcbiAgICB0aGlzLmxvICA9ICggdGhpcy5sbyA8PCAxICAgICAgICAgICAgICAgICAgIF4gbWFzaykgPj4+IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFppZy16YWcgZGVjb2RlcyB0aGlzIGxvbmcgYml0cy5cbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnp6RGVjb2RlID0gZnVuY3Rpb24genpEZWNvZGUoKSB7XG4gICAgdmFyIG1hc2sgPSAtKHRoaXMubG8gJiAxKTtcbiAgICB0aGlzLmxvICA9ICgodGhpcy5sbyA+Pj4gMSB8IHRoaXMuaGkgPDwgMzEpIF4gbWFzaykgPj4+IDA7XG4gICAgdGhpcy5oaSAgPSAoIHRoaXMuaGkgPj4+IDEgICAgICAgICAgICAgICAgICBeIG1hc2spID4+PiAwO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgdGhpcyBsb25nYml0cyB3aGVuIGVuY29kZWQgYXMgYSB2YXJpbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBMZW5ndGhcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uIGxlbmd0aCgpIHtcbiAgICB2YXIgcGFydDAgPSAgdGhpcy5sbyxcbiAgICAgICAgcGFydDEgPSAodGhpcy5sbyA+Pj4gMjggfCB0aGlzLmhpIDw8IDQpID4+PiAwLFxuICAgICAgICBwYXJ0MiA9ICB0aGlzLmhpID4+PiAyNDtcbiAgICByZXR1cm4gcGFydDIgPT09IDBcbiAgICAgICAgID8gcGFydDEgPT09IDBcbiAgICAgICAgICAgPyBwYXJ0MCA8IDE2Mzg0XG4gICAgICAgICAgICAgPyBwYXJ0MCA8IDEyOCA/IDEgOiAyXG4gICAgICAgICAgICAgOiBwYXJ0MCA8IDIwOTcxNTIgPyAzIDogNFxuICAgICAgICAgICA6IHBhcnQxIDwgMTYzODRcbiAgICAgICAgICAgICA/IHBhcnQxIDwgMTI4ID8gNSA6IDZcbiAgICAgICAgICAgICA6IHBhcnQxIDwgMjA5NzE1MiA/IDcgOiA4XG4gICAgICAgICA6IHBhcnQyIDwgMTI4ID8gOSA6IDEwO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFFBQVE7QUFFekIsSUFBSUMsSUFBSSxHQUFHQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFVckMsU0FBU0YsUUFBUSxDQUFDRyxFQUFFLEVBQUVDLEVBQUUsRUFBRTtFQVN0QixJQUFJLENBQUNELEVBQUUsR0FBR0EsRUFBRSxLQUFLLENBQUM7RUFNbEIsSUFBSSxDQUFDQyxFQUFFLEdBQUdBLEVBQUUsS0FBSyxDQUFDO0FBQ3RCO0FBT0EsSUFBSUMsSUFBSSxHQUFHTCxRQUFRLENBQUNL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