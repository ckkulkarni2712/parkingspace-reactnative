{"version":3,"mappings":";;;;;;;;;AAAA;AASA;AAMO,IAAMA,sBAAoD,GAAG,CAClE,UAAU,EACV,UAAU,EACV,SAAS,EACT,MAAM,EACN,UAAU,CACX;AAACC;AAEK,IAAMC,qBAAmD,GAAG,CACjE,KAAK,EACL,KAAK,EACL,KAAK,EACL,MAAM,CACP;AAACD;AAEK,SAASE,yBAAyB,CACvCC,OAAiC,EAExB;EAAA,+EAD0B,CAAC,CAAC;IAAnCC;EAEF,IAAID,OAAO,IAAI,IAAI,EAAE;IACnB,OAAO,IAAI;EACb;EAEA,IAAIE,OAAiC,GAAGF,OAAO;EAC/C,OAAOE,OAAO,EAAE;IACd,IAAIC,4BAA4B,GAAGF,KAAK,oBAALA,KAAK,CAAEG,GAAG,CAACF,OAAO,CAAC;IAEtD,IAAIC,4BAA4B,KAAKE,SAAS,EAAE;MAC9CF,4BAA4B,GAAGG,qBAAqB,CAACJ,OAAO,CAAC;MAC7DD,KAAK,oBAALA,KAAK,CAAEM,GAAG,CAACL,OAAO,EAAEC,4BAA4B,CAAC;IACnD;IAEA,IAAIA,4BAA4B,EAAE;MAChC,OAAO,IAAI;IACb;IAEAD,OAAO,GAAGA,OAAO,CAACM,MAAM;EAC1B;EAEA,OAAO,KAAK;AACd;AAGO,IAAMC,cAAc,GAAGV,yBAAyB;AAACF;AAExD,SAASS,qBAAqB,CAACN,OAA0B,EAAW;EAAA;EAGlE,IAAIA,OAAO,CAACU,KAAK,CAACC,2BAA2B,EAAE;IAC7C,OAAO,IAAI;EACb;EAIA,IAAIX,OAAO,CAACU,KAAK,CAACE,yBAAyB,KAAK,qBAAqB,EAAE;IACrE,OAAO,IAAI;EACb;EAGA,IAAMC,SAAS,4BAAGC,uBAAU,CAACC,OAAO,CAACf,OAAO,CAACU,KAAK,CAACM,KAAK,CAAC,oCAAI,CAAC,CAAC;EAC/D,IAAIH,SAAS,CAACI,OAAO,KAAK,MAAM,EAAE,OAAO,IAAI;EAI7C,IAAMC,YAAY,GAAG,kCAAe,EAAClB,OAAO,CAAC;EAC7C,IAAIkB,YAAY,CAACC,IAAI,CAAEC,iBAAO;IAAA,OAAKA,OAAO,CAACV,KAAK,CAACW,wBAAwB;EAAA,EAAC,EAAE;IAC1E,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd;AAEO,SAASC,sBAAsB,CACpCtB,OAAiC,EACxB;EACT,IAAIA,OAAO,IAAI,IAAI,EAAE;IACnB,OAAO,KAAK;EACd;EAEA,IAAIA,OAAO,CAACU,KAAK,CAACa,UAAU,KAAKlB,SAAS,EAAE;IAC1C,OAAOL,OAAO,CAACU,KAAK,CAACa,UAAU;EACjC;EAEA,OACE,uCAAoB,EAACvB,OAAO,EAAEwB,iBAAI,CAAC,IACnC,uCAAoB,EAACxB,OAAO,EAAEyB,sBAAS,CAAC,IACxC,uCAAoB,EAACzB,OAAO,EAAE0B,mBAAM,CAAC;AAEzC","names":["accessibilityStateKeys","exports","accessiblityValueKeys","isHiddenFromAccessibility","element","cache","current","isCurrentSubtreeInaccessible","get","undefined","isSubtreeInaccessible","set","parent","isInaccessible","props","accessibilityElementsHidden","importantForAccessibility","flatStyle","StyleSheet","flatten","style","display","hostSiblings","some","sibling","accessibilityViewIsModal","isAccessibilityElement","accessible","Text","TextInput","Switch"],"sources":["../../src/helpers/accessiblity.ts"],"sourcesContent":["import {\n  AccessibilityState,\n  AccessibilityValue,\n  StyleSheet,\n  Switch,\n  Text,\n  TextInput,\n} from 'react-native';\nimport { ReactTestInstance } from 'react-test-renderer';\nimport { getHostSiblings, isHostElementForType } from './component-tree';\n\ntype IsInaccessibleOptions = {\n  cache?: WeakMap<ReactTestInstance, boolean>;\n};\n\nexport const accessibilityStateKeys: (keyof AccessibilityState)[] = [\n  'disabled',\n  'selected',\n  'checked',\n  'busy',\n  'expanded',\n];\n\nexport const accessiblityValueKeys: (keyof AccessibilityValue)[] = [\n  'min',\n  'max',\n  'now',\n  'text',\n];\n\nexport function isHiddenFromAccessibility(\n  element: ReactTestInstance | null,\n  { cache }: IsInaccessibleOptions = {}\n): boolean {\n  if (element == null) {\n    return true;\n  }\n\n  let current: ReactTestInstance | null = element;\n  while (current) {\n    let isCurrentSubtreeInaccessible = cache?.get(current);\n\n    if (isCurrentSubtreeInaccessible === undefined) {\n      isCurrentSubtreeInaccessible = isSubtreeInaccessible(current);\n      cache?.set(current, isCurrentSubtreeInaccessible);\n    }\n\n    if (isCurrentSubtreeInaccessible) {\n      return true;\n    }\n\n    current = current.parent;\n  }\n\n  return false;\n}\n\n/** RTL-compatitibility alias for `isHiddenFromAccessibility` */\nexport const isInaccessible = isHiddenFromAccessibility;\n\nfunction isSubtreeInaccessible(element: ReactTestInstance): boolean {\n  // iOS: accessibilityElementsHidden\n  // See: https://reactnative.dev/docs/accessibility#accessibilityelementshidden-ios\n  if (element.props.accessibilityElementsHidden) {\n    return true;\n  }\n\n  // Android: importantForAccessibility\n  // See: https://reactnative.dev/docs/accessibility#importantforaccessibility-android\n  if (element.props.importantForAccessibility === 'no-hide-descendants') {\n    return true;\n  }\n\n  // Note that `opacity: 0` is not treated as inaccessible on iOS\n  const flatStyle = StyleSheet.flatten(element.props.style) ?? {};\n  if (flatStyle.display === 'none') return true;\n\n  // iOS: accessibilityViewIsModal\n  // See: https://reactnative.dev/docs/accessibility#accessibilityviewismodal-ios\n  const hostSiblings = getHostSiblings(element);\n  if (hostSiblings.some((sibling) => sibling.props.accessibilityViewIsModal)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isAccessibilityElement(\n  element: ReactTestInstance | null\n): boolean {\n  if (element == null) {\n    return false;\n  }\n\n  if (element.props.accessible !== undefined) {\n    return element.props.accessible;\n  }\n\n  return (\n    isHostElementForType(element, Text) ||\n    isHostElementForType(element, TextInput) ||\n    isHostElementForType(element, Switch)\n  );\n}\n"]}