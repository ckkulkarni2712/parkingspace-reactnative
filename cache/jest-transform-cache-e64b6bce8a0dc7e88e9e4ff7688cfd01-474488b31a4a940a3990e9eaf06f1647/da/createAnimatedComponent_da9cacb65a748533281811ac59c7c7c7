b47cf0f0f5cdf8036872b4236f30decd
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _setAndForwardRef = _interopRequireDefault(require("../Utilities/setAndForwardRef"));
var _AnimatedEvent = require("./AnimatedEvent");
var createAnimatedComponentInjection = _interopRequireWildcard(require("./createAnimatedComponentInjection"));
var _NativeAnimatedHelper = _interopRequireDefault(require("./NativeAnimatedHelper"));
var _AnimatedProps = _interopRequireDefault(require("./nodes/AnimatedProps"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _createAnimatedCompon;
var _excluded = ["style"],
  _excluded2 = ["style"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var animatedComponentNextId = 1;
function createAnimatedComponent(Component) {
  (0, _invariant.default)(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');
  var AnimatedComponent = function (_React$Component) {
    (0, _inherits2.default)(AnimatedComponent, _React$Component);
    var _super = _createSuper(AnimatedComponent);
    function AnimatedComponent() {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedComponent);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this._component = void 0;
      _this._invokeAnimatedPropsCallbackOnMount = false;
      _this._prevComponent = void 0;
      _this._propsAnimated = void 0;
      _this._eventDetachers = [];
      _this._animatedComponentId = animatedComponentNextId++ + ":animatedComponent";
      _this._isFabric = function () {
        var _this$_component$_int, _this$_component$_int2, _this$_component$getN, _this$_component$getN2, _this$_component$getS, _this$_component$getS2;
        if (_this._component == null) {
          return false;
        }
        return ((_this$_component$_int = _this._component['_internalInstanceHandle']) == null ? void 0 : (_this$_component$_int2 = _this$_component$_int.stateNode) == null ? void 0 : _this$_component$_int2.canonical) != null || _this._component.getNativeScrollRef != null && _this._component.getNativeScrollRef() != null && ((_this$_component$getN = _this._component.getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getN2 = _this$_component$getN.stateNode) == null ? void 0 : _this$_component$getN2.canonical) != null || _this._component.getScrollResponder != null && _this._component.getScrollResponder() != null && _this._component.getScrollResponder().getNativeScrollRef != null && _this._component.getScrollResponder().getNativeScrollRef() != null && ((_this$_component$getS = _this._component.getScrollResponder().getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getS2 = _this$_component$getS.stateNode) == null ? void 0 : _this$_component$getS2.canonical) != null;
      };
      _this._waitForUpdate = function () {
        if (_this._isFabric()) {
          _NativeAnimatedHelper.default.API.setWaitingForIdentifier(_this._animatedComponentId);
        }
      };
      _this._markUpdateComplete = function () {
        if (_this._isFabric()) {
          _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(_this._animatedComponentId);
        }
      };
      _this._animatedPropsCallback = function () {
        if (_this._component == null) {
          _this._invokeAnimatedPropsCallbackOnMount = true;
        } else if (process.env.NODE_ENV === 'test' || typeof _this._component.setNativeProps !== 'function' || _this._isFabric()) {
          _this.forceUpdate();
        } else if (!_this._propsAnimated.__isNative) {
          _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
        } else {
          throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
        }
      };
      _this._setComponentRef = (0, _setAndForwardRef.default)({
        getForwardedRef: function getForwardedRef() {
          return _this.props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          _this._prevComponent = _this._component;
          _this._component = ref;
        }
      });
      return _this;
    }
    (0, _createClass2.default)(AnimatedComponent, [{
      key: "_attachNativeEvents",
      value: function _attachNativeEvents() {
        var _this$_component,
          _this2 = this;
        var scrollableNode = (_this$_component = this._component) != null && _this$_component.getScrollableNode ? this._component.getScrollableNode() : this._component;
        var _loop = function _loop(key) {
          var prop = _this2.props[key];
          if (prop instanceof _AnimatedEvent.AnimatedEvent && prop.__isNative) {
            prop.__attach(scrollableNode, key);
            _this2._eventDetachers.push(function () {
              return prop.__detach(scrollableNode, key);
            });
          }
        };
        for (var key in this.props) {
          _loop(key);
        }
      }
    }, {
      key: "_detachNativeEvents",
      value: function _detachNativeEvents() {
        this._eventDetachers.forEach(function (remove) {
          return remove();
        });
        this._eventDetachers = [];
      }
    }, {
      key: "_attachProps",
      value: function _attachProps(nextProps) {
        var oldPropsAnimated = this._propsAnimated;
        this._propsAnimated = new _AnimatedProps.default(nextProps, this._animatedPropsCallback);
        this._propsAnimated.__attach();
        if (oldPropsAnimated) {
          oldPropsAnimated.__restoreDefaultValues();
          oldPropsAnimated.__detach();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var animatedProps = this._propsAnimated.__getValue() || {};
        var _animatedProps$style = animatedProps.style,
          style = _animatedProps$style === void 0 ? {} : _animatedProps$style,
          props = (0, _objectWithoutProperties2.default)(animatedProps, _excluded);
        var _ref = this.props.passthroughAnimatedPropExplicitValues || {},
          _ref$style = _ref.style,
          passthruStyle = _ref$style === void 0 ? {} : _ref$style,
          passthruProps = (0, _objectWithoutProperties2.default)(_ref, _excluded2);
        var mergedStyle = Object.assign({}, style, passthruStyle);
        return (0, _jsxRuntime.jsx)(Component, Object.assign({}, props, passthruProps, {
          collapsable: false,
          style: mergedStyle,
          ref: this._setComponentRef
        }));
      }
    }, {
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        this._waitForUpdate();
        this._attachProps(this.props);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._invokeAnimatedPropsCallbackOnMount) {
          this._invokeAnimatedPropsCallbackOnMount = false;
          this._animatedPropsCallback();
        }
        this._propsAnimated.setNativeView(this._component);
        this._attachNativeEvents();
        this._markUpdateComplete();
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        this._waitForUpdate();
        this._attachProps(newProps);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this._component !== this._prevComponent) {
          this._propsAnimated.setNativeView(this._component);
        }
        if (this._component !== this._prevComponent || prevProps !== this.props) {
          this._detachNativeEvents();
          this._attachNativeEvents();
        }
        this._markUpdateComplete();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._propsAnimated && this._propsAnimated.__detach();
        this._detachNativeEvents();
        this._markUpdateComplete();
        this._component = null;
        this._prevComponent = null;
      }
    }]);
    return AnimatedComponent;
  }(React.Component);
  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {
    return (0, _jsxRuntime.jsx)(AnimatedComponent, Object.assign({}, props, ref == null ? null : {
      forwardedRef: ref
    }));
  });
}
var _default = (_createAnimatedCompon = createAnimatedComponentInjection.recordAndRetrieve()) != null ? _createAnimatedCompon : createAnimatedComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,