8bde382488048174183d0eca8bbe6a5e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;
var _cleanupSemantic = require('./cleanupSemantic');
var concatenateRelevantDiffs = function concatenateRelevantDiffs(op, diffs, changeColor) {
  return diffs.reduce(function (reduced, diff) {
    return reduced + (diff[0] === _cleanupSemantic.DIFF_EQUAL ? diff[1] : diff[0] === op && diff[1].length !== 0 ? changeColor(diff[1]) : '');
  }, '');
};
var ChangeBuffer = function () {
  function ChangeBuffer(op, changeColor) {
    (0, _classCallCheck2.default)(this, ChangeBuffer);
    this.op = void 0;
    this.line = void 0;
    this.lines = void 0;
    this.changeColor = void 0;
    this.op = op;
    this.line = [];
    this.lines = [];
    this.changeColor = changeColor;
  }
  (0, _createClass2.default)(ChangeBuffer, [{
    key: "pushSubstring",
    value: function pushSubstring(substring) {
      this.pushDiff(new _cleanupSemantic.Diff(this.op, substring));
    }
  }, {
    key: "pushLine",
    value: function pushLine() {
      this.lines.push(this.line.length !== 1 ? new _cleanupSemantic.Diff(this.op, concatenateRelevantDiffs(this.op, this.line, this.changeColor)) : this.line[0][0] === this.op ? this.line[0] : new _cleanupSemantic.Diff(this.op, this.line[0][1]));
      this.line.length = 0;
    }
  }, {
    key: "isLineEmpty",
    value: function isLineEmpty() {
      return this.line.length === 0;
    }
  }, {
    key: "pushDiff",
    value: function pushDiff(diff) {
      this.line.push(diff);
    }
  }, {
    key: "align",
    value: function align(diff) {
      var _this = this;
      var string = diff[1];
      if (string.includes('\n')) {
        var substrings = string.split('\n');
        var iLast = substrings.length - 1;
        substrings.forEach(function (substring, i) {
          if (i < iLast) {
            _this.pushSubstring(substring);
            _this.pushLine();
          } else if (substring.length !== 0) {
            _this.pushSubstring(substring);
          }
        });
      } else {
        this.pushDiff(diff);
      }
    }
  }, {
    key: "moveLinesTo",
    value: function moveLinesTo(lines) {
      if (!this.isLineEmpty()) {
        this.pushLine();
      }
      lines.push.apply(lines, (0, _toConsumableArray2.default)(this.lines));
      this.lines.length = 0;
    }
  }]);
  return ChangeBuffer;
}();
var CommonBuffer = function () {
  function CommonBuffer(deleteBuffer, insertBuffer) {
    (0, _classCallCheck2.default)(this, CommonBuffer);
    this.deleteBuffer = void 0;
    this.insertBuffer = void 0;
    this.lines = void 0;
    this.deleteBuffer = deleteBuffer;
    this.insertBuffer = insertBuffer;
    this.lines = [];
  }
  (0, _createClass2.default)(CommonBuffer, [{
    key: "pushDiffCommonLine",
    value: function pushDiffCommonLine(diff) {
      this.lines.push(diff);
    }
  }, {
    key: "pushDiffChangeLines",
    value: function pushDiffChangeLines(diff) {
      var isDiffEmpty = diff[1].length === 0;
      if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {
        this.deleteBuffer.pushDiff(diff);
      }
      if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {
        this.insertBuffer.pushDiff(diff);
      }
    }
  }, {
    key: "flushChangeLines",
    value: function flushChangeLines() {
      this.deleteBuffer.moveLinesTo(this.lines);
      this.insertBuffer.moveLinesTo(this.lines);
    }
  }, {
    key: "align",
    value: function align(diff) {
      var _this2 = this;
      var op = diff[0];
      var string = diff[1];
      if (string.includes('\n')) {
        var substrings = string.split('\n');
        var iLast = substrings.length - 1;
        substrings.forEach(function (substring, i) {
          if (i === 0) {
            var subdiff = new _cleanupSemantic.Diff(op, substring);
            if (_this2.deleteBuffer.isLineEmpty() && _this2.insertBuffer.isLineEmpty()) {
              _this2.flushChangeLines();
              _this2.pushDiffCommonLine(subdiff);
            } else {
              _this2.pushDiffChangeLines(subdiff);
              _this2.flushChangeLines();
            }
          } else if (i < iLast) {
            _this2.pushDiffCommonLine(new _cleanupSemantic.Diff(op, substring));
          } else if (substring.length !== 0) {
            _this2.pushDiffChangeLines(new _cleanupSemantic.Diff(op, substring));
          }
        });
      } else {
        this.pushDiffChangeLines(diff);
      }
    }
  }, {
    key: "getLines",
    value: function getLines() {
      this.flushChangeLines();
      return this.lines;
    }
  }]);
  return CommonBuffer;
}();
var getAlignedDiffs = function getAlignedDiffs(diffs, changeColor) {
  var deleteBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_DELETE, changeColor);
  var insertBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_INSERT, changeColor);
  var commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);
  diffs.forEach(function (diff) {
    switch (diff[0]) {
      case _cleanupSemantic.DIFF_DELETE:
        deleteBuffer.align(diff);
        break;
      case _cleanupSemantic.DIFF_INSERT:
        insertBuffer.align(diff);
        break;
      default:
        commonBuffer.align(diff);
    }
  });
  return commonBuffer.getLines();
};
var _default = getAlignedDiffs;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,