2a052da514b434d757c16f0410ad04cb
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = deepCyclicCopyReplaceable;
var _prettyFormat = require('pretty-format');
var builtInObject = [Array, Date, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Map, Set, RegExp, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray];
if (typeof Buffer !== 'undefined') {
  builtInObject.push(Buffer);
}
var isBuiltInObject = function isBuiltInObject(object) {
  return builtInObject.includes(object.constructor);
};
var isMap = function isMap(value) {
  return value.constructor === Map;
};
function deepCyclicCopyReplaceable(value) {
  var cycles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new WeakMap();
  if (typeof value !== 'object' || value === null) {
    return value;
  } else if (cycles.has(value)) {
    return cycles.get(value);
  } else if (Array.isArray(value)) {
    return deepCyclicCopyArray(value, cycles);
  } else if (isMap(value)) {
    return deepCyclicCopyMap(value, cycles);
  } else if (isBuiltInObject(value)) {
    return value;
  } else if (_prettyFormat.plugins.DOMElement.test(value)) {
    return value.cloneNode(true);
  } else {
    return deepCyclicCopyObject(value, cycles);
  }
}
function deepCyclicCopyObject(object, cycles) {
  var newObject = Object.create(Object.getPrototypeOf(object));
  var descriptors = Object.getOwnPropertyDescriptors(object);
  cycles.set(object, newObject);
  var newDescriptors = [].concat((0, _toConsumableArray2.default)(Object.keys(descriptors)), (0, _toConsumableArray2.default)(Object.getOwnPropertySymbols(descriptors))).reduce(function (newDescriptors, key) {
    var enumerable = descriptors[key].enumerable;
    newDescriptors[key] = {
      configurable: true,
      enumerable: enumerable,
      value: deepCyclicCopyReplaceable(object[key], cycles),
      writable: true
    };
    return newDescriptors;
  }, {});
  return Object.defineProperties(newObject, newDescriptors);
}
function deepCyclicCopyArray(array, cycles) {
  var newArray = new (Object.getPrototypeOf(array).constructor)(array.length);
  var length = array.length;
  cycles.set(array, newArray);
  for (var i = 0; i < length; i++) {
    newArray[i] = deepCyclicCopyReplaceable(array[i], cycles);
  }
  return newArray;
}
function deepCyclicCopyMap(map, cycles) {
  var newMap = new Map();
  cycles.set(map, newMap);
  map.forEach(function (value, key) {
    newMap.set(key, deepCyclicCopyReplaceable(value, cycles));
  });
  return newMap;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,