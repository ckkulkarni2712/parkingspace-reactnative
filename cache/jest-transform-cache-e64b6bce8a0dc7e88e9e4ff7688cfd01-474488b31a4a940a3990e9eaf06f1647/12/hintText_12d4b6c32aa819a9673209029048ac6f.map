{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AAaA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAiB,CACrBC,IAAuB,EACvBC,IAAe,EAEZ;EAAA,IADHC,OAAyB,uEAAG,CAAC,CAAC;EAE9B,IAAQC,KAAK,GAAiBD,OAAO,CAA7BC,KAAK;IAAEC,aAAeF,OAAO,CAAtBE;EACf,OAAO,oBAAO,EAACH,IAAI,EAAED,IAAI,CAACK,KAAK,CAACC,iBAAiB,EAAEF,UAAU,EAAED,KAAK,CAAC;AACvE,CAAC;AAED,IAAMI,kBAAkB,GACtBC,SADID,kBAAkB,CACtBC,QAA2B;EAAA,OAK3B,SAASC,oBAAoB,CAACC,IAAI,EAAEC,YAAY,EAAE;IAChD,OAAO,oBAAO,EACZH,QAAQ,EACPR,cAAI;MAAA,OACH,OAAOA,IAAI,CAACY,IAAI,KAAK,QAAQ,IAC7Bb,iBAAiB,CAACC,IAAI,EAAEU,IAAI,EAAEC,YAAY,CAAC;IAAA,GAC7CA,YAAY,CACb;EACH,CAAC;AAAA;AAEH,IAAME,gBAAgB,GAAIH,SAApBG,gBAAgB,CAAIH,IAAe;EAAA,4DACYI,MAAM,CAACJ,IAAI,CAAE;AAAA,CAAE;AACpE,IAAMK,eAAe,GAAIL,SAAnBK,eAAe,CAAIL,IAAe;EAAA,8DACeI,MAAM,CAACJ,IAAI,CAAE;AAAA,CAAC;AAErE,WAAoE,4BAAW,EAC7EH,kBAAkB,EAClBQ,eAAe,EACfF,gBAAgB,CACjB;EAJOG,KAAK,QAALA,KAAK;EAAEC,QAAQ,QAARA,QAAQ;EAAEC,OAAO,QAAPA,OAAO;EAAEC,UAAU,QAAVA,UAAU;EAAEC,MAAM,QAANA,MAAM;EAAEC;AA+B/C,IAAMC,qBAAqB,GAChCd,SADWc,qBAAqB,CAChCd,QAA2B,EACL;EACtB,IAAMe,aAAa,GAAGP,KAAK,CAACR,QAAQ,CAAC;EACrC,IAAMgB,gBAAgB,GAAGP,QAAQ,CAACT,QAAQ,CAAC;EAC3C,IAAMiB,eAAe,GAAGP,OAAO,CAACV,QAAQ,CAAC;EACzC,IAAMD,kBAAkB,GAAGY,UAAU,CAACX,QAAQ,CAAC;EAC/C,IAAMkB,cAAc,GAAGN,MAAM,CAACZ,QAAQ,CAAC;EACvC,IAAMmB,iBAAiB,GAAGN,SAAS,CAACb,QAAQ,CAAC;EAE7C,OAAO;IACLe,aAAa,EAAbA,aAAa;IACbC,gBAAgB,EAAhBA,gBAAgB;IAChBC,eAAe,EAAfA,eAAe;IACflB,kBAAkB,EAAlBA,kBAAkB;IAClBmB,cAAc,EAAdA,cAAc;IACdC,iBAAiB,EAAjBA,iBAAiB;IAGjBC,aAAa,EAAEL,aAAa;IAC5BM,gBAAgB,EAAEL,gBAAgB;IAClCM,eAAe,EAAEL,eAAe;IAChCM,kBAAkB,EAAExB,kBAAkB;IACtCyB,cAAc,EAAEN,cAAc;IAC9BO,iBAAiB,EAAEN,iBAAiB;IAGpCO,sBAAsB,EAAEX,aAAa;IACrCY,yBAAyB,EAAEX,gBAAgB;IAC3CY,wBAAwB,EAAEX,eAAe;IACzCY,2BAA2B,EAAE9B,kBAAkB;IAC/C+B,uBAAuB,EAAEZ,cAAc;IACvCa,0BAA0B,EAAEZ;EAC9B,CAAC;AACH,CAAC;AAACa","names":["getNodeByHintText","node","text","options","exact","normalizer","props","accessibilityHint","queryAllByHintText","instance","queryAllByA11yHintFn","hint","queryOptions","type","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByHintTextQueries","getByHintText","getAllByHintText","queryByHintText","findByHintText","findAllByHintText","getByA11yHint","getAllByA11yHint","queryByA11yHint","queryAllByA11yHint","findByA11yHint","findAllByA11yHint","getByAccessibilityHint","getAllByAccessibilityHint","queryByAccessibilityHint","queryAllByAccessibilityHint","findByAccessibilityHint","findAllByAccessibilityHint","exports"],"sources":["../../src/queries/hintText.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { findAll } from '../helpers/findAll';\nimport { matches, TextMatch, TextMatchOptions } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport { CommonQueryOptions } from './options';\n\ntype ByHintTextOptions = CommonQueryOptions & TextMatchOptions;\n\nconst getNodeByHintText = (\n  node: ReactTestInstance,\n  text: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  const { exact, normalizer } = options;\n  return matches(text, node.props.accessibilityHint, normalizer, exact);\n};\n\nconst queryAllByHintText = (\n  instance: ReactTestInstance\n): ((\n  hint: TextMatch,\n  queryOptions?: ByHintTextOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByA11yHintFn(hint, queryOptions) {\n    return findAll(\n      instance,\n      (node) =>\n        typeof node.type === 'string' &&\n        getNodeByHintText(node, hint, queryOptions),\n      queryOptions\n    );\n  };\n\nconst getMultipleError = (hint: TextMatch) =>\n  `Found multiple elements with accessibilityHint: ${String(hint)} `;\nconst getMissingError = (hint: TextMatch) =>\n  `Unable to find an element with accessibilityHint: ${String(hint)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByHintText,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByHintTextQueries = {\n  getByHintText: GetByQuery<TextMatch, ByHintTextOptions>;\n  getAllByHintText: GetAllByQuery<TextMatch, ByHintTextOptions>;\n  queryByHintText: QueryByQuery<TextMatch, ByHintTextOptions>;\n  queryAllByHintText: QueryAllByQuery<TextMatch, ByHintTextOptions>;\n  findByHintText: FindByQuery<TextMatch, ByHintTextOptions>;\n  findAllByHintText: FindAllByQuery<TextMatch, ByHintTextOptions>;\n\n  // a11yHint aliases\n  getByA11yHint: GetByQuery<TextMatch, ByHintTextOptions>;\n  getAllByA11yHint: GetAllByQuery<TextMatch, ByHintTextOptions>;\n  queryByA11yHint: QueryByQuery<TextMatch, ByHintTextOptions>;\n  queryAllByA11yHint: QueryAllByQuery<TextMatch, ByHintTextOptions>;\n  findByA11yHint: FindByQuery<TextMatch, ByHintTextOptions>;\n  findAllByA11yHint: FindAllByQuery<TextMatch, ByHintTextOptions>;\n\n  // accessibilityHint aliases\n  getByAccessibilityHint: GetByQuery<TextMatch, ByHintTextOptions>;\n  getAllByAccessibilityHint: GetAllByQuery<TextMatch, ByHintTextOptions>;\n  queryByAccessibilityHint: QueryByQuery<TextMatch, ByHintTextOptions>;\n  queryAllByAccessibilityHint: QueryAllByQuery<TextMatch, ByHintTextOptions>;\n  findByAccessibilityHint: FindByQuery<TextMatch, ByHintTextOptions>;\n  findAllByAccessibilityHint: FindAllByQuery<TextMatch, ByHintTextOptions>;\n};\n\nexport const bindByHintTextQueries = (\n  instance: ReactTestInstance\n): ByHintTextQueries => {\n  const getByHintText = getBy(instance);\n  const getAllByHintText = getAllBy(instance);\n  const queryByHintText = queryBy(instance);\n  const queryAllByHintText = queryAllBy(instance);\n  const findByHintText = findBy(instance);\n  const findAllByHintText = findAllBy(instance);\n\n  return {\n    getByHintText,\n    getAllByHintText,\n    queryByHintText,\n    queryAllByHintText,\n    findByHintText,\n    findAllByHintText,\n\n    // a11yHint aliases\n    getByA11yHint: getByHintText,\n    getAllByA11yHint: getAllByHintText,\n    queryByA11yHint: queryByHintText,\n    queryAllByA11yHint: queryAllByHintText,\n    findByA11yHint: findByHintText,\n    findAllByA11yHint: findAllByHintText,\n\n    // accessibilityHint aliases\n    getByAccessibilityHint: getByHintText,\n    getAllByAccessibilityHint: getAllByHintText,\n    queryByAccessibilityHint: queryByHintText,\n    queryAllByAccessibilityHint: queryAllByHintText,\n    findByAccessibilityHint: findByHintText,\n    findAllByAccessibilityHint: findAllByHintText,\n  };\n};\n"]}