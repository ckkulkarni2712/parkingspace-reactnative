c56e2dfb1465056ce62f1c9539fb97f0
"use strict";

module.exports = Type;
var Namespace = require("./namespace");
((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";
var Enum = require("./enum"),
  OneOf = require("./oneof"),
  Field = require("./field"),
  MapField = require("./mapfield"),
  Service = require("./service"),
  Message = require("./message"),
  Reader = require("./reader"),
  Writer = require("./writer"),
  util = require("./util"),
  encoder = require("./encoder"),
  decoder = require("./decoder"),
  verifier = require("./verifier"),
  converter = require("./converter"),
  wrappers = require("./wrappers");
function Type(name, options) {
  Namespace.call(this, name, options);
  this.fields = {};
  this.oneofs = undefined;
  this.extensions = undefined;
  this.reserved = undefined;
  this.group = undefined;
  this._fieldsById = null;
  this._fieldsArray = null;
  this._oneofsArray = null;
  this._ctor = null;
}
Object.defineProperties(Type.prototype, {
  fieldsById: {
    get: function get() {
      if (this._fieldsById) return this._fieldsById;
      this._fieldsById = {};
      for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
        var field = this.fields[names[i]],
          id = field.id;
        if (this._fieldsById[id]) throw Error("duplicate id " + id + " in " + this);
        this._fieldsById[id] = field;
      }
      return this._fieldsById;
    }
  },
  fieldsArray: {
    get: function get() {
      return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
    }
  },
  oneofsArray: {
    get: function get() {
      return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
    }
  },
  ctor: {
    get: function get() {
      return this._ctor || (this.ctor = Type.generateConstructor(this)());
    },
    set: function set(ctor) {
      var prototype = ctor.prototype;
      if (!(prototype instanceof Message)) {
        (ctor.prototype = new Message()).constructor = ctor;
        util.merge(ctor.prototype, prototype);
      }
      ctor.$type = ctor.prototype.$type = this;
      util.merge(ctor, Message, true);
      this._ctor = ctor;
      var i = 0;
      for (; i < this.fieldsArray.length; ++i) this._fieldsArray[i].resolve();
      var ctorProperties = {};
      for (i = 0; i < this.oneofsArray.length; ++i) ctorProperties[this._oneofsArray[i].resolve().name] = {
        get: util.oneOfGetter(this._oneofsArray[i].oneof),
        set: util.oneOfSetter(this._oneofsArray[i].oneof)
      };
      if (i) Object.defineProperties(ctor.prototype, ctorProperties);
    }
  }
});
Type.generateConstructor = function generateConstructor(mtype) {
  var gen = util.codegen(["p"], mtype.name);
  for (var i = 0, field; i < mtype.fieldsArray.length; ++i) if ((field = mtype._fieldsArray[i]).map) gen("this%s={}", util.safeProp(field.name));else if (field.repeated) gen("this%s=[]", util.safeProp(field.name));
  return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
};
function clearCache(type) {
  type._fieldsById = type._fieldsArray = type._oneofsArray = null;
  delete type.encode;
  delete type.decode;
  delete type.verify;
  return type;
}
Type.fromJSON = function fromJSON(name, json) {
  var type = new Type(name, json.options);
  type.extensions = json.extensions;
  type.reserved = json.reserved;
  var names = Object.keys(json.fields),
    i = 0;
  for (; i < names.length; ++i) type.add((typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));
  if (json.oneofs) for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i) type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
  if (json.nested) for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
    var nested = json.nested[names[i]];
    type.add((nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));
  }
  if (json.extensions && json.extensions.length) type.extensions = json.extensions;
  if (json.reserved && json.reserved.length) type.reserved = json.reserved;
  if (json.group) type.group = true;
  if (json.comment) type.comment = json.comment;
  return type;
};
Type.prototype.toJSON = function toJSON(toJSONOptions) {
  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
  return util.toObject(["options", inherited && inherited.options || undefined, "oneofs", Namespace.arrayToJSON(this.oneofsArray, toJSONOptions), "fields", Namespace.arrayToJSON(this.fieldsArray.filter(function (obj) {
    return !obj.declaringField;
  }), toJSONOptions) || {}, "extensions", this.extensions && this.extensions.length ? this.extensions : undefined, "reserved", this.reserved && this.reserved.length ? this.reserved : undefined, "group", this.group || undefined, "nested", inherited && inherited.nested || undefined, "comment", keepComments ? this.comment : undefined]);
};
Type.prototype.resolveAll = function resolveAll() {
  var fields = this.fieldsArray,
    i = 0;
  while (i < fields.length) fields[i++].resolve();
  var oneofs = this.oneofsArray;
  i = 0;
  while (i < oneofs.length) oneofs[i++].resolve();
  return Namespace.prototype.resolveAll.call(this);
};
Type.prototype.get = function get(name) {
  return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
};
Type.prototype.add = function add(object) {
  if (this.get(object.name)) throw Error("duplicate name '" + object.name + "' in " + this);
  if (object instanceof Field && object.extend === undefined) {
    if (this._fieldsById ? this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error("duplicate id " + object.id + " in " + this);
    if (this.isReservedId(object.id)) throw Error("id " + object.id + " is reserved in " + this);
    if (this.isReservedName(object.name)) throw Error("name '" + object.name + "' is reserved in " + this);
    if (object.parent) object.parent.remove(object);
    this.fields[object.name] = object;
    object.message = this;
    object.onAdd(this);
    return clearCache(this);
  }
  if (object instanceof OneOf) {
    if (!this.oneofs) this.oneofs = {};
    this.oneofs[object.name] = object;
    object.onAdd(this);
    return clearCache(this);
  }
  return Namespace.prototype.add.call(this, object);
};
Type.prototype.remove = function remove(object) {
  if (object instanceof Field && object.extend === undefined) {
    if (!this.fields || this.fields[object.name] !== object) throw Error(object + " is not a member of " + this);
    delete this.fields[object.name];
    object.parent = null;
    object.onRemove(this);
    return clearCache(this);
  }
  if (object instanceof OneOf) {
    if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + " is not a member of " + this);
    delete this.oneofs[object.name];
    object.parent = null;
    object.onRemove(this);
    return clearCache(this);
  }
  return Namespace.prototype.remove.call(this, object);
};
Type.prototype.isReservedId = function isReservedId(id) {
  return Namespace.isReservedId(this.reserved, id);
};
Type.prototype.isReservedName = function isReservedName(name) {
  return Namespace.isReservedName(this.reserved, name);
};
Type.prototype.create = function create(properties) {
  return new this.ctor(properties);
};
Type.prototype.setup = function setup() {
  var fullName = this.fullName,
    types = [];
  for (var i = 0; i < this.fieldsArray.length; ++i) types.push(this._fieldsArray[i].resolve().resolvedType);
  this.encode = encoder(this)({
    Writer: Writer,
    types: types,
    util: util
  });
  this.decode = decoder(this)({
    Reader: Reader,
    types: types,
    util: util
  });
  this.verify = verifier(this)({
    types: types,
    util: util
  });
  this.fromObject = converter.fromObject(this)({
    types: types,
    util: util
  });
  this.toObject = converter.toObject(this)({
    types: types,
    util: util
  });
  var wrapper = wrappers[fullName];
  if (wrapper) {
    var originalThis = Object.create(this);
    originalThis.fromObject = this.fromObject;
    this.fromObject = wrapper.fromObject.bind(originalThis);
    originalThis.toObject = this.toObject;
    this.toObject = wrapper.toObject.bind(originalThis);
  }
  return this;
};
Type.prototype.encode = function encode_setup(message, writer) {
  return this.setup().encode(message, writer);
};
Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
  return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
};
Type.prototype.decode = function decode_setup(reader, length) {
  return this.setup().decode(reader, length);
};
Type.prototype.decodeDelimited = function decodeDelimited(reader) {
  if (!(reader instanceof Reader)) reader = Reader.create(reader);
  return this.decode(reader, reader.uint32());
};
Type.prototype.verify = function verify_setup(message) {
  return this.setup().verify(message);
};
Type.prototype.fromObject = function fromObject(object) {
  return this.setup().fromObject(object);
};
Type.prototype.toObject = function toObject(message, options) {
  return this.setup().toObject(message, options);
};
Type.d = function decorateType(typeName) {
  return function typeDecorator(target) {
    util.decorateType(target, typeName);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,