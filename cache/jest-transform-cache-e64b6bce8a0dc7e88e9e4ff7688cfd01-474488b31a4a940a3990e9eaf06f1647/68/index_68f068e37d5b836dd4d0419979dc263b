ee5004711d36567c0ff0b91cd6c4b57c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = exports.TestEnvironment = void 0;
function _vm() {
  var data = require('vm');
  _vm = function _vm() {
    return data;
  };
  return data;
}
function _fakeTimers() {
  var data = require('@jest/fake-timers');
  _fakeTimers = function _fakeTimers() {
    return data;
  };
  return data;
}
function _jestMock() {
  var data = require('jest-mock');
  _jestMock = function _jestMock() {
    return data;
  };
  return data;
}
function _jestUtil() {
  var data = require('jest-util');
  _jestUtil = function _jestUtil() {
    return data;
  };
  return data;
}
var denyList = new Set(['GLOBAL', 'root', 'global', 'Buffer', 'ArrayBuffer', 'Uint8Array', 'jest-symbol-do-not-touch']);
var nodeGlobals = new Map(Object.getOwnPropertyNames(globalThis).filter(function (global) {
  return !denyList.has(global);
}).map(function (nodeGlobalsKey) {
  var descriptor = Object.getOwnPropertyDescriptor(globalThis, nodeGlobalsKey);
  if (!descriptor) {
    throw new Error("No property descriptor for " + nodeGlobalsKey + ", this is a bug in Jest.");
  }
  return [nodeGlobalsKey, descriptor];
}));
function isString(value) {
  return typeof value === 'string';
}
var NodeEnvironment = function () {
  function NodeEnvironment(config, _context) {
    (0, _classCallCheck2.default)(this, NodeEnvironment);
    this.context = void 0;
    this.fakeTimers = void 0;
    this.fakeTimersModern = void 0;
    this.global = void 0;
    this.moduleMocker = void 0;
    this.customExportConditions = ['node', 'node-addons'];
    var projectConfig = config.projectConfig;
    this.context = (0, _vm().createContext)();
    var global = (0, _vm().runInContext)('this', Object.assign(this.context, projectConfig.testEnvironmentOptions));
    this.global = global;
    var contextGlobals = new Set(Object.getOwnPropertyNames(global));
    var _loop = function _loop(nodeGlobalsKey, descriptor) {
      if (!contextGlobals.has(nodeGlobalsKey)) {
        if (descriptor.configurable) {
          Object.defineProperty(global, nodeGlobalsKey, {
            configurable: true,
            enumerable: descriptor.enumerable,
            get: function get() {
              var val = globalThis[nodeGlobalsKey];
              Object.defineProperty(global, nodeGlobalsKey, {
                configurable: true,
                enumerable: descriptor.enumerable,
                value: val,
                writable: descriptor.writable === true || nodeGlobalsKey === 'performance'
              });
              return val;
            },
            set: function set(val) {
              Object.defineProperty(global, nodeGlobalsKey, {
                configurable: true,
                enumerable: descriptor.enumerable,
                value: val,
                writable: true
              });
            }
          });
        } else if ('value' in descriptor) {
          Object.defineProperty(global, nodeGlobalsKey, {
            configurable: false,
            enumerable: descriptor.enumerable,
            value: descriptor.value,
            writable: descriptor.writable
          });
        } else {
          Object.defineProperty(global, nodeGlobalsKey, {
            configurable: false,
            enumerable: descriptor.enumerable,
            get: descriptor.get,
            set: descriptor.set
          });
        }
      }
    };
    for (var _ref of nodeGlobals) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
      var nodeGlobalsKey = _ref2[0];
      var descriptor = _ref2[1];
      _loop(nodeGlobalsKey, descriptor);
    }
    global.global = global;
    global.Buffer = Buffer;
    global.ArrayBuffer = ArrayBuffer;
    global.Uint8Array = Uint8Array;
    (0, _jestUtil().installCommonGlobals)(global, projectConfig.globals);
    global.Error.stackTraceLimit = 100;
    if ('customExportConditions' in projectConfig.testEnvironmentOptions) {
      var customExportConditions = projectConfig.testEnvironmentOptions.customExportConditions;
      if (Array.isArray(customExportConditions) && customExportConditions.every(isString)) {
        this.customExportConditions = customExportConditions;
      } else {
        throw new Error('Custom export conditions specified but they are not an array of strings');
      }
    }
    this.moduleMocker = new (_jestMock().ModuleMocker)(global);
    var timerIdToRef = function timerIdToRef(id) {
      return {
        id: id,
        ref: function ref() {
          return this;
        },
        unref: function unref() {
          return this;
        }
      };
    };
    var timerRefToId = function timerRefToId(timer) {
      return timer == null ? void 0 : timer.id;
    };
    this.fakeTimers = new (_fakeTimers().LegacyFakeTimers)({
      config: projectConfig,
      global: global,
      moduleMocker: this.moduleMocker,
      timerConfig: {
        idToRef: timerIdToRef,
        refToId: timerRefToId
      }
    });
    this.fakeTimersModern = new (_fakeTimers().ModernFakeTimers)({
      config: projectConfig,
      global: global
    });
  }
  (0, _createClass2.default)(NodeEnvironment, [{
    key: "setup",
    value: function () {
      var _setup = (0, _asyncToGenerator2.default)(function* () {});
      function setup() {
        return _setup.apply(this, arguments);
      }
      return setup;
    }()
  }, {
    key: "teardown",
    value: function () {
      var _teardown = (0, _asyncToGenerator2.default)(function* () {
        if (this.fakeTimers) {
          this.fakeTimers.dispose();
        }
        if (this.fakeTimersModern) {
          this.fakeTimersModern.dispose();
        }
        this.context = null;
        this.fakeTimers = null;
        this.fakeTimersModern = null;
      });
      function teardown() {
        return _teardown.apply(this, arguments);
      }
      return teardown;
    }()
  }, {
    key: "exportConditions",
    value: function exportConditions() {
      return this.customExportConditions;
    }
  }, {
    key: "getVmContext",
    value: function getVmContext() {
      return this.context;
    }
  }]);
  return NodeEnvironment;
}();
exports.default = NodeEnvironment;
var TestEnvironment = NodeEnvironment;
exports.TestEnvironment = TestEnvironment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,