37bc3b2614430b901e6f1c88a3b8d390
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindUnsafeByPropsQueries = void 0;
var _prettyFormat = _interopRequireDefault(require("pretty-format"));
var _errors = require("../helpers/errors");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var UNSAFE_getByProps = function UNSAFE_getByProps(instance) {
  return function getByPropsFn(props) {
    try {
      return instance.findByProps(props);
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByPropsFn);
    }
  };
};
var UNSAFE_getAllByProps = function UNSAFE_getAllByProps(instance) {
  return function getAllByPropsFn(props) {
    var results = instance.findAllByProps(props);
    if (results.length === 0) {
      throw new _errors.ErrorWithStack("No instances found with props:\n" + (0, _prettyFormat.default)(props), getAllByPropsFn);
    }
    return results;
  };
};
var UNSAFE_queryByProps = function UNSAFE_queryByProps(instance) {
  return function queryByPropsFn(props) {
    try {
      return UNSAFE_getByProps(instance)(props);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByPropsFn);
    }
  };
};
var UNSAFE_queryAllByProps = function UNSAFE_queryAllByProps(instance) {
  return function (props) {
    try {
      return UNSAFE_getAllByProps(instance)(props);
    } catch (error) {
      return [];
    }
  };
};
var bindUnsafeByPropsQueries = function bindUnsafeByPropsQueries(instance) {
  return {
    UNSAFE_getByProps: UNSAFE_getByProps(instance),
    UNSAFE_getAllByProps: UNSAFE_getAllByProps(instance),
    UNSAFE_queryByProps: UNSAFE_queryByProps(instance),
    UNSAFE_queryAllByProps: UNSAFE_queryAllByProps(instance)
  };
};
exports.bindUnsafeByPropsQueries = bindUnsafeByPropsQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7QUFDQTtBQUF3RTtFQUFBO0lBQUFBO0VBQUE7QUFBQTtBQUd4RSxJQUFNQyxpQkFBaUIsR0FDckJDLFNBRElELGlCQUFpQixDQUNyQkMsUUFBMkI7RUFBQSxPQUUzQixTQUFTQyxZQUFZLENBQUNDLEtBQWtDLEVBQUU7SUFDeEQsSUFBSTtNQUNGLE9BQU9GLFFBQVEsQ0FBQ0csV0FBVyxDQUFDRCxLQUFLLENBQUM7SUFDcEMsQ0FBQyxDQUFDLE9BQU9FLEtBQUssRUFBRTtNQUNkLE1BQU0sSUFBSUMsc0JBQWMsQ0FBQywrQkFBbUIsRUFBQ0QsS0FBSyxDQUFDLEVBQUVILFlBQVksQ0FBQztJQUNwRTtFQUNGLENBQUM7QUFBQTtBQUVILElBQU1LLG9CQUFvQixHQUN4Qk4sU0FESU0sb0JBQW9CLENBQ3hCTixRQUEyQjtFQUFBLE9BRTNCLFNBQVNPLGVBQWUsQ0FBQ0wsS0FBa0MsRUFBRTtJQUMzRCxJQUFNTSxPQUFPLEdBQUdSLFFBQVEsQ0FBQ1MsY0FBYyxDQUFDUCxLQUFLLENBQUM7SUFDOUMsSUFBSU0sT0FBTyxDQUFDRSxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQ3hCLE1BQU0sSUFBSUwsc0JBQWMsc0NBQ2EseUJBQVksRUFBQ0gsS0FBSyxDQUFFLEVBQ3ZESyxlQUFlLENBQ2hCO0lBQ0g7SUFDQSxPQUFPQyxPQUFPO0VBQ2hCLENBQUM7QUFBQTtBQUVILElBQU1HLG1CQUFtQixHQUN2QlgsU0FESVcsbUJBQW1CLENBQ3ZCWCxRQUEyQjtFQUFBLE9BRTNCLFNBQVNZLGNBQWMsQ0FBQ1YsS0FBa0MsRUFBRTtJQUMxRCxJQUFJO01BQ0YsT0FBT0gsaUJBQWlCLENBQUNDLFFBQVEsQ0FBQyxDQUFDRSxLQUFLLENBQUM7SUFDM0MsQ0FBQyxDQUFDLE9BQU9FLEtBQUssRUFBRTtNQUNkLE9BQU8sOEJBQWtCLEVBQUNBLEtBQUssRUFBRVEsY0FBYyxDQUFDO0lBQ2xEO0VBQ0YsQ0FBQztBQUFBO0FBRUgsSUFBTUMsc0JBQXNCLEdBRXhCYixTQUZFYSxzQkFBc0IsQ0FFeEJiLFFBQTJCO0VBQUEsT0FFNUJFLGVBQWtDLEVBQUs7SUFDdEMsSUFBSTtNQUNGLE9BQU9JLG9CQUFvQixDQUFDTixRQUFRLENBQUMsQ0FBQ0UsS0FBSyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxPQUFPRSxLQUFLLEVBQUU7TUFDZCxPQUFPLEVBQUU7SUFDWDtFQUNGLENBQUM7QUFBQTtBQWlCSSxJQUFNVSx3QkFBd0IsR0FDbkNkLFNBRFdjLHdCQUF3QixDQUNuQ2QsUUFBMkI7RUFBQSxPQUNEO0lBQzFCRCxpQkFBaUIsRUFBRUEsaUJBQWlCLENBQUNDLFFBQVEsQ0FBQztJQUM5Q00sb0JBQW9CLEVBQUVBLG9CQUFvQixDQUFDTixRQUFRLENBQUM7SUFDcERXLG1CQUFtQixFQUFFQSxtQkFBbUIsQ0FBQ1gsUUFBUSxDQUFDO0lBQ2xEYSxzQkFBc0IsRUFBRUEsc0JBQXNCLENBQUNiLFFBQVE7RUFDekQsQ0FBQztBQUFBLENBQUM7QUFBQ2UiLCJuYW1lcyI6WyJkZWZhdWx0IiwiVU5TQUZFX2dldEJ5UHJvcHMiLCJpbnN0YW5jZSIsImdldEJ5UHJvcHNGbiIsInByb3BzIiwiZmluZEJ5UHJvcHMiLCJlcnJvciIsIkVycm9yV2l0aFN0YWNrIiwiVU5TQUZFX2dldEFsbEJ5UHJvcHMiLCJnZXRBbGxCeVByb3BzRm4iLCJyZXN1bHRzIiwiZmluZEFsbEJ5UHJvcHMiLCJsZW5ndGgiLCJVTlNBRkVfcXVlcnlCeVByb3BzIiwicXVlcnlCeVByb3BzRm4iLCJVTlNBRkVfcXVlcnlBbGxCeVByb3BzIiwiYmluZFVuc2FmZUJ5UHJvcHNRdWVyaWVzIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL3Vuc2FmZVByb3BzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCBwcmV0dHlGb3JtYXQgZnJvbSAncHJldHR5LWZvcm1hdCc7XG5pbXBvcnQgeyBFcnJvcldpdGhTdGFjaywgcHJlcGFyZUVycm9yTWVzc2FnZSB9IGZyb20gJy4uL2hlbHBlcnMvZXJyb3JzJztcbmltcG9ydCB7IGNyZWF0ZVF1ZXJ5QnlFcnJvciB9IGZyb20gJy4uL2hlbHBlcnMvZXJyb3JzJztcblxuY29uc3QgVU5TQUZFX2dldEJ5UHJvcHMgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZVxuKTogKChwcm9wczogeyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9KSA9PiBSZWFjdFRlc3RJbnN0YW5jZSkgPT5cbiAgZnVuY3Rpb24gZ2V0QnlQcm9wc0ZuKHByb3BzOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogYW55IH0pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLmZpbmRCeVByb3BzKHByb3BzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yV2l0aFN0YWNrKHByZXBhcmVFcnJvck1lc3NhZ2UoZXJyb3IpLCBnZXRCeVByb3BzRm4pO1xuICAgIH1cbiAgfTtcblxuY29uc3QgVU5TQUZFX2dldEFsbEJ5UHJvcHMgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZVxuKTogKChwcm9wczogeyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9KSA9PiBBcnJheTxSZWFjdFRlc3RJbnN0YW5jZT4pID0+XG4gIGZ1bmN0aW9uIGdldEFsbEJ5UHJvcHNGbihwcm9wczogeyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9KSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IGluc3RhbmNlLmZpbmRBbGxCeVByb3BzKHByb3BzKTtcbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcldpdGhTdGFjayhcbiAgICAgICAgYE5vIGluc3RhbmNlcyBmb3VuZCB3aXRoIHByb3BzOlxcbiR7cHJldHR5Rm9ybWF0KHByb3BzKX1gLFxuICAgICAgICBnZXRBbGxCeVByb3BzRm5cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG5jb25zdCBVTlNBRkVfcXVlcnlCeVByb3BzID0gKFxuICBpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2Vcbik6ICgocHJvcHM6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBhbnkgfSkgPT4gUmVhY3RUZXN0SW5zdGFuY2UgfCBudWxsKSA9PlxuICBmdW5jdGlvbiBxdWVyeUJ5UHJvcHNGbihwcm9wczogeyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBVTlNBRkVfZ2V0QnlQcm9wcyhpbnN0YW5jZSkocHJvcHMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gY3JlYXRlUXVlcnlCeUVycm9yKGVycm9yLCBxdWVyeUJ5UHJvcHNGbik7XG4gICAgfVxuICB9O1xuXG5jb25zdCBVTlNBRkVfcXVlcnlBbGxCeVByb3BzID1cbiAgKFxuICAgIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZVxuICApOiAoKHByb3BzOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogYW55IH0pID0+IEFycmF5PFJlYWN0VGVzdEluc3RhbmNlPikgPT5cbiAgKHByb3BzOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogYW55IH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIFVOU0FGRV9nZXRBbGxCeVByb3BzKGluc3RhbmNlKShwcm9wcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH07XG5cbi8vIFVuc2FmZSBhbGlhc2VzXG5leHBvcnQgdHlwZSBVbnNhZmVCeVByb3BzUXVlcmllcyA9IHtcbiAgVU5TQUZFX2dldEJ5UHJvcHM6IChwcm9wczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkgPT4gUmVhY3RUZXN0SW5zdGFuY2U7XG4gIFVOU0FGRV9nZXRBbGxCeVByb3BzOiAocHJvcHM6IHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIH0pID0+IEFycmF5PFJlYWN0VGVzdEluc3RhbmNlPjtcbiAgVU5TQUZFX3F1ZXJ5QnlQcm9wczogKHByb3BzOiB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xuICB9KSA9PiBSZWFjdFRlc3RJbnN0YW5jZSB8IG51bGw7XG4gIFVOU0FGRV9xdWVyeUFsbEJ5UHJvcHM6IChwcm9wczoge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgfSkgPT4gQXJyYXk8UmVhY3RUZXN0SW5zdGFuY2U+O1xufTtcblxuLy8gVE9ETzogbWlncmF0ZSB0byBtYWtlUXVlcmllcyBwYXR0ZXJuXG5leHBvcnQgY29uc3QgYmluZFVuc2FmZUJ5UHJvcHNRdWVyaWVzID0gKFxuICBpbnN0YW5jZTogUmVhY3RUZXN0SW5zdGFuY2Vcbik6IFVuc2FmZUJ5UHJvcHNRdWVyaWVzID0+ICh7XG4gIFVOU0FGRV9nZXRCeVByb3BzOiBVTlNBRkVfZ2V0QnlQcm9wcyhpbnN0YW5jZSksXG4gIFVOU0FGRV9nZXRBbGxCeVByb3BzOiBVTlNBRkVfZ2V0QWxsQnlQcm9wcyhpbnN0YW5jZSksXG4gIFVOU0FGRV9xdWVyeUJ5UHJvcHM6IFVOU0FGRV9xdWVyeUJ5UHJvcHMoaW5zdGFuY2UpLFxuICBVTlNBRkVfcXVlcnlBbGxCeVByb3BzOiBVTlNBRkVfcXVlcnlBbGxCeVByb3BzKGluc3RhbmNlKSxcbn0pO1xuIl19