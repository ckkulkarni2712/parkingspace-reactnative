2a8e9750260d638fedbbd15dd7f5d11c
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _uuid = require("uuid");
require("react-native-get-random-values");
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jestCucumber = require("jest-cucumber");
var _native = require("@react-navigation/native");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _parkingSlice = _interopRequireWildcard(require("../../App/Reducer/parkingSlice"));
var _ParkingSpace = _interopRequireDefault(require("../../App/ParkingSpace"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var feature = (0, _jestCucumber.loadFeature)('./features/parkingspace.feature');
var uuid = (0, _uuid.v4)();
var store;
(0, _jestCucumber.defineFeature)(feature, function (test) {
  test('Add a new parking space', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    var navigation = (0, _native.useNavigation)();
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
      store: store,
      children: (0, _jsxRuntime.jsx)(_ParkingSpace.default, {})
    }));
    given('that there is a Parking Space Component', function () {
      expect(screen).toBeDefined();
    });
    when('I click on the "Add Space" button', function () {
      var addButton = screen.getByTestId('add-parking-space-button');
      _reactNative.fireEvent.press(addButton);
      expect(store.dispatch(_parkingSlice.addToParkingSpace)).toBeCalled();
    });
  });
  test('Remove an existing parking space', function (_ref2) {
    var given = _ref2.given,
      when = _ref2.when,
      then = _ref2.then,
      and = _ref2.and;
    var navigation = (0, _native.useNavigation)();
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
      store: store,
      children: (0, _jsxRuntime.jsx)(_ParkingSpace.default, {})
    }));
    given('that there is a Parking Space Component', function () {
      expect(screen).toBeDefined();
    });
    when('I click on the "Remove Space" button', function () {
      var removeButton = screen.getByTestId('remove-parking-space-button');
      _reactNative.fireEvent.press(removeButton);
    });
    then('a parking space should be removed from the list of available spaces', function () {
      expect(store.dispatch(_parkingSlice.removeParkingSpace)).toBeCalled();
    });
  });
  test('Register a parking lot', function (_ref3) {
    var given = _ref3.given,
      when = _ref3.when,
      then = _ref3.then,
      and = _ref3.and;
    var navigation = (0, _native.useNavigation)();
    store = (0, _toolkit.configureStore)({
      reducer: {
        parkingSpaces: _parkingSlice.default
      }
    });
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
      store: store,
      children: (0, _jsxRuntime.jsx)(_ParkingSpace.default, {})
    }));
    given('that there is a Parking Space Component', function () {
      expect(screen).toBeDefined();
    });
    and('I have selected a parking space', function () {
      var addButton = screen.getByTestId('add-parking-space-button');
      _reactNative.fireEvent.press(addButton);
      store.dispatch(_parkingSlice.addToParkingSpace);
      var screens = screen.getByTestId('parking-space-1');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,