01c95ea6c72daecab663aedf79e4aa52
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _uuid = require("uuid");
require("react-native-get-random-values");
var _reactNative = require("@testing-library/react-native");
require("@testing-library/jest-native/extend-expect");
var _jestCucumber = require("jest-cucumber");
var _native = require("@react-navigation/native");
var _reactRedux = require("react-redux");
var _toolkit = require("@reduxjs/toolkit");
var _parkingSlice = _interopRequireDefault(require("../../App/Reducer/parkingSlice"));
var _ParkingSpace = _interopRequireDefault(require("../../App/ParkingSpace"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var feature = (0, _jestCucumber.loadFeature)('./features/parkingspace.feature');
var uuid = (0, _uuid.v4)();
var store;
(0, _jestCucumber.defineFeature)(feature, function (test) {
  test('Add a new parking space', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    given('that there is a Parking Space Component', function () {
      var navigation = (0, _native.useNavigation)();
      store = (0, _toolkit.configureStore)({
        reducer: {
          parkingSpaces: _parkingSlice.default
        }
      });
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
        store: store,
        children: (0, _jsxRuntime.jsx)(_ParkingSpace.default, {})
      }));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrIiwidXNlTmF2aWdhdGlvbiIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIm5hdmlnYXRlIiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwidXVpZCIsInV1aWR2NCIsInN0b3JlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwiYW5kIiwibmF2aWdhdGlvbiIsImNvbmZpZ3VyZVN0b3JlIiwicmVkdWNlciIsInBhcmtpbmdTcGFjZXMiLCJwYXJraW5nU2xpY2UiLCJzY3JlZW4iLCJyZW5kZXIiXSwic291cmNlcyI6WyJwYXJraW5nc3BhY2Uuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7djQgYXMgdXVpZHY0fSBmcm9tICd1dWlkJztcclxuaW1wb3J0ICdyZWFjdC1uYXRpdmUtZ2V0LXJhbmRvbS12YWx1ZXMnO1xyXG5pbXBvcnQge2ZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcclxuaW1wb3J0IHtsb2FkRmVhdHVyZSwgZGVmaW5lRmVhdHVyZX0gZnJvbSAnamVzdC1jdWN1bWJlcic7XHJcbmltcG9ydCB7dXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoJy4vZmVhdHVyZXMvcGFya2luZ3NwYWNlLmZlYXR1cmUnKTtcclxuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQge2NvbmZpZ3VyZVN0b3JlfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcclxuaW1wb3J0IHBhcmtpbmdTbGljZSwge1xyXG4gIGluaXRpYWxpemVQYXJraW5nTG90LFxyXG59IGZyb20gJy4uLy4uL0FwcC9SZWR1Y2VyL3BhcmtpbmdTbGljZSc7XHJcbmltcG9ydCBQYXJraW5nU3BhY2UgZnJvbSAnLi4vLi4vQXBwL1BhcmtpbmdTcGFjZSc7XHJcbmNvbnN0IHV1aWQgPSB1dWlkdjQoKTtcclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcbmxldCBzdG9yZTogYW55O1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsIHRlc3QgPT4ge1xyXG4gIHRlc3QoJ0FkZCBhIG5ldyBwYXJraW5nIHNwYWNlJywgKHtnaXZlbiwgd2hlbiwgdGhlbiwgYW5kfSkgPT4ge1xyXG4gICAgZ2l2ZW4oJ3RoYXQgdGhlcmUgaXMgYSBQYXJraW5nIFNwYWNlIENvbXBvbmVudCcsICgpID0+IHtcclxuICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG4gICAgICBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcclxuICAgICAgICByZWR1Y2VyOiB7XHJcbiAgICAgICAgICBwYXJraW5nU3BhY2VzOiBwYXJraW5nU2xpY2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICAgIDxQYXJraW5nU3BhY2UgLz5cclxuICAgICAgICA8L1Byb3ZpZGVyPixcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFnQkEsY0FBS0EsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUU7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQztBQXRCSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUdBO0FBQWtEO0FBQUE7RUFBQTtJQUFBO0VBQUE7SUFBQTtFQUFBO0VBQUE7QUFBQTtBQU5sRCxJQUFNRyxPQUFPLEdBQUcsSUFBQUMseUJBQVcsRUFBQyxpQ0FBaUMsQ0FBQztBQU85RCxJQUFNQyxJQUFJLEdBQUcsSUFBQUMsUUFBTSxHQUFFO0FBUXJCLElBQUlDLEtBQVU7QUFDZCxJQUFBQywyQkFBYSxFQUFDTCxPQUFPLEVBQUUsVUFBQU0sSUFBSSxFQUFJO0VBQzdCQSxJQUFJLENBQUMseUJBQXlCLEVBQUUsZ0JBQThCO0lBQUEsSUFBNUJDLEtBQUssUUFBTEEsS0FBSztNQUFFQyxJQUFJLFFBQUpBLElBQUk7TUFBRUMsSUFBSSxRQUFKQSxJQUFJO01BQUVDLEdBQUcsUUFBSEEsR0FBRztJQUN0REgsS0FBSyxDQUFDLHlDQUF5QyxFQUFFLFlBQU07TUFDckQsSUFBTUksVUFBVSxHQUFHLElBQUFoQixxQkFBYSxHQUFrQztNQUNsRVMsS0FBSyxHQUFHLElBQUFRLHVCQUFjLEVBQUM7UUFDckJDLE9BQU8sRUFBRTtVQUNQQyxhQUFhLEVBQUVDO1FBQ2pCO01BQ0YsQ0FBQyxDQUFDO01BQ0YsSUFBTUMsTUFBTSxHQUFHLElBQUFDLG1CQUFNLEVBQ25CLHFCQUFDLG9CQUFRO1FBQUMsS0FBSyxFQUFFYixLQUFNO1FBQUEsVUFDckIscUJBQUMscUJBQVk7TUFBRyxFQUNQLENBQ1o7SUFDSCxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==