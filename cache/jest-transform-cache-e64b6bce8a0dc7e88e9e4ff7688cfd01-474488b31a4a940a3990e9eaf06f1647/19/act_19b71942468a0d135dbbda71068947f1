5e33599625207bef1e1f5a74f1714ab1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getIsReactActEnvironment = getIsReactActEnvironment;
exports.setReactActEnvironment = setIsReactActEnvironment;
var _reactTestRenderer = require("react-test-renderer");
var _reactVersions = require("./react-versions");
function setIsReactActEnvironment(isReactActEnvironment) {
  globalThis.IS_REACT_ACT_ENVIRONMENT = isReactActEnvironment;
}
function getIsReactActEnvironment() {
  return globalThis.IS_REACT_ACT_ENVIRONMENT;
}
function withGlobalActEnvironment(actImplementation) {
  return function (callback) {
    var previousActEnvironment = getIsReactActEnvironment();
    setIsReactActEnvironment(true);
    try {
      var callbackNeedsToBeAwaited = false;
      var actResult = actImplementation(function () {
        var result = callback();
        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
          callbackNeedsToBeAwaited = true;
        }
        return result;
      });
      if (callbackNeedsToBeAwaited) {
        var thenable = actResult;
        return {
          then: function then(resolve, reject) {
            thenable.then(function (returnValue) {
              setIsReactActEnvironment(previousActEnvironment);
              resolve(returnValue);
            }, function (error) {
              setIsReactActEnvironment(previousActEnvironment);
              reject(error);
            });
          }
        };
      } else {
        setIsReactActEnvironment(previousActEnvironment);
        return actResult;
      }
    } catch (error) {
      setIsReactActEnvironment(previousActEnvironment);
      throw error;
    }
  };
}
var act = (0, _reactVersions.checkReactVersionAtLeast)(18, 0) ? withGlobalActEnvironment(_reactTestRenderer.act) : _reactTestRenderer.act;
var _default = act;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFQTtBQUNBO0FBU0EsU0FBU0Esd0JBQXdCLENBQUNDLHFCQUEwQyxFQUFFO0VBQzVFQyxVQUFVLENBQUNDLHdCQUF3QixHQUFHRixxQkFBcUI7QUFDN0Q7QUFFQSxTQUFTRyx3QkFBd0IsR0FBRztFQUNsQyxPQUFPRixVQUFVLENBQUNDLHdCQUF3QjtBQUM1QztBQUVBLFNBQVNFLHdCQUF3QixDQUFDQyxpQkFBMkIsRUFBRTtFQUM3RCxPQUFRQyxrQkFBaUMsRUFBSztJQUM1QyxJQUFNQyxzQkFBc0IsR0FBR0osd0JBQXdCLEVBQUU7SUFDekRKLHdCQUF3QixDQUFDLElBQUksQ0FBQztJQUc5QixJQUFJO01BRUYsSUFBSVMsd0JBQXdCLEdBQUcsS0FBSztNQUNwQyxJQUFNQyxTQUFTLEdBQUdKLGlCQUFpQixDQUFDLFlBQU07UUFDeEMsSUFBTUssTUFBTSxHQUFHSixRQUFRLEVBQUU7UUFDekIsSUFDRUksTUFBTSxLQUFLLElBQUksSUFDZixPQUFPQSxNQUFNLEtBQUssUUFBUSxJQUcxQixPQUFPQSxNQUFNLENBQUNDLElBQUksS0FBSyxVQUFVLEVBQ2pDO1VBQ0FILHdCQUF3QixHQUFHLElBQUk7UUFDakM7UUFDQSxPQUFPRSxNQUFNO01BQ2YsQ0FBQyxDQUFDO01BRUYsSUFBSUYsd0JBQXdCLEVBQUU7UUFDNUIsSUFBTUksUUFBUSxHQUFHSCxTQUFTO1FBQzFCLE9BQU87VUFDTEUsSUFBSSxFQUFFLGNBQ0pFLE9BQWdDLEVBQ2hDQyxNQUErQixFQUM1QjtZQUVIRixRQUFRLENBQUNELElBQUksQ0FFVkkscUJBQVcsRUFBSztjQUNmaEIsd0JBQXdCLENBQUNRLHNCQUFzQixDQUFDO2NBQ2hETSxPQUFPLENBQUNFLFdBQVcsQ0FBQztZQUN0QixDQUFDLEVBQ0FDLGVBQUssRUFBSztjQUNUakIsd0JBQXdCLENBQUNRLHNCQUFzQixDQUFDO2NBQ2hETyxNQUFNLENBQUNFLEtBQUssQ0FBQztZQUNmLENBQUMsQ0FDRjtVQUNIO1FBQ0YsQ0FBQztNQUNILENBQUMsTUFBTTtRQUNMakIsd0JBQXdCLENBQUNRLHNCQUFzQixDQUFDO1FBQ2hELE9BQU9FLFNBQVM7TUFDbEI7SUFDRixDQUFDLENBQUMsT0FBT08sS0FBSyxFQUFFO01BR2RqQix3QkFBd0IsQ0FBQ1Esc0JBQXNCLENBQUM7TUFDaEQsTUFBTVMsS0FBSztJQUNiO0VBQ0YsQ0FBQztBQUNIO0FBRUEsSUFBTUMsR0FBYSxHQUFHLDJDQUF3QixFQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FDaERiLHdCQUF3QixDQUFDYyxzQkFBb0IsQ0FBQyxHQUMvQ0Esc0JBQW9CO0FBQUMsZUFFVkQsR0FBRztBQUFBRSIsIm5hbWVzIjpbInNldElzUmVhY3RBY3RFbnZpcm9ubWVudCIsImlzUmVhY3RBY3RFbnZpcm9ubWVudCIsImdsb2JhbFRoaXMiLCJJU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlQiLCJnZXRJc1JlYWN0QWN0RW52aXJvbm1lbnQiLCJ3aXRoR2xvYmFsQWN0RW52aXJvbm1lbnQiLCJhY3RJbXBsZW1lbnRhdGlvbiIsImNhbGxiYWNrIiwicHJldmlvdXNBY3RFbnZpcm9ubWVudCIsImNhbGxiYWNrTmVlZHNUb0JlQXdhaXRlZCIsImFjdFJlc3VsdCIsInJlc3VsdCIsInRoZW4iLCJ0aGVuYWJsZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXR1cm5WYWx1ZSIsImVycm9yIiwiYWN0IiwicmVhY3RUZXN0UmVuZGVyZXJBY3QiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL2FjdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgYW5kIHRoZSBhY3QoKSBpbXBsZW1lbnRhdGlvbiBpcyBzb3VyY2VkIGZyb20gcmVhY3QtdGVzdGluZy1saWJyYXJ5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGVzdGluZy1saWJyYXJ5L3JlYWN0LXRlc3RpbmctbGlicmFyeS9ibG9iL2M4MDgwOWE5NTZiMGI5ZjMyODljNGE2ZmE4YjVlOGNjNzJkNmVmNmQvc3JjL2FjdC1jb21wYXQuanNcbmltcG9ydCB7IGFjdCBhcyByZWFjdFRlc3RSZW5kZXJlckFjdCB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHsgY2hlY2tSZWFjdFZlcnNpb25BdExlYXN0IH0gZnJvbSAnLi9yZWFjdC12ZXJzaW9ucyc7XG5cbnR5cGUgUmVhY3RBY3QgPSB0eXBlb2YgcmVhY3RUZXN0UmVuZGVyZXJBY3Q7XG5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3R3Zy9yZWFjdC0xOC9kaXNjdXNzaW9ucy8xMDIgZm9yIG1vcmUgY29udGV4dCBvbiBnbG9iYWwuSVNfUkVBQ1RfQUNUX0VOVklST05NRU5UXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBJU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlQ6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHNldElzUmVhY3RBY3RFbnZpcm9ubWVudChpc1JlYWN0QWN0RW52aXJvbm1lbnQ6IGJvb2xlYW4gfCB1bmRlZmluZWQpIHtcbiAgZ2xvYmFsVGhpcy5JU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlQgPSBpc1JlYWN0QWN0RW52aXJvbm1lbnQ7XG59XG5cbmZ1bmN0aW9uIGdldElzUmVhY3RBY3RFbnZpcm9ubWVudCgpIHtcbiAgcmV0dXJuIGdsb2JhbFRoaXMuSVNfUkVBQ1RfQUNUX0VOVklST05NRU5UO1xufVxuXG5mdW5jdGlvbiB3aXRoR2xvYmFsQWN0RW52aXJvbm1lbnQoYWN0SW1wbGVtZW50YXRpb246IFJlYWN0QWN0KSB7XG4gIHJldHVybiAoY2FsbGJhY2s6IFBhcmFtZXRlcnM8UmVhY3RBY3Q+WzBdKSA9PiB7XG4gICAgY29uc3QgcHJldmlvdXNBY3RFbnZpcm9ubWVudCA9IGdldElzUmVhY3RBY3RFbnZpcm9ubWVudCgpO1xuICAgIHNldElzUmVhY3RBY3RFbnZpcm9ubWVudCh0cnVlKTtcblxuICAgIC8vIHRoaXMgY29kZSBpcyByaWRkbGVkIHdpdGggZXNsaW50IGRpc2FibGluZyBjb21tZW50cyBiZWNhdXNlIHRoaXMgZG9lc24ndCB1c2UgcmVhbCBwcm9taXNlcyBidXQgZXNsaW50IHRoaW5rcyB3ZSBkb1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgcmV0dXJuIHZhbHVlIG9mIGBhY3RgIGlzIGFsd2F5cyBhIHRoZW5hYmxlLlxuICAgICAgbGV0IGNhbGxiYWNrTmVlZHNUb0JlQXdhaXRlZCA9IGZhbHNlO1xuICAgICAgY29uc3QgYWN0UmVzdWx0ID0gYWN0SW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVzdWx0ICE9PSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoaXMgc2hvdWxkIGJlIGEgcHJvbWlzZSBvciB0aGVuYWJsZVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG4gICAgICAgICAgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgIGNhbGxiYWNrTmVlZHNUb0JlQXdhaXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY2FsbGJhY2tOZWVkc1RvQmVBd2FpdGVkKSB7XG4gICAgICAgIGNvbnN0IHRoZW5hYmxlID0gYWN0UmVzdWx0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRoZW46IChcbiAgICAgICAgICAgIHJlc29sdmU6ICh2YWx1ZTogbmV2ZXIpID0+IG5ldmVyLFxuICAgICAgICAgICAgcmVqZWN0OiAodmFsdWU6IG5ldmVyKSA9PiBuZXZlclxuICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICB0aGVuYWJsZS50aGVuKFxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9hbHdheXMtcmV0dXJuXG4gICAgICAgICAgICAgIChyZXR1cm5WYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHNldElzUmVhY3RBY3RFbnZpcm9ubWVudChwcmV2aW91c0FjdEVudmlyb25tZW50KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0SXNSZWFjdEFjdEVudmlyb25tZW50KHByZXZpb3VzQWN0RW52aXJvbm1lbnQpO1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldElzUmVhY3RBY3RFbnZpcm9ubWVudChwcmV2aW91c0FjdEVudmlyb25tZW50KTtcbiAgICAgICAgcmV0dXJuIGFjdFJlc3VsdDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gQ2FuJ3QgYmUgYSBgZmluYWxseSB7fWAgYmxvY2sgc2luY2Ugd2UgZG9uJ3Qga25vdyBpZiB3ZSBoYXZlIHRvIGltbWVkaWF0ZWx5IHJlc3RvcmUgSVNfUkVBQ1RfQUNUX0VOVklST05NRU5UXG4gICAgICAvLyBvciBpZiB3ZSBoYXZlIHRvIGF3YWl0IHRoZSBjYWxsYmFjayBmaXJzdC5cbiAgICAgIHNldElzUmVhY3RBY3RFbnZpcm9ubWVudChwcmV2aW91c0FjdEVudmlyb25tZW50KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3QgYWN0OiBSZWFjdEFjdCA9IGNoZWNrUmVhY3RWZXJzaW9uQXRMZWFzdCgxOCwgMClcbiAgPyAod2l0aEdsb2JhbEFjdEVudmlyb25tZW50KHJlYWN0VGVzdFJlbmRlcmVyQWN0KSBhcyBSZWFjdEFjdClcbiAgOiByZWFjdFRlc3RSZW5kZXJlckFjdDtcblxuZXhwb3J0IGRlZmF1bHQgYWN0O1xuZXhwb3J0IHtcbiAgc2V0SXNSZWFjdEFjdEVudmlyb25tZW50IGFzIHNldFJlYWN0QWN0RW52aXJvbm1lbnQsXG4gIGdldElzUmVhY3RBY3RFbnZpcm9ubWVudCxcbn07XG4iXX0=