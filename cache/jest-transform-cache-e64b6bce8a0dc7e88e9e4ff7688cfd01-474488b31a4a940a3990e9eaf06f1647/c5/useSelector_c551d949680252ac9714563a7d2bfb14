ff1535b7a18ad8b3753bd129383f1d56
"use strict";

exports.__esModule = true;
exports.createSelectorHook = createSelectorHook;
exports.useSelector = exports.initializeUseSelector = void 0;
var _react = require("react");
var _useReduxContext = require("./useReduxContext");
var _Context = require("../components/Context");
var _useSyncExternalStore = require("../utils/useSyncExternalStore");
var useSyncExternalStoreWithSelector = _useSyncExternalStore.notInitialized;
var initializeUseSelector = function initializeUseSelector(fn) {
  useSyncExternalStoreWithSelector = fn;
};
exports.initializeUseSelector = initializeUseSelector;
var refEquality = function refEquality(a, b) {
  return a === b;
};
function createSelectorHook() {
  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _Context.ReactReduxContext;
  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext.useReduxContext : function () {
    return (0, _react.useContext)(context);
  };
  return function useSelector(selector) {
    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;
    if (process.env.NODE_ENV !== 'production') {
      if (!selector) {
        throw new Error("You must pass a selector to useSelector");
      }
      if (typeof selector !== 'function') {
        throw new Error("You must pass a function as a selector to useSelector");
      }
      if (typeof equalityFn !== 'function') {
        throw new Error("You must pass a function as an equality function to useSelector");
      }
    }
    var _useReduxContext2 = useReduxContext(),
      store = _useReduxContext2.store,
      subscription = _useReduxContext2.subscription,
      getServerState = _useReduxContext2.getServerState;
    var selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, selector, equalityFn);
    (0, _react.useDebugValue)(selectedState);
    return selectedState;
  };
}
var useSelector = createSelectorHook();
exports.useSelector = useSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImNyZWF0ZVNlbGVjdG9ySG9vayIsInVzZVNlbGVjdG9yIiwiaW5pdGlhbGl6ZVVzZVNlbGVjdG9yIiwiX3JlYWN0IiwicmVxdWlyZSIsIl91c2VSZWR1eENvbnRleHQiLCJfQ29udGV4dCIsIl91c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIiwibm90SW5pdGlhbGl6ZWQiLCJmbiIsInJlZkVxdWFsaXR5IiwiYSIsImIiLCJjb250ZXh0IiwiUmVhY3RSZWR1eENvbnRleHQiLCJ1c2VSZWR1eENvbnRleHQiLCJ1c2VDb250ZXh0Iiwic2VsZWN0b3IiLCJlcXVhbGl0eUZuIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiRXJyb3IiLCJzdG9yZSIsInN1YnNjcmlwdGlvbiIsImdldFNlcnZlclN0YXRlIiwic2VsZWN0ZWRTdGF0ZSIsImFkZE5lc3RlZFN1YiIsImdldFN0YXRlIiwidXNlRGVidWdWYWx1ZSJdLCJzb3VyY2VzIjpbInVzZVNlbGVjdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jcmVhdGVTZWxlY3Rvckhvb2sgPSBjcmVhdGVTZWxlY3Rvckhvb2s7XG5leHBvcnRzLnVzZVNlbGVjdG9yID0gZXhwb3J0cy5pbml0aWFsaXplVXNlU2VsZWN0b3IgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfdXNlUmVkdXhDb250ZXh0ID0gcmVxdWlyZShcIi4vdXNlUmVkdXhDb250ZXh0XCIpO1xuXG52YXIgX0NvbnRleHQgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9Db250ZXh0XCIpO1xuXG52YXIgX3VzZVN5bmNFeHRlcm5hbFN0b3JlID0gcmVxdWlyZShcIi4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlXCIpO1xuXG5sZXQgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBfdXNlU3luY0V4dGVybmFsU3RvcmUubm90SW5pdGlhbGl6ZWQ7XG5cbmNvbnN0IGluaXRpYWxpemVVc2VTZWxlY3RvciA9IGZuID0+IHtcbiAgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBmbjtcbn07XG5cbmV4cG9ydHMuaW5pdGlhbGl6ZVVzZVNlbGVjdG9yID0gaW5pdGlhbGl6ZVVzZVNlbGVjdG9yO1xuXG5jb25zdCByZWZFcXVhbGl0eSA9IChhLCBiKSA9PiBhID09PSBiO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQgPSBfQ29udGV4dC5SZWFjdFJlZHV4Q29udGV4dCkge1xuICBjb25zdCB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBfQ29udGV4dC5SZWFjdFJlZHV4Q29udGV4dCA/IF91c2VSZWR1eENvbnRleHQudXNlUmVkdXhDb250ZXh0IDogKCkgPT4gKDAsIF9yZWFjdC51c2VDb250ZXh0KShjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlcXVhbGl0eUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGFuIGVxdWFsaXR5IGZ1bmN0aW9uIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZVxuICAgIH0gPSB1c2VSZWR1eENvbnRleHQoKTtcbiAgICBjb25zdCBzZWxlY3RlZFN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3Ioc3Vic2NyaXB0aW9uLmFkZE5lc3RlZFN1Yiwgc3RvcmUuZ2V0U3RhdGUsIGdldFNlcnZlclN0YXRlIHx8IHN0b3JlLmdldFN0YXRlLCBzZWxlY3RvciwgZXF1YWxpdHlGbik7XG4gICAgKDAsIF9yZWFjdC51c2VEZWJ1Z1ZhbHVlKShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBhcyBhbiBhcmd1bWVudC4gVGhlIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBzdG9yZSBzdGF0ZS5cclxuICpcclxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcclxuICogdGhhdCBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgd2F5IHRoZSBzZWxlY3RlZCBzdGF0ZSBpcyBjb21wYXJlZCB0byBkZXRlcm1pbmVcclxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgc2VsZWN0ZWQgc3RhdGVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcclxuICogICByZXR1cm4gPGRpdj57Y291bnRlcn08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuXG5jb25zdCB1c2VTZWxlY3RvciA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3Rvckhvb2soKTtcbmV4cG9ydHMudXNlU2VsZWN0b3IgPSB1c2VTZWxlY3RvcjsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE9BQU8sQ0FBQ0MsVUFBVSxHQUFHLElBQUk7QUFDekJELE9BQU8sQ0FBQ0Usa0JBQWtCLEdBQUdBLGtCQUFrQjtBQUMvQ0YsT0FBTyxDQUFDRyxXQUFXLEdBQUdILE9BQU8sQ0FBQ0kscUJBQXFCLEdBQUcsS0FBSyxDQUFDO0FBRTVELElBQUlDLE1BQU0sR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUU3QixJQUFJQyxnQkFBZ0IsR0FBR0QsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBRW5ELElBQUlFLFFBQVEsR0FBR0YsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0FBRS9DLElBQUlHLHFCQUFxQixHQUFHSCxPQUFPLENBQUMsK0JBQStCLENBQUM7QUFFcEUsSUFBSUksZ0NBQWdDLEdBQUdELHFCQUFxQixDQUFDRSxjQUFjO0FBRTNFLElBQU1QLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBcUIsQ0FBR1EsRUFBRSxFQUFJO0VBQ2xDRixnQ0FBZ0MsR0FBR0UsRUFBRTtBQUN2QyxDQUFDO0FBRURaLE9BQU8sQ0FBQ0kscUJBQXFCLEdBQUdBLHFCQUFxQjtBQUVyRCxJQUFNUyxXQUFXLEdBQUcsU0FBZEEsV0FBVyxDQUFJQyxDQUFDLEVBQUVDLENBQUM7RUFBQSxPQUFLRCxDQUFDLEtBQUtDLENBQUM7QUFBQTtBQVNyQyxTQUFTYixrQkFBa0IsR0FBdUM7RUFBQSxJQUF0Q2MsT0FBTyx1RUFBR1IsUUFBUSxDQUFDUyxpQkFBaUI7RUFDOUQsSUFBTUMsZUFBZSxHQUFHRixPQUFPLEtBQUtSLFFBQVEsQ0FBQ1MsaUJBQWlCLEdBQUdWLGdCQUFnQixDQUFDVyxlQUFlLEdBQUc7SUFBQSxPQUFNLENBQUMsQ0FBQyxFQUFFYixNQUFNLENBQUNjLFVBQVUsRUFBRUgsT0FBTyxDQUFDO0VBQUE7RUFDekksT0FBTyxTQUFTYixXQUFXLENBQUNpQixRQUFRLEVBQTRCO0lBQUEsSUFBMUJDLFVBQVUsdUVBQUdSLFdBQVc7SUFDNUQsSUFBSVMsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxZQUFZLEVBQUU7TUFDekMsSUFBSSxDQUFDSixRQUFRLEVBQUU7UUFDYixNQUFNLElBQUlLLEtBQUssMkNBQTJDO01BQzVEO01BRUEsSUFBSSxPQUFPTCxRQUFRLEtBQUssVUFBVSxFQUFFO1FBQ2xDLE1BQU0sSUFBSUssS0FBSyx5REFBeUQ7TUFDMUU7TUFFQSxJQUFJLE9BQU9KLFVBQVUsS0FBSyxVQUFVLEVBQUU7UUFDcEMsTUFBTSxJQUFJSSxLQUFLLG1FQUFtRTtNQUNwRjtJQUNGO0lBRUEsd0JBSUlQLGVBQWUsRUFBRTtNQUhuQlEsS0FBSyxxQkFBTEEsS0FBSztNQUNMQyxZQUFZLHFCQUFaQSxZQUFZO01BQ1pDLGNBQWMscUJBQWRBLGNBQWM7SUFFaEIsSUFBTUMsYUFBYSxHQUFHbkIsZ0NBQWdDLENBQUNpQixZQUFZLENBQUNHLFlBQVksRUFBRUosS0FBSyxDQUFDSyxRQUFRLEVBQUVILGNBQWMsSUFBSUYsS0FBSyxDQUFDSyxRQUFRLEVBQUVYLFFBQVEsRUFBRUMsVUFBVSxDQUFDO0lBQ3pKLENBQUMsQ0FBQyxFQUFFaEIsTUFBTSxDQUFDMkIsYUFBYSxFQUFFSCxhQUFhLENBQUM7SUFDeEMsT0FBT0EsYUFBYTtFQUN0QixDQUFDO0FBQ0g7QUEwQkEsSUFBTTFCLFdBQVcsR0FBZ0JELGtCQUFrQixFQUFFO0FBQ3JERixPQUFPLENBQUNHLFdBQVcsR0FBR0EsV0FBVyJ9