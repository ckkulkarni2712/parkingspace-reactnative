5fe2e1012f9b2b9250ba2f1c85b0b65f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByPlaceholderTextQueries = void 0;
var _reactNative = require("react-native");
var _findAll = require("../helpers/findAll");
var _matches = require("../matches");
var _config = require("../config");
var _filterNodeByType = require("../helpers/filterNodeByType");
var _hostComponentNames = require("../helpers/host-component-names");
var _makeQueries = require("./makeQueries");
var getTextInputNodeByPlaceholderText = function getTextInputNodeByPlaceholderText(node, placeholder) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  var shouldReturnHostTextInput = (0, _config.getConfig)().useBreakingChanges;
  var textInputType = shouldReturnHostTextInput ? (0, _hostComponentNames.getHostComponentNames)().textInput : _reactNative.TextInput;
  return (0, _filterNodeByType.filterNodeByType)(node, textInputType) && (0, _matches.matches)(placeholder, node.props.placeholder, normalizer, exact);
};
var queryAllByPlaceholderText = function queryAllByPlaceholderText(instance) {
  return function queryAllByPlaceholderFn(placeholder, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return getTextInputNodeByPlaceholderText(node, placeholder, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(placeholder) {
  return "Found multiple elements with placeholder: " + String(placeholder) + " ";
};
var getMissingError = function getMissingError(placeholder) {
  return "Unable to find an element with placeholder: " + String(placeholder);
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByPlaceholderText, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByPlaceholderTextQueries = function bindByPlaceholderTextQueries(instance) {
  return {
    getByPlaceholderText: getBy(instance),
    getAllByPlaceholderText: getAllBy(instance),
    queryByPlaceholderText: queryBy(instance),
    queryAllByPlaceholderText: queryAllBy(instance),
    findByPlaceholderText: findBy(instance),
    findAllByPlaceholderText: findAllBy(instance)
  };
};
exports.bindByPlaceholderTextQueries = bindByPlaceholderTextQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFhQSxJQUFNQSxpQ0FBaUMsR0FBRyxTQUFwQ0EsaUNBQWlDLENBQ3JDQyxJQUF1QixFQUN2QkMsV0FBc0IsRUFFbkI7RUFBQSxJQURIQyxPQUF5Qix1RUFBRyxDQUFDLENBQUM7RUFFOUIsSUFBUUMsS0FBSyxHQUFpQkQsT0FBTyxDQUE3QkMsS0FBSztJQUFFQyxhQUFlRixPQUFPLENBQXRCRTtFQUNmLElBQU1DLHlCQUF5QixHQUFHLHFCQUFTLEdBQUUsQ0FBQ0Msa0JBQWtCO0VBQ2hFLElBQU1DLGFBQWEsR0FBR0YseUJBQXlCLEdBQzNDLDZDQUFxQixHQUFFLENBQUNHLFNBQVMsR0FDakNDLHNCQUFTO0VBRWIsT0FDRSxzQ0FBZ0IsRUFBQ1QsSUFBSSxFQUFFTyxhQUFhLENBQUMsSUFDckMsb0JBQU8sRUFBQ04sV0FBVyxFQUFFRCxJQUFJLENBQUNVLEtBQUssQ0FBQ1QsV0FBVyxFQUFFRyxVQUFVLEVBQUVELEtBQUssQ0FBQztBQUVuRSxDQUFDO0FBRUQsSUFBTVEseUJBQXlCLEdBQzdCQyxTQURJRCx5QkFBeUIsQ0FDN0JDLFFBQTJCO0VBQUEsT0FLM0IsU0FBU0MsdUJBQXVCLENBQUNaLFdBQVcsRUFBRWEsWUFBWSxFQUFFO0lBQzFELE9BQU8sb0JBQU8sRUFDWkYsUUFBUSxFQUNQWixjQUFJO01BQUEsT0FDSEQsaUNBQWlDLENBQUNDLElBQUksRUFBRUMsV0FBVyxFQUFFYSxZQUFZLENBQUM7SUFBQSxHQUNwRUEsWUFBWSxDQUNiO0VBQ0gsQ0FBQztBQUFBO0FBRUgsSUFBTUMsZ0JBQWdCLEdBQUlkLFNBQXBCYyxnQkFBZ0IsQ0FBSWQsV0FBc0I7RUFBQSxzREFDRGUsTUFBTSxDQUFDZixXQUFXLENBQUU7QUFBQSxDQUFFO0FBQ3JFLElBQU1nQixlQUFlLEdBQUloQixTQUFuQmdCLGVBQWUsQ0FBSWhCLFdBQXNCO0VBQUEsd0RBQ0VlLE1BQU0sQ0FBQ2YsV0FBVyxDQUFFO0FBQUEsQ0FBQztBQUV0RSxXQUFvRSw0QkFBVyxFQUM3RVUseUJBQXlCLEVBQ3pCTSxlQUFlLEVBQ2ZGLGdCQUFnQixDQUNqQjtFQUpPRyxLQUFLLFFBQUxBLEtBQUs7RUFBRUMsUUFBUSxRQUFSQSxRQUFRO0VBQUVDLE9BQU8sUUFBUEEsT0FBTztFQUFFQyxVQUFVLFFBQVZBLFVBQVU7RUFBRUMsTUFBTSxRQUFOQSxNQUFNO0VBQUVDO0FBa0IvQyxJQUFNQyw0QkFBNEIsR0FDdkNaLFNBRFdZLDRCQUE0QixDQUN2Q1osUUFBMkI7RUFBQSxPQUNHO0lBQzlCYSxvQkFBb0IsRUFBRVAsS0FBSyxDQUFDTixRQUFRLENBQUM7SUFDckNjLHVCQUF1QixFQUFFUCxRQUFRLENBQUNQLFFBQVEsQ0FBQztJQUMzQ2Usc0JBQXNCLEVBQUVQLE9BQU8sQ0FBQ1IsUUFBUSxDQUFDO0lBQ3pDRCx5QkFBeUIsRUFBRVUsVUFBVSxDQUFDVCxRQUFRLENBQUM7SUFDL0NnQixxQkFBcUIsRUFBRU4sTUFBTSxDQUFDVixRQUFRLENBQUM7SUFDdkNpQix3QkFBd0IsRUFBRU4sU0FBUyxDQUFDWCxRQUFRO0VBQzlDLENBQUM7QUFBQSxDQUFDO0FBQUNrQiIsIm5hbWVzIjpbImdldFRleHRJbnB1dE5vZGVCeVBsYWNlaG9sZGVyVGV4dCIsIm5vZGUiLCJwbGFjZWhvbGRlciIsIm9wdGlvbnMiLCJleGFjdCIsIm5vcm1hbGl6ZXIiLCJzaG91bGRSZXR1cm5Ib3N0VGV4dElucHV0IiwidXNlQnJlYWtpbmdDaGFuZ2VzIiwidGV4dElucHV0VHlwZSIsInRleHRJbnB1dCIsIlRleHRJbnB1dCIsInByb3BzIiwicXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCIsImluc3RhbmNlIiwicXVlcnlBbGxCeVBsYWNlaG9sZGVyRm4iLCJxdWVyeU9wdGlvbnMiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwiZ2V0QnkiLCJnZXRBbGxCeSIsInF1ZXJ5QnkiLCJxdWVyeUFsbEJ5IiwiZmluZEJ5IiwiZmluZEFsbEJ5IiwiYmluZEJ5UGxhY2Vob2xkZXJUZXh0UXVlcmllcyIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQiLCJxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0IiwiZmluZEJ5UGxhY2Vob2xkZXJUZXh0IiwiZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL3BsYWNlaG9sZGVyVGV4dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBUZXh0SW5wdXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgZmluZEFsbCB9IGZyb20gJy4uL2hlbHBlcnMvZmluZEFsbCc7XG5pbXBvcnQgeyBtYXRjaGVzLCBUZXh0TWF0Y2gsIFRleHRNYXRjaE9wdGlvbnMgfSBmcm9tICcuLi9tYXRjaGVzJztcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBmaWx0ZXJOb2RlQnlUeXBlIH0gZnJvbSAnLi4vaGVscGVycy9maWx0ZXJOb2RlQnlUeXBlJztcbmltcG9ydCB7IGdldEhvc3RDb21wb25lbnROYW1lcyB9IGZyb20gJy4uL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMnO1xuaW1wb3J0IHsgbWFrZVF1ZXJpZXMgfSBmcm9tICcuL21ha2VRdWVyaWVzJztcbmltcG9ydCB0eXBlIHtcbiAgRmluZEFsbEJ5UXVlcnksXG4gIEZpbmRCeVF1ZXJ5LFxuICBHZXRBbGxCeVF1ZXJ5LFxuICBHZXRCeVF1ZXJ5LFxuICBRdWVyeUFsbEJ5UXVlcnksXG4gIFF1ZXJ5QnlRdWVyeSxcbn0gZnJvbSAnLi9tYWtlUXVlcmllcyc7XG5pbXBvcnQgdHlwZSB7IENvbW1vblF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbnR5cGUgQnlQbGFjZWhvbGRlclRleHRPcHRpb25zID0gQ29tbW9uUXVlcnlPcHRpb25zICYgVGV4dE1hdGNoT3B0aW9ucztcblxuY29uc3QgZ2V0VGV4dElucHV0Tm9kZUJ5UGxhY2Vob2xkZXJUZXh0ID0gKFxuICBub2RlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbiAgcGxhY2Vob2xkZXI6IFRleHRNYXRjaCxcbiAgb3B0aW9uczogVGV4dE1hdGNoT3B0aW9ucyA9IHt9XG4pID0+IHtcbiAgY29uc3QgeyBleGFjdCwgbm9ybWFsaXplciB9ID0gb3B0aW9ucztcbiAgY29uc3Qgc2hvdWxkUmV0dXJuSG9zdFRleHRJbnB1dCA9IGdldENvbmZpZygpLnVzZUJyZWFraW5nQ2hhbmdlcztcbiAgY29uc3QgdGV4dElucHV0VHlwZSA9IHNob3VsZFJldHVybkhvc3RUZXh0SW5wdXRcbiAgICA/IGdldEhvc3RDb21wb25lbnROYW1lcygpLnRleHRJbnB1dFxuICAgIDogVGV4dElucHV0O1xuXG4gIHJldHVybiAoXG4gICAgZmlsdGVyTm9kZUJ5VHlwZShub2RlLCB0ZXh0SW5wdXRUeXBlKSAmJlxuICAgIG1hdGNoZXMocGxhY2Vob2xkZXIsIG5vZGUucHJvcHMucGxhY2Vob2xkZXIsIG5vcm1hbGl6ZXIsIGV4YWN0KVxuICApO1xufTtcblxuY29uc3QgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IChcbiAgaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlXG4pOiAoKFxuICBwbGFjZWhvbGRlcjogVGV4dE1hdGNoLFxuICBxdWVyeU9wdGlvbnM/OiBCeVBsYWNlaG9sZGVyVGV4dE9wdGlvbnNcbikgPT4gQXJyYXk8UmVhY3RUZXN0SW5zdGFuY2U+KSA9PlxuICBmdW5jdGlvbiBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJGbihwbGFjZWhvbGRlciwgcXVlcnlPcHRpb25zKSB7XG4gICAgcmV0dXJuIGZpbmRBbGwoXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIChub2RlKSA9PlxuICAgICAgICBnZXRUZXh0SW5wdXROb2RlQnlQbGFjZWhvbGRlclRleHQobm9kZSwgcGxhY2Vob2xkZXIsIHF1ZXJ5T3B0aW9ucyksXG4gICAgICBxdWVyeU9wdGlvbnNcbiAgICApO1xuICB9O1xuXG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKHBsYWNlaG9sZGVyOiBUZXh0TWF0Y2gpID0+XG4gIGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHBsYWNlaG9sZGVyOiAke1N0cmluZyhwbGFjZWhvbGRlcil9IGA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAocGxhY2Vob2xkZXI6IFRleHRNYXRjaCkgPT5cbiAgYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCBwbGFjZWhvbGRlcjogJHtTdHJpbmcocGxhY2Vob2xkZXIpfWA7XG5cbmNvbnN0IHsgZ2V0QnksIGdldEFsbEJ5LCBxdWVyeUJ5LCBxdWVyeUFsbEJ5LCBmaW5kQnksIGZpbmRBbGxCeSB9ID0gbWFrZVF1ZXJpZXMoXG4gIHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQsXG4gIGdldE1pc3NpbmdFcnJvcixcbiAgZ2V0TXVsdGlwbGVFcnJvclxuKTtcblxuZXhwb3J0IHR5cGUgQnlQbGFjZWhvbGRlclRleHRRdWVyaWVzID0ge1xuICBnZXRCeVBsYWNlaG9sZGVyVGV4dDogR2V0QnlRdWVyeTxUZXh0TWF0Y2gsIEJ5UGxhY2Vob2xkZXJUZXh0T3B0aW9ucz47XG4gIGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0OiBHZXRBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlQbGFjZWhvbGRlclRleHRPcHRpb25zPjtcbiAgcXVlcnlCeVBsYWNlaG9sZGVyVGV4dDogUXVlcnlCeVF1ZXJ5PFRleHRNYXRjaCwgQnlQbGFjZWhvbGRlclRleHRPcHRpb25zPjtcbiAgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dDogUXVlcnlBbGxCeVF1ZXJ5PFxuICAgIFRleHRNYXRjaCxcbiAgICBCeVBsYWNlaG9sZGVyVGV4dE9wdGlvbnNcbiAgPjtcbiAgZmluZEJ5UGxhY2Vob2xkZXJUZXh0OiBGaW5kQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5UGxhY2Vob2xkZXJUZXh0T3B0aW9ucz47XG4gIGZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dDogRmluZEFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVBsYWNlaG9sZGVyVGV4dE9wdGlvbnM+O1xufTtcblxuZXhwb3J0IGNvbnN0IGJpbmRCeVBsYWNlaG9sZGVyVGV4dFF1ZXJpZXMgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZVxuKTogQnlQbGFjZWhvbGRlclRleHRRdWVyaWVzID0+ICh7XG4gIGdldEJ5UGxhY2Vob2xkZXJUZXh0OiBnZXRCeShpbnN0YW5jZSksXG4gIGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0OiBnZXRBbGxCeShpbnN0YW5jZSksXG4gIHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQ6IHF1ZXJ5QnkoaW5zdGFuY2UpLFxuICBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0OiBxdWVyeUFsbEJ5KGluc3RhbmNlKSxcbiAgZmluZEJ5UGxhY2Vob2xkZXJUZXh0OiBmaW5kQnkoaW5zdGFuY2UpLFxuICBmaW5kQWxsQnlQbGFjZWhvbGRlclRleHQ6IGZpbmRBbGxCeShpbnN0YW5jZSksXG59KTtcbiJdfQ==