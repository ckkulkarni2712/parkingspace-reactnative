{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA,IAAMA,iCAAiC,GAAG,SAApCA,iCAAiC,CACrCC,IAAuB,EACvBC,WAAsB,EAEnB;EAAA,IADHC,OAAyB,uEAAG,CAAC,CAAC;EAE9B,IAAQC,KAAK,GAAiBD,OAAO,CAA7BC,KAAK;IAAEC,aAAeF,OAAO,CAAtBE;EACf,IAAMC,yBAAyB,GAAG,qBAAS,GAAE,CAACC,kBAAkB;EAChE,IAAMC,aAAa,GAAGF,yBAAyB,GAC3C,6CAAqB,GAAE,CAACG,SAAS,GACjCC,sBAAS;EAEb,OACE,sCAAgB,EAACT,IAAI,EAAEO,aAAa,CAAC,IACrC,oBAAO,EAACN,WAAW,EAAED,IAAI,CAACU,KAAK,CAACT,WAAW,EAAEG,UAAU,EAAED,KAAK,CAAC;AAEnE,CAAC;AAED,IAAMQ,yBAAyB,GAC7BC,SADID,yBAAyB,CAC7BC,QAA2B;EAAA,OAK3B,SAASC,uBAAuB,CAACZ,WAAW,EAAEa,YAAY,EAAE;IAC1D,OAAO,oBAAO,EACZF,QAAQ,EACPZ,cAAI;MAAA,OACHD,iCAAiC,CAACC,IAAI,EAAEC,WAAW,EAAEa,YAAY,CAAC;IAAA,GACpEA,YAAY,CACb;EACH,CAAC;AAAA;AAEH,IAAMC,gBAAgB,GAAId,SAApBc,gBAAgB,CAAId,WAAsB;EAAA,sDACDe,MAAM,CAACf,WAAW,CAAE;AAAA,CAAE;AACrE,IAAMgB,eAAe,GAAIhB,SAAnBgB,eAAe,CAAIhB,WAAsB;EAAA,wDACEe,MAAM,CAACf,WAAW,CAAE;AAAA,CAAC;AAEtE,WAAoE,4BAAW,EAC7EU,yBAAyB,EACzBM,eAAe,EACfF,gBAAgB,CACjB;EAJOG,KAAK,QAALA,KAAK;EAAEC,QAAQ,QAARA,QAAQ;EAAEC,OAAO,QAAPA,OAAO;EAAEC,UAAU,QAAVA,UAAU;EAAEC,MAAM,QAANA,MAAM;EAAEC;AAkB/C,IAAMC,4BAA4B,GACvCZ,SADWY,4BAA4B,CACvCZ,QAA2B;EAAA,OACG;IAC9Ba,oBAAoB,EAAEP,KAAK,CAACN,QAAQ,CAAC;IACrCc,uBAAuB,EAAEP,QAAQ,CAACP,QAAQ,CAAC;IAC3Ce,sBAAsB,EAAEP,OAAO,CAACR,QAAQ,CAAC;IACzCD,yBAAyB,EAAEU,UAAU,CAACT,QAAQ,CAAC;IAC/CgB,qBAAqB,EAAEN,MAAM,CAACV,QAAQ,CAAC;IACvCiB,wBAAwB,EAAEN,SAAS,CAACX,QAAQ;EAC9C,CAAC;AAAA,CAAC;AAACkB","names":["getTextInputNodeByPlaceholderText","node","placeholder","options","exact","normalizer","shouldReturnHostTextInput","useBreakingChanges","textInputType","textInput","TextInput","props","queryAllByPlaceholderText","instance","queryAllByPlaceholderFn","queryOptions","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByPlaceholderTextQueries","getByPlaceholderText","getAllByPlaceholderText","queryByPlaceholderText","findByPlaceholderText","findAllByPlaceholderText","exports"],"sources":["../../src/queries/placeholderText.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { TextInput } from 'react-native';\nimport { findAll } from '../helpers/findAll';\nimport { matches, TextMatch, TextMatchOptions } from '../matches';\nimport { getConfig } from '../config';\nimport { filterNodeByType } from '../helpers/filterNodeByType';\nimport { getHostComponentNames } from '../helpers/host-component-names';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport type { CommonQueryOptions } from './options';\n\ntype ByPlaceholderTextOptions = CommonQueryOptions & TextMatchOptions;\n\nconst getTextInputNodeByPlaceholderText = (\n  node: ReactTestInstance,\n  placeholder: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  const { exact, normalizer } = options;\n  const shouldReturnHostTextInput = getConfig().useBreakingChanges;\n  const textInputType = shouldReturnHostTextInput\n    ? getHostComponentNames().textInput\n    : TextInput;\n\n  return (\n    filterNodeByType(node, textInputType) &&\n    matches(placeholder, node.props.placeholder, normalizer, exact)\n  );\n};\n\nconst queryAllByPlaceholderText = (\n  instance: ReactTestInstance\n): ((\n  placeholder: TextMatch,\n  queryOptions?: ByPlaceholderTextOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByPlaceholderFn(placeholder, queryOptions) {\n    return findAll(\n      instance,\n      (node) =>\n        getTextInputNodeByPlaceholderText(node, placeholder, queryOptions),\n      queryOptions\n    );\n  };\n\nconst getMultipleError = (placeholder: TextMatch) =>\n  `Found multiple elements with placeholder: ${String(placeholder)} `;\nconst getMissingError = (placeholder: TextMatch) =>\n  `Unable to find an element with placeholder: ${String(placeholder)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByPlaceholderText,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByPlaceholderTextQueries = {\n  getByPlaceholderText: GetByQuery<TextMatch, ByPlaceholderTextOptions>;\n  getAllByPlaceholderText: GetAllByQuery<TextMatch, ByPlaceholderTextOptions>;\n  queryByPlaceholderText: QueryByQuery<TextMatch, ByPlaceholderTextOptions>;\n  queryAllByPlaceholderText: QueryAllByQuery<\n    TextMatch,\n    ByPlaceholderTextOptions\n  >;\n  findByPlaceholderText: FindByQuery<TextMatch, ByPlaceholderTextOptions>;\n  findAllByPlaceholderText: FindAllByQuery<TextMatch, ByPlaceholderTextOptions>;\n};\n\nexport const bindByPlaceholderTextQueries = (\n  instance: ReactTestInstance\n): ByPlaceholderTextQueries => ({\n  getByPlaceholderText: getBy(instance),\n  getAllByPlaceholderText: getAllBy(instance),\n  queryByPlaceholderText: queryBy(instance),\n  queryAllByPlaceholderText: queryAllBy(instance),\n  findByPlaceholderText: findBy(instance),\n  findAllByPlaceholderText: findAllBy(instance),\n});\n"]}