45ab9c04035b60f748452fd63348e6ad
"use strict";

module.exports = tokenize;
var delimRe = /[\s{}=;:[\],'"()<>]/g,
  stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
  stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
var setCommentRe = /^ *[*/]+ */,
  setCommentAltRe = /^\s*\*?\/*/,
  setCommentSplitRe = /\n/g,
  whitespaceRe = /\s/,
  unescapeRe = /\\(.?)/g;
var unescapeMap = {
  "0": "\0",
  "r": "\r",
  "n": "\n",
  "t": "\t"
};
function unescape(str) {
  return str.replace(unescapeRe, function ($0, $1) {
    switch ($1) {
      case "\\":
      case "":
        return $1;
      default:
        return unescapeMap[$1] || "";
    }
  });
}
tokenize.unescape = unescape;
function tokenize(source, alternateCommentMode) {
  source = source.toString();
  var offset = 0,
    length = source.length,
    line = 1,
    commentType = null,
    commentText = null,
    commentLine = 0,
    commentLineEmpty = false,
    commentIsLeading = false;
  var stack = [];
  var stringDelim = null;
  function illegal(subject) {
    return Error("illegal " + subject + " (line " + line + ")");
  }
  function readString() {
    var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
    re.lastIndex = offset - 1;
    var match = re.exec(source);
    if (!match) throw illegal("string");
    offset = re.lastIndex;
    push(stringDelim);
    stringDelim = null;
    return unescape(match[1]);
  }
  function charAt(pos) {
    return source.charAt(pos);
  }
  function setComment(start, end, isLeading) {
    commentType = source.charAt(start++);
    commentLine = line;
    commentLineEmpty = false;
    commentIsLeading = isLeading;
    var lookback;
    if (alternateCommentMode) {
      lookback = 2;
    } else {
      lookback = 3;
    }
    var commentOffset = start - lookback,
      c;
    do {
      if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
        commentLineEmpty = true;
        break;
      }
    } while (c === " " || c === "\t");
    var lines = source.substring(start, end).split(setCommentSplitRe);
    for (var i = 0; i < lines.length; ++i) lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
    commentText = lines.join("\n").trim();
  }
  function isDoubleSlashCommentLine(startOffset) {
    var endOffset = findEndOfLine(startOffset);
    var lineText = source.substring(startOffset, endOffset);
    var isComment = /^\s*\/{1,2}/.test(lineText);
    return isComment;
  }
  function findEndOfLine(cursor) {
    var endOffset = cursor;
    while (endOffset < length && charAt(endOffset) !== "\n") {
      endOffset++;
    }
    return endOffset;
  }
  function next() {
    if (stack.length > 0) return stack.shift();
    if (stringDelim) return readString();
    var repeat,
      prev,
      curr,
      start,
      isDoc,
      isLeadingComment = offset === 0;
    do {
      if (offset === length) return null;
      repeat = false;
      while (whitespaceRe.test(curr = charAt(offset))) {
        if (curr === "\n") {
          isLeadingComment = true;
          ++line;
        }
        if (++offset === length) return null;
      }
      if (charAt(offset) === "/") {
        if (++offset === length) {
          throw illegal("comment");
        }
        if (charAt(offset) === "/") {
          if (!alternateCommentMode) {
            isDoc = charAt(start = offset + 1) === "/";
            while (charAt(++offset) !== "\n") {
              if (offset === length) {
                return null;
              }
            }
            ++offset;
            if (isDoc) {
              setComment(start, offset - 1, isLeadingComment);
            }
            ++line;
            repeat = true;
          } else {
            start = offset;
            isDoc = false;
            if (isDoubleSlashCommentLine(offset)) {
              isDoc = true;
              do {
                offset = findEndOfLine(offset);
                if (offset === length) {
                  break;
                }
                offset++;
              } while (isDoubleSlashCommentLine(offset));
            } else {
              offset = Math.min(length, findEndOfLine(offset) + 1);
            }
            if (isDoc) {
              setComment(start, offset, isLeadingComment);
            }
            line++;
            repeat = true;
          }
        } else if ((curr = charAt(offset)) === "*") {
          start = offset + 1;
          isDoc = alternateCommentMode || charAt(start) === "*";
          do {
            if (curr === "\n") {
              ++line;
            }
            if (++offset === length) {
              throw illegal("comment");
            }
            prev = curr;
            curr = charAt(offset);
          } while (prev !== "*" || curr !== "/");
          ++offset;
          if (isDoc) {
            setComment(start, offset - 2, isLeadingComment);
          }
          repeat = true;
        } else {
          return "/";
        }
      }
    } while (repeat);
    var end = offset;
    delimRe.lastIndex = 0;
    var delim = delimRe.test(charAt(end++));
    if (!delim) while (end < length && !delimRe.test(charAt(end))) ++end;
    var token = source.substring(offset, offset = end);
    if (token === "\"" || token === "'") stringDelim = token;
    return token;
  }
  function push(token) {
    stack.push(token);
  }
  function peek() {
    if (!stack.length) {
      var token = next();
      if (token === null) return null;
      push(token);
    }
    return stack[0];
  }
  function skip(expected, optional) {
    var actual = peek(),
      equals = actual === expected;
    if (equals) {
      next();
      return true;
    }
    if (!optional) throw illegal("token '" + actual + "', '" + expected + "' expected");
    return false;
  }
  function cmnt(trailingLine) {
    var ret = null;
    if (trailingLine === undefined) {
      if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
        ret = commentIsLeading ? commentText : null;
      }
    } else {
      if (commentLine < trailingLine) {
        peek();
      }
      if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
        ret = commentIsLeading ? null : commentText;
      }
    }
    return ret;
  }
  return Object.defineProperty({
    next: next,
    peek: peek,
    push: push,
    skip: skip,
    cmnt: cmnt
  }, "line", {
    get: function get() {
      return line;
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,