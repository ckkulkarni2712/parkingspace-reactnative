{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA,IAAMA,8BAA8B,GAAG,SAAjCA,8BAA8B,CAClCC,IAAuB,EACvBC,KAAgB,EAEb;EAAA,IADHC,OAAyB,uEAAG,CAAC,CAAC;EAE9B,IAAQC,KAAK,GAAiBD,OAAO,CAA7BC,KAAK;IAAEC,aAAeF,OAAO,CAAtBE;EACf,IAAMC,SAAS,GACbL,IAAI,CAACM,KAAK,CAACL,KAAK,KAAKM,SAAS,GAAGP,IAAI,CAACM,KAAK,CAACL,KAAK,GAAGD,IAAI,CAACM,KAAK,CAACE,YAAY;EAC7E,IAAMC,yBAAyB,GAAG,qBAAS,GAAE,CAACC,kBAAkB;EAChE,IAAMC,aAAa,GAAGF,yBAAyB,GAC3C,6CAAqB,GAAE,CAACG,SAAS,GACjCC,sBAAS;EAEb,OACE,sCAAgB,EAACb,IAAI,EAAEW,aAAa,CAAC,IACrC,oBAAO,EAACV,KAAK,EAAEI,SAAS,EAAED,UAAU,EAAED,KAAK,CAAC;AAEhD,CAAC;AAED,IAAMW,sBAAsB,GAC1BC,SADID,sBAAsB,CAC1BC,QAA2B;EAAA,OAK3B,SAASC,wBAAwB,CAACC,YAAY,EAAEC,YAAY,EAAE;IAC5D,OAAO,oBAAO,EACZH,QAAQ,EACPf,cAAI;MAAA,OACHD,8BAA8B,CAACC,IAAI,EAAEiB,YAAY,EAAEC,YAAY,CAAC;IAAA,GAClEA,YAAY,CACb;EACH,CAAC;AAAA;AAEH,IAAMC,gBAAgB,GAAIF,SAApBE,gBAAgB,CAAIF,YAAuB;EAAA,wDACAG,MAAM,CAACH,YAAY,CAAE;AAAA,CAAE;AACxE,IAAMI,eAAe,GAAIJ,SAAnBI,eAAe,CAAIJ,YAAuB;EAAA,yDACEG,MAAM,CAACH,YAAY,CAAE;AAAA,CAAC;AAExE,WAAoE,4BAAW,EAC7EH,sBAAsB,EACtBO,eAAe,EACfF,gBAAgB,CACjB;EAJOG,KAAK,QAALA,KAAK;EAAEC,QAAQ,QAARA,QAAQ;EAAEC,OAAO,QAAPA,OAAO;EAAEC,UAAU,QAAVA,UAAU;EAAEC,MAAM,QAANA,MAAM;EAAEC;AAe/C,IAAMC,yBAAyB,GACpCb,SADWa,yBAAyB,CACpCb,QAA2B;EAAA,OACA;IAC3Bc,iBAAiB,EAAEP,KAAK,CAACP,QAAQ,CAAC;IAClCe,oBAAoB,EAAEP,QAAQ,CAACR,QAAQ,CAAC;IACxCgB,mBAAmB,EAAEP,OAAO,CAACT,QAAQ,CAAC;IACtCD,sBAAsB,EAAEW,UAAU,CAACV,QAAQ,CAAC;IAC5CiB,kBAAkB,EAAEN,MAAM,CAACX,QAAQ,CAAC;IACpCkB,qBAAqB,EAAEN,SAAS,CAACZ,QAAQ;EAC3C,CAAC;AAAA,CAAC;AAACmB","names":["getTextInputNodeByDisplayValue","node","value","options","exact","normalizer","nodeValue","props","undefined","defaultValue","shouldReturnHostTextInput","useBreakingChanges","textInputType","textInput","TextInput","queryAllByDisplayValue","instance","queryAllByDisplayValueFn","displayValue","queryOptions","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByDisplayValueQueries","getByDisplayValue","getAllByDisplayValue","queryByDisplayValue","findByDisplayValue","findAllByDisplayValue","exports"],"sources":["../../src/queries/displayValue.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { TextInput } from 'react-native';\nimport { filterNodeByType } from '../helpers/filterNodeByType';\nimport { findAll } from '../helpers/findAll';\nimport { matches, TextMatch, TextMatchOptions } from '../matches';\nimport { getConfig } from '../config';\nimport { getHostComponentNames } from '../helpers/host-component-names';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport type { CommonQueryOptions } from './options';\n\ntype ByDisplayValueOptions = CommonQueryOptions & TextMatchOptions;\n\nconst getTextInputNodeByDisplayValue = (\n  node: ReactTestInstance,\n  value: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  const { exact, normalizer } = options;\n  const nodeValue =\n    node.props.value !== undefined ? node.props.value : node.props.defaultValue;\n  const shouldReturnHostTextInput = getConfig().useBreakingChanges;\n  const textInputType = shouldReturnHostTextInput\n    ? getHostComponentNames().textInput\n    : TextInput;\n\n  return (\n    filterNodeByType(node, textInputType) &&\n    matches(value, nodeValue, normalizer, exact)\n  );\n};\n\nconst queryAllByDisplayValue = (\n  instance: ReactTestInstance\n): ((\n  displayValue: TextMatch,\n  queryOptions?: ByDisplayValueOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByDisplayValueFn(displayValue, queryOptions) {\n    return findAll(\n      instance,\n      (node) =>\n        getTextInputNodeByDisplayValue(node, displayValue, queryOptions),\n      queryOptions\n    );\n  };\n\nconst getMultipleError = (displayValue: TextMatch) =>\n  `Found multiple elements with display value: ${String(displayValue)} `;\nconst getMissingError = (displayValue: TextMatch) =>\n  `Unable to find an element with displayValue: ${String(displayValue)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByDisplayValue,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByDisplayValueQueries = {\n  getByDisplayValue: GetByQuery<TextMatch, ByDisplayValueOptions>;\n  getAllByDisplayValue: GetAllByQuery<TextMatch, ByDisplayValueOptions>;\n  queryByDisplayValue: QueryByQuery<TextMatch, ByDisplayValueOptions>;\n  queryAllByDisplayValue: QueryAllByQuery<TextMatch, ByDisplayValueOptions>;\n  findByDisplayValue: FindByQuery<TextMatch, ByDisplayValueOptions>;\n  findAllByDisplayValue: FindAllByQuery<TextMatch, ByDisplayValueOptions>;\n};\n\nexport const bindByDisplayValueQueries = (\n  instance: ReactTestInstance\n): ByDisplayValueQueries => ({\n  getByDisplayValue: getBy(instance),\n  getAllByDisplayValue: getAllBy(instance),\n  queryByDisplayValue: queryBy(instance),\n  queryAllByDisplayValue: queryAllBy(instance),\n  findByDisplayValue: findBy(instance),\n  findAllByDisplayValue: findAllBy(instance),\n});\n"]}