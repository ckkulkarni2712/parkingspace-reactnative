12bf274d2591338f859287643416af9b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByDisplayValueQueries = void 0;
var _reactNative = require("react-native");
var _filterNodeByType = require("../helpers/filterNodeByType");
var _findAll = require("../helpers/findAll");
var _matches = require("../matches");
var _config = require("../config");
var _hostComponentNames = require("../helpers/host-component-names");
var _makeQueries = require("./makeQueries");
var getTextInputNodeByDisplayValue = function getTextInputNodeByDisplayValue(node, value) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  var nodeValue = node.props.value !== undefined ? node.props.value : node.props.defaultValue;
  var shouldReturnHostTextInput = (0, _config.getConfig)().useBreakingChanges;
  var textInputType = shouldReturnHostTextInput ? (0, _hostComponentNames.getHostComponentNames)().textInput : _reactNative.TextInput;
  return (0, _filterNodeByType.filterNodeByType)(node, textInputType) && (0, _matches.matches)(value, nodeValue, normalizer, exact);
};
var queryAllByDisplayValue = function queryAllByDisplayValue(instance) {
  return function queryAllByDisplayValueFn(displayValue, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return getTextInputNodeByDisplayValue(node, displayValue, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(displayValue) {
  return "Found multiple elements with display value: " + String(displayValue) + " ";
};
var getMissingError = function getMissingError(displayValue) {
  return "Unable to find an element with displayValue: " + String(displayValue);
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByDisplayValue, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByDisplayValueQueries = function bindByDisplayValueQueries(instance) {
  return {
    getByDisplayValue: getBy(instance),
    getAllByDisplayValue: getAllBy(instance),
    queryByDisplayValue: queryBy(instance),
    queryAllByDisplayValue: queryAllBy(instance),
    findByDisplayValue: findBy(instance),
    findAllByDisplayValue: findAllBy(instance)
  };
};
exports.bindByDisplayValueQueries = bindByDisplayValueQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFhQSxJQUFNQSw4QkFBOEIsR0FBRyxTQUFqQ0EsOEJBQThCLENBQ2xDQyxJQUF1QixFQUN2QkMsS0FBZ0IsRUFFYjtFQUFBLElBREhDLE9BQXlCLHVFQUFHLENBQUMsQ0FBQztFQUU5QixJQUFRQyxLQUFLLEdBQWlCRCxPQUFPLENBQTdCQyxLQUFLO0lBQUVDLGFBQWVGLE9BQU8sQ0FBdEJFO0VBQ2YsSUFBTUMsU0FBUyxHQUNiTCxJQUFJLENBQUNNLEtBQUssQ0FBQ0wsS0FBSyxLQUFLTSxTQUFTLEdBQUdQLElBQUksQ0FBQ00sS0FBSyxDQUFDTCxLQUFLLEdBQUdELElBQUksQ0FBQ00sS0FBSyxDQUFDRSxZQUFZO0VBQzdFLElBQU1DLHlCQUF5QixHQUFHLHFCQUFTLEdBQUUsQ0FBQ0Msa0JBQWtCO0VBQ2hFLElBQU1DLGFBQWEsR0FBR0YseUJBQXlCLEdBQzNDLDZDQUFxQixHQUFFLENBQUNHLFNBQVMsR0FDakNDLHNCQUFTO0VBRWIsT0FDRSxzQ0FBZ0IsRUFBQ2IsSUFBSSxFQUFFVyxhQUFhLENBQUMsSUFDckMsb0JBQU8sRUFBQ1YsS0FBSyxFQUFFSSxTQUFTLEVBQUVELFVBQVUsRUFBRUQsS0FBSyxDQUFDO0FBRWhELENBQUM7QUFFRCxJQUFNVyxzQkFBc0IsR0FDMUJDLFNBRElELHNCQUFzQixDQUMxQkMsUUFBMkI7RUFBQSxPQUszQixTQUFTQyx3QkFBd0IsQ0FBQ0MsWUFBWSxFQUFFQyxZQUFZLEVBQUU7SUFDNUQsT0FBTyxvQkFBTyxFQUNaSCxRQUFRLEVBQ1BmLGNBQUk7TUFBQSxPQUNIRCw4QkFBOEIsQ0FBQ0MsSUFBSSxFQUFFaUIsWUFBWSxFQUFFQyxZQUFZLENBQUM7SUFBQSxHQUNsRUEsWUFBWSxDQUNiO0VBQ0gsQ0FBQztBQUFBO0FBRUgsSUFBTUMsZ0JBQWdCLEdBQUlGLFNBQXBCRSxnQkFBZ0IsQ0FBSUYsWUFBdUI7RUFBQSx3REFDQUcsTUFBTSxDQUFDSCxZQUFZLENBQUU7QUFBQSxDQUFFO0FBQ3hFLElBQU1JLGVBQWUsR0FBSUosU0FBbkJJLGVBQWUsQ0FBSUosWUFBdUI7RUFBQSx5REFDRUcsTUFBTSxDQUFDSCxZQUFZLENBQUU7QUFBQSxDQUFDO0FBRXhFLFdBQW9FLDRCQUFXLEVBQzdFSCxzQkFBc0IsRUFDdEJPLGVBQWUsRUFDZkYsZ0JBQWdCLENBQ2pCO0VBSk9HLEtBQUssUUFBTEEsS0FBSztFQUFFQyxRQUFRLFFBQVJBLFFBQVE7RUFBRUMsT0FBTyxRQUFQQSxPQUFPO0VBQUVDLFVBQVUsUUFBVkEsVUFBVTtFQUFFQyxNQUFNLFFBQU5BLE1BQU07RUFBRUM7QUFlL0MsSUFBTUMseUJBQXlCLEdBQ3BDYixTQURXYSx5QkFBeUIsQ0FDcENiLFFBQTJCO0VBQUEsT0FDQTtJQUMzQmMsaUJBQWlCLEVBQUVQLEtBQUssQ0FBQ1AsUUFBUSxDQUFDO0lBQ2xDZSxvQkFBb0IsRUFBRVAsUUFBUSxDQUFDUixRQUFRLENBQUM7SUFDeENnQixtQkFBbUIsRUFBRVAsT0FBTyxDQUFDVCxRQUFRLENBQUM7SUFDdENELHNCQUFzQixFQUFFVyxVQUFVLENBQUNWLFFBQVEsQ0FBQztJQUM1Q2lCLGtCQUFrQixFQUFFTixNQUFNLENBQUNYLFFBQVEsQ0FBQztJQUNwQ2tCLHFCQUFxQixFQUFFTixTQUFTLENBQUNaLFFBQVE7RUFDM0MsQ0FBQztBQUFBLENBQUM7QUFBQ21CIiwibmFtZXMiOlsiZ2V0VGV4dElucHV0Tm9kZUJ5RGlzcGxheVZhbHVlIiwibm9kZSIsInZhbHVlIiwib3B0aW9ucyIsImV4YWN0Iiwibm9ybWFsaXplciIsIm5vZGVWYWx1ZSIsInByb3BzIiwidW5kZWZpbmVkIiwiZGVmYXVsdFZhbHVlIiwic2hvdWxkUmV0dXJuSG9zdFRleHRJbnB1dCIsInVzZUJyZWFraW5nQ2hhbmdlcyIsInRleHRJbnB1dFR5cGUiLCJ0ZXh0SW5wdXQiLCJUZXh0SW5wdXQiLCJxdWVyeUFsbEJ5RGlzcGxheVZhbHVlIiwiaW5zdGFuY2UiLCJxdWVyeUFsbEJ5RGlzcGxheVZhbHVlRm4iLCJkaXNwbGF5VmFsdWUiLCJxdWVyeU9wdGlvbnMiLCJnZXRNdWx0aXBsZUVycm9yIiwiU3RyaW5nIiwiZ2V0TWlzc2luZ0Vycm9yIiwiZ2V0QnkiLCJnZXRBbGxCeSIsInF1ZXJ5QnkiLCJxdWVyeUFsbEJ5IiwiZmluZEJ5IiwiZmluZEFsbEJ5IiwiYmluZEJ5RGlzcGxheVZhbHVlUXVlcmllcyIsImdldEJ5RGlzcGxheVZhbHVlIiwiZ2V0QWxsQnlEaXNwbGF5VmFsdWUiLCJxdWVyeUJ5RGlzcGxheVZhbHVlIiwiZmluZEJ5RGlzcGxheVZhbHVlIiwiZmluZEFsbEJ5RGlzcGxheVZhbHVlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL2Rpc3BsYXlWYWx1ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlYWN0VGVzdEluc3RhbmNlIH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBUZXh0SW5wdXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgZmlsdGVyTm9kZUJ5VHlwZSB9IGZyb20gJy4uL2hlbHBlcnMvZmlsdGVyTm9kZUJ5VHlwZSc7XG5pbXBvcnQgeyBmaW5kQWxsIH0gZnJvbSAnLi4vaGVscGVycy9maW5kQWxsJztcbmltcG9ydCB7IG1hdGNoZXMsIFRleHRNYXRjaCwgVGV4dE1hdGNoT3B0aW9ucyB9IGZyb20gJy4uL21hdGNoZXMnO1xuaW1wb3J0IHsgZ2V0Q29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IGdldEhvc3RDb21wb25lbnROYW1lcyB9IGZyb20gJy4uL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMnO1xuaW1wb3J0IHsgbWFrZVF1ZXJpZXMgfSBmcm9tICcuL21ha2VRdWVyaWVzJztcbmltcG9ydCB0eXBlIHtcbiAgRmluZEFsbEJ5UXVlcnksXG4gIEZpbmRCeVF1ZXJ5LFxuICBHZXRBbGxCeVF1ZXJ5LFxuICBHZXRCeVF1ZXJ5LFxuICBRdWVyeUFsbEJ5UXVlcnksXG4gIFF1ZXJ5QnlRdWVyeSxcbn0gZnJvbSAnLi9tYWtlUXVlcmllcyc7XG5pbXBvcnQgdHlwZSB7IENvbW1vblF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbnR5cGUgQnlEaXNwbGF5VmFsdWVPcHRpb25zID0gQ29tbW9uUXVlcnlPcHRpb25zICYgVGV4dE1hdGNoT3B0aW9ucztcblxuY29uc3QgZ2V0VGV4dElucHV0Tm9kZUJ5RGlzcGxheVZhbHVlID0gKFxuICBub2RlOiBSZWFjdFRlc3RJbnN0YW5jZSxcbiAgdmFsdWU6IFRleHRNYXRjaCxcbiAgb3B0aW9uczogVGV4dE1hdGNoT3B0aW9ucyA9IHt9XG4pID0+IHtcbiAgY29uc3QgeyBleGFjdCwgbm9ybWFsaXplciB9ID0gb3B0aW9ucztcbiAgY29uc3Qgbm9kZVZhbHVlID1cbiAgICBub2RlLnByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgPyBub2RlLnByb3BzLnZhbHVlIDogbm9kZS5wcm9wcy5kZWZhdWx0VmFsdWU7XG4gIGNvbnN0IHNob3VsZFJldHVybkhvc3RUZXh0SW5wdXQgPSBnZXRDb25maWcoKS51c2VCcmVha2luZ0NoYW5nZXM7XG4gIGNvbnN0IHRleHRJbnB1dFR5cGUgPSBzaG91bGRSZXR1cm5Ib3N0VGV4dElucHV0XG4gICAgPyBnZXRIb3N0Q29tcG9uZW50TmFtZXMoKS50ZXh0SW5wdXRcbiAgICA6IFRleHRJbnB1dDtcblxuICByZXR1cm4gKFxuICAgIGZpbHRlck5vZGVCeVR5cGUobm9kZSwgdGV4dElucHV0VHlwZSkgJiZcbiAgICBtYXRjaGVzKHZhbHVlLCBub2RlVmFsdWUsIG5vcm1hbGl6ZXIsIGV4YWN0KVxuICApO1xufTtcblxuY29uc3QgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IChcbiAgaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlXG4pOiAoKFxuICBkaXNwbGF5VmFsdWU6IFRleHRNYXRjaCxcbiAgcXVlcnlPcHRpb25zPzogQnlEaXNwbGF5VmFsdWVPcHRpb25zXG4pID0+IEFycmF5PFJlYWN0VGVzdEluc3RhbmNlPikgPT5cbiAgZnVuY3Rpb24gcXVlcnlBbGxCeURpc3BsYXlWYWx1ZUZuKGRpc3BsYXlWYWx1ZSwgcXVlcnlPcHRpb25zKSB7XG4gICAgcmV0dXJuIGZpbmRBbGwoXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIChub2RlKSA9PlxuICAgICAgICBnZXRUZXh0SW5wdXROb2RlQnlEaXNwbGF5VmFsdWUobm9kZSwgZGlzcGxheVZhbHVlLCBxdWVyeU9wdGlvbnMpLFxuICAgICAgcXVlcnlPcHRpb25zXG4gICAgKTtcbiAgfTtcblxuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChkaXNwbGF5VmFsdWU6IFRleHRNYXRjaCkgPT5cbiAgYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggZGlzcGxheSB2YWx1ZTogJHtTdHJpbmcoZGlzcGxheVZhbHVlKX0gYDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChkaXNwbGF5VmFsdWU6IFRleHRNYXRjaCkgPT5cbiAgYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCBkaXNwbGF5VmFsdWU6ICR7U3RyaW5nKGRpc3BsYXlWYWx1ZSl9YDtcblxuY29uc3QgeyBnZXRCeSwgZ2V0QWxsQnksIHF1ZXJ5QnksIHF1ZXJ5QWxsQnksIGZpbmRCeSwgZmluZEFsbEJ5IH0gPSBtYWtlUXVlcmllcyhcbiAgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZSxcbiAgZ2V0TWlzc2luZ0Vycm9yLFxuICBnZXRNdWx0aXBsZUVycm9yXG4pO1xuXG5leHBvcnQgdHlwZSBCeURpc3BsYXlWYWx1ZVF1ZXJpZXMgPSB7XG4gIGdldEJ5RGlzcGxheVZhbHVlOiBHZXRCeVF1ZXJ5PFRleHRNYXRjaCwgQnlEaXNwbGF5VmFsdWVPcHRpb25zPjtcbiAgZ2V0QWxsQnlEaXNwbGF5VmFsdWU6IEdldEFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeURpc3BsYXlWYWx1ZU9wdGlvbnM+O1xuICBxdWVyeUJ5RGlzcGxheVZhbHVlOiBRdWVyeUJ5UXVlcnk8VGV4dE1hdGNoLCBCeURpc3BsYXlWYWx1ZU9wdGlvbnM+O1xuICBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlOiBRdWVyeUFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeURpc3BsYXlWYWx1ZU9wdGlvbnM+O1xuICBmaW5kQnlEaXNwbGF5VmFsdWU6IEZpbmRCeVF1ZXJ5PFRleHRNYXRjaCwgQnlEaXNwbGF5VmFsdWVPcHRpb25zPjtcbiAgZmluZEFsbEJ5RGlzcGxheVZhbHVlOiBGaW5kQWxsQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5RGlzcGxheVZhbHVlT3B0aW9ucz47XG59O1xuXG5leHBvcnQgY29uc3QgYmluZEJ5RGlzcGxheVZhbHVlUXVlcmllcyA9IChcbiAgaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlXG4pOiBCeURpc3BsYXlWYWx1ZVF1ZXJpZXMgPT4gKHtcbiAgZ2V0QnlEaXNwbGF5VmFsdWU6IGdldEJ5KGluc3RhbmNlKSxcbiAgZ2V0QWxsQnlEaXNwbGF5VmFsdWU6IGdldEFsbEJ5KGluc3RhbmNlKSxcbiAgcXVlcnlCeURpc3BsYXlWYWx1ZTogcXVlcnlCeShpbnN0YW5jZSksXG4gIHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWU6IHF1ZXJ5QWxsQnkoaW5zdGFuY2UpLFxuICBmaW5kQnlEaXNwbGF5VmFsdWU6IGZpbmRCeShpbnN0YW5jZSksXG4gIGZpbmRBbGxCeURpc3BsYXlWYWx1ZTogZmluZEFsbEJ5KGluc3RhbmNlKSxcbn0pO1xuIl19