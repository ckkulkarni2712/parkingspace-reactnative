3e1fdbd29ca75d267583c72a95b5d3b3
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _wrapNativeSuper2 = _interopRequireDefault2(require("@babel/runtime/helpers/wrapNativeSuper"));
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault2(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault2(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, '__esModule', {
  value: true
});
Object.defineProperty(exports, 'CallbackTestRunner', {
  enumerable: true,
  get: function get() {
    return _types.CallbackTestRunner;
  }
});
Object.defineProperty(exports, 'EmittingTestRunner', {
  enumerable: true,
  get: function get() {
    return _types.EmittingTestRunner;
  }
});
exports.default = void 0;
function _chalk() {
  var data = _interopRequireDefault(require('chalk'));
  _chalk = function _chalk() {
    return data;
  };
  return data;
}
function _emittery() {
  var data = _interopRequireDefault(require('emittery'));
  _emittery = function _emittery() {
    return data;
  };
  return data;
}
function _pLimit() {
  var data = _interopRequireDefault(require('p-limit'));
  _pLimit = function _pLimit() {
    return data;
  };
  return data;
}
function _jestUtil() {
  var data = require('jest-util');
  _jestUtil = function _jestUtil() {
    return data;
  };
  return data;
}
function _jestWorker() {
  var data = require('jest-worker');
  _jestWorker = function _jestWorker() {
    return data;
  };
  return data;
}
var _runTest = _interopRequireDefault(require('./runTest'));
var _types = require('./types');
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var _eventEmitter = (0, _classPrivateFieldLooseKey2.default)("eventEmitter");
var _createInBandTestRun = (0, _classPrivateFieldLooseKey2.default)("createInBandTestRun");
var _createParallelTestRun = (0, _classPrivateFieldLooseKey2.default)("createParallelTestRun");
var TestRunner = function (_types$EmittingTestRu) {
  (0, _inherits2.default)(TestRunner, _types$EmittingTestRu);
  var _super = _createSuper(TestRunner);
  function TestRunner() {
    var _this;
    (0, _classCallCheck2.default)(this, TestRunner);
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(_args));
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), _createParallelTestRun, {
      value: _createParallelTestRun2
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), _createInBandTestRun, {
      value: _createInBandTestRun2
    });
    Object.defineProperty((0, _assertThisInitialized2.default)(_this), _eventEmitter, {
      writable: true,
      value: new (_emittery().default)()
    });
    return _this;
  }
  (0, _createClass2.default)(TestRunner, [{
    key: "runTests",
    value: function () {
      var _runTests = (0, _asyncToGenerator2.default)(function* (tests, watcher, options) {
        return options.serial ? (0, _classPrivateFieldLooseBase2.default)(this, _createInBandTestRun)[_createInBandTestRun](tests, watcher) : (0, _classPrivateFieldLooseBase2.default)(this, _createParallelTestRun)[_createParallelTestRun](tests, watcher);
      });
      function runTests(_x, _x2, _x3) {
        return _runTests.apply(this, arguments);
      }
      return runTests;
    }()
  }, {
    key: "on",
    value: function on(eventName, listener) {
      return (0, _classPrivateFieldLooseBase2.default)(this, _eventEmitter)[_eventEmitter].on(eventName, listener);
    }
  }]);
  return TestRunner;
}(_types.EmittingTestRunner);
function _createInBandTestRun2(_x4, _x5) {
  return _createInBandTestRun3.apply(this, arguments);
}
function _createInBandTestRun3() {
  _createInBandTestRun3 = (0, _asyncToGenerator2.default)(function* (tests, watcher) {
    var _this3 = this;
    process.env.JEST_WORKER_ID = '1';
    var mutex = (0, _pLimit().default)(1);
    return tests.reduce(function (promise, test) {
      return mutex(function () {
        return promise.then((0, _asyncToGenerator2.default)(function* () {
          if (watcher.isInterrupted()) {
            throw new CancelRun();
          }
          var sendMessageToJest = function sendMessageToJest(eventName, args) {
            return (0, _classPrivateFieldLooseBase2.default)(_this3, _eventEmitter)[_eventEmitter].emit(eventName, (0, _jestUtil().deepCyclicCopy)(args, {
              keepPrototype: false
            }));
          };
          yield (0, _classPrivateFieldLooseBase2.default)(_this3, _eventEmitter)[_eventEmitter].emit('test-file-start', [test]);
          return (0, _runTest.default)(test.path, _this3._globalConfig, test.context.config, test.context.resolver, _this3._context, sendMessageToJest);
        })).then(function (result) {
          return (0, _classPrivateFieldLooseBase2.default)(_this3, _eventEmitter)[_eventEmitter].emit('test-file-success', [test, result]);
        }, function (error) {
          return (0, _classPrivateFieldLooseBase2.default)(_this3, _eventEmitter)[_eventEmitter].emit('test-file-failure', [test, error]);
        });
      });
    }, Promise.resolve());
  });
  return _createInBandTestRun3.apply(this, arguments);
}
function _createParallelTestRun2(_x6, _x7) {
  return _createParallelTestRun3.apply(this, arguments);
}
function _createParallelTestRun3() {
  _createParallelTestRun3 = (0, _asyncToGenerator2.default)(function* (tests, watcher) {
    var _this4 = this;
    var resolvers = new Map();
    for (var test of tests) {
      if (!resolvers.has(test.context.config.id)) {
        resolvers.set(test.context.config.id, {
          config: test.context.config,
          serializableModuleMap: test.context.moduleMap.toJSON()
        });
      }
    }
    var worker = new (_jestWorker().Worker)(require.resolve('./testWorker'), {
      exposedMethods: ['worker'],
      forkOptions: {
        serialization: 'json',
        stdio: 'pipe'
      },
      idleMemoryLimit: typeof this._globalConfig.workerIdleMemoryLimit === 'number' ? this._globalConfig.workerIdleMemoryLimit : undefined,
      maxRetries: 3,
      numWorkers: this._globalConfig.maxWorkers,
      setupArgs: [{
        serializableResolvers: Array.from(resolvers.values())
      }]
    });
    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);
    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);
    var mutex = (0, _pLimit().default)(this._globalConfig.maxWorkers);
    var runTestInWorker = function runTestInWorker(test) {
      return mutex((0, _asyncToGenerator2.default)(function* () {
        if (watcher.isInterrupted()) {
          return Promise.reject();
        }
        yield (0, _classPrivateFieldLooseBase2.default)(_this4, _eventEmitter)[_eventEmitter].emit('test-file-start', [test]);
        var promise = worker.worker({
          config: test.context.config,
          context: Object.assign({}, _this4._context, {
            changedFiles: _this4._context.changedFiles && Array.from(_this4._context.changedFiles),
            sourcesRelatedToTestsInChangedFiles: _this4._context.sourcesRelatedToTestsInChangedFiles && Array.from(_this4._context.sourcesRelatedToTestsInChangedFiles)
          }),
          globalConfig: _this4._globalConfig,
          path: test.path
        });
        if (promise.UNSTABLE_onCustomMessage) {
          promise.UNSTABLE_onCustomMessage(function (_ref3) {
            var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
              event = _ref4[0],
              payload = _ref4[1];
            return (0, _classPrivateFieldLooseBase2.default)(_this4, _eventEmitter)[_eventEmitter].emit(event, payload);
          });
        }
        return promise;
      }));
    };
    var onInterrupt = new Promise(function (_, reject) {
      watcher.on('change', function (state) {
        if (state.interrupted) {
          reject(new CancelRun());
        }
      });
    });
    var runAllTests = Promise.all(tests.map(function (test) {
      return runTestInWorker(test).then(function (result) {
        return (0, _classPrivateFieldLooseBase2.default)(_this4, _eventEmitter)[_eventEmitter].emit('test-file-success', [test, result]);
      }, function (error) {
        return (0, _classPrivateFieldLooseBase2.default)(_this4, _eventEmitter)[_eventEmitter].emit('test-file-failure', [test, error]);
      });
    }));
    var cleanup = function () {
      var _ref5 = (0, _asyncToGenerator2.default)(function* () {
        var _yield$worker$end = yield worker.end(),
          forceExited = _yield$worker$end.forceExited;
        if (forceExited) {
          console.error(_chalk().default.yellow('A worker process has failed to exit gracefully and has been force exited. ' + 'This is likely caused by tests leaking due to improper teardown. ' + 'Try running with --detectOpenHandles to find leaks. ' + 'Active timers can also cause this, ensure that .unref() was called on them.'));
        }
      });
      return function cleanup() {
        return _ref5.apply(this, arguments);
      };
    }();
    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);
  });
  return _createParallelTestRun3.apply(this, arguments);
}
exports.default = TestRunner;
var CancelRun = function (_Error) {
  (0, _inherits2.default)(CancelRun, _Error);
  var _super2 = _createSuper(CancelRun);
  function CancelRun(message) {
    var _this2;
    (0, _classCallCheck2.default)(this, CancelRun);
    _this2 = _super2.call(this, message);
    _this2.name = 'CancelRun';
    return _this2;
  }
  return (0, _createClass2.default)(CancelRun);
}((0, _wrapNativeSuper2.default)(Error));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,