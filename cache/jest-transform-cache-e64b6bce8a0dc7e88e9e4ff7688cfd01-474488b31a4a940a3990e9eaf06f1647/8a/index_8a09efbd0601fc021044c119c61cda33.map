{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","_types","CallbackTestRunner","EmittingTestRunner","default","_chalk","data","_interopRequireDefault","require","_emittery","_pLimit","_jestUtil","_jestWorker","_runTest","obj","__esModule","TestRunner","tests","watcher","options","serial","eventName","listener","on","process","env","JEST_WORKER_ID","mutex","reduce","promise","test","then","isInterrupted","CancelRun","sendMessageToJest","args","emit","deepCyclicCopy","keepPrototype","path","_globalConfig","context","config","resolver","_context","result","error","Promise","resolve","resolvers","Map","has","id","set","serializableModuleMap","moduleMap","toJSON","worker","Worker","exposedMethods","forkOptions","serialization","stdio","idleMemoryLimit","workerIdleMemoryLimit","undefined","maxRetries","numWorkers","maxWorkers","setupArgs","serializableResolvers","Array","from","values","getStdout","pipe","stdout","getStderr","stderr","runTestInWorker","reject","changedFiles","sourcesRelatedToTestsInChangedFiles","globalConfig","UNSTABLE_onCustomMessage","event","payload","onInterrupt","_","state","interrupted","runAllTests","all","map","cleanup","end","forceExited","console","yellow","race","message","name","Error"],"sources":["index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'CallbackTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.CallbackTestRunner;\n  }\n});\nObject.defineProperty(exports, 'EmittingTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.EmittingTestRunner;\n  }\n});\nexports.default = void 0;\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _emittery() {\n  const data = _interopRequireDefault(require('emittery'));\n  _emittery = function () {\n    return data;\n  };\n  return data;\n}\nfunction _pLimit() {\n  const data = _interopRequireDefault(require('p-limit'));\n  _pLimit = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestUtil() {\n  const data = require('jest-util');\n  _jestUtil = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestWorker() {\n  const data = require('jest-worker');\n  _jestWorker = function () {\n    return data;\n  };\n  return data;\n}\nvar _runTest = _interopRequireDefault(require('./runTest'));\nvar _types = require('./types');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass TestRunner extends _types.EmittingTestRunner {\n  #eventEmitter = new (_emittery().default)();\n  async runTests(tests, watcher, options) {\n    return options.serial\n      ? this.#createInBandTestRun(tests, watcher)\n      : this.#createParallelTestRun(tests, watcher);\n  }\n  async #createInBandTestRun(tests, watcher) {\n    process.env.JEST_WORKER_ID = '1';\n    const mutex = (0, _pLimit().default)(1);\n    return tests.reduce(\n      (promise, test) =>\n        mutex(() =>\n          promise\n            .then(async () => {\n              if (watcher.isInterrupted()) {\n                throw new CancelRun();\n              }\n\n              // `deepCyclicCopy` used here to avoid mem-leak\n              const sendMessageToJest = (eventName, args) =>\n                this.#eventEmitter.emit(\n                  eventName,\n                  (0, _jestUtil().deepCyclicCopy)(args, {\n                    keepPrototype: false\n                  })\n                );\n              await this.#eventEmitter.emit('test-file-start', [test]);\n              return (0, _runTest.default)(\n                test.path,\n                this._globalConfig,\n                test.context.config,\n                test.context.resolver,\n                this._context,\n                sendMessageToJest\n              );\n            })\n            .then(\n              result =>\n                this.#eventEmitter.emit('test-file-success', [test, result]),\n              error =>\n                this.#eventEmitter.emit('test-file-failure', [test, error])\n            )\n        ),\n      Promise.resolve()\n    );\n  }\n  async #createParallelTestRun(tests, watcher) {\n    const resolvers = new Map();\n    for (const test of tests) {\n      if (!resolvers.has(test.context.config.id)) {\n        resolvers.set(test.context.config.id, {\n          config: test.context.config,\n          serializableModuleMap: test.context.moduleMap.toJSON()\n        });\n      }\n    }\n    const worker = new (_jestWorker().Worker)(require.resolve('./testWorker'), {\n      exposedMethods: ['worker'],\n      forkOptions: {\n        serialization: 'json',\n        stdio: 'pipe'\n      },\n      // The workerIdleMemoryLimit should've been converted to a number during\n      // the normalization phase.\n      idleMemoryLimit:\n        typeof this._globalConfig.workerIdleMemoryLimit === 'number'\n          ? this._globalConfig.workerIdleMemoryLimit\n          : undefined,\n      maxRetries: 3,\n      numWorkers: this._globalConfig.maxWorkers,\n      setupArgs: [\n        {\n          serializableResolvers: Array.from(resolvers.values())\n        }\n      ]\n    });\n    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n    const mutex = (0, _pLimit().default)(this._globalConfig.maxWorkers);\n\n    // Send test suites to workers continuously instead of all at once to track\n    // the start time of individual tests.\n    const runTestInWorker = test =>\n      mutex(async () => {\n        if (watcher.isInterrupted()) {\n          return Promise.reject();\n        }\n        await this.#eventEmitter.emit('test-file-start', [test]);\n        const promise = worker.worker({\n          config: test.context.config,\n          context: {\n            ...this._context,\n            changedFiles:\n              this._context.changedFiles &&\n              Array.from(this._context.changedFiles),\n            sourcesRelatedToTestsInChangedFiles:\n              this._context.sourcesRelatedToTestsInChangedFiles &&\n              Array.from(this._context.sourcesRelatedToTestsInChangedFiles)\n          },\n          globalConfig: this._globalConfig,\n          path: test.path\n        });\n        if (promise.UNSTABLE_onCustomMessage) {\n          // TODO: Get appropriate type for `onCustomMessage`\n          promise.UNSTABLE_onCustomMessage(([event, payload]) =>\n            this.#eventEmitter.emit(event, payload)\n          );\n        }\n        return promise;\n      });\n    const onInterrupt = new Promise((_, reject) => {\n      watcher.on('change', state => {\n        if (state.interrupted) {\n          reject(new CancelRun());\n        }\n      });\n    });\n    const runAllTests = Promise.all(\n      tests.map(test =>\n        runTestInWorker(test).then(\n          result =>\n            this.#eventEmitter.emit('test-file-success', [test, result]),\n          error => this.#eventEmitter.emit('test-file-failure', [test, error])\n        )\n      )\n    );\n    const cleanup = async () => {\n      const {forceExited} = await worker.end();\n      if (forceExited) {\n        console.error(\n          _chalk().default.yellow(\n            'A worker process has failed to exit gracefully and has been force exited. ' +\n              'This is likely caused by tests leaking due to improper teardown. ' +\n              'Try running with --detectOpenHandles to find leaks. ' +\n              'Active timers can also cause this, ensure that .unref() was called on them.'\n          )\n        );\n      }\n    };\n    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n  }\n  on(eventName, listener) {\n    return this.#eventEmitter.on(eventName, listener);\n  }\n}\nexports.default = TestRunner;\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,oBAAoB,EAAE;EACnDE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,eAAY;IACf,OAAOC,MAAM,CAACC,kBAAkB;EAClC;AACF,CAAC,CAAC;AACFP,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,oBAAoB,EAAE;EACnDE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,eAAY;IACf,OAAOC,MAAM,CAACE,kBAAkB;EAClC;AACF,CAAC,CAAC;AACFN,OAAO,CAACO,OAAO,GAAG,KAAK,CAAC;AACxB,SAASC,MAAM,GAAG;EAChB,IAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACrDH,MAAM,GAAG,kBAAY;IACnB,OAAOC,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASG,SAAS,GAAG;EACnB,IAAMH,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;EACxDC,SAAS,GAAG,qBAAY;IACtB,OAAOH,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASI,OAAO,GAAG;EACjB,IAAMJ,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;EACvDE,OAAO,GAAG,mBAAY;IACpB,OAAOJ,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASK,SAAS,GAAG;EACnB,IAAML,IAAI,GAAGE,OAAO,CAAC,WAAW,CAAC;EACjCG,SAAS,GAAG,qBAAY;IACtB,OAAOL,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASM,WAAW,GAAG;EACrB,IAAMN,IAAI,GAAGE,OAAO,CAAC,aAAa,CAAC;EACnCI,WAAW,GAAG,uBAAY;IACxB,OAAON,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,IAAIO,QAAQ,GAAGN,sBAAsB,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;AAC3D,IAAIP,MAAM,GAAGO,OAAO,CAAC,SAAS,CAAC;AAC/B,SAASD,sBAAsB,CAACO,GAAG,EAAE;EACnC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAACV,OAAO,EAAEU;EAAG,CAAC;AACrD;AAAC;AAAA;AAAA;AAAA,IAQKE,UAAU;EAAA;EAAA;EAAA;IAAA;IAAA;IAAA;MAAA;IAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA,OACE,KAAKP,SAAS,EAAE,CAACL,OAAO;IAAG;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA,gDAC3C,WAAea,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAE;QACtC,OAAOA,OAAO,CAACC,MAAM,6CACjB,IAAI,8CAAsBH,KAAK,EAAEC,OAAO,8CACxC,IAAI,kDAAwBD,KAAK,EAAEC,OAAO,CAAC;MACjD,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAwID,YAAGG,SAAS,EAAEC,QAAQ,EAAE;MACtB,OAAO,8CAAI,gCAAeC,EAAE,CAACF,SAAS,EAAEC,QAAQ,CAAC;IACnD;EAAC;EAAA;AAAA,EAhJsBrB,MAAM,CAACE,kBAAkB;AAAA;EAAA;AAAA;AAAA;EAAA,mEAOrBc,KAAK,EAAEC,OAAO,EAAE;IAAA;IACzCM,OAAO,CAACC,GAAG,CAACC,cAAc,GAAG,GAAG;IAChC,IAAMC,KAAK,GAAG,CAAC,CAAC,EAAEjB,OAAO,EAAE,CAACN,OAAO,EAAE,CAAC,CAAC;IACvC,OAAOa,KAAK,CAACW,MAAM,CACjB,UAACC,OAAO,EAAEC,IAAI;MAAA,OACZH,KAAK,CAAC;QAAA,OACJE,OAAO,CACJE,IAAI,iCAAC,aAAY;UAChB,IAAIb,OAAO,CAACc,aAAa,EAAE,EAAE;YAC3B,MAAM,IAAIC,SAAS,EAAE;UACvB;UAGA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIb,SAAS,EAAEc,IAAI;YAAA,OACxC,gDAAI,gCAAeC,IAAI,CACrBf,SAAS,EACT,CAAC,CAAC,EAAEV,SAAS,EAAE,CAAC0B,cAAc,EAAEF,IAAI,EAAE;cACpCG,aAAa,EAAE;YACjB,CAAC,CAAC,CACH;UAAA;UACH,MAAM,gDAAI,gCAAeF,IAAI,CAAC,iBAAiB,EAAE,CAACN,IAAI,CAAC,CAAC;UACxD,OAAO,CAAC,CAAC,EAAEjB,QAAQ,CAACT,OAAO,EACzB0B,IAAI,CAACS,IAAI,EACT,MAAI,CAACC,aAAa,EAClBV,IAAI,CAACW,OAAO,CAACC,MAAM,EACnBZ,IAAI,CAACW,OAAO,CAACE,QAAQ,EACrB,MAAI,CAACC,QAAQ,EACbV,iBAAiB,CAClB;QACH,CAAC,EAAC,CACDH,IAAI,CACH,UAAAc,MAAM;UAAA,OACJ,gDAAI,gCAAeT,IAAI,CAAC,mBAAmB,EAAE,CAACN,IAAI,EAAEe,MAAM,CAAC,CAAC;QAAA,GAC9D,UAAAC,KAAK;UAAA,OACH,gDAAI,gCAAeV,IAAI,CAAC,mBAAmB,EAAE,CAACN,IAAI,EAAEgB,KAAK,CAAC,CAAC;QAAA,EAC9D;MAAA,EACJ;IAAA,GACHC,OAAO,CAACC,OAAO,EAAE,CAClB;EACH,CAAC;EAAA;AAAA;AAAA;EAAA;AAAA;AAAA;EAAA,qEAC4B/B,KAAK,EAAEC,OAAO,EAAE;IAAA;IAC3C,IAAM+B,SAAS,GAAG,IAAIC,GAAG,EAAE;IAC3B,KAAK,IAAMpB,IAAI,IAAIb,KAAK,EAAE;MACxB,IAAI,CAACgC,SAAS,CAACE,GAAG,CAACrB,IAAI,CAACW,OAAO,CAACC,MAAM,CAACU,EAAE,CAAC,EAAE;QAC1CH,SAAS,CAACI,GAAG,CAACvB,IAAI,CAACW,OAAO,CAACC,MAAM,CAACU,EAAE,EAAE;UACpCV,MAAM,EAAEZ,IAAI,CAACW,OAAO,CAACC,MAAM;UAC3BY,qBAAqB,EAAExB,IAAI,CAACW,OAAO,CAACc,SAAS,CAACC,MAAM;QACtD,CAAC,CAAC;MACJ;IACF;IACA,IAAMC,MAAM,GAAG,KAAK7C,WAAW,EAAE,CAAC8C,MAAM,EAAElD,OAAO,CAACwC,OAAO,CAAC,cAAc,CAAC,EAAE;MACzEW,cAAc,EAAE,CAAC,QAAQ,CAAC;MAC1BC,WAAW,EAAE;QACXC,aAAa,EAAE,MAAM;QACrBC,KAAK,EAAE;MACT,CAAC;MAGDC,eAAe,EACb,OAAO,IAAI,CAACvB,aAAa,CAACwB,qBAAqB,KAAK,QAAQ,GACxD,IAAI,CAACxB,aAAa,CAACwB,qBAAqB,GACxCC,SAAS;MACfC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,IAAI,CAAC3B,aAAa,CAAC4B,UAAU;MACzCC,SAAS,EAAE,CACT;QACEC,qBAAqB,EAAEC,KAAK,CAACC,IAAI,CAACvB,SAAS,CAACwB,MAAM,EAAE;MACtD,CAAC;IAEL,CAAC,CAAC;IACF,IAAIhB,MAAM,CAACiB,SAAS,EAAE,EAAEjB,MAAM,CAACiB,SAAS,EAAE,CAACC,IAAI,CAACnD,OAAO,CAACoD,MAAM,CAAC;IAC/D,IAAInB,MAAM,CAACoB,SAAS,EAAE,EAAEpB,MAAM,CAACoB,SAAS,EAAE,CAACF,IAAI,CAACnD,OAAO,CAACsD,MAAM,CAAC;IAC/D,IAAMnD,KAAK,GAAG,CAAC,CAAC,EAAEjB,OAAO,EAAE,CAACN,OAAO,EAAE,IAAI,CAACoC,aAAa,CAAC4B,UAAU,CAAC;IAInE,IAAMW,eAAe,GAAG,SAAlBA,eAAe,CAAGjD,IAAI;MAAA,OAC1BH,KAAK,iCAAC,aAAY;QAChB,IAAIT,OAAO,CAACc,aAAa,EAAE,EAAE;UAC3B,OAAOe,OAAO,CAACiC,MAAM,EAAE;QACzB;QACA,MAAM,gDAAI,gCAAe5C,IAAI,CAAC,iBAAiB,EAAE,CAACN,IAAI,CAAC,CAAC;QACxD,IAAMD,OAAO,GAAG4B,MAAM,CAACA,MAAM,CAAC;UAC5Bf,MAAM,EAAEZ,IAAI,CAACW,OAAO,CAACC,MAAM;UAC3BD,OAAO,oBACF,MAAI,CAACG,QAAQ;YAChBqC,YAAY,EACV,MAAI,CAACrC,QAAQ,CAACqC,YAAY,IAC1BV,KAAK,CAACC,IAAI,CAAC,MAAI,CAAC5B,QAAQ,CAACqC,YAAY,CAAC;YACxCC,mCAAmC,EACjC,MAAI,CAACtC,QAAQ,CAACsC,mCAAmC,IACjDX,KAAK,CAACC,IAAI,CAAC,MAAI,CAAC5B,QAAQ,CAACsC,mCAAmC;UAAC,EAChE;UACDC,YAAY,EAAE,MAAI,CAAC3C,aAAa;UAChCD,IAAI,EAAET,IAAI,CAACS;QACb,CAAC,CAAC;QACF,IAAIV,OAAO,CAACuD,wBAAwB,EAAE;UAEpCvD,OAAO,CAACuD,wBAAwB,CAAC;YAAA;cAAEC,KAAK;cAAEC,OAAO;YAAA,OAC/C,gDAAI,gCAAelD,IAAI,CAACiD,KAAK,EAAEC,OAAO,CAAC;UAAA,EACxC;QACH;QACA,OAAOzD,OAAO;MAChB,CAAC,EAAC;IAAA;IACJ,IAAM0D,WAAW,GAAG,IAAIxC,OAAO,CAAC,UAACyC,CAAC,EAAER,MAAM,EAAK;MAC7C9D,OAAO,CAACK,EAAE,CAAC,QAAQ,EAAE,UAAAkE,KAAK,EAAI;QAC5B,IAAIA,KAAK,CAACC,WAAW,EAAE;UACrBV,MAAM,CAAC,IAAI/C,SAAS,EAAE,CAAC;QACzB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,IAAM0D,WAAW,GAAG5C,OAAO,CAAC6C,GAAG,CAC7B3E,KAAK,CAAC4E,GAAG,CAAC,UAAA/D,IAAI;MAAA,OACZiD,eAAe,CAACjD,IAAI,CAAC,CAACC,IAAI,CACxB,UAAAc,MAAM;QAAA,OACJ,gDAAI,gCAAeT,IAAI,CAAC,mBAAmB,EAAE,CAACN,IAAI,EAAEe,MAAM,CAAC,CAAC;MAAA,GAC9D,UAAAC,KAAK;QAAA,OAAI,gDAAI,gCAAeV,IAAI,CAAC,mBAAmB,EAAE,CAACN,IAAI,EAAEgB,KAAK,CAAC,CAAC;MAAA,EACrE;IAAA,EACF,CACF;IACD,IAAMgD,OAAO;MAAA,4CAAG,aAAY;QAC1B,8BAA4BrC,MAAM,CAACsC,GAAG,EAAE;UAAjCC,WAAW,qBAAXA,WAAW;QAClB,IAAIA,WAAW,EAAE;UACfC,OAAO,CAACnD,KAAK,CACXzC,MAAM,EAAE,CAACD,OAAO,CAAC8F,MAAM,CACrB,4EAA4E,GAC1E,mEAAmE,GACnE,sDAAsD,GACtD,6EAA6E,CAChF,CACF;QACH;MACF,CAAC;MAAA,gBAZKJ,OAAO;QAAA;MAAA;IAAA,GAYZ;IACD,OAAO/C,OAAO,CAACoD,IAAI,CAAC,CAACR,WAAW,EAAEJ,WAAW,CAAC,CAAC,CAACxD,IAAI,CAAC+D,OAAO,EAAEA,OAAO,CAAC;EACxE,CAAC;EAAA;AAAA;AAKHjG,OAAO,CAACO,OAAO,GAAGY,UAAU;AAAC,IACvBiB,SAAS;EAAA;EAAA;EACb,mBAAYmE,OAAO,EAAE;IAAA;IAAA;IACnB,4BAAMA,OAAO;IACb,OAAKC,IAAI,GAAG,WAAW;IAAC;EAC1B;EAAC;AAAA,iCAJqBC,KAAK"}