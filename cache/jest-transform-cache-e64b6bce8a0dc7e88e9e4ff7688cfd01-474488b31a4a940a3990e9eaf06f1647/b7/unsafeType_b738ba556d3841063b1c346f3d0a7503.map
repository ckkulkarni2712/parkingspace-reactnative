{"version":3,"mappings":";;;;;;AAEA;AAGA,IAAMA,gBAAgB,GACpBC,SADID,gBAAgB,CACpBC,QAA2B;EAAA,OAE3B,SAASC,WAAW,CAACC,IAA8B,EAAE;IACnD,IAAI;MACF,OAAOF,QAAQ,CAACG,UAAU,CAACD,IAAI,CAAC;IAClC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAM,IAAIC,sBAAc,CAAC,+BAAmB,EAACD,KAAK,CAAC,EAAEH,WAAW,CAAC;IACnE;EACF,CAAC;AAAA;AAEH,IAAMK,mBAAmB,GACvBN,SADIM,mBAAmB,CACvBN,QAA2B;EAAA,OAE3B,SAASO,cAAc,CAACL,IAA8B,EAAE;IACtD,IAAMM,OAAO,GAAGR,QAAQ,CAACS,aAAa,CAACP,IAAI,CAAC;IAC5C,IAAIM,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIL,sBAAc,CAAC,oBAAoB,EAAEE,cAAc,CAAC;IAChE;IACA,OAAOC,OAAO;EAChB,CAAC;AAAA;AAEH,IAAMG,kBAAkB,GACtBX,SADIW,kBAAkB,CACtBX,QAA2B;EAAA,OAE3B,SAASY,aAAa,CAACV,IAA8B,EAAE;IACrD,IAAI;MACF,OAAOH,gBAAgB,CAACC,QAAQ,CAAC,CAACE,IAAI,CAAC;IACzC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,OAAO,8BAAkB,EAACA,KAAK,EAAEQ,aAAa,CAAC;IACjD;EACF,CAAC;AAAA;AAEH,IAAMC,qBAAqB,GAEvBb,SAFEa,qBAAqB,CAEvBb,QAA2B;EAAA,OAE5BE,cAA8B,EAAK;IAClC,IAAI;MACF,OAAOI,mBAAmB,CAACN,QAAQ,CAAC,CAACE,IAAI,CAAC;IAC5C,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,OAAO,EAAE;IACX;EACF,CAAC;AAAA;AAiBI,IAAMU,uBAAuB,GAClCd,SADWc,uBAAuB,CAClCd,QAA2B;EAAA,OACF;IACzBD,gBAAgB,EAAEA,gBAAgB,CAACC,QAAQ,CAAC;IAC5CM,mBAAmB,EAAEA,mBAAmB,CAACN,QAAQ,CAAC;IAClDW,kBAAkB,EAAEA,kBAAkB,CAACX,QAAQ,CAAC;IAChDa,qBAAqB,EAAEA,qBAAqB,CAACb,QAAQ;EACvD,CAAC;AAAA,CAAC;AAACe","names":["UNSAFE_getByType","instance","getByTypeFn","type","findByType","error","ErrorWithStack","UNSAFE_getAllByType","getAllByTypeFn","results","findAllByType","length","UNSAFE_queryByType","queryByTypeFn","UNSAFE_queryAllByType","bindUnsafeByTypeQueries","exports"],"sources":["../../src/queries/unsafeType.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport * as React from 'react';\nimport { ErrorWithStack, prepareErrorMessage } from '../helpers/errors';\nimport { createQueryByError } from '../helpers/errors';\n\nconst UNSAFE_getByType = (\n  instance: ReactTestInstance\n): ((type: React.ComponentType<any>) => ReactTestInstance) =>\n  function getByTypeFn(type: React.ComponentType<any>) {\n    try {\n      return instance.findByType(type);\n    } catch (error) {\n      throw new ErrorWithStack(prepareErrorMessage(error), getByTypeFn);\n    }\n  };\n\nconst UNSAFE_getAllByType = (\n  instance: ReactTestInstance\n): ((type: React.ComponentType<any>) => Array<ReactTestInstance>) =>\n  function getAllByTypeFn(type: React.ComponentType<any>) {\n    const results = instance.findAllByType(type);\n    if (results.length === 0) {\n      throw new ErrorWithStack('No instances found', getAllByTypeFn);\n    }\n    return results;\n  };\n\nconst UNSAFE_queryByType = (\n  instance: ReactTestInstance\n): ((type: React.ComponentType<any>) => ReactTestInstance | null) =>\n  function queryByTypeFn(type: React.ComponentType<any>) {\n    try {\n      return UNSAFE_getByType(instance)(type);\n    } catch (error) {\n      return createQueryByError(error, queryByTypeFn);\n    }\n  };\n\nconst UNSAFE_queryAllByType =\n  (\n    instance: ReactTestInstance\n  ): ((type: React.ComponentType<any>) => Array<ReactTestInstance>) =>\n  (type: React.ComponentType<any>) => {\n    try {\n      return UNSAFE_getAllByType(instance)(type);\n    } catch (error) {\n      return [];\n    }\n  };\n\n// Unsafe aliases\nexport type UnsafeByTypeQueries = {\n  UNSAFE_getByType: <P>(type: React.ComponentType<P>) => ReactTestInstance;\n  UNSAFE_getAllByType: <P>(\n    type: React.ComponentType<P>\n  ) => Array<ReactTestInstance>;\n  UNSAFE_queryByType: <P>(\n    type: React.ComponentType<P>\n  ) => ReactTestInstance | null;\n  UNSAFE_queryAllByType: <P>(\n    type: React.ComponentType<P>\n  ) => Array<ReactTestInstance>;\n};\n\n// TODO: migrate to makeQueries pattern\nexport const bindUnsafeByTypeQueries = (\n  instance: ReactTestInstance\n): UnsafeByTypeQueries => ({\n  UNSAFE_getByType: UNSAFE_getByType(instance),\n  UNSAFE_getAllByType: UNSAFE_getAllByType(instance),\n  UNSAFE_queryByType: UNSAFE_queryByType(instance),\n  UNSAFE_queryAllByType: UNSAFE_queryAllByType(instance),\n});\n"]}