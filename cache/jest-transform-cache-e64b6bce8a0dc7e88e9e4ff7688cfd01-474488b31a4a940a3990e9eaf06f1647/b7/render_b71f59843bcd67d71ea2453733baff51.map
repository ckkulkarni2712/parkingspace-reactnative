{"version":3,"mappings":"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","names":["default","Object","newObj","cache","render","component","Wrapper","wrapper","createNodeMock","unstable_validateStringsRenderedWithinText","renderWithStringValidation","wrap","element","React","renderer","renderWithAct","undefined","buildRenderResult","handleRender","_","phase","screen","toJSON","id","onRender","update","updateWithAct","instance","root","unmount","result","container","rerender","debug","options","TestRenderer","create","debugImpl","defaultDebugOptions","debugOptions","message","console","warn","json","shallow"],"sources":["../src/render.tsx"],"sourcesContent":["import TestRenderer from 'react-test-renderer';\nimport type { ReactTestInstance, ReactTestRenderer } from 'react-test-renderer';\nimport * as React from 'react';\nimport { Profiler } from 'react';\nimport act from './act';\nimport { addToCleanupQueue } from './cleanup';\nimport debugShallow from './helpers/debugShallow';\nimport debugDeep, { DebugOptions } from './helpers/debugDeep';\nimport { getQueriesForElement } from './within';\nimport { setRenderResult, screen } from './screen';\nimport { validateStringsRenderedWithinText } from './helpers/stringValidation';\nimport { getConfig } from './config';\nimport { configureHostComponentNamesIfNeeded } from './helpers/host-component-names';\n\nexport type RenderOptions = {\n  wrapper?: React.ComponentType<any>;\n  createNodeMock?: (element: React.ReactElement) => any;\n  unstable_validateStringsRenderedWithinText?: boolean;\n};\n\ntype TestRendererOptions = {\n  createNodeMock: (element: React.ReactElement) => any;\n};\n\nexport type RenderResult = ReturnType<typeof render>;\n\n/**\n * Renders test component deeply using react-test-renderer and exposes helpers\n * to assert on the output.\n */\nexport default function render<T>(\n  component: React.ReactElement<T>,\n  {\n    wrapper: Wrapper,\n    createNodeMock,\n    unstable_validateStringsRenderedWithinText,\n  }: RenderOptions = {}\n) {\n  configureHostComponentNamesIfNeeded();\n\n  if (unstable_validateStringsRenderedWithinText) {\n    return renderWithStringValidation(component, {\n      wrapper: Wrapper,\n      createNodeMock,\n    });\n  }\n\n  const wrap = (element: React.ReactElement) =>\n    Wrapper ? <Wrapper>{element}</Wrapper> : element;\n\n  const renderer = renderWithAct(\n    wrap(component),\n    createNodeMock ? { createNodeMock } : undefined\n  );\n\n  return buildRenderResult(renderer, wrap);\n}\n\nfunction renderWithStringValidation<T>(\n  component: React.ReactElement<T>,\n  {\n    wrapper: Wrapper,\n    createNodeMock,\n  }: Omit<RenderOptions, 'unstable_validateStringsRenderedWithinText'> = {}\n) {\n  const handleRender: React.ProfilerProps['onRender'] = (_, phase) => {\n    if (phase === 'update') {\n      validateStringsRenderedWithinText(screen.toJSON());\n    }\n  };\n\n  const wrap = (element: React.ReactElement) => (\n    <Profiler id=\"renderProfiler\" onRender={handleRender}>\n      {Wrapper ? <Wrapper>{element}</Wrapper> : element}\n    </Profiler>\n  );\n\n  const renderer = renderWithAct(\n    wrap(component),\n    createNodeMock ? { createNodeMock } : undefined\n  );\n  validateStringsRenderedWithinText(renderer.toJSON());\n\n  return buildRenderResult(renderer, wrap);\n}\n\nfunction buildRenderResult(\n  renderer: ReactTestRenderer,\n  wrap: (element: React.ReactElement) => JSX.Element\n) {\n  const update = updateWithAct(renderer, wrap);\n  const instance = renderer.root;\n\n  const unmount = () => {\n    act(() => {\n      renderer.unmount();\n    });\n  };\n\n  addToCleanupQueue(unmount);\n\n  const result = {\n    ...getQueriesForElement(instance),\n    update,\n    unmount,\n    container: instance,\n    rerender: update, // alias for `update`\n    toJSON: renderer.toJSON,\n    debug: debug(instance, renderer),\n  };\n\n  setRenderResult(result);\n  return result;\n}\n\nfunction renderWithAct(\n  component: React.ReactElement,\n  options?: TestRendererOptions\n): ReactTestRenderer {\n  let renderer: ReactTestRenderer;\n\n  act(() => {\n    renderer = TestRenderer.create(component, options);\n  });\n\n  // @ts-ignore act is sync, so renderer is always initialised here\n  return renderer;\n}\n\nfunction updateWithAct(\n  renderer: ReactTestRenderer,\n  wrap: (innerElement: React.ReactElement) => React.ReactElement\n) {\n  return function (component: React.ReactElement) {\n    act(() => {\n      renderer.update(wrap(component));\n    });\n  };\n}\n\ninterface DebugFunction {\n  (options?: DebugOptions | string): void;\n  shallow: (message?: string) => void;\n}\n\nfunction debug(\n  instance: ReactTestInstance,\n  renderer: ReactTestRenderer\n): DebugFunction {\n  function debugImpl(options?: DebugOptions | string) {\n    const { defaultDebugOptions } = getConfig();\n    const debugOptions =\n      typeof options === 'string'\n        ? { ...defaultDebugOptions, message: options }\n        : { ...defaultDebugOptions, ...options };\n\n    if (typeof options === 'string') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Using debug(\"message\") is deprecated and will be removed in future release, please use debug({ message; \"message\" }) instead.'\n      );\n    }\n\n    const json = renderer.toJSON();\n    if (json) {\n      return debugDeep(json, debugOptions);\n    }\n  }\n  debugImpl.shallow = (message?: string) => debugShallow(instance, message);\n  return debugImpl;\n}\n"]}