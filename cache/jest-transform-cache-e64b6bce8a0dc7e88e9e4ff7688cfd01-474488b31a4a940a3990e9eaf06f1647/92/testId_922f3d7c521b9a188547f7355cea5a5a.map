{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AAaA,IAAMA,eAAe,GAAG,SAAlBA,eAAe,CACnBC,IAAuB,EACvBC,MAAiB,EAEd;EAAA,IADHC,OAAyB,uEAAG,CAAC,CAAC;EAE9B,IAAQC,KAAK,GAAiBD,OAAO,CAA7BC,KAAK;IAAEC,aAAeF,OAAO,CAAtBE;EACf,OAAO,oBAAO,EAACH,MAAM,EAAED,IAAI,CAACK,KAAK,CAACJ,MAAM,EAAEG,UAAU,EAAED,KAAK,CAAC;AAC9D,CAAC;AAED,IAAMG,gBAAgB,GACpBC,SADID,gBAAgB,CACpBC,QAA2B;EAAA,OAK3B,SAASC,kBAAkB,CAACC,MAAM,EAAEC,YAAY,EAAE;IAChD,OAAO,oBAAO,EACZH,QAAQ,EACPP,cAAI;MAAA,OACH,OAAOA,IAAI,CAACW,IAAI,KAAK,QAAQ,IAC7BZ,eAAe,CAACC,IAAI,EAAES,MAAM,EAAEC,YAAY,CAAC;IAAA,GAC7CA,YAAY,CACb;EACH,CAAC;AAAA;AAEH,IAAME,gBAAgB,GAAIH,SAApBG,gBAAgB,CAAIH,MAAiB;EAAA,iDACDI,MAAM,CAACJ,MAAM,CAAE;AAAA,CAAC;AAC1D,IAAMK,eAAe,GAAIL,SAAnBK,eAAe,CAAIL,MAAiB;EAAA,mDACEI,MAAM,CAACJ,MAAM,CAAE;AAAA,CAAC;AAE5D,WAAoE,4BAAW,EAC7EH,gBAAgB,EAChBQ,eAAe,EACfF,gBAAgB,CACjB;EAJOG,KAAK,QAALA,KAAK;EAAEC,QAAQ,QAARA,QAAQ;EAAEC,OAAO,QAAPA,OAAO;EAAEC,UAAU,QAAVA,UAAU;EAAEC,MAAM,QAANA,MAAM;EAAEC;AAe/C,IAAMC,mBAAmB,GAC9Bd,SADWc,mBAAmB,CAC9Bd,QAA2B;EAAA,OACN;IACrBe,WAAW,EAAEP,KAAK,CAACR,QAAQ,CAAC;IAC5BgB,cAAc,EAAEP,QAAQ,CAACT,QAAQ,CAAC;IAClCiB,aAAa,EAAEP,OAAO,CAACV,QAAQ,CAAC;IAChCD,gBAAgB,EAAEY,UAAU,CAACX,QAAQ,CAAC;IACtCkB,YAAY,EAAEN,MAAM,CAACZ,QAAQ,CAAC;IAC9BmB,eAAe,EAAEN,SAAS,CAACb,QAAQ;EACrC,CAAC;AAAA,CAAC;AAACoB","names":["getNodeByTestId","node","testID","options","exact","normalizer","props","queryAllByTestId","instance","queryAllByTestIdFn","testId","queryOptions","type","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByTestIdQueries","getByTestId","getAllByTestId","queryByTestId","findByTestId","findAllByTestId","exports"],"sources":["../../src/queries/testId.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { findAll } from '../helpers/findAll';\nimport { matches, TextMatch, TextMatchOptions } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport type { CommonQueryOptions } from './options';\n\ntype ByTestIdOptions = CommonQueryOptions & TextMatchOptions;\n\nconst getNodeByTestId = (\n  node: ReactTestInstance,\n  testID: TextMatch,\n  options: TextMatchOptions = {}\n) => {\n  const { exact, normalizer } = options;\n  return matches(testID, node.props.testID, normalizer, exact);\n};\n\nconst queryAllByTestId = (\n  instance: ReactTestInstance\n): ((\n  testId: TextMatch,\n  queryOptions?: ByTestIdOptions\n) => Array<ReactTestInstance>) =>\n  function queryAllByTestIdFn(testId, queryOptions) {\n    return findAll(\n      instance,\n      (node) =>\n        typeof node.type === 'string' &&\n        getNodeByTestId(node, testId, queryOptions),\n      queryOptions\n    );\n  };\n\nconst getMultipleError = (testId: TextMatch) =>\n  `Found multiple elements with testID: ${String(testId)}`;\nconst getMissingError = (testId: TextMatch) =>\n  `Unable to find an element with testID: ${String(testId)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByTestId,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByTestIdQueries = {\n  getByTestId: GetByQuery<TextMatch, ByTestIdOptions>;\n  getAllByTestId: GetAllByQuery<TextMatch, ByTestIdOptions>;\n  queryByTestId: QueryByQuery<TextMatch, ByTestIdOptions>;\n  queryAllByTestId: QueryAllByQuery<TextMatch, ByTestIdOptions>;\n  findByTestId: FindByQuery<TextMatch, ByTestIdOptions>;\n  findAllByTestId: FindAllByQuery<TextMatch, ByTestIdOptions>;\n};\n\nexport const bindByTestIdQueries = (\n  instance: ReactTestInstance\n): ByTestIdQueries => ({\n  getByTestId: getBy(instance),\n  getAllByTestId: getAllBy(instance),\n  queryByTestId: queryBy(instance),\n  queryAllByTestId: queryAllBy(instance),\n  findByTestId: findBy(instance),\n  findAllByTestId: findAllBy(instance),\n});\n"]}