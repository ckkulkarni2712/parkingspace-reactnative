0186d09c5f01f4a6c387668cc5a0604a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindByTestIdQueries = void 0;
var _findAll = require("../helpers/findAll");
var _matches = require("../matches");
var _makeQueries = require("./makeQueries");
var getNodeByTestId = function getNodeByTestId(node, testID) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var exact = options.exact,
    normalizer = options.normalizer;
  return (0, _matches.matches)(testID, node.props.testID, normalizer, exact);
};
var queryAllByTestId = function queryAllByTestId(instance) {
  return function queryAllByTestIdFn(testId, queryOptions) {
    return (0, _findAll.findAll)(instance, function (node) {
      return typeof node.type === 'string' && getNodeByTestId(node, testId, queryOptions);
    }, queryOptions);
  };
};
var getMultipleError = function getMultipleError(testId) {
  return "Found multiple elements with testID: " + String(testId);
};
var getMissingError = function getMissingError(testId) {
  return "Unable to find an element with testID: " + String(testId);
};
var _ref = (0, _makeQueries.makeQueries)(queryAllByTestId, getMissingError, getMultipleError),
  getBy = _ref.getBy,
  getAllBy = _ref.getAllBy,
  queryBy = _ref.queryBy,
  queryAllBy = _ref.queryAllBy,
  findBy = _ref.findBy,
  findAllBy = _ref.findAllBy;
var bindByTestIdQueries = function bindByTestIdQueries(instance) {
  return {
    getByTestId: getBy(instance),
    getAllByTestId: getAllBy(instance),
    queryByTestId: queryBy(instance),
    queryAllByTestId: queryAllBy(instance),
    findByTestId: findBy(instance),
    findAllByTestId: findAllBy(instance)
  };
};
exports.bindByTestIdQueries = bindByTestIdQueries;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBYUEsSUFBTUEsZUFBZSxHQUFHLFNBQWxCQSxlQUFlLENBQ25CQyxJQUF1QixFQUN2QkMsTUFBaUIsRUFFZDtFQUFBLElBREhDLE9BQXlCLHVFQUFHLENBQUMsQ0FBQztFQUU5QixJQUFRQyxLQUFLLEdBQWlCRCxPQUFPLENBQTdCQyxLQUFLO0lBQUVDLGFBQWVGLE9BQU8sQ0FBdEJFO0VBQ2YsT0FBTyxvQkFBTyxFQUFDSCxNQUFNLEVBQUVELElBQUksQ0FBQ0ssS0FBSyxDQUFDSixNQUFNLEVBQUVHLFVBQVUsRUFBRUQsS0FBSyxDQUFDO0FBQzlELENBQUM7QUFFRCxJQUFNRyxnQkFBZ0IsR0FDcEJDLFNBRElELGdCQUFnQixDQUNwQkMsUUFBMkI7RUFBQSxPQUszQixTQUFTQyxrQkFBa0IsQ0FBQ0MsTUFBTSxFQUFFQyxZQUFZLEVBQUU7SUFDaEQsT0FBTyxvQkFBTyxFQUNaSCxRQUFRLEVBQ1BQLGNBQUk7TUFBQSxPQUNILE9BQU9BLElBQUksQ0FBQ1csSUFBSSxLQUFLLFFBQVEsSUFDN0JaLGVBQWUsQ0FBQ0MsSUFBSSxFQUFFUyxNQUFNLEVBQUVDLFlBQVksQ0FBQztJQUFBLEdBQzdDQSxZQUFZLENBQ2I7RUFDSCxDQUFDO0FBQUE7QUFFSCxJQUFNRSxnQkFBZ0IsR0FBSUgsU0FBcEJHLGdCQUFnQixDQUFJSCxNQUFpQjtFQUFBLGlEQUNESSxNQUFNLENBQUNKLE1BQU0sQ0FBRTtBQUFBLENBQUM7QUFDMUQsSUFBTUssZUFBZSxHQUFJTCxTQUFuQkssZUFBZSxDQUFJTCxNQUFpQjtFQUFBLG1EQUNFSSxNQUFNLENBQUNKLE1BQU0sQ0FBRTtBQUFBLENBQUM7QUFFNUQsV0FBb0UsNEJBQVcsRUFDN0VILGdCQUFnQixFQUNoQlEsZUFBZSxFQUNmRixnQkFBZ0IsQ0FDakI7RUFKT0csS0FBSyxRQUFMQSxLQUFLO0VBQUVDLFFBQVEsUUFBUkEsUUFBUTtFQUFFQyxPQUFPLFFBQVBBLE9BQU87RUFBRUMsVUFBVSxRQUFWQSxVQUFVO0VBQUVDLE1BQU0sUUFBTkEsTUFBTTtFQUFFQztBQWUvQyxJQUFNQyxtQkFBbUIsR0FDOUJkLFNBRFdjLG1CQUFtQixDQUM5QmQsUUFBMkI7RUFBQSxPQUNOO0lBQ3JCZSxXQUFXLEVBQUVQLEtBQUssQ0FBQ1IsUUFBUSxDQUFDO0lBQzVCZ0IsY0FBYyxFQUFFUCxRQUFRLENBQUNULFFBQVEsQ0FBQztJQUNsQ2lCLGFBQWEsRUFBRVAsT0FBTyxDQUFDVixRQUFRLENBQUM7SUFDaENELGdCQUFnQixFQUFFWSxVQUFVLENBQUNYLFFBQVEsQ0FBQztJQUN0Q2tCLFlBQVksRUFBRU4sTUFBTSxDQUFDWixRQUFRLENBQUM7SUFDOUJtQixlQUFlLEVBQUVOLFNBQVMsQ0FBQ2IsUUFBUTtFQUNyQyxDQUFDO0FBQUEsQ0FBQztBQUFDb0IiLCJuYW1lcyI6WyJnZXROb2RlQnlUZXN0SWQiLCJub2RlIiwidGVzdElEIiwib3B0aW9ucyIsImV4YWN0Iiwibm9ybWFsaXplciIsInByb3BzIiwicXVlcnlBbGxCeVRlc3RJZCIsImluc3RhbmNlIiwicXVlcnlBbGxCeVRlc3RJZEZuIiwidGVzdElkIiwicXVlcnlPcHRpb25zIiwidHlwZSIsImdldE11bHRpcGxlRXJyb3IiLCJTdHJpbmciLCJnZXRNaXNzaW5nRXJyb3IiLCJnZXRCeSIsImdldEFsbEJ5IiwicXVlcnlCeSIsInF1ZXJ5QWxsQnkiLCJmaW5kQnkiLCJmaW5kQWxsQnkiLCJiaW5kQnlUZXN0SWRRdWVyaWVzIiwiZ2V0QnlUZXN0SWQiLCJnZXRBbGxCeVRlc3RJZCIsInF1ZXJ5QnlUZXN0SWQiLCJmaW5kQnlUZXN0SWQiLCJmaW5kQWxsQnlUZXN0SWQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXJpZXMvdGVzdElkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUmVhY3RUZXN0SW5zdGFuY2UgfSBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcbmltcG9ydCB7IGZpbmRBbGwgfSBmcm9tICcuLi9oZWxwZXJzL2ZpbmRBbGwnO1xuaW1wb3J0IHsgbWF0Y2hlcywgVGV4dE1hdGNoLCBUZXh0TWF0Y2hPcHRpb25zIH0gZnJvbSAnLi4vbWF0Y2hlcyc7XG5pbXBvcnQgeyBtYWtlUXVlcmllcyB9IGZyb20gJy4vbWFrZVF1ZXJpZXMnO1xuaW1wb3J0IHR5cGUge1xuICBGaW5kQWxsQnlRdWVyeSxcbiAgRmluZEJ5UXVlcnksXG4gIEdldEFsbEJ5UXVlcnksXG4gIEdldEJ5UXVlcnksXG4gIFF1ZXJ5QWxsQnlRdWVyeSxcbiAgUXVlcnlCeVF1ZXJ5LFxufSBmcm9tICcuL21ha2VRdWVyaWVzJztcbmltcG9ydCB0eXBlIHsgQ29tbW9uUXVlcnlPcHRpb25zIH0gZnJvbSAnLi9vcHRpb25zJztcblxudHlwZSBCeVRlc3RJZE9wdGlvbnMgPSBDb21tb25RdWVyeU9wdGlvbnMgJiBUZXh0TWF0Y2hPcHRpb25zO1xuXG5jb25zdCBnZXROb2RlQnlUZXN0SWQgPSAoXG4gIG5vZGU6IFJlYWN0VGVzdEluc3RhbmNlLFxuICB0ZXN0SUQ6IFRleHRNYXRjaCxcbiAgb3B0aW9uczogVGV4dE1hdGNoT3B0aW9ucyA9IHt9XG4pID0+IHtcbiAgY29uc3QgeyBleGFjdCwgbm9ybWFsaXplciB9ID0gb3B0aW9ucztcbiAgcmV0dXJuIG1hdGNoZXModGVzdElELCBub2RlLnByb3BzLnRlc3RJRCwgbm9ybWFsaXplciwgZXhhY3QpO1xufTtcblxuY29uc3QgcXVlcnlBbGxCeVRlc3RJZCA9IChcbiAgaW5zdGFuY2U6IFJlYWN0VGVzdEluc3RhbmNlXG4pOiAoKFxuICB0ZXN0SWQ6IFRleHRNYXRjaCxcbiAgcXVlcnlPcHRpb25zPzogQnlUZXN0SWRPcHRpb25zXG4pID0+IEFycmF5PFJlYWN0VGVzdEluc3RhbmNlPikgPT5cbiAgZnVuY3Rpb24gcXVlcnlBbGxCeVRlc3RJZEZuKHRlc3RJZCwgcXVlcnlPcHRpb25zKSB7XG4gICAgcmV0dXJuIGZpbmRBbGwoXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIChub2RlKSA9PlxuICAgICAgICB0eXBlb2Ygbm9kZS50eXBlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICBnZXROb2RlQnlUZXN0SWQobm9kZSwgdGVzdElkLCBxdWVyeU9wdGlvbnMpLFxuICAgICAgcXVlcnlPcHRpb25zXG4gICAgKTtcbiAgfTtcblxuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9ICh0ZXN0SWQ6IFRleHRNYXRjaCkgPT5cbiAgYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGVzdElEOiAke1N0cmluZyh0ZXN0SWQpfWA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAodGVzdElkOiBUZXh0TWF0Y2gpID0+XG4gIGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGVzdElEOiAke1N0cmluZyh0ZXN0SWQpfWA7XG5cbmNvbnN0IHsgZ2V0QnksIGdldEFsbEJ5LCBxdWVyeUJ5LCBxdWVyeUFsbEJ5LCBmaW5kQnksIGZpbmRBbGxCeSB9ID0gbWFrZVF1ZXJpZXMoXG4gIHF1ZXJ5QWxsQnlUZXN0SWQsXG4gIGdldE1pc3NpbmdFcnJvcixcbiAgZ2V0TXVsdGlwbGVFcnJvclxuKTtcblxuZXhwb3J0IHR5cGUgQnlUZXN0SWRRdWVyaWVzID0ge1xuICBnZXRCeVRlc3RJZDogR2V0QnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGVzdElkT3B0aW9ucz47XG4gIGdldEFsbEJ5VGVzdElkOiBHZXRBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXN0SWRPcHRpb25zPjtcbiAgcXVlcnlCeVRlc3RJZDogUXVlcnlCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXN0SWRPcHRpb25zPjtcbiAgcXVlcnlBbGxCeVRlc3RJZDogUXVlcnlBbGxCeVF1ZXJ5PFRleHRNYXRjaCwgQnlUZXN0SWRPcHRpb25zPjtcbiAgZmluZEJ5VGVzdElkOiBGaW5kQnlRdWVyeTxUZXh0TWF0Y2gsIEJ5VGVzdElkT3B0aW9ucz47XG4gIGZpbmRBbGxCeVRlc3RJZDogRmluZEFsbEJ5UXVlcnk8VGV4dE1hdGNoLCBCeVRlc3RJZE9wdGlvbnM+O1xufTtcblxuZXhwb3J0IGNvbnN0IGJpbmRCeVRlc3RJZFF1ZXJpZXMgPSAoXG4gIGluc3RhbmNlOiBSZWFjdFRlc3RJbnN0YW5jZVxuKTogQnlUZXN0SWRRdWVyaWVzID0+ICh7XG4gIGdldEJ5VGVzdElkOiBnZXRCeShpbnN0YW5jZSksXG4gIGdldEFsbEJ5VGVzdElkOiBnZXRBbGxCeShpbnN0YW5jZSksXG4gIHF1ZXJ5QnlUZXN0SWQ6IHF1ZXJ5QnkoaW5zdGFuY2UpLFxuICBxdWVyeUFsbEJ5VGVzdElkOiBxdWVyeUFsbEJ5KGluc3RhbmNlKSxcbiAgZmluZEJ5VGVzdElkOiBmaW5kQnkoaW5zdGFuY2UpLFxuICBmaW5kQWxsQnlUZXN0SWQ6IGZpbmRBbGxCeShpbnN0YW5jZSksXG59KTtcbiJdfQ==